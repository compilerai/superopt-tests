argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/eq32
argv[1] = --enable-src-epsilon-paths
argv[2] = --disable-dst-to-src-submap
argv[3] = --disable-assumed-eqclasses
argv[4] = --disable-houdini-axiom-based-timeout-dumps
argv[5] = --houdini-axiom-based-smt-query-timeout=20
argv[6] = --dyn-debug=invariants_dump
argv[7] = --tmpdir-path=par_tmpdir
argv[8] = --proof=ind9.proof
argv[9] = --spec-iospecs=ind9.iospecs
argv[10] = ind9.spec
argv[11] = ind9.c
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
Query dir: /tmp/smt-solver-tmp-files/indrajit.2173311
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/clang
argv[1] = -Xclang
argv[2] = -disable-llvm-passes
argv[3] = -Xclang
argv[4] = -disable-O0-optnone
argv[5] = -c
argv[6] = -g
argv[7] = -emit-llvm
argv[8] = -O0
argv[9] = /home/indrajit/scratch/tests/eq-test/ind9.c
argv[10] = -o
argv[11] = par_tmpdir/ind9.c.bc.tmp
argv[12] = -m32

/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned int)' [-Wimplicit-function-declaration]
    list* node = malloc(sizeof(list));
                 ^
/home/indrajit/scratch/tests/eq-test/ind9.c:9:18: note: include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
1 warning generated.
argv[0] = /home/indrajit/scratch/repos/superopt-project/usr/local/bin/llvm2tfg
argv[1] = --dyn-debug=invariants_dump
argv[2] = --xml-output-format
argv[3] = text-color
argv[4] = -f
argv[5] = ALL
argv[6] = --call-context-depth
argv[7] = 0
argv[8] = --always-use-call-context-any
argv[9] = --src-etfg
argv[10] = par_tmpdir/ind9.spec.etfg
argv[11] = par_tmpdir/ind9.c.bc
argv[12] = -o
argv[13] = par_tmpdir/ind9.c.dst.etfg
print_debug_class_levels 76: printing debug_class_levels:
invariants_dump -> 1
<MSG>0:00 : Converting LLVM IR bitcode to Transfer Function Graph (TFG) for function make_list</MSG>

tfg_get_simplified_edge_cond_for_edge: num_starts 110 time spent: 0:0:0 [0.000189s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 135 time spent: 0:0:0 [0.000221s total; 0.000002 per start]
expr_label_memlabels_using_memlabel_map: num_starts 1622 time spent: 0:0:0 [0.016102s total; 0.000010 per start]
expr_simplify_solver: num_starts 813 time spent: 0:0:0 [0.038628s total; 0.000048 per start]
expr_simplify_syntactic: num_starts 813 time spent: 0:0:0 [0.319776s total; 0.000393 per start]
expr_simplify_select_on_store: num_starts 14 time spent: 0:0:0 [0.043908s total; 0.003136 per start]
expr_simplify_store_on_store: num_starts 68 time spent: 0:0:0 [0.006614s total; 0.000097 per start]
expr_simplify_using_lhs_set_helper: num_starts 285 time spent: 0:0:0 [0.381260s total; 0.001338 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 2178 time spent: 0:0:0 [0.379489s total; 0.000174 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 284 time spent: 0:0:0 [0.001205s total; 0.000004 per start]
expr_simplify_eq: num_starts 92 time spent: 0:0:0 [0.001217s total; 0.000013 per start]
expr_simplify_or: num_starts 8 time spent: 0:0:0 [0.000009s total; 0.000001 per start]
expr_simplify_not: num_starts 1 time spent: 0:0:0 [0.000004s total; 0.000004 per start]
expr_simplify_ite: num_starts 107 time spent: 0:0:0 [0.004557s total; 0.000043 per start]
canonicalize_expr_tree: num_starts 217 time spent: 0:0:0 [0.005017s total; 0.000023 per start]
expr_simplify_memalloc_using_memlabel: num_starts 156 time spent: 0:0:0 [0.000402s total; 0.000003 per start]
expr_simplify_select_on_store_visit_function: num_starts 34 time spent: 0:0:0 [0.043551s total; 0.001281 per start]
memlabels_are_independent: num_starts 78 time spent: 0:0:0 [0.000127s total; 0.000002 per start]
get_arithmetic_addsub_atoms: num_starts 476 time spent: 0:0:0 [0.000183s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 428 time spent: 0:0:0 [0.006253s total; 0.000015 per start]
expr_is_consts_struct_constant: num_starts 1569 time spent: 0:0:0 [0.000968s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 4145 time spent: 0:0:0 [0.386499s total; 0.000093 per start]
expr_do_simplify_helper_cache: num_starts 4145 time spent: 0:0:0 [0.003447s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 205 time spent: 0:0:0 [0.000151s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 205 time spent: 0:0:0 [0.000636s total; 0.000003 per start]
array_constant_equals: num_starts 383 time spent: 0:0:0 [0.000702s total; 0.000002 per start]
sort_dfa_canonical: num_starts 154542 time spent: 0:0:1 [1.101090s total; 0.000007 per start]
expr_convert_to_iexpr: num_starts 53 time spent: 0:0:0 [0.006231s total; 0.000118 per start]
combo_dfa_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.438010s total; 0.004172 per start]
alias_val_xfer_and_meet: num_starts 105 time spent: 0:0:0 [0.308102s total; 0.002934 per start]
get_sprel_map_from_avail_exprs: num_starts 136 time spent: 0:0:0 [0.017719s total; 0.000130 per start]
update_memlabels_for_memslot_locs: num_starts 30 time spent: 0:0:0 [0.000160s total; 0.000005 per start]
populate_gen_and_kill_sets_for_edge: num_starts 210 time spent: 0:0:0 [0.024019s total; 0.000114 per start]
compute_simplified_loc_exprs_for_edge: num_starts 622 time spent: 0:0:0 [0.290084s total; 0.000466 per start]
compute_locs_definitely_written_on_edge: num_starts 210 time spent: 0:0:0 [0.000159s total; 0.000001 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 150 time spent: 0:0:0 [0.142489s total; 0.000950 per start]
edge_update_memlabel_map_for_mlvars: num_starts 105 time spent: 0:0:0 [0.004027s total; 0.000038 per start]
add_new_locs_based_on_edge: num_starts 105 time spent: 0:0:0 [0.048497s total; 0.000462 per start]
expand_locset_to_include_slots_for_memmask: num_starts 173 time spent: 0:0:0 [0.001022s total; 0.000006 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: -nan per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

timers:
alias_val_t::constructor_with_map_arg.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_execution_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_paths_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_proofs_constructor.src.spec.make_list.: 1e-06s (num_starts 1; 0.0000s/start)
set_string_contents_for_touched_symbols_at_zero_offset.: 1e-06s (num_starts 1; 0.0000s/start)
tfg_llvm_interpret_intrinsic_fcalls.: 1e-06s (num_starts 1; 0.0000s/start)
graph_with_ce_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
graph_with_points_constructor.src.spec.make_list.: 2e-06s (num_starts 1; 0.0000s/start)
remove_function_name_from_symbols.: 2e-06s (num_starts 1; 0.0000s/start)
tfg_constructor.src.spec.make_list.after_populate_assumes_around_edge.: 2e-06s (num_starts 1; 0.0000s/start)
context_constructor.init.: 4e-06s (num_starts 1; 0.0000s/start)
graph_with_guessing_constructor.src.spec.make_list.: 9e-06s (num_starts 1; 0.0000s/start)
add_extra_node_at_start_pc.: 2.5e-05s (num_starts 1; 0.0000s/start)
get_intersected_lr_status.: 2.5e-05s (num_starts 1; 0.0000s/start)
add_assumes_to_start_edge.: 2.8e-05s (num_starts 1; 0.0000s/start)
context_constructor.solver.: 4.3e-05s (num_starts 1; 0.0000s/start)
context_constructor.: 5.5e-05s (num_starts 1; 0.0001s/start)
main.3.: 8.8e-05s (num_starts 1; 0.0001s/start)
get_lr_status_for_loc_ids.: 0.000108s (num_starts 18; 0.0000s/start)
expr_is_hidden_reg.: 0.000122s (num_starts 162; 0.0000s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.000141s (num_starts 10; 0.0000s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.000153s (num_starts 2; 0.0001s/start)
determinize_value_expr_map.: 0.000159s (num_starts 193; 0.0000s/start)
expr_is_callee_save_const.: 0.000162s (num_starts 166; 0.0000s/start)
compute_sprel_relations.: 0.000177s (num_starts 1; 0.0002s/start)
propagate_sprels.: 0.000185s (num_starts 1; 0.0002s/start)
populate_memlabel_map.visit2.calling.compute_lr_status_for_expr.: 0.000205s (num_starts 6; 0.0000s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.000224s (num_starts 24; 0.0000s/start)
graph_locs_add_all_indvars.: 0.000268s (num_starts 1; 0.0003s/start)
graph_locs_add_all_specvars.: 0.000269s (num_starts 1; 0.0003s/start)
populate_locid2expr_map.: 0.00029s (num_starts 2; 0.0001s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.00033s (num_starts 6; 0.0001s/start)
graph_locs_add_exvregs_for_edge.: 0.00035s (num_starts 54; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.000377s (num_starts 1; 0.0004s/start)
graph_locs_add_local_vars_for_edge.: 0.00039s (num_starts 54; 0.0000s/start)
tfg::populate_loc_definedness.post_dfa.: 0.000411s (num_starts 2; 0.0002s/start)
graph_locs_add_all_local_vars.: 0.00042s (num_starts 1; 0.0004s/start)
lr_status_meet.: 0.000589s (num_starts 132; 0.0000s/start)
expr_represents_llvm_undef.: 0.000637s (num_starts 168; 0.0000s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.000673s (num_starts 105; 0.0000s/start)
compute_reachable_memlabels_map.: 0.00082s (num_starts 3; 0.0003s/start)
graph_locs_add_all_llvmvars.: 0.000919s (num_starts 1; 0.0009s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.000934s (num_starts 1; 0.0009s/start)
sp_version_relations_val_t::meet.: 0.000955s (num_starts 1785; 0.0000s/start)
def_analysis::xfer_and_meet.: 0.001018s (num_starts 108; 0.0000s/start)
populate_memlabel_map.visit2.update_callee_memlabels.: 0.001216s (num_starts 6; 0.0002s/start)
canonicalize_llvm_nextpcs.: 0.001289s (num_starts 1; 0.0013s/start)
populate_transitive_closure.: 0.00131s (num_starts 1; 0.0013s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.001513s (num_starts 105; 0.0000s/start)
populate_exit_return_values_for_llvm_method.: 0.001572s (num_starts 1; 0.0016s/start)
graph_with_locs_constructor.src.spec.make_list.: 0.001616s (num_starts 1; 0.0016s/start)
tfg::collect_assumes_around_edge.: 0.001735s (num_starts 135; 0.0000s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.001743s (num_starts 1; 0.0017s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001861s (num_starts 1; 0.0019s/start)
compute_z3_expr.: 0.002141s (num_starts 212; 0.0000s/start)
expr_substitute_using_available_exprs_submap.: 0.003121s (num_starts 112; 0.0000s/start)
expr_linear_relation_holds::visit.var.: 0.003456s (num_starts 174; 0.0000s/start)
create_closure_matrix.: 0.003534s (num_starts 135; 0.0000s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 0.003887s (num_starts 105; 0.0000s/start)
populate_dominator_and_postdominator_relations.: 0.004696s (num_starts 2; 0.0023s/start)
graph_with_predicates_constructor.src.spec.make_list.: 0.005002s (num_starts 1; 0.0050s/start)
graph_with_aliasing_constructor.src.spec.make_list.: 0.005111s (num_starts 1; 0.0051s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.005275s (num_starts 1; 0.0053s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.005427s (num_starts 2230; 0.0000s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.005468s (num_starts 93; 0.0001s/start)
graph_visit_exprs.: 0.005838s (num_starts 4; 0.0015s/start)
query:convert_from_z3.: 0.006573s (num_starts 212; 0.0000s/start)
graph_with_edge_structures_constructor.src.spec.make_list.: 0.007277s (num_starts 1; 0.0073s/start)
graph_with_simplified_assets_constructor.src.spec.make_list.: 0.007896s (num_starts 1; 0.0079s/start)
tfg_constructor.src.spec.make_list.after_transitive_closure.: 0.009153s (num_starts 1; 0.0092s/start)
tfg_constructor.src.spec.make_list.post_parsing.: 0.009158s (num_starts 1; 0.0092s/start)
tfg_constructor.src.spec.make_list.after_string_contents.: 0.009163s (num_starts 1; 0.0092s/start)
tfg_constructor.src.spec.make_list.after_compute_max_memlabel_varnum.: 0.009168s (num_starts 1; 0.0092s/start)
tfg_constructor.src.spec.make_list.: 0.009172s (num_starts 1; 0.0092s/start)
graph_identify_back_edges.: 0.009331s (num_starts 6; 0.0016s/start)
query:convert_to_z3.: 0.009497s (num_starts 212; 0.0000s/start)
graph_identify_natural_loops.: 0.009801s (num_starts 6; 0.0016s/start)
tfg::populate_loc_definedness.before_solve.: 0.010599s (num_starts 2; 0.0053s/start)
tfg::populate_loc_definedness.before_initialize.: 0.011144s (num_starts 2; 0.0056s/start)
tfg::populate_loc_definedness.: 0.011527s (num_starts 2; 0.0058s/start)
find_dominators.: 0.013044s (num_starts 10; 0.0013s/start)
populate_branch_affecting_locs.: 0.013786s (num_starts 2; 0.0069s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.014459s (num_starts 1; 0.0145s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.014696s (num_starts 1; 0.0147s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.015082s (num_starts 1; 0.0151s/start)
compute_regions.: 0.0152s (num_starts 6; 0.0025s/start)
graph_to_stream.: 0.015562s (num_starts 1; 0.0156s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.016415s (num_starts 105; 0.0002s/start)
create_sp_version_relations_lattice_at_pc.: 0.017767s (num_starts 135; 0.0001s/start)
query:simplify-z3.: 0.021132s (num_starts 428; 0.0000s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.022343s (num_starts 105; 0.0002s/start)
populate_simplified_to_state.: 0.023602s (num_starts 3; 0.0079s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 0.026192s (num_starts 1622; 0.0000s/start)
populate_simplified_assets.: 0.032382s (num_starts 6; 0.0054s/start)
tfg_preprocess.dst.llvm.make_list.: 0.038256s (num_starts 1; 0.0383s/start)
tfg::tfg_preprocess.: 0.038258s (num_starts 1; 0.0383s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.038864s (num_starts 105; 0.0004s/start)
get_tfg.: 0.047972s (num_starts 1; 0.0480s/start)
get_function_tfg_map.make_list.: 0.048027s (num_starts 1; 0.0480s/start)
get_function_tfg_map.: 0.04803s (num_starts 1; 0.0480s/start)
main.2.: 0.048934s (num_starts 1; 0.0489s/start)
avail_exprs_create_submap.: 0.055177s (num_starts 315; 0.0002s/start)
populate_locs_potentially_modified_on_edge.: 0.058031s (num_starts 3; 0.0193s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.075033s (num_starts 105; 0.0007s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 0.088386s (num_starts 1622; 0.0001s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.090427s (num_starts 3; 0.0301s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 0.09069s (num_starts 1622; 0.0001s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 0.109071s (num_starts 1622; 0.0001s/start)
compute_lr_status_for_expr.: 0.152156s (num_starts 141; 0.0011s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 0.152747s (num_starts 119; 0.0013s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 0.152942s (num_starts 119; 0.0013s/start)
liveness_analysis_conservative::xfer_and_meet.: 0.253814s (num_starts 172; 0.0015s/start)
compute_new_lr_status_on_locs.: 0.254438s (num_starts 105; 0.0024s/start)
populate_loc_liveness.: 0.273085s (num_starts 2; 0.1365s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 0.308336s (num_starts 105; 0.0029s/start)
expr_do_simplify_using_lhs_set_and_precond.: 0.38161s (num_starts 285; 0.0013s/start)
tfg_postprocess_after_pointsto_analysis.: 0.396567s (num_starts 1; 0.3966s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.423408s (num_starts 1; 0.4234s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 0.438194s (num_starts 105; 0.0042s/start)
ftmap_run_pointsto_analysis.: 0.892677s (num_starts 1; 0.8927s/start)
parse_consts_db.: 6.5623s (num_starts 1; 6.5623s/start)
main.: 7.60014s (num_starts 1; 7.6001s/start)

counters:

flags:

info:


<MSG>0:00 : Converting Spec to Transfer Function Graph (TFG)...</MSG>
<MSG>0:07 : Converting C source code to LLVM IR bitcode...</MSG>
<MSG>0:13 : Converting LLVM IR bitcode to Transfer Function Graph (TFG)...</MSG>
<MSG>0:21 : Searching for equivalence at unroll factor 1</MSG>
<MSG>0:21 : Reading in SPEC-LLVM I/O specification from file ind9.iospecs...</MSG>
<MSG>0:21 : Computing equivalence for function: make_list...</MSG>
<MSG>0:21 : Constructing SSA for SPEC TFG...</MSG>
<MSG>0:21 : Constructing SSA for LLVM TFG...</MSG>
<MSG>0:22 : Finished SSA construction for both TFGs...</MSG>
<MSG>0:22 : Computing equivalence of the two TFGs ( SPEC and LLVM )...</MSG>
<MSG>0:22 : Chose (after CE propagation) product-TFG make_list (d:0, s:0, sp: 0) from a frontier of size 1...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: nullptr
  src-full-pathset: nullptr
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:23 : product-TFG make_list: Enumerating correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Considering 1 paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Attempting correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : Found 1 feasible correlations for paths to src pc L3%10%bbentry as correlation candidates for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG make_list: Found 3 correlations for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_L0%0%d
</MSG>
<MSG>0:23 : product-TFG make_list created 3 possibilities in group make_list.A...</MSG>
<MSG>0:23 : Chose (for CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:23 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2...</MSG>
<MSG>0:23 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2...</MSG>
<MSG>0:23 : Creating ssa-path for the src-tfg path L0%0%d --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:23 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : Adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Adding node L3%6%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:23 : make_list.A2: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Adding edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:23 : make_list.A2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:23 : make_list.A2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:23 : make_list.A2: Propagated 0 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>0:23 : make_list.A2: Added the 0 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:23 : make_list.A2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:23 : make_list.A2: Finished executing CG's add edge function...</MSG>
<MSG>0:23 : make_list.A2: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding new edge to the product-TFG make_list.A2 for fromPC L0%0%d_L0%0%d and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : Done adding a CG edge composition using the src path L0%0%d --> L3%6%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:23 : Added correlation to the product-TFG make_list.A2 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:23 : Chose (after CE propagation) product-TFG make_list.A2 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:23 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:23 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:23 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:23 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:23 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:23 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:24 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:24 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht8-prove_trivial3-prove5...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:27 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:27 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:28 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:28 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:40 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht19-prove_trivial2-prove17...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15


<MSG>0:40 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:40 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15


<MSG>0:40 : make_list.A2 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:40 : make_list.A2 (d:2, s:0, sp: 13): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>0:40 : Chosen product-TFG make_list.A2 will be explored later...</MSG>
<MSG>0:40 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>0:40 : Chose (for CE propagation) product-TFG make_list.A3 (d:0, s:0, sp: 0) from a frontier of size 3...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:40 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A3...</MSG>
<MSG>0:40 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A3...</MSG>
<MSG>0:40 : Creating ssa-path for the src-tfg path L0%0%d --> L3%10%bbentry ending at L3%10%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : Identifying common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Identified no common alloc-deallocs in the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : Adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Computing loop hoisting select expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Computing loop hoisting non-linear expressions at toPC L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Adding node L3%10%bbentry_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:40 : make_list.A3: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Adding edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:40 : make_list.A3: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:40 : make_list.A3: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:40 : make_list.A3: marking unstable at L0%0%d_L0%0%d due to failing condition:
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
159984 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda140, ite(and(bvule(0, Lambda140), bvule(Lambda140, 4294967295)), false, false)), lambda(Lambda141, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954988), 198, 251)))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 4227595259) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140687 : sum_is(140447, 140287) : BOOL             : false
196697 : or(159984, 140687) : BOOL                 : false

ce =
=counter_example_begin z3.ce7 5624b1ee4a5c53c814d37c7fcb1db4ab
=input.spec-%var-arr-1
1 : Lambda140 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda141 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda144 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda120 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform17 : BV:32
3 : Lambda145 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda146 : BV:32
6 : unit : UNIT
7 : 1758393872 { 0x68cef610 +1.61688423e82 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda121 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
350272784
=counter_example_end


failcond-expr = or(not(true), sum_is(map_get(input.spec-%var-arr-1, 0), 1)):
1 : 1 { 0x1 } : BOOL
2 : not(1) : BOOL
3 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : map_get(3, 4) : SUM[UNIT,BV:32]
6 : 1 { 0x1 +1.0e1025 } : INT
7 : sum_is(5, 6) : BOOL
8 : or(2, 7) : BOOL
</MSG>
<MSG>0:40 : make_list.A3: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:40 : make_list.A3: Finished executing CG's add edge function...</MSG>
<MSG>0:40 : make_list.A3: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A3: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L3%10%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : Done adding new edge to the product-TFG make_list.A3 for fromPC L0%0%d_L0%0%d and toPC L3%10%bbentry_Lfor.cond%1%bbentry, src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : Done adding a CG edge composition using the src path L0%0%d --> L3%10%bbentry and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : Failed correlation of src pathset L0%0%d=>L3%10%bbentry[mu 1, delta {1,0}] as correlation candidate for L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_L0%0%d: failcond = wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%10%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
140275 : 1 { 0x1 } : BOOL                          : true
159984 : not(140275) : BOOL                        : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda140, ite(and(bvule(0, Lambda140), bvule(Lambda140, 4294967295)), false, false)), lambda(Lambda141, bvconcat(ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(3, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(2, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(1, bvmul(4, Lambda141), 4218941382), 682954988), 198, 251))))))), ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990524), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990525), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954989), 239, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954990), 119, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990526), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 1278990527), 0, ite(eq(bvadd(bvmul(4, Lambda141), 4218941382), 682954988), 198, 251)))))))))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(0, unit, 4227595259) )
140287 : 1 { 0x1 +1.0e1025 } : INT                 : 1
140687 : sum_is(140447, 140287) : BOOL             : false
196697 : or(159984, 140687) : BOOL                 : false

ce =
=counter_example_begin z3.ce7 5624b1ee4a5c53c814d37c7fcb1db4ab
=input.spec-%var-arr-1
1 : Lambda140 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda141 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda144 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda120 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform17 : BV:32
3 : Lambda145 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda146 : BV:32
6 : unit : UNIT
7 : 1758393872 { 0x68cef610 +1.61688423e82 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda121 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
350272784
=counter_example_end


</MSG>
<MSG>0:40 : Discovered that the correlation was useless for the product-TFG make_list.A3 (d:0, s:0, sp: 0)...</MSG>
<MSG>0:40 : Chose (for CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Nodes[1]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:40 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1...</MSG>
<MSG>0:40 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1...</MSG>
<MSG>0:40 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry
</MSG>
<MSG>0:40 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : Adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Adding node L0%0%d_Lfor.cond%1%bbentry to the product-TFG...</MSG>
<MSG>0:40 : make_list.A1: Getting alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Found no alloca-ptrs on edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Adding edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:40 : make_list.A1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:40 : make_list.A1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:40 : make_list.A1: Propagated 0 out of 2 counter-examples across edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>0:40 : make_list.A1: Added the 0 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>0:40 : make_list.A1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:40 : make_list.A1: Finished executing CG's add edge function...</MSG>
<MSG>0:40 : make_list.A1: Computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Done computing CG regions after the addition of the edge L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : Done adding new edge to the product-TFG make_list.A1 for fromPC L0%0%d_L0%0%d and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path L0%0%d --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:40 : Added correlation to the product-TFG make_list.A1 (d:0, s:0, sp: 0) and created a correlation entry...</MSG>
<MSG>0:40 : Chose (after CE propagation) product-TFG make_list.A1 (d:0, s:0, sp: 0) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 0 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:0, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: false                 ==  true
     is_assumed_eqclass : 0
    0 visited ces


<MSG>0:40 : make_list.A1: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:40 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>0:40 : make_list.A1: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:40 : make_list.A1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:40 : make_list.A1: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:40 : make_list.A1: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:40 : make_list.A1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 0 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:41 : make_list.A1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>0:41 : make_list.A1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 4 exprs and 2 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:44 : make_list.A1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht7-prove_trivial2-prove5...</MSG>
<MSG>0:44 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:44 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:44 : make_list.A1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:44 : make_list.A1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:44 : make_list.A1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:44 : make_list.A1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:44 : make_list.A1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:52 : make_list.A1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht9-prove_trivial0-prove9...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391


<MSG>0:52 : make_list.A1: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>0:52 : make_list.A1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391


<MSG>0:52 : make_list.A1 (d:2, s:0, sp: 0): checked newly added edge and inferred invariants...</MSG>
<MSG>0:52 : make_list.A1 (d:2, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:52 : product-TFG make_list.A1: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:52 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:52 : Attempting correlation of src pathset L0%0%d=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:52 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:52 : product-TFG make_list.A1: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:52 : product-TFG make_list.A1 created 1 possibilities in group make_list.A1.B...</MSG>
<MSG>0:52 : Chose (for CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 4 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:52 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:52 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1...</MSG>
<MSG>0:52 : Creating ssa-path for the src-tfg path L0%0%d --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:52 : Adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:52 : Identifying common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:52 : Identified no common alloc-deallocs in the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:52 : Adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:52 : make_list.A1.B1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:52 : make_list.A1.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:52 : make_list.A1.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:52 : make_list.A1.B1: Propagated 5 out of 12 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:52 : make_list.A1.B1: Added the 5 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:52 : make_list.A1.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:52 : make_list.A1.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:52 : make_list.A1.B1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : Done adding new edge to the product-TFG make_list.A1.B1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:52 : Done adding a CG edge composition using the src path L0%0%d --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:52 : Added correlation to the product-TFG make_list.A1.B1 (d:2, s:0, sp: 8) and created a correlation entry...</MSG>
<MSG>0:52 : Chose (after CE propagation) product-TFG make_list.A1.B1 (d:2, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 12 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:52 : make_list.A1.B1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:52 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:52 : make_list.A1.B1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:52 : make_list.A1.B1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:52 : make_list.A1.B1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:53 : make_list.A1.B1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A1.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:53 : make_list.A1.B1 (d:2, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>0:53 : make_list.A1.B1 (d:2, s:0, sp: 8): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:53 : product-TFG make_list.A1.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:53 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:53 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:53 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:53 : product-TFG make_list.A1.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>0:53 : product-TFG make_list.A1.B1 created 1 possibilities in group make_list.A1.B1.C...</MSG>
<MSG>0:53 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1 (d:2, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:53 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:53 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1...</MSG>
<MSG>0:53 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>0:53 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:53 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:53 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:53 : Adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Updating dst fcall edge using src fcall edge for toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Adding node L0%0%d_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Getting alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Found no alloca-ptrs on edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Adding edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Propagated 9 out of 14 counter-examples across edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Added the 9 propagated CEs at PC L0%0%d_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:53 : make_list.A1.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : make_list.A1.B1.C1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : Done adding new edge to the product-TFG make_list.A1.B1.C1 for fromPC L0%0%d_Lfor.cond%1%bbentry and toPC L0%0%d_Lfor.body%1%fcallStart, src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:53 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 5, 0)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce793      1.:z3v487.ce797
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    9 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:53 : Added correlation to the product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 8) and created a correlation entry...</MSG>
<MSG>0:53 : Chose (after CE propagation) product-TFG make_list.A2 (d:2, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: L0%0%d=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15


<MSG>0:53 : make_list.A2: Updating invariants over the newly added edges in edge composition L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>0:53 : Constructed infer_invariants_dfa with initial worklist L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>0:53 : make_list.A2: Relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:53 : make_list.A2: Done relaxing dst graph's memlabels for edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>0:53 : make_list.A2: Checking well-formedness assertions on outgoing edges from L0%0%d_L0%0%d ...</MSG>
<MSG>0:53 : make_list.A2: Relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>0:53 : make_list.A2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:53 : make_list.A2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:53 : make_list.A2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 8 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>0:54 : make_list.A2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>0:54 : make_list.A2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>0:54 : make_list.A2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>0:54 : make_list.A2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht6-prove_trivial2-prove4...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15


<MSG>0:54 : make_list.A2: Done relaxing invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>0:54 : make_list.A2: Done relaxing memlabels and invariants across the edge composition (L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15


<MSG>0:54 : make_list.A2 (d:2, s:0, sp: 13): checked newly added edge and inferred invariants...</MSG>
<MSG>0:54 : make_list.A2 (d:2, s:0, sp: 13): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:55 : product-TFG make_list.A2: Enumerating correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:55 : Considering 1 paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:55 : Attempting correlation of src pathset L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}] as correlation candidate for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:55 : Found 1 feasible correlations for paths to src pc E0%0%d as correlation candidates for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:55 : product-TFG make_list.A2: Found 1 correlations for Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:55 : product-TFG make_list.A2 created 1 possibilities in group make_list.A2.B...</MSG>
<MSG>0:55 : Chose (for CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[1]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[2]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 5 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:55 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:55 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1...</MSG>
<MSG>0:55 : Creating ssa-path for the src-tfg path L3%6%bbentry --> E0%0%d ending at E0%0%d_E0%0%d
</MSG>
<MSG>0:55 : Adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:55 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d
</MSG>
<MSG>0:55 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
<MSG>0:55 : Adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Computing loop hoisting select expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Computing loop hoisting non-linear expressions at toPC E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Adding node E0%0%d_E0%0%d to the product-TFG...</MSG>
<MSG>0:55 : make_list.A2.B1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:55 : make_list.A2.B1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:55 : make_list.A2.B1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:55 : make_list.A2.B1: Propagated 4 out of 11 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d</MSG>
<MSG>0:55 : make_list.A2.B1: Added the 4 propagated CEs at PC E0%0%d_E0%0%d and propagated further.
</MSG>
<MSG>0:55 : make_list.A2.B1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:55 : make_list.A2.B1: Finished executing CG's add edge function...</MSG>
<MSG>0:55 : make_list.A2.B1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : Done adding new edge to the product-TFG make_list.A2.B1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC E0%0%d_E0%0%d, src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d...</MSG>
<MSG>0:55 : Done adding a CG edge composition using the src path L3%6%bbentry --> E0%0%d and dst path Lfor.cond%1%bbentry --> E0%0%d</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:55 : Added correlation to the product-TFG make_list.A2.B1 (d:2, s:0, sp: 13) and created a correlation entry...</MSG>
<MSG>0:55 : Chose (after CE propagation) product-TFG make_list.A2.B1 (d:2, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 11 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>E0%0%d[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>E0%0%d[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:55 : make_list.A2.B1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d and other downstream edges that change due to it...</MSG>
<MSG>0:55 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d...</MSG>
<MSG>0:55 : make_list.A2.B1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>0:55 : make_list.A2.B1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>0:55 : make_list.A2.B1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:55 : make_list.A2.B1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2.B1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:55 : make_list.A2.B1 (d:2, s:0, sp: 13): checked newly added edge and inferred invariants...</MSG>
<MSG>0:55 : make_list.A2.B1 (d:2, s:0, sp: 13): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>0:56 : product-TFG make_list.A2.B1: Enumerating correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : product-TFG make_list.A2.B1: Found 1 correlations for Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>0:56 : product-TFG make_list.A2.B1 created 1 possibilities in group make_list.A2.B1.C...</MSG>
<MSG>0:56 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1 (d:2, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[2]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
  Nodes[3]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>0:56 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:56 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1...</MSG>
<MSG>0:56 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>0:56 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:56 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart
</MSG>
<MSG>0:56 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
<MSG>0:56 : Adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Updating dst fcall edge using src fcall edge for toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Adding node L3%6%bbentry_Lfor.body%1%fcallStart to the product-TFG...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Adding edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Propagated 9 out of 13 counter-examples across edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Added the 9 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallStart and propagated further.
</MSG>
<MSG>0:56 : make_list.A2.B1.C1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Finished executing CG's add edge function...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A2.B1.C1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : Done adding new edge to the product-TFG make_list.A2.B1.C1 for fromPC L3%6%bbentry_Lfor.cond%1%bbentry and toPC L3%6%bbentry_Lfor.body%1%fcallStart, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.cond%1%bbentry --> Lfor.body%1%fcallStart</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce993      1.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce993      1.:z3v487.ce997
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    39 preds:
      0.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      1.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      2.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      3.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      4.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      5.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      6.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      7.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      8.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      9.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      10.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      11.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      12.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      15.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      17.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      19.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      20.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: false                 ==  true
      24.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      25.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      26.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      27.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      28.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      29.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      30.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      31.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      32.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      33.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      34.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      35.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      36.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      37.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      38.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:56 : Added correlation to the product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 13) and created a correlation entry...</MSG>
<MSG>0:56 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:3, s:0, sp: 8) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 5, 0)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      3.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      4.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce793      1.:z3v487.ce797
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    9 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>0:56 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>0:56 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>0:56 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:00 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht7-prove_trivial3-prove4...</MSG>
<MSG>1:00 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:00 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:00 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:02 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:02 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:02 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:02 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht9-prove_trivial1-prove8...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:13 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>1:13 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:13 : make_list.A1.B1.C1 (d:4, s:0, sp: 8): checked newly added edge and inferred invariants...</MSG>
<MSG>1:13 : make_list.A1.B1.C1 (d:4, s:0, sp: 16): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>1:13 : Chosen product-TFG make_list.A1.B1.C1 will be explored later...</MSG>
<MSG>1:13 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>1:13 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:3, s:0, sp: 13) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 9 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:1, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    6 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  input.dst.llvm-%arr.Lfor.cond%1%bbentry
      4.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      5.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce993      1.:z3v487.ce997
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 4)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce993      1.:z3v487.ce997
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    4 preds:
      0.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      2.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      3.: bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    39 preds:
      0.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      1.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      2.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      3.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      4.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      5.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      6.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      7.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      8.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      9.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      10.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      11.: 250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      12.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      13.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      14.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      15.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      17.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      19.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      20.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      21.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      22.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: false                 ==  true
      24.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      25.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      26.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      27.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      28.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      29.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      30.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      31.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      32.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      33.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      34.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      35.: 250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      36.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      37.: 250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      38.: 250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>1:13 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>1:13 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>1:13 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht8-prove_trivial4-prove4...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>1:17 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:20 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>1:20 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>1:20 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>1:20 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht39-prove_trivial6-prove33...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:13 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>2:13 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:13 : make_list.A2.B1.C1 (d:4, s:0, sp: 13): checked newly added edge and inferred invariants...</MSG>
<MSG>2:13 : make_list.A2.B1.C1 (d:4, s:0, sp: 46): Chosen CG is no longer the most promising correlation entry; returning delayed-exploration...</MSG>
<MSG>2:13 : Chosen product-TFG make_list.A2.B1.C1 will be explored later...</MSG>
<MSG>2:13 : Decided to explore product-TFG later after re-evaluating its best-first-search rank...</MSG>
<MSG>2:13 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1 (d:4, s:0, sp: 16) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:13 : make_list.A1.B1.C1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>2:13 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 7 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 8 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:13 : make_list.A1.B1.C1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>2:13 : make_list.A1.B1.C1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A1.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:13 : make_list.A1.B1.C1 (d:4, s:0, sp: 16): checked newly added edge and inferred invariants...</MSG>
<MSG>2:13 : make_list.A1.B1.C1 (d:4, s:0, sp: 16): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:13 : product-TFG make_list.A1.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>2:13 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>2:13 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>2:13 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>2:13 : product-TFG make_list.A1.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallStart
</MSG>
<MSG>2:13 : product-TFG make_list.A1.B1.C1 created 1 possibilities in group make_list.A1.B1.C1.D...</MSG>
<MSG>2:13 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:4, s:0, sp: 16) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:13 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>2:13 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1...</MSG>
<MSG>2:13 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:13 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>2:13 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>2:13 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>2:13 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Computing loop hoisting select expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Adding node L0%0%d_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Adding edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:13 : make_list.A1.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: Propagated 18 out of 18 counter-examples across edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: Added the 18 propagated CEs at PC L0%0%d_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:14 : make_list.A1.B1.C1.D1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:14 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1 for fromPC L0%0%d_Lfor.body%1%fcallStart and toPC L0%0%d_Lfor.body%1%fcallEnd, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>2:14 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    11 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      9.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:14 : Added correlation to the product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 16) and created a correlation entry...</MSG>
<MSG>2:14 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1 (d:4, s:0, sp: 46) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 16 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:14 : make_list.A2.B1.C1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart and other downstream edges that change due to it...</MSG>
<MSG>2:14 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial4-prove1...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:14 : make_list.A2.B1.C1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>2:14 : make_list.A2.B1.C1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2.B1.C1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:14 : make_list.A2.B1.C1 (d:4, s:0, sp: 46): checked newly added edge and inferred invariants...</MSG>
<MSG>2:14 : make_list.A2.B1.C1 (d:4, s:0, sp: 46): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:15 : product-TFG make_list.A2.B1.C1: Enumerating correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>2:15 : Considering 1 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>2:15 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>2:15 : Found 1 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>2:15 : product-TFG make_list.A2.B1.C1: Found 1 correlations for Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallStart
</MSG>
<MSG>2:15 : product-TFG make_list.A2.B1.C1 created 1 possibilities in group make_list.A2.B1.C1.D...</MSG>
<MSG>2:15 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:4, s:0, sp: 46) from a frontier of size 2...</MSG>
<cg>
  Edges[3]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
  Nodes[4]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:15 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>2:15 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1...</MSG>
<MSG>2:15 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:15 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>2:15 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd
</MSG>
<MSG>2:15 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
<MSG>2:15 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Computing loop hoisting select expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Computing loop hoisting non-linear expressions at toPC L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Adding node L3%6%bbentry_Lfor.body%1%fcallEnd to the product-TFG...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Adding edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Propagated 18 out of 18 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Added the 18 propagated CEs at PC L3%6%bbentry_Lfor.body%1%fcallEnd and propagated further.
</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Finished executing CG's add edge function...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A2.B1.C1.D1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1 for fromPC L3%6%bbentry_Lfor.body%1%fcallStart and toPC L3%6%bbentry_Lfor.body%1%fcallEnd, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallStart --> Lfor.body%1%fcallEnd</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce1982      3.:z3v487.ce1988      4.:z3.ce1994      5.:z3.ce1997      6.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    48 preds:
      0.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      1.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      9.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      10.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      11.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      12.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      17.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: false                 ==  true
      21.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      22.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      24.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      25.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      26.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      27.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      28.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      29.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      30.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      31.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      32.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      33.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      34.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      35.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      36.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      37.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      38.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      39.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      40.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      41.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      42.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      43.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      44.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      45.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      46.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      47.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:15 : Added correlation to the product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 46) and created a correlation entry...</MSG>
<MSG>2:15 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1 (d:7, s:0, sp: 16) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 16 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    11 preds:
      0.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      6.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      7.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      8.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      9.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      10.: false                 ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:15 : make_list.A1.B1.C1.D1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:15 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 6 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:15 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:17 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:17 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:17 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:17 : make_list.A1.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 10 exprs and 1 CEs across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:33 : make_list.A1.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht11-prove_trivial1-prove10...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895      3.:z3v487.ce2059
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:33 : make_list.A1.B1.C1.D1: Done relaxing invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>2:33 : make_list.A1.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A1.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895      3.:z3v487.ce2059
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:33 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 16): checked newly added edge and inferred invariants...</MSG>
<MSG>2:33 : make_list.A1.B1.C1.D1 (d:7, s:0, sp: 26): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>2:36 : product-TFG make_list.A1.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:36 : Considering 1 paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:36 : Attempting correlation of src pathset L0%0%d=>L0%0%d[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:36 : Found 1 feasible correlations for paths to src pc L0%0%d as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:36 : product-TFG make_list.A1.B1.C1.D1: Found 1 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L0%0%d_Lfor.body%1%fcallEnd
</MSG>
<MSG>2:36 : product-TFG make_list.A1.B1.C1.D1 created 1 possibilities in group make_list.A1.B1.C1.D1.E...</MSG>
<MSG>2:36 : Chose (for CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 26) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 14 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>2:36 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>2:36 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A1.B1.C1.D1.E1...</MSG>
<MSG>2:36 : Creating ssa-path for the src-tfg path L0%0%d --> L0%0%d ending at L0%0%d_Lfor.cond%1%bbentry
</MSG>
<MSG>2:36 : Adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:36 : Identifying common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>2:36 : Identified no common alloc-deallocs in the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>2:36 : Adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Getting alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Found no alloca-ptrs on edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Adding edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Propagated 1 out of 19 counter-examples across edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Added the 1 propagated CEs at PC L0%0%d_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : Done adding new edge to the product-TFG make_list.A1.B1.C1.D1.E1 for fromPC L0%0%d_Lfor.body%1%fcallEnd and toPC L0%0%d_Lfor.cond%1%bbentry, src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : Done adding a CG edge composition using the src path L0%0%d --> L0%0%d and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 10)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 324061132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895      6.:z3.ce2290
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1895      1.:z3.ce2290
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895      3.:z3v487.ce2059
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 324061132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471      9.:z3.ce2227
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce391      1.:z3.ce2227
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:36 : Added correlation to the product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 26) and created a correlation entry...</MSG>
<MSG>2:36 : Chose (after CE propagation) product-TFG make_list.A1.B1.C1.D1.E1 (d:7, s:0, sp: 26) from a frontier of size 2...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L0%0%d => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry (C L0%0%d => C L0%0%d at mu 0 delta {0,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L0%0%d_Lfor.body%1%fcallStart (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.body%1%fcallEnd (C L0%0%d, A line 9)
                L0%0%d_Lfor.body%1%fcallEnd [inductive-invariants] contains 20 counterexamples (for correlating 5 bv exprs)
            L0%0%d_Lfor.cond%1%bbentry (C L0%0%d, A (line 8 at column 26))
                L0%0%d_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 4 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L0%0%d=>L0%0%d[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A1.B1.C1.D1.E1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L0%0%d_Lfor.body%1%fcallStart: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 22-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      2.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      3.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce793      1.:z3v487.ce797      2.:z3.ce1072      3.:z3v487.ce1073      4.:z3.ce1050      5.:z3v487.ce1051      6.:z3.ce1094
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3v487.ce797      1.:z3.ce1072      2.:z3v487.ce1051      3.:z3v487.ce1116      4.:z3.ce1138
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce797      1.:z3v487.ce1116
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce797

L0%0%d_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 10)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 23-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 324061132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1880      1.:z3v487.ce1883      2.:z3v487.ce1886      3.:z3.ce1889      4.:z3.ce1892      5.:z3.ce1895      6.:z3.ce2290
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1895      1.:z3.ce2290
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1877      1.:z3.ce1889      2.:z3.ce1895      3.:z3v487.ce2059
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1889      1.:z3.ce1895
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [10]: 24-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 25-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 26-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 27-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 28-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 29-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 33-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce1895

L0%0%d_Lfor.cond%1%bbentry: (d:2, s:0, sp: 8)
  Invariant state (6 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [4]: 2-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvmul(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 324061132)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce412      1.:z3.ce411      2.:z3v487.ce392      3.:z3.ce391      4.:z3v487.ce432      5.:z3.ce431      6.:z3.ce451      7.:z3v487.ce452      8.:z3.ce471      9.:z3.ce2227
    eqclass 2:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 3-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce391      1.:z3.ce2227
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 5-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431      3.:z3.ce491
    eqclass 4:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 6-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 7-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 9-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 11-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 13-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce392      1.:z3.ce391      2.:z3.ce431
    eqclass 5:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [8]: 14-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 19-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 20-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 21-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    1 preds:
      0.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce391

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Updating invariants over the newly added edges in edge composition L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>2:36 : Constructed infer_invariants_dfa with initial worklist L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Done relaxing dst graph's memlabels for edge composition (L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>2:36 : make_list.A1.B1.C1.D1.E1: Checking well-formedness assertions on outgoing edges from L0%0%d_Lfor.cond%1%bbentry ...</MSG>
<MSG>2:37 : make_list.A1.B1.C1.D1.E1: marking unstable at E0%0%d_E0%0%d due to failing condition:
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140734 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140756 : bvult(140726, 140734) : BOOL              : false
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda21128, ite(eq(Lambda21128, 0), true, not(bvule(1, Lambda21128)))), lambda(Lambda21129, ite(and(bvule(0, Lambda21129), bvule(Lambda21129, 4294967295)), 0, 0))) )
140276 : 0 { 0x0 +1.0e129 } : BV:32                : 0
140447 : map_get(140273, 140276) : SUM[UNIT,BV:32] : ( sum(1, unit, 0) )
140278 : 0 { 0x0 +1.0e1025 } : INT                 : 0
234552 : sum_is(140447, 140278) : BOOL             : false
236980 : or(140756, 234552) : BOOL                 : false

ce =
=counter_example_begin z3v487.ce2303 c6ce2844bc1e6acaf9f17a8970fa62
=input.spec-%var-arr-1
1 : Lambda21128 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda21129 : BV:32
11 : bvule(2, 10) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(10, 12) : BOOL
14 : and(11, 13) : BOOL
15 : ite(14, 2, 2) : BV:32
16 : lambda(10, 15) : FUNCTION[BV:32 -> BV:32]
17 : map(9, 16) : MAP[BV:32 -> BV:32]
18 : sym_const(17) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda21131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : ite(3, 4, 8) : BOOL
10 : lambda(1, 9) : FUNCTION[BV:32 -> BOOL]
11 : Lambda21132 : BV:32
12 : bvule(2, 11) : BOOL
13 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
14 : bvule(11, 13) : BOOL
15 : and(12, 14) : BOOL
16 : ite(15, 2, 2) : BV:32
17 : lambda(11, 16) : FUNCTION[BV:32 -> BV:32]
18 : map(10, 17) : MAP[BV:32 -> BV:32]
19 : sym_const(18) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : Lambda21103 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : ite(3, 4, 8) : BOOL
10 : lambda(1, 9) : FUNCTION[BV:32 -> BOOL]
11 : sym_const(10) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform2519 : BV:32
3 : Lambda21133 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda21134 : BV:32
6 : unit : UNIT
7 : 885890754 { 0x34cd9ec2 +1.60640740e234 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : Lambda21104 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(5, 1) : BOOL
7 : not(6) : BOOL
8 : ite(3, 4, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : sym_const(9) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2530213920 { 0x96d00020 -1764753376 -1.62500381e174 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483652; 2530213919 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2530213920; 2530213923 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2530213924; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 324061132 { 0x1350c7cc +1.63109731e167 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2530213920 { 0x96d00020 -1764753376 -1.62500381e174 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2530213923 { 0x96d00023 -1764753373 -1.62500417e174 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3615940568
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry), sum_is(map_get(input.spec-%var-arr-1, 0), 0)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
</MSG>
<MSG>2:37 : make_list.A1.B1.C1.D1.E1: edge composition (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry) became unstable after invariant inference</MSG>
<MSG>2:37 : Chosen product-TFG make_list.A1.B1.C1.D1.E1 failed the edge correlation criterion (aka well-formedness checks)... (edge composition: (L0%0%d_Lfor.body%1%fcallEnd=>L0%0%d_Lfor.cond%1%bbentry))
</MSG>
<MSG>2:37 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1 (d:7, s:0, sp: 46) from a frontier of size 1...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 16 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce1982      3.:z3v487.ce1988      4.:z3.ce1994      5.:z3.ce1997      6.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 8)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    48 preds:
      0.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      1.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      4.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      6.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      7.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      8.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      9.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      10.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      11.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      12.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      13.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      14.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      15.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      16.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      17.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      18.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      19.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      20.: false                 ==  true
      21.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      22.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      23.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      24.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      25.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      26.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      27.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      28.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      29.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      30.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      31.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      32.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      33.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      34.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      35.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      36.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      37.: 330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      38.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      39.: eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry))  ==  true
      40.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      41.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      42.: 330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      43.: 330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      44.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      45.: 330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))  ==  true
      46.: 330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))))  ==  true
      47.: eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>2:37 : make_list.A2.B1.C1.D1: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd and other downstream edges that change due to it...</MSG>
<MSG>2:37 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>2:37 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht2-prove_trivial1-prove1...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>2:38 : make_list.A2.B1.C1.D1: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>3:52 : make_list.A2.B1.C1.D1: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht48-prove_trivial6-prove42...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce1982      3.:z3v487.ce1988      4.:z3.ce1994      5.:z3.ce1997      6.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:52 : make_list.A2.B1.C1.D1: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>3:52 : make_list.A2.B1.C1.D1: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2.B1.C1.D1:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 0)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce1982      3.:z3v487.ce1988      4.:z3.ce1994      5.:z3.ce1997      6.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:2, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    4 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:52 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 46): checked newly added edge and inferred invariants...</MSG>
<MSG>3:52 : make_list.A2.B1.C1.D1 (d:7, s:0, sp: 88): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>3:53 : product-TFG make_list.A2.B1.C1.D1: Enumerating correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : Considering 2 paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : Attempting correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : Found 2 feasible correlations for paths to src pc L3%6%bbentry as correlation candidates for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : product-TFG make_list.A2.B1.C1.D1: Found 2 correlations for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] starting at L3%6%bbentry_Lfor.body%1%fcallEnd
</MSG>
<MSG>3:53 : product-TFG make_list.A2.B1.C1.D1 created 2 possibilities in group make_list.A2.B1.C1.D1.E...</MSG>
<MSG>3:53 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:7, s:0, sp: 88) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:53 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>3:53 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E2...</MSG>
<MSG>3:53 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:53 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>3:53 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:53 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>3:53 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:53 : make_list.A2.B1.C1.D1.E2: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Propagated 4 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Added the 4 propagated CEs at PC L3%6%bbentry_Lfor.cond%1%bbentry and propagated further.
</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Finished executing CG's add edge function...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E2 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
invariants_dump[1] ../../lib/eq/correl_entry.cpp corr_graph_add_correlation_and_create_new_correl_entry 84:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 272977648)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:54 : Added correlation to the product-TFG make_list.A2.B1.C1.D1.E2 (d:8, s:0, sp: 88) and created a correlation entry...</MSG>
<MSG>3:54 : Chose (for CE propagation) product-TFG make_list.A2.B1.C1.D1.E1 (d:7, s:0, sp: 88) from a frontier of size 2...</MSG>
<cg>
  Edges[4]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 18 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 13 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}]
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloc:

<MSG>3:54 : Finished adding lsprel-assumes for allocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>3:54 : Finished adding lsprel-assumes for deallocation to the product-TFG make_list.A2.B1.C1.D1.E1...</MSG>
<MSG>3:54 : Creating ssa-path for the src-tfg path L3%6%bbentry --> L3%6%bbentry ending at L3%6%bbentry_Lfor.cond%1%bbentry
</MSG>
<MSG>3:54 : Adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Identifying common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry
</MSG>
<MSG>3:54 : Identified no common alloc-deallocs in the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Getting alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Found no alloca-ptrs on edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Adding edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: CG's add edge function (corr_graph::add_edge) called...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: graph with counterexample's add edge function (graph_with_ce::add_edge) called...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Propagating counter-examples across the newly added edge...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Propagated 4 out of 19 counter-examples across edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: marking unstable at L3%6%bbentry_Lfor.cond%1%bbentry due to failing condition:
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140734 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140756 : bvult(140726, 140734) : BOOL              : false
140368 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda9239, ite(and(bvule(0, Lambda9239), bvule(Lambda9239, 0)), true, ite(and(bvule(1, Lambda9239), bvule(Lambda9239, 4294967295)), false, false))), lambda(Lambda9240, ite(and(bvule(0, Lambda9240), bvule(Lambda9240, 4294967295)), 0, 0))) )
140369 : input.spec-%var-i-0.L3%6%bbentry : BV:32  : 0
140370 : map_get(140368, 140369) : SUM[UNIT,BV:32] : ( sum(1, unit, 0) )
140278 : 0 { 0x0 +1.0e1025 } : INT                 : 0
234527 : sum_is(140370, 140278) : BOOL             : false
243856 : or(140756, 234527) : BOOL                 : false

ce =
=counter_example_begin z3.ce3084 8c7d3cef596d46cb9a9d671819c63eda
=nextpc_const.1
1 : 165567001 { 0x9de5a19 +1.73712456e148 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9236 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9239 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9240 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform911 : BV:32
3 : Lambda9243 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9244 : BV:32
6 : unit : UNIT
7 : 1494388770 { 0x59129022 +1.14502358e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> 0, [ 402955476; 402955476 ] -> 0, [ 402955477; 402955477 ] -> 0, [ 402955478; 402955478 ] -> 0, [ 402955479; 402955479 ] -> 0, [ 402955480; 402955480 ] -> 0, [ 402955481; 402955481 ] -> 0, [ 402955482; 402955482 ] -> 0, [ 402955483; 402955483 ] -> 0, [ 402955484; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 165567001 , 1000 , 8 ) -> 402955476, () -> 205054593, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform910 : BV:32
3 : Lambda9241 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9242 : BV:32
6 : unit : UNIT
7 : 1495363894 { 0x59217136 +1.26126742e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1109203215 { 0x421d190f +1.22732722e5 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 402955476; 402955483 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 402955484; 815719075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 815719076; 815719079 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 815719080; 1547730463 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1547730464; 1547730467 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1547730468; 2885681151 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2885681152; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1140493031 { 0x43fa8ae7 +1.95736396e8 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1798563644 { 0x6b33e73c +1.40549421e87 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 402955476 { 0x18049cd4 +1.3603601e177 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 379995443 { 0x16a64533 +1.29898679e174 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 815719079 { 0x309ee2a7 +1.24129188e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1547730467 { 0x5c407e23 +1.50384938e57 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
174405412
=counter_example_end


failcond-expr = or(bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry), sum_is(map_get(input.spec-%var-arr-0.L3%6%bbentry, input.spec-%var-i-0.L3%6%bbentry), 0)):
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
5 : input.spec-%var-i-0.L3%6%bbentry : BV:32
6 : map_get(4, 5) : SUM[UNIT,BV:32]
7 : 0 { 0x0 +1.0e1025 } : INT
8 : sum_is(6, 7) : BOOL
9 : or(3, 8) : BOOL
</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: finished executing graph with counterexample's add edge function (graph_with_ce::add_edge)...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Finished executing CG's add edge function...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E1: Done computing CG regions after the addition of the edge L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding new edge to the product-TFG make_list.A2.B1.C1.D1.E1 for fromPC L3%6%bbentry_Lfor.body%1%fcallEnd and toPC L3%6%bbentry_Lfor.cond%1%bbentry, src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : Done adding a CG edge composition using the src path L3%6%bbentry --> L3%6%bbentry and dst path Lfor.body%1%fcallEnd --> Lfor.cond%1%bbentry</MSG>
<MSG>3:54 : Failed correlation of src pathset L3%6%bbentry=>L3%6%bbentry[mu 0, delta {0,0}] as correlation candidate for Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}] at L3%6%bbentry_Lfor.body%1%fcallEnd: failcond = wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32 : 1
140734 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32 : 1
140756 : bvult(140726, 140734) : BOOL              : false
140368 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32] : ( map(lambda(Lambda9239, ite(and(bvule(0, Lambda9239), bvule(Lambda9239, 0)), true, ite(and(bvule(1, Lambda9239), bvule(Lambda9239, 4294967295)), false, false))), lambda(Lambda9240, ite(and(bvule(0, Lambda9240), bvule(Lambda9240, 4294967295)), 0, 0))) )
140369 : input.spec-%var-i-0.L3%6%bbentry : BV:32  : 0
140370 : map_get(140368, 140369) : SUM[UNIT,BV:32] : ( sum(1, unit, 0) )
140278 : 0 { 0x0 +1.0e1025 } : INT                 : 0
234527 : sum_is(140370, 140278) : BOOL             : false
243856 : or(140756, 234527) : BOOL                 : false

ce =
=counter_example_begin z3.ce3084 8c7d3cef596d46cb9a9d671819c63eda
=nextpc_const.1
1 : 165567001 { 0x9de5a19 +1.73712456e148 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9235 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9236 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9239 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9240 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform911 : BV:32
3 : Lambda9243 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9244 : BV:32
6 : unit : UNIT
7 : 1494388770 { 0x59129022 +1.14502358e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> 0, [ 402955476; 402955476 ] -> 0, [ 402955477; 402955477 ] -> 0, [ 402955478; 402955478 ] -> 0, [ 402955479; 402955479 ] -> 0, [ 402955480; 402955480 ] -> 0, [ 402955481; 402955481 ] -> 0, [ 402955482; 402955482 ] -> 0, [ 402955483; 402955483 ] -> 0, [ 402955484; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9211 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 165567001 , 1000 , 8 ) -> 402955476, () -> 205054593, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : Indxform910 : BV:32
3 : Lambda9241 : BV:32
4 : lambda(3, 3) : FUNCTION[BV:32 -> BV:32]
5 : Lambda9242 : BV:32
6 : unit : UNIT
7 : 1495363894 { 0x59217136 +1.26126742e51 } : BV:32
8 : prod(7, 2) : PROD[BV:32,BV:32]
9 : sum(1, 6, 8) : SUM[UNIT,PROD[BV:32,BV:32]]
10 : lambda(5, 9) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
11 : ind(1, 2, 4, 10) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
12 : sym_const(11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1109203215 { 0x421d190f +1.22732722e5 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 402955475 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 402955476; 402955483 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 402955484; 815719075 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 815719076; 815719079 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 815719080; 1547730463 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1547730464; 1547730467 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1547730468; 2885681151 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2885681152; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1140493031 { 0x43fa8ae7 +1.95736396e8 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1798563644 { 0x6b33e73c +1.40549421e87 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 402955476 { 0x18049cd4 +1.3603601e177 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 379995443 { 0x16a64533 +1.29898679e174 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 815719076 { 0x309ee2a4 +1.24129152e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 815719079 { 0x309ee2a7 +1.24129188e226 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1547730464 { 0x5c407e20 +1.50384902e57 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1547730467 { 0x5c407e23 +1.50384938e57 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 116 , m_adder -> 133), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
174405412
=counter_example_end


</MSG>
<MSG>3:54 : Discovered that the correlation was useless for the product-TFG make_list.A2.B1.C1.D1.E1 (d:9, s:0, sp: 88)...</MSG>
<MSG>3:54 : Chose (after CE propagation) product-TFG make_list.A2.B1.C1.D1.E2 (d:8, s:0, sp: 88) from a frontier of size 1...</MSG>
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 19 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 20 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 15 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
  dst-full-pathset: Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry[mu 1, delta {1,0}]
  src-full-pathset: L3%6%bbentry=>L3%6%bbentry[mu 1, delta {1,0}]
invariants_dump[1] ../../lib/eq/correlate.cpp find_correlation 290:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 272977648)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Updating invariants over the newly added edges in edge composition L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry and other downstream edges that change due to it...</MSG>
<MSG>3:54 : Constructed infer_invariants_dfa with initial worklist L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>3:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht5-prove_trivial1-prove4...</MSG>
<MSG>3:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial1-prove2...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht6-prove_trivial6-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 272977648)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      3.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>3:56 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:57 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:58 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:58 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:58 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>3:59 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht6-prove_trivial1-prove5...</MSG>
<MSG>4:16 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:16 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:16 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:17 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:18 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:19 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:19 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:2, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    5 preds:
      0.: 0                     ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      4.: 0                     ==  input.spec-%var-i-0.L3%6%bbentry
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      5.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:3, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: bvmul(input.spec-%var-i-0.L3%6%bbentry, 272977648)  ==  input.dst.llvm-%l.0.Lfor.cond%1%bbentry
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    8 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce2981      1.:z3.ce2000
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 13)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 1)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 1)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce15      1.:z3.ce2916
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:21 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:29 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht8-prove_trivial3-prove5...</MSG>
<MSG>4:29 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:30 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>4:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:34 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:34 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 14 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 3, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    9 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    6 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      4.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      5.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:35 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 9 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:36 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht6-prove_trivial4-prove2...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 14 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:40 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:41 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:42 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:42 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht4-prove_trivial0-prove4...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:46 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:47 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:47 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>4:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:48 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:48 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:49 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:49 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:50 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 33)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 42)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 14 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:52 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:53 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:53 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:53 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:53 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 14 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 3)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 3)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed ...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: changed( 0, 1 ) ...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:54 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 1 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    3 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      1.: bvsle(input.spec-%var-i-0.L3%6%bbentry, 4)  ==  true
      2.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      1.: bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4)  ==  true
      2.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed ...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: changed( 0, 1 ) ...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>4:55 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>4:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>4:56 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>4:56 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 1 proof-stats=dht5-prove_trivial0-prove5...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:07 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:08 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:08 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:09 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
<MSG>5:09 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:09 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:09 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>5:10 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:10 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:10 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:11 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: changed( 0, 1 ) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 14 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial3-prove1...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 6 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 5 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 38 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallStart ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 6 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht3-prove_trivial3-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht1-prove_trivial1-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 2 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht2-prove_trivial2-prove0...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 47 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd). changed = 0 proof-stats=dht4-prove_trivial4-prove0...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.body%1%fcallEnd ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry) ...</MSG>
<MSG>5:13 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) with 1 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass abstract-memlabel-asserts (type HOUDINI_EXPECTS_STABILITY) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass expr-group-bvs (type BV_EQ) with 5 exprs and 10 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass expr-group-bvs (type BV_EQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht3-prove_trivial0-prove3...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass src-branches-const-ineq (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:14 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 7 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht2-prove_trivial0-prove2...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) with 1 exprs and 4 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry (type BV_CONST_INEQ) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht0-prove_trivial0-prove0...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass dst-ineq (type HOUDINI) with 8 exprs and 3 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass dst-ineq (type HOUDINI) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht1-prove_trivial0-prove1...</MSG>
<MSG>5:15 : make_list.A2.B1.C1.D1.E2: Relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) with 18 exprs and 1 CEs across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariant eqclass spec-coupling-invariants (type HOUDINI_AXIOM_BASED) across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry). changed = 0 proof-stats=dht4-prove_trivial1-prove3...</MSG>
invariants_dump[1] ../../lib/graph/invariant_state.cpp inductive_invariant_xfer_on_incoming_edge_composition 346:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Done relaxing invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged ...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry), result: unchanged( 0, 0 ) ...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d) ...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Done relaxing dst graph's memlabels for edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Checking well-formedness assertions on outgoing edges from L3%6%bbentry_Lfor.cond%1%bbentry ...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2: Done relaxing memlabels and invariants across the edge composition (L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d), result: unchanged( 0, 0 ) ...</MSG>
invariants_dump[1] ../../lib/eq/corr_graph.cpp cg_check_new_cg_ec 4869:
make_list.A2.B1.C1.D1.E2:
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


<MSG>5:17 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 94): checked newly added edge and inferred invariants...</MSG>
<MSG>5:17 : make_list.A2.B1.C1.D1.E2 (d:10, s:0, sp: 94): Chosen CG is still the most promising correlation entry; proceeding with it...</MSG>
<MSG>5:17 : Chosen product-TFG represents our required correlation graph...</MSG>
<MSG>5:17 : Checking equivalence proof...</MSG>
<MSG>5:22 : Equivalence check passed: product CFG has strong enough inductive invariants...</MSG>
CG invariants =
L0%0%d_L0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):

L3%6%bbentry_Lfor.body%1%fcallStart: (d:3, s:0, sp: 35)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 33-->input.dst.llvm-%cmp.Lfor.cond%2%d ; 
    4 preds:
      0.: 1                     ==  bvzero_ext(bool_to_bv(input.dst.llvm-%cmp.Lfor.cond%2%d), 31)
      1.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      2.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      3.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    14 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3.ce1304      4.:z3v487.ce1305      5.:z3.ce1328      6.:z3v487.ce1329      7.:z3.ce3185      8.:z3v487.ce3184      9.:z3v487.ce3234      10.:z3.ce3233      11.:z3v487.ce3326      12.:z3v487.ce3365      13.:z3.ce3364
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    6 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce3184      2.:z3v487.ce3411      3.:z3.ce3562      4.:z3v487.ce3700      5.:z3v487.ce3786
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    5 visited ces:
      0.:z3.ce993      1.:z3v487.ce997      2.:z3.ce1280      3.:z3v487.ce1352      4.:z3.ce1376
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3v487.ce997      1.:z3v487.ce1352
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [38]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 34-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 35-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 36-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 37-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 38-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250795](sum_is[250794](250410, 1), eq[250739](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 39-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250797](sum_is[250796](250636, 1), eq[250779](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 40-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250799](sum_is[250798](250729, 1), eq[250780](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 41-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250801](sum_is[250800](250635, 1), eq[250781](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 42-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250802](sum_is[250794](250410, 1), eq[250782](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 43-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250803](sum_is[250800](250635, 1), eq[250783](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 44-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250804](sum_is[250796](250636, 1), eq[250784](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 45-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250805](sum_is[250798](250729, 1), eq[250785](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 46-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250806](sum_is[250794](250410, 1), eq[250786](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 47-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250807](sum_is[250800](250635, 1), eq[250787](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 48-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250808](sum_is[250796](250636, 1), eq[250788](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 49-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250809](sum_is[250798](250729, 1), eq[250789](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 50-->250410 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250810](sum_is[250794](250410, 1), eq[250790](input.spec-%var-l-0.L3%6%bbentry, sum_init[250413](SORT2EXPR.VAR, 1, prod_init[250412](SORT2EXPR.VAR, sum_get[250411](250410, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 51-->250635 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250811](sum_is[250800](250635, 1), eq[250791](input.spec-%var-l-0.L3%6%bbentry, sum_init[250736](SORT2EXPR.VAR, 1, prod_init[250731](SORT2EXPR.VAR, sum_get[250730](250635, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 52-->250636 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250812](sum_is[250796](250636, 1), eq[250792](input.spec-%var-l-0.L3%6%bbentry, sum_init[250737](SORT2EXPR.VAR, 1, prod_init[250733](SORT2EXPR.VAR, sum_get[250732](250636, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 53-->250729 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[250813](sum_is[250798](250729, 1), eq[250793](input.spec-%var-l-0.L3%6%bbentry, sum_init[250738](SORT2EXPR.VAR, 1, prod_init[250735](SORT2EXPR.VAR, sum_get[250734](250729, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
      1.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3v487.ce997

L3%6%bbentry_Lfor.body%1%fcallEnd: (d:4, s:0, sp: 44)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [6]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 54-->input.dst.llvm-%call.Lfor.body%1%fcallEnd ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3.ce1985      1.:z3v487.ce1991      2.:z3.ce2981      3.:z3.ce1982      4.:z3v487.ce1988      5.:z3.ce1994      6.:z3.ce1997      7.:z3.ce2000      8.:z3.ce3286      9.:z3v487.ce3466
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce2981      1.:z3.ce2000      2.:z3.ce3286      3.:z3v487.ce3598      4.:z3v487.ce3665      5.:z3v487.ce3751      6.:z3v487.ce3837
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    1 preds:
      0.: bvuge(input.dst.llvm-%n.Lfor.cond%1%bbentry, 1)  ==  true
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce1982      1.:z3.ce1994      2.:z3.ce2000      3.:z3.ce2318
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
      1.: bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    2 visited ces:
      0.:z3.ce1994      1.:z3.ce2000
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [47]: 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 55-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 56-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 57-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 58-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 59-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 60-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 61-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 62-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 63-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 64-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 65-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 66-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 67-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 68-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 69-->eq(input.spec-%tmpvar-0.L3%7%d, map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry)) ; 70-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331541](sum_is[331540](330113, 1), eq[330109](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 71-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331543](sum_is[331542](330163, 1), eq[331516](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 72-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331545](sum_is[331544](330164, 1), eq[331517](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 73-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331547](sum_is[331546](330114, 1), eq[331518](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 74-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331549](sum_is[331548](330673, 1), eq[331519](input.spec-%tmpvar-1.L3%6%bbentry, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit)))) ; 75-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331550](sum_is[331540](330113, 1), eq[331520](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 76-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331551](sum_is[331546](330114, 1), eq[331521](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 77-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331552](sum_is[331542](330163, 1), eq[331522](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 78-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331553](sum_is[331544](330164, 1), eq[331523](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 79-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331554](sum_is[331548](330673, 1), eq[331524](input.spec-%tmpvar-2.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 80-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 81-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 82-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 83-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 84-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 85-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331555](sum_is[331540](330113, 1), eq[331525](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 86-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331556](sum_is[331546](330114, 1), eq[331526](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 87-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331557](sum_is[331542](330163, 1), eq[331527](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 88-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331558](sum_is[331544](330164, 1), eq[331528](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 89-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331559](sum_is[331548](330673, 1), eq[331529](input.spec-%var-new_l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 90-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 91-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 92-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 93-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%call.Lfor.body%1%fcallEnd, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 94-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 95-->330113 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331560](sum_is[331540](330113, 1), eq[331535](input.spec-%var-l-0.L3%6%bbentry, sum_init[331419](SORT2EXPR.VAR, 1, prod_init[330675](SORT2EXPR.VAR, sum_get[330674](330113, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 96-->330114 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331561](sum_is[331546](330114, 1), eq[331536](input.spec-%var-l-0.L3%6%bbentry, sum_init[331420](SORT2EXPR.VAR, 1, prod_init[331204](SORT2EXPR.VAR, sum_get[331203](330114, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 97-->330163 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331562](sum_is[331542](330163, 1), eq[331537](input.spec-%var-l-0.L3%6%bbentry, sum_init[331513](SORT2EXPR.VAR, 1, prod_init[330726](SORT2EXPR.VAR, sum_get[330725](330163, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 98-->330164 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331563](sum_is[331544](330164, 1), eq[331538](input.spec-%var-l-0.L3%6%bbentry, sum_init[331514](SORT2EXPR.VAR, 1, prod_init[331202](SORT2EXPR.VAR, sum_get[330727](330164, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 99-->330673 = map_get(map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%call.Lfor.body%1%fcallEnd))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))), input.spec-%var-i-0.L3%6%bbentry);and[331564](sum_is[331548](330673, 1), eq[331539](input.spec-%var-l-0.L3%6%bbentry, sum_init[331515](SORT2EXPR.VAR, 1, prod_init[331359](SORT2EXPR.VAR, sum_get[331205](330673, 1), sum_init(SORT2EXPR.VAR, 0, unit))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce2000

L3%6%bbentry_Lfor.cond%1%bbentry: (d:3, s:0, sp: 15)
  Invariant state (7 classes):
    eqclass 0:
    smallest point cover name abstract-memlabel-asserts, type HOUDINI_EXPECTS_STABILITY, exprs [1]: 1-->and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap)) ; 
    1 preds:
      0.: and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15
    eqclass 1:
    smallest point cover name expr-group-bvs, type BV_EQ, exprs [5]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 3-->input.dst.llvm-%arr.Lfor.cond%1%bbentry ; 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 5-->input.dst.llvm-%l.0.Lfor.cond%1%bbentry ; 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    3 preds:
      0.: 0                     ==  bvextract(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, 1, 0)
      1.: 0                     ==  bvextract(input.dst.llvm-%arr.Lfor.cond%1%bbentry, 1, 0)
      2.: bvneg(bvmul(input.spec-%var-i-0.L3%6%bbentry, 4294967295))  ==  input.dst.llvm-%i.0.Lfor.cond%1%bbentry
     is_assumed_eqclass : 0
    10 visited ces:
      0.:z3v487.ce64      1.:z3.ce63      2.:z3v487.ce16      3.:z3.ce15      4.:z3v487.ce40      5.:z3.ce39      6.:z3v487.ce87      7.:z3.ce111      8.:z3.ce2906      9.:z3.ce2916
    eqclass 2:
    smallest point cover name src-branches-const-ineq, type BV_CONST_INEQ, exprs [1]: 2-->input.spec-%var-i-0.L3%6%bbentry ; 
    2 preds:
      0.: bvule(input.spec-%var-i-0.L3%6%bbentry, 4294967294)  ==  true
      1.: bvsge(input.spec-%var-i-0.L3%6%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 3:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 4-->input.dst.llvm-%i.0.Lfor.cond%1%bbentry ; 
    2 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 4294967294)  ==  true
      1.: bvsge(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, 0)  ==  true
     is_assumed_eqclass : 0
    7 visited ces:
      0.:z3.ce15      1.:z3.ce2916      2.:z3.ce3260      3.:z3v487.ce3512      4.:z3v487.ce3630      5.:z3v487.ce3716      6.:z3v487.ce3802
    eqclass 4:
    smallest point cover name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry, type BV_CONST_INEQ, exprs [1]: 6-->input.dst.llvm-%n.Lfor.cond%1%bbentry ; 
    0 preds:
     is_assumed_eqclass : 0
    4 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15      3.:z3.ce135
    eqclass 5:
    smallest point cover name dst-ineq, type HOUDINI, exprs [8]: 7-->bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 8-->bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 9-->bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 10-->bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 11-->bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 12-->bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry) ; 13-->bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 14-->bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry) ; 
    1 preds:
      0.: bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)  ==  true
     is_assumed_eqclass : 0
    3 visited ces:
      0.:z3.ce63      1.:z3v487.ce16      2.:z3.ce15
    eqclass 6:
    smallest point cover name spec-coupling-invariants, type HOUDINI_AXIOM_BASED, exprs [18]: 15-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 16-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 17-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 18-->eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 19-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 20-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%arr.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 21-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%i.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 22-->eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%l.0.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false)))) ; 23-->eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 24-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 25-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 26-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 27-->eq(input.spec-%tmpvar-12.E0%0%d, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 28-->eq(input.spec-%var-l-0.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit)) ; 29-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 30-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%n.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 31-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%arr.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 32-->eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0))))) ; 
    4 preds:
      0.: eq(input.spec-%var-l-0.L3%6%bbentry, ind(input.dst.llvm-%l.0.Lfor.cond%1%bbentry, Indxform0, lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(Lambda1, 4), 4, false)), lambda(Lambda0, sum(ite(eq(0, Lambda0), 0, 1), unit, prod(select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, Lambda0, 4, false), Indxform0)))))  ==  true
      1.: eq(input.spec-%var-arr-1, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      2.: eq(input.spec-%var-arr-0.L3%6%bbentry, map(lambda(Lambda0, and(bvule(0, Lambda0), bvult(Lambda0, input.dst.llvm-%n.Lfor.cond%1%bbentry))), lambda(Lambda1, select(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-top, bvadd(bvmul(Lambda1, 4), input.dst.llvm-%arr.Lfor.cond%1%bbentry), 4, false))))  ==  true
      3.: eq(input.spec-%tmpvar-10.L3%6%bbentry, sum_init(SORT2EXPR.VAR, 0, unit))  ==  true
     is_assumed_eqclass : 0
    1 visited ces:
      0.:z3.ce15

E0%0%d_E0%0%d: (d:0, s:0, sp: 0)
  Invariant state (0 classes):


Found equivalence proof. Final CG:
<cg>
  Edges[5]: L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry (C L0%0%d => C L3%6%bbentry at mu 1 delta {1,0}, A L0%0%d => A (line 8 at column 26) at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d (C L3%6%bbentry => C E0%0%d at mu 1 delta {1,0}, A (line 8 at column 26) => A E0%0%d at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A (line 8 at column 26) => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry => C L3%6%bbentry at mu 0 delta {0,0}, A line 9 => A line 9 at mu 1 delta {1,0})
            L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry => C L3%6%bbentry at mu 1 delta {1,0}, A line 9 => A (line 8 at column 26) at mu 1 delta {1,0})
  Nodes[5]: L0%0%d_L0%0%d (C L0%0%d, A L0%0%d)
                L0%0%d_L0%0%d [inductive-invariants] contains 2 counterexamples (for correlating 0 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallStart (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallStart [inductive-invariants] contains 34 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.body%1%fcallEnd (C L3%6%bbentry, A line 9)
                L3%6%bbentry_Lfor.body%1%fcallEnd [inductive-invariants] contains 37 counterexamples (for correlating 6 bv exprs)
            L3%6%bbentry_Lfor.cond%1%bbentry (C L3%6%bbentry, A (line 8 at column 26))
                L3%6%bbentry_Lfor.cond%1%bbentry [inductive-invariants] contains 22 counterexamples (for correlating 5 bv exprs)
            E0%0%d_E0%0%d (C E0%0%d, A E0%0%d)
                E0%0%d_E0%0%d [inductive-invariants] contains 0 counterexamples (for correlating 0 bv exprs)
  DST PC -> [Local <-> SP version] mappings for alloca:

  DST PC -> [Local <-> SP version] mappings for dealloca:

</cg>
EQUIV equivalence check for function make_list. 301.34s, query:smt.: 159.283s (num_starts 846; 0.1883s/start), decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start), decide_hoare_triple_helper.: 294.594s (num_starts 693; 0.4251s/start)ftmap_run_pointsto_analysis.: 36.348s (num_starts 1148; 0.0317s/start)

Printing statistics:

timers:
decide_hoare_triple.ce.: 0s (num_starts 0; -nans/start)
compute_loop_hoisting_non_linear_exprs_at_pcpair.: 9e-06s (num_starts 9; 0.0000s/start)
update_dst_edge_for_local_allocations_and_deallocations.: 1.8e-05s (num_starts 12; 0.0000s/start)
compute_tfg_pred_eqclass.: 2e-05s (num_starts 7; 0.0000s/start)
prune_dst_memslots.: 2.2e-05s (num_starts 7; 0.0000s/start)
cg_compute_well_formedness_conditions_for_stack_pointer.: 2.7e-05s (num_starts 12; 0.0000s/start)
get_paths_with_matching_to_pc.: 2.9e-05s (num_starts 11; 0.0000s/start)
corr_graph_update_dst_to_src_submaps_for_cg_edge.: 4.1e-05s (num_starts 49; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd.: 6.4e-05s (num_starts 1; 0.0001s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry.: 6.5e-05s (num_starts 1; 0.0001s/start)
remove_complex_bv_exprs.: 0.000125s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart.: 0.000136s (num_starts 2; 0.0001s/start)
select_llvmvars_not_defined_on_from_pc_and_add_to_dst.: 0.000166s (num_starts 7; 0.0000s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000218s (num_starts 7; 0.0000s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd.: 0.000273s (num_starts 5; 0.0001s/start)
corr_graph_generate_local_sprel_expr_guesses_for_locals.: 0.000297s (num_starts 12; 0.0000s/start)
check_wfconds_on_edge.L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.000315s (num_starts 3; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000315s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-trivial.: 0.000316s (num_starts 1; 0.0003s/start)
prove_trivial.: 0.000317s (num_starts 356; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.000318s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00032s (num_starts 1; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);outgoing_edges_cover_all_possibilities..: 0.000333s (num_starts 1; 0.0003s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.post_dfa.: 0.000366s (num_starts 1; 0.0004s/start)
graph_edge_contains_unknown_function_call.: 0.00042s (num_starts 62; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallEnd.inductive-invariants.: 0.000429s (num_starts 2; 0.0002s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart.: 0.000456s (num_starts 8; 0.0001s/start)
sort_exprs_and_compute_bv_eqclass.: 0.000688s (num_starts 7; 0.0001s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{0,0}.: 0.000698s (num_starts 211; 0.0000s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.bvcover_weaken_till_arity_within_bound.: 0.000716s (num_starts 194; 0.0000s/start)
select_llvmvars_live_at_pc_and_add_to_dst.: 0.000728s (num_starts 7; 0.0001s/start)
compute_bv_bool_eqclass.: 0.000734s (num_starts 7; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000799s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned;-trivial.: 0.000801s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.000804s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000809s (num_starts 1; 0.0008s/start)
generate_region_agrees_with_memlabel_constraints_from_expr.: 0.00081s (num_starts 99; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-unsigned.: 0.000812s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-unsigned.: 0.000817s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000831s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed;-trivial.: 0.000833s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.000835s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.00084s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-signed.: 0.000842s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-signed.: 0.000848s (num_starts 1; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000856s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed;-trivial.: 0.000859s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.000861s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000866s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;ub-signed.: 0.000869s (num_starts 1; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);ub-signed.: 0.000875s (num_starts 1; 0.0009s/start)
pred_lhs_rhs_convert_memmask_to_select_for_symbols_and_locals.: 0.000982s (num_starts 693; 0.0000s/start)
alias_val_t::constructor_with_map_arg.: 0.000997s (num_starts 1220; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.001014s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.001015s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-trivial.: 0.001017s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.001019s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-trivial.: 0.001019s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.001023s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001042s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001046s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.001047s (num_starts 1; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001053s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.001056s (num_starts 1; 0.0011s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.001066s (num_starts 1; 0.0011s/start)
tfg_expr_contains_fcall_mem_on_incoming_edge.tfg.computeWP_for_pred_across_ec.: 0.001105s (num_starts 10; 0.0001s/start)
rdefs_locs_ssa_analysis::xfer_and_meet.: 0.001108s (num_starts 15; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.001159s (num_starts 1; 0.0012s/start)
get_sprel_map_pair.: 0.001275s (num_starts 99; 0.0000s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001316s (num_starts 1; 0.0013s/start)
ce_perform_memory_fuzzing.: 0.00138s (num_starts 1129; 0.0000s/start)
collect_dst_to_src_submap_preds.: 0.001416s (num_starts 693; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001436s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-trivial.: 0.001437s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001438s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001441s (num_starts 1; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001452s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-trivial.: 0.001461s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001463s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities.;-trivial.: 0.001468s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.001471s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);outgoing_edges_cover_all_possibilities..: 0.00148s (num_starts 1; 0.0015s/start)
removeMostPromising.: 0.001495s (num_starts 38; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001544s (num_starts 1; 0.0015s/start)
graph_ec_apply_trans_funs_helper.1.: 0.001544s (num_starts 9; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001549s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed;-trivial.: 0.00155s (num_starts 1; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.001554s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed;-trivial.: 0.001554s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.001556s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001561s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001564s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-signed.: 0.001567s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;lb-signed.: 0.001572s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-signed.: 0.001578s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);lb-signed.: 0.001582s (num_starts 1; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001637s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.001642s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.001646s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001656s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst-ineq-houdini-guess.: 0.001661s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.001672s (num_starts 2; 0.0008s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00169s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-trivial.: 0.001698s (num_starts 1; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.001702s (num_starts 1; 0.0017s/start)
get_path_wp_exprs_for_cg_invariant_inference.computeWP_for_pred_across_ec.: 0.001797s (num_starts 9; 0.0002s/start)
tfg_suffixpath_get_expr_helper.: 0.001801s (num_starts 33; 0.0001s/start)
interesting_wp_exprs_apply_trans_funs.: 0.001833s (num_starts 9; 0.0002s/start)
tfg_llvm_t::tfg_llvm_fill_remaining_llvm_to_source_mappings_using_avail_exprs.: 0.001854s (num_starts 1; 0.0019s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.: 0.001865s (num_starts 1; 0.0019s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_solve.: 0.001894s (num_starts 1; 0.0019s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002006s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002012s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.002012s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002028s (num_starts 2; 0.0010s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.before_initialize.: 0.002033s (num_starts 1; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.002038s (num_starts 2; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.002052s (num_starts 2; 0.0010s/start)
compute_region_agrees_with_memlabel_eqclass.: 0.002054s (num_starts 7; 0.0003s/start)
cg_with_asm_annotation::mark_graph_unstable.: 0.002094s (num_starts 3; 0.0007s/start)
tfg_llvm_t::tfg_llvm_populate_reaching_definitions.: 0.002117s (num_starts 1; 0.0021s/start)
tfg_llvm_t::tfg_llvm_populate_varname_lr_status.: 0.002202s (num_starts 1; 0.0022s/start)
get_uapprox_predicate_list_from_guarded_preds_and_graph_ec.: 0.002315s (num_starts 337; 0.0000s/start)
parse_yices_model.: 0.002343s (num_starts 1; 0.0023s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.002365s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-trivial.: 0.002391s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.002397s (num_starts 2; 0.0012s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002527s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear;-trivial.: 0.002533s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear;-trivial.: 0.002538s (num_starts 3; 0.0008s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.002554s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;linear.: 0.002561s (num_starts 3; 0.0009s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);linear.: 0.002577s (num_starts 3; 0.0009s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.: 0.002578s (num_starts 2; 0.0013s/start)
collect_aliasing_constaints_starting_at_pc_till_maximal_bbs.: 0.002793s (num_starts 31; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-trivial.: 0.002809s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.00281s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.002821s (num_starts 2; 0.0014s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.: 0.00283s (num_starts 1; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed;-trivial.: 0.002843s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.002849s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.002853s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-trivial.: 0.002859s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.002866s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.002874s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-signed.: 0.002876s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-signed.: 0.002893s (num_starts 2; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.0029s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.0029s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.002906s (num_starts 1; 0.0029s/start)
proof_query_is_trivial_helper.: 0.00291s (num_starts 717; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;abstract-memlabel-asserts-houdini-guess.: 0.002912s (num_starts 1; 0.0029s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 0.002923s (num_starts 1; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.00296s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.002985s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-trivial.: 0.002989s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.002996s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-trivial.: 0.002997s (num_starts 2; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-trivial.: 0.003004s (num_starts 2; 0.0015s/start)
get_path_wp_exprs_for_cg_invariant_inference.: 0.003154s (num_starts 7; 0.0005s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003217s (num_starts 3; 0.0011s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-trivial.: 0.003221s (num_starts 3; 0.0011s/start)
graph_get_reduced_graph_with_anchor_nodes_only.: 0.003314s (num_starts 13; 0.0003s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().graph_ec_apply_trans_funs_using_wp_fn.: 0.003398s (num_starts 19; 0.0002s/start)
pth_collect_preds_using_atom_func.: 0.003832s (num_starts 66; 0.0001s/start)
aliasing_constraints.get_region_agrees_with_memlabel_preds.: 0.003952s (num_starts 9; 0.0004s/start)
aliasing_constraints.get_region_agrees_with_memlabel_exprs.: 0.00396s (num_starts 108; 0.0000s/start)
get_maximal_basic_block_edge_list_starting_at_pc.: 0.003991s (num_starts 764; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.004176s (num_starts 2; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.004192s (num_starts 2; 0.0021s/start)
tfg_edge_composition_get_edge_cond_using_econd_fn.: 0.004414s (num_starts 98; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.004481s (num_starts 2; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 0.004498s (num_starts 2; 0.0022s/start)
corr_graph_enumerate_correlations.: 0.004567s (num_starts 11; 0.0004s/start)
parse_cvc4_model.: 0.004704s (num_starts 1; 0.0047s/start)
graph_add_location_slots_using_state_mem_acc_map.calling.compute_lr_status_for_expr.: 0.004832s (num_starts 296; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned;-trivial.: 0.004849s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.004852s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 0.004863s (num_starts 2; 0.0024s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-unsigned.: 0.004869s (num_starts 2; 0.0024s/start)
collect_assumes_around_edge.: 0.004916s (num_starts 12; 0.0004s/start)
tfg_edge_composition_get_assumes.: 0.004952s (num_starts 66; 0.0001s/start)
get_unrolled_loop_paths_from.: 0.004999s (num_starts 7; 0.0007s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed;-trivial.: 0.005033s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.005037s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.005061s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-signed.: 0.005066s (num_starts 2; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed;-trivial.: 0.005075s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.005082s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.005101s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess;-trivial.: 0.005113s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;lb-signed.: 0.005115s (num_starts 4; 0.0013s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.005119s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.005131s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst-ineq-houdini-guess.: 0.005136s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed;-trivial.: 0.005146s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.005151s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.005162s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;ub-signed.: 0.005167s (num_starts 2; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.005326s (num_starts 2; 0.0027s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.005808s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed;-trivial.: 0.005816s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-trivial.: 0.005819s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005835s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.005836s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.00584s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.005852s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-signed.: 0.005858s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;abstract-memlabel-asserts-houdini-guess.: 0.005864s (num_starts 2; 0.0029s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 0.005891s (num_starts 4; 0.0015s/start)
tfg_llvm_t::tfg_llvm_compute_pc_to_llvm_to_source_varname_map.: 0.006147s (num_starts 4; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.006466s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.006491s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.006492s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.006531s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst-ineq-houdini-guess.: 0.006563s (num_starts 4; 0.0016s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.006604s (num_starts 4; 0.0017s/start)
sp_version_relations_val_t::compute_transitive_closure.: 0.007071s (num_starts 732; 0.0000s/start)
identify_address_taken_local_variables.: 0.007391s (num_starts 3; 0.0025s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.: 0.007459s (num_starts 2; 0.0037s/start)
proof_query_is_trivial.: 0.007486s (num_starts 693; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-trivial.: 0.007752s (num_starts 5; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-trivial.: 0.007842s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.007859s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-trivial.: 0.007879s (num_starts 4; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.00789s (num_starts 4; 0.0020s/start)
get_maximal_basic_block_edge_list_ending_at_pc.: 0.008447s (num_starts 764; 0.0000s/start)
compute_loop_hoisting_select_exprs_at_pcpair.: 0.008583s (num_starts 9; 0.0010s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.00865s (num_starts 6; 0.0014s/start)
construct_linear_combination_exprs.: 0.008657s (num_starts 318; 0.0000s/start)
compute_interesting_exprs_for_invariant_inference_for_pc.: 0.008661s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-trivial.: 0.008677s (num_starts 6; 0.0014s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.008693s (num_starts 1; 0.0087s/start)
get_intersected_lr_status.: 0.008694s (num_starts 1148; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown;-trivial.: 0.008696s (num_starts 1; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.008698s (num_starts 1; 0.0087s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-trivial.: 0.008703s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;pred-type-unknown.: 0.008707s (num_starts 1; 0.0087s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.008969s (num_starts 5; 0.0018s/start)
generate_aliasing_constraints_from_expr.: 0.009084s (num_starts 1437; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-trivial.: 0.009215s (num_starts 6; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 0.009376s (num_starts 6; 0.0016s/start)
expr_is_hidden_reg.: 0.009617s (num_starts 11866; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-trivial.: 0.009684s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.009693s (num_starts 6; 0.0016s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-trivial.: 0.009701s (num_starts 11; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 0.009727s (num_starts 6; 0.0016s/start)
populate_lr_status_for_sprel_locs_map.calling.compute_lr_status_for_expr.: 0.009848s (num_starts 624; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear;-trivial.: 0.010017s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.010023s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 0.010047s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;linear.: 0.010056s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-trivial.: 0.010114s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.010122s (num_starts 4; 0.0025s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed;-trivial.: 0.010231s (num_starts 4; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.010237s (num_starts 4; 0.0026s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_expr_is_provable.: 0.010249s (num_starts 845; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.010264s (num_starts 4; 0.0026s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-signed.: 0.010277s (num_starts 4; 0.0026s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 0.010331s (num_starts 2; 0.0052s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.01081s (num_starts 6; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.01084s (num_starts 6; 0.0018s/start)
corr_graph::get_simplified_non_mem_assumes_helper.: 0.011845s (num_starts 723; 0.0000s/start)
ldr_decomposition.: 0.012295s (num_starts 194; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-trivial.: 0.012318s (num_starts 6; 0.0021s/start)
eqspace::smallest_point_cover_houdini_expects_stability_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.012392s (num_starts 224; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-trivial.: 0.012474s (num_starts 7; 0.0018s/start)
expr_is_callee_save_const.: 0.012607s (num_starts 11898; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-trivial.: 0.012808s (num_starts 6; 0.0021s/start)
cg_src_dst_tfg_copy.: 0.012812s (num_starts 2; 0.0064s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.01283s (num_starts 6; 0.0021s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.: 0.012929s (num_starts 2; 0.0065s/start)
bv_const_ref_map2expr_map.: 0.013076s (num_starts 318; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.013231s (num_starts 8; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.013271s (num_starts 8; 0.0017s/start)
update_dst_fcall_edge_using_src_fcall_edge.: 0.013437s (num_starts 2; 0.0067s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.013438s (num_starts 6; 0.0022s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-trivial.: 0.013493s (num_starts 8; 0.0017s/start)
graph_apply_trans_funs_on_aliasing_constraints.mem_alloc.computeWP_for_pred_across_ec.: 0.013663s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.013684s (num_starts 7; 0.0020s/start)
graph_apply_trans_funs_on_aliasing_constraints.addr_pred.computeWP_for_pred_across_ec.: 0.013755s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);abstract-memlabel-asserts-houdini-guess.: 0.013819s (num_starts 7; 0.0020s/start)
tfg::populate_loc_definedness.set_loc_definedness().: 0.014143s (num_starts 1149; 0.0000s/start)
bv_expr_pair_ranges_merge_adjacent.: 0.014259s (num_starts 979; 0.0000s/start)
corr_graph::get_simplified_non_mem_assumes.: 0.014263s (num_starts 723; 0.0000s/start)
eqspace::smallest_point_cover_houdini_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.014481s (num_starts 222; 0.0001s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 0.014491s (num_starts 3; 0.0048s/start)
graph_with_guessing_sync_preds.: 0.014732s (num_starts 693; 0.0000s/start)
graph_apply_trans_funs_on_aliasing_constraints.guard_pred.computeWP_for_pred_across_ec.: 0.015264s (num_starts 78; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-trivial.: 0.015438s (num_starts 4; 0.0039s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.015441s (num_starts 4; 0.0039s/start)
get_next_potential_correlations.: 0.015585s (num_starts 9; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-trivial.: 0.018067s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.018189s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.018236s (num_starts 8; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.018261s (num_starts 10; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed;-trivial.: 0.01833s (num_starts 10; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess;-trivial.: 0.018426s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.018427s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.018456s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst-ineq-houdini-guess.: 0.018475s (num_starts 4; 0.0046s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-signed.: 0.018504s (num_starts 10; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-trivial.: 0.018683s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.018694s (num_starts 6; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.019237s (num_starts 12; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.019296s (num_starts 12; 0.0016s/start)
aliasing_constraints.convert_to_expr.: 0.01934s (num_starts 845; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.019552s (num_starts 12; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.019867s (num_starts 12; 0.0017s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.019928s (num_starts 12; 0.0017s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.021616s (num_starts 9; 0.0024s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.022948s (num_starts 6; 0.0038s/start)
tfg::get_aliasing_constraints_for_edge.: 0.023191s (num_starts 273; 0.0001s/start)
set_result_and_counter_example.: 0.023893s (num_starts 846; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess;-trivial.: 0.023987s (num_starts 10; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);abstract-memlabel-asserts-houdini-guess.: 0.024205s (num_starts 10; 0.0024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed;-trivial.: 0.024211s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-trivial.: 0.024341s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-signed.: 0.024458s (num_starts 14; 0.0017s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess;-trivial.: 0.024908s (num_starts 14; 0.0018s/start)
expr_simplify_using_sprel_and_memlabel_maps.model.: 0.024959s (num_starts 4481; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);dst-ineq-houdini-guess.: 0.025158s (num_starts 14; 0.0018s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.026652s (num_starts 14; 0.0019s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-trivial.: 0.027196s (num_starts 8; 0.0034s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.027214s (num_starts 8; 0.0034s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-trivial.: 0.028045s (num_starts 20; 0.0014s/start)
sp_version_relations_val_t::generate_vals_from_gen_set.: 0.028226s (num_starts 10610; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-trivial.: 0.028433s (num_starts 14; 0.0020s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.02898s (num_starts 14; 0.0021s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.029544s (num_starts 18; 0.0016s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.030596s (num_starts 3; 0.0102s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.030627s (num_starts 3; 0.0102s/start)
segment_memory_and_perform_commonMEM_optimization.: 0.031137s (num_starts 845; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-trivial.: 0.031455s (num_starts 18; 0.0017s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 0.032562s (num_starts 6; 0.0054s/start)
predicate_canonicalized.: 0.033328s (num_starts 318; 0.0001s/start)
determinize_value_expr_map.: 0.035321s (num_starts 37078; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.035962s (num_starts 16; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 0.036041s (num_starts 16; 0.0023s/start)
graph_to_stream.: 0.036229s (num_starts 4; 0.0091s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-trivial.: 0.036511s (num_starts 12; 0.0030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.03654s (num_starts 12; 0.0030s/start)
get_sprel_map_pair_at_pc.: 0.037302s (num_starts 337; 0.0001s/start)
graph_edge_composition_get_to_state_using_to_state_fn.: 0.037794s (num_starts 8478; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-trivial.: 0.039304s (num_starts 4; 0.0098s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-trivial.: 0.03931s (num_starts 4; 0.0098s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.03942s (num_starts 4; 0.0099s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-trivial.: 0.039447s (num_starts 22; 0.0018s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.039449s (num_starts 4; 0.0099s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-trivial.: 0.040751s (num_starts 20; 0.0020s/start)
tfg::populate_loc_definedness.post_dfa.: 0.040781s (num_starts 1149; 0.0000s/start)
graph_locs_add_exvregs_for_edge.: 0.041805s (num_starts 8933; 0.0000s/start)
gen_pred_from_coeff_row.simplify.: 0.041975s (num_starts 318; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-trivial.: 0.042016s (num_starts 18; 0.0023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.0447s (num_starts 24; 0.0019s/start)
graph_locs_add_local_vars_for_edge.: 0.044819s (num_starts 8933; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-trivial.: 0.045989s (num_starts 20; 0.0023s/start)
compute_sprel_relations.: 0.046835s (num_starts 1148; 0.0000s/start)
expr_represents_llvm_undef.: 0.047689s (num_starts 11913; 0.0000s/start)
graph_locs_add_all_exvregs.: 0.049856s (num_starts 1148; 0.0000s/start)
ldr_decompose_and_linear_solve.: 0.050596s (num_starts 194; 0.0003s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-trivial.: 0.050632s (num_starts 28; 0.0018s/start)
propagate_sprels.: 0.051073s (num_starts 1148; 0.0000s/start)
graph_locs_add_all_local_vars.: 0.052744s (num_starts 1148; 0.0000s/start)
lr_status_meet.: 0.054195s (num_starts 9059; 0.0000s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.054283s (num_starts 29; 0.0019s/start)
get_unrolled_paths_from.: 0.055521s (num_starts 55; 0.0010s/start)
graph_locs_add_all_specvars.: 0.055557s (num_starts 1148; 0.0000s/start)
bv_linear_solve.: 0.055859s (num_starts 194; 0.0003s/start)
query:bv_solve.: 0.056899s (num_starts 194; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-trivial.: 0.057839s (num_starts 32; 0.0018s/start)
get_lr_status_for_loc_ids.: 0.058808s (num_starts 2448; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-trivial.: 0.059305s (num_starts 30; 0.0020s/start)
expr_simplify_using_sprel_and_memlabel_maps.sprel.: 0.059607s (num_starts 4481; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-trivial.: 0.063218s (num_starts 30; 0.0021s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-trivial.: 0.065357s (num_starts 8; 0.0082s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.06539s (num_starts 8; 0.0082s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-trivial.: 0.065475s (num_starts 8; 0.0082s/start)
sp_version_relations_val_t::meet.: 0.066307s (num_starts 119923; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.068489s (num_starts 16; 0.0043s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.068652s (num_starts 16; 0.0043s/start)
simplify_bv_add_atomic.: 0.069966s (num_starts 3500; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.cond%1%bbentry.inductive-invariants.: 0.070439s (num_starts 22; 0.0032s/start)
def_analysis::xfer_and_meet.: 0.070479s (num_starts 8942; 0.0000s/start)
bv_solve_returning_intermediate_structures.: 0.074054s (num_starts 194; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.074777s (num_starts 34; 0.0022s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.076048s (num_starts 22; 0.0035s/start)
ssa_vars_renaming_analysis::xfer_and_meet.: 0.07736s (num_starts 8942; 0.0000s/start)
corr_graph::get_aliasing_constraints_for_edge_helper.: 0.077709s (num_starts 53; 0.0015s/start)
corr_graph::get_aliasing_constraints_for_edge.: 0.077843s (num_starts 53; 0.0015s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078447s (num_starts 1; 0.0784s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078459s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078466s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.078475s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;abstract-memlabel-asserts-houdini-guess.: 0.07848s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.07849s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.078535s (num_starts 1; 0.0785s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.078544s (num_starts 1; 0.0785s/start)
recomputed_preds_would_be_different_from_current_preds.: 0.080363s (num_starts 1102; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080729s (num_starts 1; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080746s (num_starts 1; 0.0807s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.080754s (num_starts 1; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.080764s (num_starts 1; 0.0808s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst-ineq-houdini-guess.: 0.080769s (num_starts 1; 0.0808s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.08078s (num_starts 1; 0.0808s/start)
graph_locs_add_all_llvmvars.: 0.081954s (num_starts 1148; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.082975s (num_starts 1; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.082983s (num_starts 1; 0.0830s/start)
decide_hoare_triple_helper_get_aliasing_cons.: 0.083054s (num_starts 55; 0.0015s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-trivial.: 0.084189s (num_starts 42; 0.0020s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-trivial.: 0.0847s (num_starts 44; 0.0019s/start)
counter_example_satisfies_preds.: 0.085105s (num_starts 1314; 0.0001s/start)
corr_graph_add_correlation_and_create_new_correl_entry.after_corr_graph_add_correlation.: 0.085219s (num_starts 10; 0.0085s/start)
pth_collect_preds_using_atom_func_and_wp_fn.operator().: 0.085487s (num_starts 944; 0.0001s/start)
bvsolve_cache_query.miss1.: 0.086065s (num_starts 194; 0.0004s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.086103s (num_starts 9; 0.0096s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess;-trivial.: 0.086766s (num_starts 20; 0.0043s/start)
collect_aliasing_constraints_around_path_helper.: 0.087346s (num_starts 301; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);dst-ineq-houdini-guess.: 0.087454s (num_starts 20; 0.0044s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-trivial.: 0.088285s (num_starts 28; 0.0032s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.088667s (num_starts 1; 0.0887s/start)
collect_aliasing_constraints_around_path.: 0.089423s (num_starts 195; 0.0005s/start)
bvsolve_cache_query.: 0.091673s (num_starts 194; 0.0005s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 0.094019s (num_starts 3; 0.0313s/start)
create_closure_matrix.: 0.095664s (num_starts 14245; 0.0000s/start)
pth_collect_preds_using_atom_func_and_wp_fn.: 0.096149s (num_starts 1478; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096266s (num_starts 1; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.096273s (num_starts 1; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.096284s (num_starts 1; 0.0963s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;-dst-edgecond-implies-src-edgecond.: 0.096291s (num_starts 1; 0.0963s/start)
pth_collect_simplified_preds_using_atom_func.: 0.099936s (num_starts 1412; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-trivial.: 0.10298s (num_starts 30; 0.0034s/start)
expr_contains_only_constants_or_sp_versions_or_count_sort_vars.: 0.104274s (num_starts 12692; 0.0000s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_Lfor.body%1%fcallStart.inductive-invariants.: 0.104463s (num_starts 13; 0.0080s/start)
populate_simplified_to_state.: 0.105363s (num_starts 1149; 0.0001s/start)
gen_pred_from_coeff_row.: 0.106824s (num_starts 318; 0.0003s/start)
compute_preds_for_bv_points.: 0.108637s (num_starts 80; 0.0014s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recompute_preds_for_points.: 0.109098s (num_starts 108; 0.0010s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-trivial.: 0.110777s (num_starts 42; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-trivial.: 0.111035s (num_starts 46; 0.0024s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-trivial.: 0.119875s (num_starts 40; 0.0030s/start)
solve_for_bv_points.: 0.128828s (num_starts 194; 0.0007s/start)
check_node_stability_after_CE_addition.: 0.136736s (num_starts 275; 0.0005s/start)
collect_assumes_around_path_helper.: 0.141287s (num_starts 764; 0.0002s/start)
graph_with_paths::collect_assumes_around_path.: 0.144316s (num_starts 764; 0.0002s/start)
graph_locs_add_all_indvars.: 0.150846s (num_starts 1148; 0.0001s/start)
tfg::collect_assumes_around_edge.: 0.15434s (num_starts 17875; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156847s (num_starts 1; 0.1568s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156855s (num_starts 1; 0.1569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156867s (num_starts 1; 0.1569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities.;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.156875s (num_starts 1; 0.1569s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.156887s (num_starts 1; 0.1569s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);outgoing_edges_cover_all_possibilities..: 0.1569s (num_starts 1; 0.1569s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;outgoing_edges_cover_all_possibilities..: 0.160139s (num_starts 4; 0.0400s/start)
decide_hoare_triple_helper;per-query-type;outgoing_edges_cover_all_possibilities..: 0.160153s (num_starts 4; 0.0400s/start)
populate_locid2expr_map.: 0.163311s (num_starts 1148; 0.0001s/start)
eqspace::smallest_point_cover_bv_t<eqspace::pcpair, eqspace::corr_graph_node, eqspace::corr_graph_edge, eqspace::predicate>.recomputed_preds_would_be_different_from_current_preds.: 0.165784s (num_starts 194; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166009s (num_starts 2; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.16602s (num_starts 2; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.16604s (num_starts 2; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst-ineq-houdini-guess.: 0.166054s (num_starts 2; 0.0830s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166869s (num_starts 2; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.166882s (num_starts 2; 0.0834s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.166901s (num_starts 2; 0.0835s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;abstract-memlabel-asserts-houdini-guess.: 0.166911s (num_starts 2; 0.0835s/start)
add_fresh_counterexample_at_pc_and_propagate.L0%0%d_L0%0%d.inductive-invariants.: 0.172055s (num_starts 48; 0.0036s/start)
decide_hoare_triple_helper;per-query-type;linear;-trivial.: 0.174792s (num_starts 71; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177967s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.177992s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.178006s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.178036s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-unsigned.: 0.178046s (num_starts 2; 0.0890s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-unsigned.: 0.178073s (num_starts 2; 0.0890s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.src_tfg.computeWP_for_pred_across_ec.: 0.198038s (num_starts 766; 0.0003s/start)
create_sp_version_relations_lattice_at_pc.: 0.211402s (num_starts 14245; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-trivial.: 0.216565s (num_starts 70; 0.0031s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217324s (num_starts 1; 0.2173s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.217332s (num_starts 1; 0.2173s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.217349s (num_starts 1; 0.2173s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;-dst-edgecond-implies-src-edgecond.: 0.217356s (num_starts 1; 0.2174s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-trivial.: 0.220394s (num_starts 118; 0.0019s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226503s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226509s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.226519s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.22652s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.22653s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;pred-type-unknown.: 0.226541s (num_starts 1; 0.2265s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d);pred-type-unknown.: 0.226558s (num_starts 1; 0.2266s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d).: 0.226567s (num_starts 1; 0.2266s/start)
populate_dominator_and_postdominator_relations.: 0.227921s (num_starts 1148; 0.0002s/start)
compute_expr_eqclasses_at_pc.: 0.231934s (num_starts 7; 0.0331s/start)
expr_simplify_using_sprel_and_memlabel_maps.: 0.232886s (num_starts 4481; 0.0001s/start)
graph_with_guessing_add_node_invariants_top_or_boundary.: 0.234761s (num_starts 10; 0.0235s/start)
cg_add_node.: 0.236799s (num_starts 10; 0.0237s/start)
expr_substitute_using_available_exprs_submap.: 0.238382s (num_starts 4093; 0.0001s/start)
expr_try_breaking_bvextracts_to_fresh_vars.: 0.242237s (num_starts 845; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.244481s (num_starts 3; 0.0815s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 0.244631s (num_starts 3; 0.0815s/start)
rdefs_vars_ssa_analysis::xfer_and_meet.: 0.245403s (num_starts 10401; 0.0000s/start)
invariant_inference_xfer.dst-ineq.from.L0%0%d_L0%0%d.: 0.247422s (num_starts 3; 0.0825s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.249796s (num_starts 3; 0.0833s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 0.24994s (num_starts 3; 0.0833s/start)
../../include/graph/smallest_point_cover.h.smallest_point_cover_add_point_using_CE.: 0.255584s (num_starts 1296; 0.0002s/start)
create_new_corr_graph_edge.new_node.: 0.25897s (num_starts 9; 0.0288s/start)
graph_edge_composition_get_simplified_edge_cond.: 0.259096s (num_starts 17005; 0.0000s/start)
create_new_corr_graph_edge.: 0.259645s (num_starts 12; 0.0216s/start)
graph_add_location_slots_using_state_mem_acc_map.: 0.28641s (num_starts 10538; 0.0000s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-trivial.: 0.291505s (num_starts 96; 0.0030s/start)
lhs_set_sort.: 0.294526s (num_starts 337; 0.0009s/start)
tfg_llvm_t::tfg_postprocess_after_pointsto_analysis.: 0.300976s (num_starts 1; 0.3010s/start)
expr_linear_relation_holds::visit.var.: 0.302188s (num_starts 11977; 0.0000s/start)
src_tfg_counter_example_translate_on_edge_composition.delta{1,0}.: 0.306069s (num_starts 61; 0.0050s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallStart.inductive-invariants.: 0.306132s (num_starts 34; 0.0090s/start)
src_tfg_counter_example_translate_on_edge_composition.: 0.308508s (num_starts 272; 0.0011s/start)
populate_memlabel_map.visit1.calling.compute_lr_status_for_expr.: 0.320451s (num_starts 2752; 0.0001s/start)
tfg::populate_loc_definedness.before_solve.: 0.33171s (num_starts 1149; 0.0003s/start)
graph_visit_exprs_and_keys.: 0.339195s (num_starts 1148; 0.0003s/start)
expr_try_converting_unaliased_memslots_to_fresh_vars.: 0.361911s (num_starts 845; 0.0004s/start)
populate_simplified_assets.: 0.364976s (num_starts 2298; 0.0002s/start)
counter_example_falsifies_preds.: 0.377252s (num_starts 130; 0.0029s/start)
compute_ssa_vars_renaming_map.: 0.383383s (num_starts 1148; 0.0003s/start)
graph_with_guessing_relax_dst_memlabels_on_ec_for_corr_graph.: 0.393584s (num_starts 26; 0.0151s/start)
populate_transitive_closure.: 0.410055s (num_starts 3478; 0.0001s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.cond%1%bbentry.inductive-invariants.: 0.415972s (num_starts 48; 0.0087s/start)
propagate_nodece_across_edge.: 0.419357s (num_starts 60; 0.0070s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.dst_tfg.computeWP_for_pred_across_ec.: 0.419394s (num_starts 766; 0.0005s/start)
tfg::populate_loc_definedness.before_initialize.: 0.421996s (num_starts 1149; 0.0004s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424669s (num_starts 2; 0.2123s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.424714s (num_starts 2; 0.2124s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436535s (num_starts 2; 0.2183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.436557s (num_starts 2; 0.2183s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 0.436599s (num_starts 2; 0.2183s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-unsigned.: 0.43661s (num_starts 2; 0.2183s/start)
graph_visit_exprs.: 0.438887s (num_starts 2295; 0.0002s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-trivial.: 0.440869s (num_starts 158; 0.0028s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.443064s (num_starts 12; 0.0369s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.450636s (num_starts 3; 0.1502s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 0.451823s (num_starts 4; 0.1130s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-signed.: 0.4535s (num_starts 16; 0.0283s/start)
tfg::populate_loc_definedness.: 0.453855s (num_starts 1149; 0.0004s/start)
counter_example_evaluate_preds.: 0.459015s (num_starts 1444; 0.0003s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 0.477547s (num_starts 9; 0.0531s/start)
populate_locs_potentially_modified_on_edge.: 0.492757s (num_starts 1149; 0.0004s/start)
evaluate_function_call.: 0.512462s (num_starts 97; 0.0053s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.521796s (num_starts 3; 0.1739s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.521842s (num_starts 3; 0.1739s/start)
add_fresh_counterexample_at_pc_and_propagate.L3%6%bbentry_Lfor.body%1%fcallEnd.inductive-invariants.: 0.530807s (num_starts 6; 0.0885s/start)
avail_exprs_val_t::generate_vals_from_gen_set.: 0.532944s (num_starts 10610; 0.0001s/start)
graph_per_loc_dfa_val_t<avail_exprs_val_t>::meet.: 0.542809s (num_starts 10610; 0.0001s/start)
tfg_relax_pointsto_vals_on_edge.: 0.569924s (num_starts 72; 0.0079s/start)
compute_vars_reaching_definitions.: 0.584758s (num_starts 1148; 0.0005s/start)
query:convert_from_z3.: 0.612837s (num_starts 19726; 0.0000s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.626433s (num_starts 1; 0.6264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.626435s (num_starts 1; 0.6264s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.626444s (num_starts 1; 0.6264s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;dst_edge_composition_proves_false.: 0.626449s (num_starts 1; 0.6264s/start)
graph_ec_apply_trans_funs_helper.0.: 0.630257s (num_starts 1795; 0.0004s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.631689s (num_starts 1; 0.6317s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.63169s (num_starts 1; 0.6317s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.631698s (num_starts 1; 0.6317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1;dst_edge_composition_proves_false.: 0.631704s (num_starts 1; 0.6317s/start)
graph_ec_apply_trans_funs_helper.: 0.638558s (num_starts 1804; 0.0004s/start)
graph_ec_apply_trans_funs_using_wp_fn.: 0.643781s (num_starts 1804; 0.0004s/start)
computeWP_for_pred_across_ec.graph_ec_apply_trans_funs_using_wp_fn.: 0.647474s (num_starts 1785; 0.0004s/start)
computeWP_for_pred_across_ec.: 0.653673s (num_starts 1785; 0.0004s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655445s (num_starts 1; 0.6554s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655447s (num_starts 1; 0.6554s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655451s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.655453s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.655464s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;dst_edge_composition_proves_false.: 0.655468s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.655478s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(epsilon).: 0.655482s (num_starts 1; 0.6555s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.665913s (num_starts 1; 0.6659s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.665916s (num_starts 1; 0.6659s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1.E1;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.665928s (num_starts 1; 0.6659s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1.E1;-dst-edgecond-implies-src-edgecond.: 0.665933s (num_starts 1; 0.6659s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.671564s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.671565s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.671568s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.671569s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.671575s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list;dst_edge_composition_proves_false.: 0.671578s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(epsilon);dst_edge_composition_proves_false.: 0.671582s (num_starts 1; 0.6716s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(epsilon).: 0.671924s (num_starts 2; 0.3360s/start)
query:convert_to_z3.: 0.688772s (num_starts 19726; 0.0000s/start)
avail_exprs_create_submap.: 0.727421s (num_starts 31830; 0.0000s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.739034s (num_starts 4; 0.1848s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.739258s (num_starts 4; 0.1848s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.740445s (num_starts 1; 0.7404s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.740451s (num_starts 1; 0.7405s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.740453s (num_starts 1; 0.7405s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.742171s (num_starts 2; 0.3711s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;ub-unsigned.: 0.742183s (num_starts 2; 0.3711s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);ub-unsigned.: 0.7422s (num_starts 2; 0.3711s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.762156s (num_starts 2; 0.3811s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.762261s (num_starts 2; 0.3811s/start)
src_dst_cg_path_tuple_apply_trans_funs_on_pred.: 0.76986s (num_starts 766; 0.0010s/start)
edge_composition_apply_trans_funs_on_pred.: 0.779937s (num_starts 693; 0.0011s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.79484s (num_starts 4; 0.1987s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::sp_version_relations_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 0.800923s (num_starts 10610; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.80656s (num_starts 1; 0.8066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.806563s (num_starts 1; 0.8066s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.806576s (num_starts 1; 0.8066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1;dst_edge_composition_proves_false.: 0.80658s (num_starts 1; 0.8066s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811592s (num_starts 1; 0.8116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.811594s (num_starts 1; 0.8116s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 0.811606s (num_starts 1; 0.8116s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;dst_edge_composition_proves_false.: 0.811611s (num_starts 1; 0.8116s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.830005s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.830006s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.830006s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.830007s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.830021s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;dst_edge_composition_proves_false.: 0.830027s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon);dst_edge_composition_proves_false.: 0.83004s (num_starts 1; 0.8300s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(epsilon).: 0.831529s (num_starts 2; 0.4158s/start)
populate_auxilliary_structures_dependent_on_locs.: 0.861789s (num_starts 1149; 0.0008s/start)
populate_branch_affecting_locs.: 0.888301s (num_starts 1149; 0.0008s/start)
decide_hoare_triple_helper;-trivial.: 0.888336s (num_starts 356; 0.0025s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896148s (num_starts 1; 0.8961s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896155s (num_starts 1; 0.8962s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.896158s (num_starts 1; 0.8962s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.899061s (num_starts 3; 0.2997s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;lb-signed.: 0.899076s (num_starts 3; 0.2997s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);lb-signed.: 0.899104s (num_starts 3; 0.2997s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.930669s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.930675s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.930678s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.930691s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;false-predicate.: 0.930696s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);false-predicate.: 0.930702s (num_starts 1; 0.9307s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.932001s (num_starts 5; 0.1864s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 0.932128s (num_starts 5; 0.1864s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.932219s (num_starts 5; 0.1864s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-dst-edgecond-implies-src-edgecond.: 0.932294s (num_starts 5; 0.1865s/start)
check_wfconds_on_edge.L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry.: 0.959487s (num_starts 5; 0.1919s/start)
check_wfconds_on_edge.L0%0%d_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d.: 0.99844s (num_starts 2; 0.4992s/start)
graph_identify_back_edges.: 1.01131s (num_starts 9728; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02002s (num_starts 1; 1.0200s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02003s (num_starts 1; 1.0200s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.02003s (num_starts 1; 1.0200s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 1.02005s (num_starts 1; 1.0201s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;false-predicate.: 1.02006s (num_starts 1; 1.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);false-predicate.: 1.02007s (num_starts 1; 1.0201s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03105s (num_starts 1; 1.0311s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03106s (num_starts 1; 1.0311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.03107s (num_starts 1; 1.0311s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.039s (num_starts 5; 0.2078s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;ub-unsigned.: 1.03902s (num_starts 5; 0.2078s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04273s (num_starts 1; 1.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04273s (num_starts 1; 1.0427s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.04273s (num_starts 1; 1.0427s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 1.04275s (num_starts 1; 1.0427s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;false-predicate.: 1.04276s (num_starts 1; 1.0428s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);false-predicate.: 1.04277s (num_starts 1; 1.0428s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 1.04361s (num_starts 7; 0.1491s/start)
graph_identify_natural_loops.: 1.05891s (num_starts 9728; 0.0001s/start)
lhs_set_eliminate_constructs_that_the_solver_cannot_handle.: 1.06234s (num_starts 337; 0.0032s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09428s (num_starts 1; 1.0943s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09429s (num_starts 1; 1.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.09429s (num_starts 1; 1.0943s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 1.09732s (num_starts 3; 0.3658s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;ub-unsigned.: 1.09733s (num_starts 3; 0.3658s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);ub-unsigned.: 1.09736s (num_starts 3; 0.3658s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.1159s (num_starts 1; 1.1159s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.11591s (num_starts 1; 1.1159s/start)
find_dominators.: 1.11751s (num_starts 12024; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 1.13554s (num_starts 13; 0.0873s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);ub-unsigned.: 1.14052s (num_starts 15; 0.0760s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 1.17182s (num_starts 6; 0.1953s/start)
edge_update_memlabel_map_for_mlvars.populate_memlabel_map.: 1.20849s (num_starts 10610; 0.0001s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22376s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22376s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.22377s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 1.22379s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;false-predicate.: 1.22379s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);false-predicate.: 1.2238s (num_starts 1; 1.2238s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.25812s (num_starts 2; 0.6291s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.25817s (num_starts 2; 0.6291s/start)
collect_inductive_preds_around_path.: 1.26846s (num_starts 693; 0.0018s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27036s (num_starts 1; 1.2704s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27036s (num_starts 1; 1.2704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.27037s (num_starts 1; 1.2704s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 1.28053s (num_starts 5; 0.2561s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;lb-signed.: 1.28055s (num_starts 5; 0.2561s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31543s (num_starts 1; 1.3154s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31544s (num_starts 1; 1.3154s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.31545s (num_starts 1; 1.3154s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-signed.: 1.31678s (num_starts 21; 0.0627s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 1.31828s (num_starts 2; 0.6591s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;lb-unsigned.: 1.31829s (num_starts 2; 0.6591s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);lb-unsigned.: 1.32808s (num_starts 8; 0.1660s/start)
prove_spawn_and_join.eliminate_constructs_that_the_solver_cannot_handle1.: 1.3373s (num_starts 337; 0.0040s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 1.34609s (num_starts 6; 0.2243s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35733s (num_starts 8; 0.1697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.35741s (num_starts 8; 0.1697s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.35756s (num_starts 8; 0.1697s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-unsigned.: 1.36735s (num_starts 14; 0.0977s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37281s (num_starts 1; 1.3728s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37282s (num_starts 1; 1.3728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.37282s (num_starts 1; 1.3728s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 1.37386s (num_starts 2; 0.6869s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;lb-unsigned.: 1.37387s (num_starts 2; 0.6869s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);lb-unsigned.: 1.37389s (num_starts 2; 0.6869s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.38379s (num_starts 1; 1.3838s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.3838s (num_starts 1; 1.3838s/start)
invariant_inference_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 1.38977s (num_starts 7; 0.1985s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.: 1.39175s (num_starts 1; 1.3918s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 1.39928s (num_starts 5; 0.2799s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;ub-unsigned.: 1.39931s (num_starts 5; 0.2799s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42427s (num_starts 2; 0.7121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42428s (num_starts 2; 0.7121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.42428s (num_starts 2; 0.7121s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 1.4243s (num_starts 2; 0.7121s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;false-predicate.: 1.42431s (num_starts 2; 0.7122s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);false-predicate.: 1.42432s (num_starts 2; 0.7122s/start)
put_smtlib_string_in_file.: 1.44748s (num_starts 1692; 0.0009s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.45386s (num_starts 8; 0.1817s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;-dst-edgecond-implies-src-edgecond.: 1.45411s (num_starts 8; 0.1818s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47258s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.47259s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.4726s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 1.47262s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;false-predicate.: 1.47262s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);false-predicate.: 1.47263s (num_starts 2; 0.7363s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57311s (num_starts 8; 0.1966s/start)
compute_z3_expr.: 1.57321s (num_starts 20572; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.57328s (num_starts 8; 0.1967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.57344s (num_starts 8; 0.1967s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);dst-ineq-houdini-guess.: 1.57363s (num_starts 8; 0.1967s/start)
add_fresh_counterexample_at_pc_and_propagate.: 1.6016s (num_starts 173; 0.0093s/start)
decide_hoare_triple_with_alias_cons.ce.: 1.60699s (num_starts 616; 0.0026s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61814s (num_starts 2; 0.8091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);dst_edge_composition_proves_false.: 1.61821s (num_starts 2; 0.8091s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61866s (num_starts 8; 0.2023s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.61881s (num_starts 8; 0.2024s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 1.61898s (num_starts 8; 0.2024s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-signed.: 1.61916s (num_starts 8; 0.2024s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.: 1.63225s (num_starts 3; 0.5441s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.64918s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.64918s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.64919s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.6492s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;dst_edge_composition_proves_false.: 1.64921s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 1.64922s (num_starts 1; 1.6492s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.65174s (num_starts 9; 0.1835s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.68164s (num_starts 1; 1.6816s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.68165s (num_starts 1; 1.6817s/start)
eqspace::graph_per_loc_dfa_val_t<eqspace::avail_exprs_val_t>::ftmap_xfer_and_meet_flow_insensitive.: 1.69124s (num_starts 10610; 0.0002s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.71131s (num_starts 19; 0.0901s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);linear.: 1.72151s (num_starts 23; 0.0748s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;dst-ineq-houdini-guess.: 1.74078s (num_starts 37; 0.0470s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 1.74219s (num_starts 6; 0.2904s/start)
tfg_preprocess.dst.ind.make_list.: 1.75933s (num_starts 1146; 0.0015s/start)
tfg::tfg_preprocess.: 1.76239s (num_starts 1146; 0.0015s/start)
corr_graph::add_edge().: 1.78325s (num_starts 12; 0.1486s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.: 1.78798s (num_starts 3; 0.5960s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.79367s (num_starts 10; 0.1794s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);lb-unsigned.: 1.79431s (num_starts 10; 0.1794s/start)
dst_tfg_counter_example_translate_on_edge_composition.: 1.84464s (num_starts 418; 0.0044s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 1.89839s (num_starts 12; 0.1582s/start)
query:simplify-z3.: 1.92039s (num_starts 39624; 0.0000s/start)
do_ssa_transformation.: 2.01146s (num_starts 1148; 0.0018s/start)
compute_new_lr_status_on_locs.calling.compute_lr_status_for_expr.: 2.0148s (num_starts 4866; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;dst-ineq-houdini-guess.: 2.01971s (num_starts 52; 0.0388s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.02025s (num_starts 4; 0.5051s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(epsilon).: 2.02045s (num_starts 4; 0.5051s/start)
compute_new_lr_status_on_locs.loc_lr_status.simplify_and_compute_lr_status.: 2.02412s (num_starts 4866; 0.0004s/start)
decide_hoare_triple_helper;per-query-type;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04338s (num_starts 10; 0.2043s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.04346s (num_starts 10; 0.2043s/start)
corr_graph_create_and_add_cg_edge_composition_using_src_and_dst_fp.: 2.04673s (num_starts 12; 0.1706s/start)
corr_graph_add_correlation.: 2.04714s (num_starts 12; 0.1706s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-signed.: 2.07545s (num_starts 28; 0.0741s/start)
decide_hoare_triple_helper;per-query-type;ub-signed.: 2.10223s (num_starts 42; 0.0501s/start)
corr_graph_add_correlation_and_create_new_correl_entry.: 2.1326s (num_starts 12; 0.1777s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.: 2.18136s (num_starts 2; 1.0907s/start)
invariant_inference_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 2.1893s (num_starts 7; 0.3128s/start)
counter_example_translate_on_edge_composition_helper.: 2.21252s (num_starts 1277; 0.0017s/start)
compute_lr_status_for_expr.: 2.25197s (num_starts 8538; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.43329s (num_starts 11; 0.2212s/start)
decide_hoare_triple_helper;per-query-type;-dst-edgecond-implies-src-edgecond.: 2.43377s (num_starts 11; 0.2213s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.50167s (num_starts 8; 0.3127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.50186s (num_starts 8; 0.3127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 2.50203s (num_starts 8; 0.3128s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);abstract-memlabel-asserts-houdini-guess.: 2.50218s (num_starts 8; 0.3128s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.51397s (num_starts 7; 0.3591s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(epsilon).: 2.51441s (num_starts 7; 0.3592s/start)
compute_regions.: 2.57758s (num_starts 9728; 0.0003s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.58113s (num_starts 6; 0.4302s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(epsilon).: 2.583s (num_starts 7; 0.3690s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.58478s (num_starts 9; 0.2872s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;abstract-memlabel-asserts-houdini-guess.: 2.61422s (num_starts 23; 0.1137s/start)
compute_new_lr_status_on_locs.: 2.63625s (num_starts 10610; 0.0002s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.65696s (num_starts 5; 0.5314s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.65699s (num_starts 5; 0.5314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.657s (num_starts 5; 0.5314s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 2.66007s (num_starts 7; 0.3800s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;linear.: 2.66009s (num_starts 7; 0.3800s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);linear.: 2.66014s (num_starts 7; 0.3800s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.74332s (num_starts 4; 0.6858s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.74336s (num_starts 4; 0.6858s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.74338s (num_starts 4; 0.6858s/start)
check_wfconds_on_edge.: 2.7544s (num_starts 31; 0.0889s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.80593s (num_starts 1; 2.8059s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.80593s (num_starts 1; 2.8059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.80593s (num_starts 1; 2.8059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.80594s (num_starts 1; 2.8059s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 2.80595s (num_starts 1; 2.8059s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;dst_edge_composition_proves_false.: 2.80595s (num_starts 1; 2.8060s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallEnd;(epsilon);dst_edge_composition_proves_false.: 2.80596s (num_starts 1; 2.8060s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallEnd;(epsilon).: 2.80597s (num_starts 1; 2.8060s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.82999s (num_starts 12; 0.2358s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 2.85955s (num_starts 4; 0.7149s/start)
decide_hoare_triple_helper;per-query-type;abstract-memlabel-asserts-houdini-guess.: 2.87163s (num_starts 32; 0.0897s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 2.88635s (num_starts 18; 0.1604s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 2.9885s (num_starts 9; 0.3321s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14747s (num_starts 16; 0.1967s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14766s (num_starts 16; 0.1967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.14775s (num_starts 16; 0.1967s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 3.14807s (num_starts 16; 0.1968s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);lb-signed.: 3.14851s (num_starts 16; 0.1968s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.18316s (num_starts 6; 0.5305s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.18319s (num_starts 6; 0.5305s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.19613s (num_starts 12; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;linear.: 3.19618s (num_starts 12; 0.2663s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;lb-signed.: 3.20786s (num_starts 46; 0.0697s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.27174s (num_starts 7; 0.4674s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 3.29036s (num_starts 15; 0.2194s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.37446s (num_starts 5; 0.6749s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.37453s (num_starts 5; 0.6749s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 3.37456s (num_starts 5; 0.6749s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 3.38338s (num_starts 11; 0.3076s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;linear.: 3.38342s (num_starts 11; 0.3076s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);linear.: 3.38351s (num_starts 11; 0.3076s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.: 3.41047s (num_starts 2; 1.7052s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 3.53694s (num_starts 4; 0.8842s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.53695s (num_starts 4; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown;-all-proof-path-optimizations.: 3.53697s (num_starts 4; 0.8842s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 3.53697s (num_starts 4; 0.8842s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.58214s (num_starts 7; 0.5117s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 3.63065s (num_starts 2; 1.8153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 3.67549s (num_starts 26; 0.1414s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 3.85824s (num_starts 2; 1.9291s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 3.93322s (num_starts 36; 0.1093s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 3.97233s (num_starts 7; 0.5675s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.06366s (num_starts 5; 0.8127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.06369s (num_starts 5; 0.8127s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 4.09107s (num_starts 13; 0.3147s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;linear.: 4.09111s (num_starts 13; 0.3147s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.24326s (num_starts 5; 0.8487s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);ub-unsigned.: 4.2859s (num_starts 23; 0.1863s/start)
invariant_inference_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 4.30178s (num_starts 9; 0.4780s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.41324s (num_starts 3; 1.4711s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.41327s (num_starts 3; 1.4711s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.41329s (num_starts 3; 1.4711s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.51982s (num_starts 24; 0.1883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.52033s (num_starts 24; 0.1883s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 4.52079s (num_starts 24; 0.1884s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);linear.: 4.52128s (num_starts 24; 0.1884s/start)
guarded_predicate_set_and.: 4.61494s (num_starts 845; 0.0055s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 4.65997s (num_starts 14; 0.3329s/start)
decide_hoare_triple_helper;per-query-type;lb-unsigned.: 4.67424s (num_starts 22; 0.2125s/start)
check_equivalence_proof.: 5.20367s (num_starts 1; 5.2037s/start)
decide_hoare_triple_helper;per-query-type;lb-signed;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 5.31406s (num_starts 18; 0.2952s/start)
decide_hoare_triple_helper;per-query-type;lb-signed.: 5.40039s (num_starts 62; 0.0871s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 5.55083s (num_starts 4; 1.3877s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 5.55084s (num_starts 4; 1.3877s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 5.55087s (num_starts 4; 1.3877s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 5.55088s (num_starts 4; 1.3877s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 5.55344s (num_starts 6; 0.9256s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 5.55345s (num_starts 6; 0.9256s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-all-proof-path-optimizations.: 5.55347s (num_starts 6; 0.9256s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 5.55348s (num_starts 6; 0.9256s/start)
invariant_inference_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.: 5.93282s (num_starts 3; 1.9776s/start)
apply_mask_and_overlay_array_constant.mk_array_constant.: 6.06936s (num_starts 5052; 0.0012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 6.28042s (num_starts 8; 0.7851s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1;pred-type-unknown.: 6.28045s (num_starts 8; 0.7851s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);pred-type-unknown.: 6.2805s (num_starts 8; 0.7851s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.28865s (num_starts 14; 0.4492s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.28871s (num_starts 14; 0.4492s/start)
apply_mask_and_overlay_array_constant.: 6.52007s (num_starts 5052; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.73907s (num_starts 17; 0.3964s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.94829s (num_starts 4; 1.7371s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.94834s (num_starts 4; 1.7371s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 6.94836s (num_starts 4; 1.7371s/start)
decide_hoare_triple_helper;per-query-type;false-predicate;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.11405s (num_starts 8; 0.8893s/start)
decide_hoare_triple_helper;per-query-type;false-predicate.: 7.11427s (num_starts 8; 0.8893s/start)
check_preds_on_edge_compositions.dhd_with_ce_propagation.: 7.32872s (num_starts 73; 0.1004s/start)
check_preds_on_edge_compositions.: 7.38746s (num_starts 36; 0.2052s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 7.72409s (num_starts 14; 0.5517s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 7.95818s (num_starts 5; 1.5916s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 7.95819s (num_starts 5; 1.5916s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 7.95822s (num_starts 5; 1.5916s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 7.95823s (num_starts 5; 1.5916s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.sprel.: 8.08912s (num_starts 72745; 0.0001s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.2477s (num_starts 15; 0.6165s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 9.32422s (num_starts 37; 0.2520s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.34109s (num_starts 6; 1.5568s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 9.4884s (num_starts 9; 1.0543s/start)
decide_hoare_triple_helper;per-query-type;dst_edge_composition_proves_false.: 9.48863s (num_starts 9; 1.0543s/start)
decide_hoare_triple.: 9.67755s (num_starts 13; 0.7444s/start)
dst_edge_composition_proves_false.: 9.70284s (num_starts 9; 1.0781s/start)
get_next_dst_edge_composition_to_correlate.: 9.74018s (num_starts 10; 0.9740s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 9.96666s (num_starts 9; 1.1074s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1;pred-type-unknown.: 9.96669s (num_starts 9; 1.1074s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);pred-type-unknown.: 9.96675s (num_starts 9; 1.1074s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 10.8867s (num_starts 13; 0.8374s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.: 10.9267s (num_starts 2; 5.4633s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L0%0%d_Lfor.cond%1%bbentry).: 11.2697s (num_starts 23; 0.4900s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 11.8502s (num_starts 24; 0.4938s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2;pred-type-unknown.: 11.8503s (num_starts 24; 0.4938s/start)
liveness_analysis_conservative::xfer_and_meet.: 12.0441s (num_starts 8980; 0.0013s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 12.3024s (num_starts 28; 0.4394s/start)
populate_loc_liveness.: 12.49s (num_starts 1149; 0.0109s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 13.0085s (num_starts 33; 0.3942s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 13.3109s (num_starts 20; 0.6655s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);linear.: 13.4159s (num_starts 50; 0.2683s/start)
invariant_inference_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 13.5271s (num_starts 9; 1.5030s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 13.6199s (num_starts 2; 6.8100s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-all-proof-path-optimizations.: 13.6199s (num_starts 2; 6.8100s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-all-proof-path-optimizations.: 13.6199s (num_starts 2; 6.8100s/start)
tfg_postprocess_after_pointsto_analysis.: 14.9048s (num_starts 1148; 0.0130s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A1.B1.C1.D1;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 14.9077s (num_starts 10; 1.4908s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A1.B1.C1.D1;pred-type-unknown.: 14.9078s (num_starts 10; 1.4908s/start)
decide_hoare_triple_helper;per-path-and-query-type;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd);pred-type-unknown.: 14.9078s (num_starts 10; 1.4908s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.1532s (num_starts 10; 1.5153s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.1533s (num_starts 10; 1.5153s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.1534s (num_starts 10; 1.5153s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.5005s (num_starts 24; 0.6459s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.5012s (num_starts 24; 0.6459s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.538s (num_starts 41; 0.3790s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;linear.: 15.6508s (num_starts 83; 0.1886s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 15.9516s (num_starts 27; 0.5908s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.: 16.0216s (num_starts 1; 16.0216s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.cond%1%bbentry;(L0%0%d_Lfor.cond%1%bbentry=>L0%0%d_Lfor.body%1%fcallStart).: 16.4672s (num_starts 37; 0.4451s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.5907s (num_starts 20; 0.8295s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 16.5911s (num_starts 20; 0.8296s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 16.5915s (num_starts 20; 0.8296s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);ub-unsigned.: 16.5919s (num_starts 20; 0.8296s/start)
ftmap_pointsto_analysis_combo_dfa_t.alias_val_xfer_and_meet.: 16.7813s (num_starts 10538; 0.0016s/start)
decide_hoare_triple_helper;per-path;L0%0%d_Lfor.body%1%fcallStart;(L0%0%d_Lfor.body%1%fcallStart=>L0%0%d_Lfor.body%1%fcallEnd).: 17.3097s (num_starts 22; 0.7868s/start)
invariant_inference_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 17.5407s (num_starts 7; 2.5058s/start)
decide_hoare_triple_helper;per-path;L0%0%d_L0%0%d;(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry).: 18.6192s (num_starts 68; 0.2738s/start)
ftmap_pointsto_analysis_combo_dfa_t.ftmap_dfa_flow_insensitive_xfer_and_meet.: 19.7315s (num_starts 10538; 0.0019s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.: 19.7583s (num_starts 3; 6.5861s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 20.5664s (num_starts 25; 0.8227s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;ub-unsigned.: 20.6181s (num_starts 53; 0.3890s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown;-all-proof-path-optimizations.: 21.1088s (num_starts 6; 3.5181s/start)
expr_label_memlabels_using_memlabel_map_visitor.simplify.: 21.9231s (num_starts 77226; 0.0003s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.model.: 22.0238s (num_starts 72745; 0.0003s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 22.0244s (num_starts 13; 1.6942s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 22.0245s (num_starts 13; 1.6942s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 22.0246s (num_starts 13; 1.6942s/start)
expr_simplify_using_sprel_pair_and_memlabel_maps.: 23.2418s (num_starts 72745; 0.0003s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 24.8158s (num_starts 29; 0.8557s/start)
decide_hoare_triple_helper;per-query-type;ub-unsigned.: 24.902s (num_starts 71; 0.3507s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 27.18s (num_starts 17; 1.5988s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.: 27.5621s (num_starts 7; 3.9374s/start)
decide_hoare_triple_helper;per-query-type;linear;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 28.8159s (num_starts 62; 0.4648s/start)
decide_hoare_triple_helper;per-query-type;linear.: 28.9947s (num_starts 133; 0.2180s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1.E2;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 29.1872s (num_starts 34; 0.8584s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);pred-type-unknown.: 29.1879s (num_starts 34; 0.8585s/start)
expr_do_simplify_using_lhs_set_and_precond.: 29.6434s (num_starts 14512; 0.0020s/start)
ce_reconcile_sorts_and_values.: 32.5446s (num_starts 1132; 0.0287s/start)
parse_z3_model.: 33.4797s (num_starts 1130; 0.0296s/start)
read_counter_examples_from_channel.: 33.7531s (num_starts 579; 0.0583s/start)
ftmap_run_pointsto_analysis.: 36.348s (num_starts 1148; 0.0317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown;-all-proof-path-optimizations.: 36.4178s (num_starts 22; 1.6554s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 36.418s (num_starts 22; 1.6554s/start)
tfg_run_pointsto_analysis.: 36.4427s (num_starts 1148; 0.0317s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1.E2;pred-type-unknown.: 37.2789s (num_starts 103; 0.3619s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 37.4195s (num_starts 49; 0.7637s/start)
tfg_populate_structs_after_ssa_construction.: 38.251s (num_starts 1148; 0.0333s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);-all-proof-path-optimizations.: 40.2757s (num_starts 24; 1.6782s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown;-all-proof-path-optimizations.: 40.2758s (num_starts 24; 1.6782s/start)
tfg_ssa_construct_from_non_ssa_tfg.: 41.0509s (num_starts 1148; 0.0358s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry);-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 45.4512s (num_starts 108; 0.4208s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown;-all-proof-path-optimizations.: 50.2046s (num_starts 28; 1.7930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 50.2047s (num_starts 28; 1.7930s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 51.6085s (num_starts 44; 1.1729s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1;pred-type-unknown.: 51.6086s (num_starts 44; 1.1729s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);-all-proof-path-optimizations.: 53.8349s (num_starts 30; 1.7945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown;-all-proof-path-optimizations.: 53.835s (num_starts 30; 1.7945s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart);pred-type-unknown.: 55.5424s (num_starts 80; 0.6943s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.: 56.8628s (num_starts 9; 6.3181s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallEnd;(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry).: 59.1455s (num_starts 118; 0.5012s/start)
decide_hoare_triple_helper;per-graph-per-path-per-query-type;make_list.A2.B1.C1.D1;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 72.2487s (num_starts 47; 1.5372s/start)
decide_hoare_triple_helper;per-graph-per-query-type;make_list.A2.B1.C1.D1;pred-type-unknown.: 72.2489s (num_starts 47; 1.5372s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 73.749s (num_starts 76; 0.9704s/start)
decide_hoare_triple_helper;per-path-and-query-type;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd);pred-type-unknown.: 75.9248s (num_starts 73; 1.0401s/start)
invariant_inference_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.: 77.2336s (num_starts 6; 12.8723s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.cond%1%bbentry;(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart).: 78.1451s (num_starts 231; 0.3383s/start)
decide_hoare_triple_helper;per-path;L3%6%bbentry_Lfor.body%1%fcallStart;(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd).: 81.2401s (num_starts 165; 0.4924s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown;-all-proof-path-optimizations.: 130.33s (num_starts 75; 1.7377s/start)
decide_hoare_triple_helper;-all-proof-path-optimizations.: 130.334s (num_starts 75; 1.7378s/start)
query:smt.: 159.283s (num_starts 846; 0.1883s/start)
decide_hoare_triple_helper;-used-quantifiers-stack-not-modeled-as-separate-mem-nonstack-not-modeled-as-common-mem.: 163.335s (num_starts 262; 0.6234s/start)
spawn_smt_query.: 193.05s (num_starts 846; 0.2282s/start)
decide_hoare_triple_helper;per-query-type;pred-type-unknown.: 204.378s (num_starts 247; 0.8274s/start)
solver_provable.: 232.748s (num_starts 845; 0.2754s/start)
solver_satisfiable-cache-miss.: 232.785s (num_starts 846; 0.2752s/start)
solver_satisfiable.: 232.793s (num_starts 846; 0.2752s/start)
expr_is_provable.: 233.381s (num_starts 845; 0.2762s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_commonMEM_optimization.: 233.409s (num_starts 845; 0.2762s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_aliasing_constraints_generation.: 233.467s (num_starts 845; 0.2763s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_simplify_and_add_auxiliary_structures.: 233.51s (num_starts 845; 0.2763s/start)
is_expr_equal_using_lhs_set_and_precond_helper_miss_after_precond_is_false.: 238.192s (num_starts 845; 0.2819s/start)
is_expr_equal_using_lhs_set_and_precond_helper.syntactic_check_failed.: 238.276s (num_starts 845; 0.2820s/start)
is_expr_equal_using_lhs_set_and_precond_helper.: 238.293s (num_starts 845; 0.2820s/start)
update_invariant_state_for_edges.: 282.557s (num_starts 13; 21.7351s/start)
cg_check_new_cg_ec.: 282.645s (num_starts 13; 21.7419s/start)
correl_entry_apply.: 282.646s (num_starts 13; 21.7420s/start)
is_expr_equal_using_lhs_set_and_precond.: 288.886s (num_starts 337; 0.8572s/start)
prove.: 288.891s (num_starts 337; 0.8572s/start)
prove_spawn_and_join_helper.: 288.893s (num_starts 337; 0.8573s/start)
prove_spawn_and_join.: 291.666s (num_starts 337; 0.8655s/start)
prove_wrapper.proof_query_not_trivial.: 291.737s (num_starts 337; 0.8657s/start)
prove_wrapper.: 292.195s (num_starts 693; 0.4216s/start)
expandProductCFG.: 292.403s (num_starts 18; 16.2446s/start)
decide_hoare_triple_check_ub.: 293.028s (num_starts 693; 0.4228s/start)
decide_hoare_triple_helper.: 294.594s (num_starts 693; 0.4251s/start)
bestFirstSearch.: 294.724s (num_starts 1; 294.7236s/start)
decide_hoare_triple_with_alias_cons.: 296.208s (num_starts 693; 0.4274s/start)
Time taken for equivalence check.: 299.956s (num_starts 1; 299.9557s/start)

counters:
# of Paths Prunned through CE propagation.: 2
# of assume sat failures for undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry.: 5
# of assume sat failures for undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d.: 33
# of assume sat failures for undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry.: 26
# of correlations rejected by -dst-edgecond-implies-src-edgecond check.: 3
# of paths enumerated.: 24
# of paths expanded.: 13
# of queries to linear solver.: 194
# of smt-solver-queries.: 846
L0%0%d=>Lfor.cond%1%bbentry-src_ecs.: 3
L0%0%d=>Lfor.cond%1%bbentry-src_to_pcs.: 3
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_ecs.: 2
Lfor.body%1%fcallEnd=>Lfor.cond%1%bbentry-src_to_pcs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_ecs.: 1
Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd-src_to_pcs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_ecs.: 1
Lfor.cond%1%bbentry=>E0%0%d-src_to_pcs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_ecs.: 1
Lfor.cond%1%bbentry=>Lfor.body%1%fcallStart-src_to_pcs.: 1
num-backtrackings.: 8
removed-siblings.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.iters.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_L0%0%d.prove_queries.: 5
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 9
smallest_point_cover_xfer.abstract-memlabel-asserts.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 18
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 9
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_L0%0%d.prove_queries.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 2
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 4
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 0
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 11
smallest_point_cover_xfer.dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 11
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.iters.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_L0%0%d.prove_queries.: 3
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 2
smallest_point_cover_xfer.dst-ineq.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 7
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 6
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 9
smallest_point_cover_xfer.dst-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.iters.: 11
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_L0%0%d.prove_queries.: 11
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 0
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 5
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 21
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 16
smallest_point_cover_xfer.expr-group-bvs.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 19
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.iters.: 24
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_L0%0%d.prove_queries.: 30
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.iters.: 11
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.body%1%fcallStart.prove_queries.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.iters.: 10
smallest_point_cover_xfer.spec-coupling-invariants.from.L0%0%d_Lfor.cond%1%bbentry.prove_queries.: 8
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 9
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 23
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 50
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 44
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 44
smallest_point_cover_xfer.spec-coupling-invariants.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 35
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.iters.: 2
smallest_point_cover_xfer.src-branches-const-ineq.from.L0%0%d_L0%0%d.prove_queries.: 0
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallEnd.prove_queries.: 22
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.iters.: 7
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.body%1%fcallStart.prove_queries.: 1
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.iters.: 11
smallest_point_cover_xfer.src-branches-const-ineq.from.L3%6%bbentry_Lfor.cond%1%bbentry.prove_queries.: 4
smt-queries-cvc4-sat.: 1
smt-queries-yices-sat.: 1
smt-queries-z3-sat.: 1130
total-correlation-possibilities.: 13
total-correlation-possibilities-mod-lsprels.: 13
total-correlations-explored.: 14

flags:
dst-aloc.: 0
dst-edges.: 9
dst-nodes.: 9
dst-sp-updates.: 0
final-CG-alloc-correlations.: 0
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 3
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 17
final-CG-counterexamples-generated-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 15
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallEnd.: 37
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.body%1%fcallStart.: 34
final-CG-counterexamples-total-at-L3%6%bbentry_Lfor.cond%1%bbentry.: 22
final-CG-dealloc-correlations.: 0
final-CG-dht-queries.: 5
final-CG-edges.: 5
final-CG-nodes.: 5
final-CG-num-invariants.: 44
final-CG-super-edges.: 0
src-edges.: 6
src-nodes.: 6
timeout-occured.: 0

info:
eq-state.: find_correlation
final-CG-time-secs.: 237.15
final-CG-time-to-total-time-ratio.: 0.80
query-time-to-total-time-ratio.: 0.54

Context stats:
exprs: count: 453981
sorts: count: 60005
num_proof_queries: 337
num_proof_queries_answered_by_syntactic_check: 0
cache_stats:
m_simplify:
	----------- total:	231894
	        hit ratio:	0.940326
m_simplify_solver:
	----------- total:	63802
	        hit ratio:	0.688098
m_prune_obviously_false_branches_using_assume_clause:
	----------- total:	32387
	        hit ratio:	0.840059
m_z3_solver_substitution:
	----------- total:	19898
	        hit ratio:	0
m_replace_donotsimplify_using_solver_expressions_by_free_vars:
	----------- total:	19900
	        hit ratio:	0
m_is_expr_not_equal_syntactic:
	----------- total:	643
	        hit ratio:	0.998445
m_expr_size:
	----------- total:	132412
	        hit ratio:	0.843285
m_contains_only_constants_or_sp_versions:
	----------- total:	5692
	        hit ratio:	0.691848
m_expr_evaluates_to_constant_visitor:
	----------- total:	821121
	        hit ratio:	0.56755
m_sort_dfa_canonicalize:
	----------- total:	2333377
	        hit ratio:	0.987164
m_expr_convert_to_iexpr:
	----------- total:	26159
	        hit ratio:	0.602546

z3_solver expr_query_cache entry size: 846
	----------- total:	846
	             hits:	0
	        hit ratio:	0
histogram (time taken by solver in ms):
[  20.9480,   32.6399) (avg.   30.6246)  : 34
[  32.6399,   50.8576) (avg.   39.4025)  : 195
[  50.8576,   79.2434) (avg.   64.6967)  : 42
[  79.2434,  123.4724) (avg.   95.0069)  : 79
[ 123.4724,  192.3874) (avg.  157.1010)  : 138
[ 192.3874,  299.7668) (avg.  236.4814)  : 225
[ 299.7668,  467.0789) (avg.  342.3679)  : 99
[ 467.0789,  727.7750) (avg.  622.2774)  : 12
[ 727.7750, 1133.9762) (avg.  950.8866)  : 18
[1133.9762, 1766.8950) (avg. 1739.1153)  : 4
histogram (number of quantifiers in query)
[ 0,  2) (avg.  0)                       : 1
[ 2,  4) (avg.  0)                       : 0
[ 4,  6) (avg.  0)                       : 0
[ 6,  8) (avg.  6)                       : 211
[ 8, 10) (avg.  9)                       : 562
[10, 12) (avg. 10)                       : 72
[12, 14) (avg.  0)                       : 0
[14, 16) (avg.  0)                       : 0
[16, 18) (avg.  0)                       : 0
[18, 20) (avg.  0)                       : 0
histogram (number of nodes in z3 ast)
[ 46, 143) (avg.  46)                    : 1
[143, 239) (avg. 183)                    : 230
[239, 335) (avg. 295)                    : 299
[335, 431) (avg. 394)                    : 195
[431, 527) (avg. 508)                    : 19
[527, 624) (avg. 549)                    : 48
[624, 720) (avg. 634)                    : 1
[720, 816) (avg. 754)                    : 50
[816, 912) (avg. 836)                    : 2
[912, 1008) (avg. 998)                   : 1
Top 10 highest time taking queries:
1. [1.766s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
2. [1.750s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
3. [1.723s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
4. [1.717s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.houdini-axiom-based-guess.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.0
5. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.7
6. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.6
7. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.2
8. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.6
9. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.5
10. [1.036s] SOLVER_RES_TRUE decide_hoare_triple_check_ub.src-branches-const-ineq.ub-unsigned.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.cond_apply_set_elem0_of_1.6

<MSG>5:23 : Successfully computed equivalence for function: make_list.</MSG>

tfg_edge_expr_wp_fn: num_starts 142 time spent: 0:0:0 [0.003545s total; 0.000025 per start]
tfg_computeWP: num_starts 1893 time spent: 0:0:0 [0.581579s total; 0.000307 per start]
tfg_get_simplified_to_state_for_edge: num_starts 5362 time spent: 0:0:0 [0.011381s total; 0.000002 per start]
tfg_get_simplified_edge_cond_for_edge: num_starts 13522 time spent: 0:0:0 [0.020293s total; 0.000002 per start]
tfg_get_simplified_assumes_for_edge: num_starts 20585 time spent: 0:0:0 [0.026120s total; 0.000001 per start]
add_nodeces_at_pc_and_propagate: num_starts 184 time spent: 0:0:1 [1.205614s total; 0.006552 per start]
graph_with_ce_propagate_CEs_across_new_edge_for_reason: num_starts 24 time spent: 0:0:1 [1.760582s total; 0.073358 per start]
tfg_counter_example_translate_on_edge_helper: num_starts 899 time spent: 0:0:2 [2.127320s total; 0.002366 per start]
corr_graph_edge_well_formedness_conditions_falsified_by_counter_example: num_starts 438 time spent: 0:0:0 [0.442039s total; 0.001009 per start]
counter_example_translate_using_to_state_mapping_assigning_random_consts_as_needed: num_starts 757 time spent: 0:0:2 [2.015793s total; 0.002663 per start]
ce_evaluate_expr_assigning_random_consts_as_needed: num_starts 4811 time spent: 0:0:2 [2.417017s total; 0.000502 per start]
tfg_edge_assumes_satisfied_by_counter_example: num_starts 821 time spent: 0:0:0 [0.068750s total; 0.000084 per start]
tfg_graph_get_vars_written_on_edge: num_starts 757 time spent: 0:0:0 [0.027909s total; 0.000037 per start]
cg_with_rank_add_CE_at_pc: num_starts 277 time spent: 0:0:0 [0.783928s total; 0.002830 per start]
graph_with_ce_add_CE_at_pc: num_starts 153 time spent: 0:0:0 [0.009066s total; 0.000059 per start]
graph_with_guessing_add_CE_at_pc: num_starts 277 time spent: 0:0:0 [0.779206s total; 0.002813 per start]
point_set_add_point_using_CE: num_starts 1102 time spent: 0:0:0 [0.232123s total; 0.000211 per start]
graph_with_points_add_point_using_CE_at_pc: num_starts 1102 time spent: 0:0:0 [0.235202s total; 0.000213 per start]
graph_with_guessing_add_point_using_CE_at_pc: num_starts 205 time spent: 0:0:0 [0.631042s total; 0.003078 per start]
invariant_state_add_point_using_CE_at_pc: num_starts 205 time spent: 0:0:0 [0.390296s total; 0.001904 per start]
expr_label_memlabels_using_memlabel_map: num_starts 101702 time spent: 0:0:2 [2.631458s total; 0.000026 per start]
evaluate_expr_assigning_random_consts_and_check_bounds: num_starts 2790 time spent: 0:0:0 [0.124395s total; 0.000045 per start]
expr_simplify_solver: num_starts 64149 time spent: 0:0:3 [3.940084s total; 0.000061 per start]
expr_simplify_syntactic: num_starts 64631 time spent: 0:0:23 [23.949507s total; 0.000371 per start]
expr_simplify_select_on_store: num_starts 8422 time spent: 0:0:22 [22.454045s total; 0.002666 per start]
expr_simplify_store_on_store: num_starts 1048 time spent: 0:0:0 [0.038082s total; 0.000036 per start]
expr_simplify_using_lhs_set_helper: num_starts 14658 time spent: 0:0:29 [29.735153s total; 0.002029 per start]
expr_simplify_using_lhs_set_visit_function: num_starts 142236 time spent: 0:0:29 [29.615441s total; 0.000208 per start]
expr_simplify_sort_args_to_canonicalize: num_starts 62502 time spent: 0:0:0 [0.247717s total; 0.000004 per start]
expr_simplify_eq: num_starts 7585 time spent: 0:0:0 [0.077645s total; 0.000010 per start]
expr_simplify_or: num_starts 55 time spent: 0:0:0 [0.000057s total; 0.000001 per start]
expr_simplify_and: num_starts 3001 time spent: 0:0:0 [0.019010s total; 0.000006 per start]
expr_simplify_not: num_starts 25 time spent: 0:0:0 [0.000076s total; 0.000003 per start]
expr_simplify_implies: num_starts 1092 time spent: 0:0:0 [0.009672s total; 0.000009 per start]
expr_simplify_ite: num_starts 5151 time spent: 0:0:0 [0.208704s total; 0.000041 per start]
canonicalize_expr_tree: num_starts 19998 time spent: 0:0:0 [0.671915s total; 0.000034 per start]
expr_simplify_memalloc_using_memlabel: num_starts 4092 time spent: 0:0:0 [0.015359s total; 0.000004 per start]
expr_simplify_select_on_store_visit_function: num_starts 11000 time spent: 0:0:22 [22.064150s total; 0.002006 per start]
expr_simplify_select_on_store_visit_function_store_op: num_starts 1016 time spent: 0:0:1 [1.427530s total; 0.001405 per start]
memlabels_are_independent: num_starts 2649 time spent: 0:0:0 [0.019446s total; 0.000007 per start]
is_overlapping_using_lhs_set_and_precond: num_starts 872 time spent: 0:0:0 [0.407920s total; 0.000468 per start]
is_overlapping_syntactic_using_lhs_set_and_precond: num_starts 872 time spent: 0:0:0 [0.399656s total; 0.000458 per start]
is_overlapping_atoms_pair_syntactic: num_starts 872 time spent: 0:0:0 [0.363313s total; 0.000417 per start]
is_overlapping_considering_type_constraints: num_starts 872 time spent: 0:0:0 [0.008105s total; 0.000009 per start]
find_offset_wrt_typed_variable_pointer: num_starts 872 time spent: 0:0:0 [0.008031s total; 0.000009 per start]
is_gep_inbounds_offset: num_starts 872 time spent: 0:0:0 [0.004061s total; 0.000005 per start]
get_arithmetic_addsub_atoms: num_starts 117305 time spent: 0:0:0 [0.083092s total; 0.000001 per start]
expr_is_variable_start: num_starts 1280 time spent: 0:0:0 [0.000211s total; 0.000000 per start]
expr_linear_relation_holds_visit: num_starts 34297 time spent: 0:0:0 [0.452606s total; 0.000013 per start]
expr_is_consts_struct_constant: num_starts 33317 time spent: 0:0:0 [0.026141s total; 0.000001 per start]
expr_do_simplify_helper: num_starts 232386 time spent: 0:0:28 [28.967220s total; 0.000125 per start]
expr_do_simplify_helper_cache: num_starts 232386 time spent: 0:0:0 [0.253946s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor_cache: num_starts 16363 time spent: 0:0:0 [0.017487s total; 0.000001 per start]
expr_prune_obviously_false_branches_using_assume_clause_visitor: num_starts 16363 time spent: 0:0:0 [0.042898s total; 0.000003 per start]
evaluate_expr_and_check_bounds: num_starts 5337 time spent: 0:0:2 [2.540383s total; 0.000476 per start]
array_constant_equals: num_starts 289909 time spent: 0:0:0 [0.301501s total; 0.000001 per start]
sort_dfa_canonical: num_starts 2480052 time spent: 0:0:5 [5.489755s total; 0.000002 per start]
expr_convert_to_iexpr: num_starts 26215 time spent: 0:0:5 [5.234431s total; 0.000200 per start]
combo_dfa_xfer_and_meet: num_starts 10538 time spent: 0:0:19 [19.716349s total; 0.001871 per start]
alias_val_xfer_and_meet: num_starts 10538 time spent: 0:0:16 [16.760213s total; 0.001590 per start]
get_sprel_map_from_avail_exprs: num_starts 15321 time spent: 0:0:0 [0.360537s total; 0.000024 per start]
update_memlabels_for_memslot_locs: num_starts 3635 time spent: 0:0:0 [0.012355s total; 0.000003 per start]
populate_gen_and_kill_sets_for_edge: num_starts 21220 time spent: 0:0:1 [1.008954s total; 0.000048 per start]
compute_simplified_loc_exprs_for_edge: num_starts 49833 time spent: 0:0:11 [11.537454s total; 0.000232 per start]
compute_locs_definitely_written_on_edge: num_starts 21220 time spent: 0:0:0 [0.007603s total; 0.000000 per start]
get_locs_potentially_read_in_expr_using_locs_map: num_starts 6099 time spent: 0:0:2 [2.320665s total; 0.000380 per start]
edge_update_memlabel_map_for_mlvars: num_starts 10610 time spent: 0:0:1 [1.223156s total; 0.000115 per start]
add_new_locs_based_on_edge: num_starts 10538 time spent: 0:0:13 [13.066110s total; 0.001240 per start]
expand_locset_to_include_slots_for_memmask: num_starts 10055 time spent: 0:0:0 [0.080256s total; 0.000008 per start]
total: num_starts 1 time spent: 0:5:29 [329.696062s total; 329.696062 per start]
num_syntactic_match_tests = 0.
num_execution_tests = 0.
num_boolean_tests = 0.
fingerprinting rate: 0.00 per second (total), -nan per second (itable_enumerate_timer), -nan per second (excluding execution/boolean tests).

Time taken for equivalence check: 301.44s.
ftmap_run_pointsto_analysis.: 36.348s (num_starts 1148; 0.0317s/start)s.
EQ Time after pointsto analysis: 265.093s.
EQ Time after pointsto analysis and smt_query: -27.1023s.
EQ Time after pointsto analysis and smt_query and bv-solve: -27.194s.
Equivalence proof found. The programs are equivalent.
