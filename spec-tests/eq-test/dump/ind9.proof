=FunctionName: make_list
=result: 1
=cg_with_asm_annotation
=cg_with_backtracker
=cg_with_rank
=corr_graph make_list.A2.B1.C1.D1.E2
=src_tfg
=TFG_SSA:
=TFG_SPEC src.spec.make_list:
=TFG:
=Nodes: L0%0%d L3%6%bbentry L3%7%d L3%8%bbentry L3%10%bbentry E0%0%d
=Edges:
L0%0%d => L3%6%bbentry
L3%6%bbentry => L3%7%d
L3%7%d => L3%10%bbentry
L3%7%d => L3%8%bbentry
L3%8%bbentry => E0%0%d
L3%10%bbentry => L3%6%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=state_end
=PC to var-version map at L0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%6%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%7%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%8%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at L3%10%bbentry
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=PC to var-version map at E0%0%d
=version for spec-mem.alloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=version for spec-mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : (undefined) : UNDEFINED
=arg val
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=arg end
=Node outputs: E0%0%d
=Output: spec-%ret-reg
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
=Touched symbols:
=Symbol-map done
=Locals-map:
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlheap.src.spec.make_list : memlabel-mem--heap
=Edge: L0%0%d => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : unit : UNIT
4 : sum_init(1, 2, 3) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((((func_head*ctor_bv)*ctor_sum)*(inline_entry*func_head))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: L3%6%bbentry => L3%7%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*intrinsic_app_map_get)
tfg_edge_comment end

=Edge: L3%7%d => L3%10%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:6:match_sum_cond_1
tfg_edge_comment end

=Edge: L3%7%d => L3%8%bbentry
=Edge.EdgeCond: 
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:4:match_sum_cond_0
tfg_edge_comment end

=Edge: L3%8%bbentry => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((bb_entry*match_sum_val_0)*match_sum_merge_0)*func_ret)*(inline_exit*func_ret))
tfg_edge_comment end

=Edge: L3%10%bbentry => L3%6%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(((bb_entry*match_sum_val_1)*ctor_prod)*((((ctor_sum*letin_def)*ctor_bv)*(intrinsic_app_bvadd*tailrec_backedge))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=graph_with_precondition_done

=Locs in src.spec.make_list
=Loc 1 in src.spec.make_list.
REGMEM
spec-%var-arr-1
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=Loc 20 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--heap
=Loc 21 in src.spec.make_list.
MASKED
=mem
1 : input.spec-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.spec-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 22 in src.spec.make_list.
REGMEM
spec-%tmpvar-0.L3%7%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
=Loc 23 in src.spec.make_list.
REGMEM
spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=Loc 24 in src.spec.make_list.
REGMEM
spec-%var-i-0.L3%6%bbentry
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=Loc 25 in src.spec.make_list.
REGMEM
spec-%tmpvar-11.E0%0%d
1 : input.spec-%tmpvar-11.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 26 in src.spec.make_list.
REGMEM
spec-%tmpvar-12.E0%0%d
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 27 in src.spec.make_list.
REGMEM
spec-%tmpvar-7.E0%0%d
1 : input.spec-%tmpvar-7.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 28 in src.spec.make_list.
REGMEM
spec-%tmpvar-8.E0%0%d
1 : input.spec-%tmpvar-8.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 29 in src.spec.make_list.
REGMEM
spec-%var-l-0.L3%6%bbentry
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 30 in src.spec.make_list.
REGMEM
spec-%var-u-0.E0%0%d
1 : input.spec-%var-u-0.E0%0%d : UNIT
=Loc 31 in src.spec.make_list.
REGMEM
spec-%tmpvar-10.L3%6%bbentry
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 32 in src.spec.make_list.
REGMEM
spec-%tmpvar-9.L3%6%bbentry
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=Loc 33 in src.spec.make_list.
REGMEM
src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
=Loc 34 in src.spec.make_list.
REGMEM
spec-%tmpvar-1.L3%6%bbentry
1 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=Loc 35 in src.spec.make_list.
REGMEM
spec-%tmpvar-2.L3%6%bbentry
1 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Loc 36 in src.spec.make_list.
REGMEM
spec-%tmpvar-3.L3%6%bbentry
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=Loc 37 in src.spec.make_list.
REGMEM
spec-%tmpvar-4.L3%6%bbentry
1 : input.spec-%tmpvar-4.L3%6%bbentry : BV:32
=Loc 38 in src.spec.make_list.
REGMEM
spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%var-arr_i-0.L3%6%bbentry : BV:32
=Loc 39 in src.spec.make_list.
REGMEM
spec-%var-new_l-0.L3%6%bbentry
1 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=Locs end
=Liveness in src.spec.make_list
=live locs at L0%0%d
1, 
=live locs at L3%6%bbentry
23, 24, 29, 
=live locs at L3%7%d
22, 23, 24, 29, 
=live locs at L3%8%bbentry
29, 
=live locs at L3%10%bbentry
22, 23, 24, 29, 
=live locs at E0%0%d
26, 

=Definedness in src.spec.make_list
=loc definedness at L0%0%d
1, 20, 21
=loc definedness at L3%6%bbentry
1, 20, 21, 23, 24, 29, 31, 32, 33
=loc definedness at L3%7%d
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%8%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at L3%10%bbentry
1, 20, 21, 22, 23, 24, 29, 31, 32, 33
=loc definedness at E0%0%d
1, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33

=Branch affecting variable locs in src.spec.make_list
=branch affecting variable locs at L0%0%d
1
=branch affecting variable locs at L3%6%bbentry
23, 24
=branch affecting variable locs at L3%7%d
22, 23, 24
=branch affecting variable locs at L3%8%bbentry

=branch affecting variable locs at L3%10%bbentry
23, 24
=branch affecting variable locs at E0%0%d


=Relevant Memlabels in src.spec.make_list
=relevant memlabels
=function: make_list
memlabel-mem--heap
memlabel-mem--arg.0
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 23 {input.spec-%var-arr-0.L3%6%bbentry }
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 31 {input.spec-%tmpvar-10.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 32 {input.spec-%tmpvar-9.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d for loc_id 22 {input.spec-%tmpvar-0.L3%7%d }
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=graph_with_edge_structures.loc_to_expr_map at L3%6%bbentry=>L3%7%d done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%8%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%7%d=>L3%10%bbentry done
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 25 {input.spec-%tmpvar-11.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 26 {input.spec-%tmpvar-12.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 27 {input.spec-%tmpvar-7.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 28 {input.spec-%tmpvar-8.E0%0%d }
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d for loc_id 30 {input.spec-%var-u-0.E0%0%d }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=graph_with_edge_structures.loc_to_expr_map at L3%8%bbentry=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 24 {input.spec-%var-i-0.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 29 {input.spec-%var-l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 33 {input.src.spec-ghostvar.itervar.1.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 34 {input.spec-%tmpvar-1.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 35 {input.spec-%tmpvar-2.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 36 {input.spec-%tmpvar-3.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 37 {input.spec-%tmpvar-4.L3%6%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 38 {input.spec-%var-arr_i-0.L3%6%bbentry }
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry for loc_id 39 {input.spec-%var-new_l-0.L3%6%bbentry }
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=graph_with_edge_structures.loc_to_expr_map at L3%10%bbentry=>L3%6%bbentry done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at L3%6%bbentry:
vacuous mls at L3%7%d:
vacuous mls at L3%8%bbentry:
vacuous mls at L3%10%bbentry:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at L3%6%bbentry:
non-vacuous mls at L3%7%d:
non-vacuous mls at L3%8%bbentry:
non-vacuous mls at L3%10%bbentry:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in src.spec.make_list
=avail_exprs begin
=loc 1
=loc_expr
140273 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 23
=loc_expr
140368 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=avail_exprs_val.end
=loc 31
=loc_expr
140400 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=avail_exprs_val.end
=loc 32
=loc_expr
140401 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 36
=loc_expr
140404 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
=avail_exprs_val.end
=avail_exprs end
=sprel_map in src.spec.make_list
=loc 31 expr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 31 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140279 : unit : UNIT
140287 : 1 { 0x1 +1.0e1025 } : INT
140408 : Indxform7 : BV:32
140411 : Lambda14 : BV:32
140412 : lambda(140411, 140411) : FUNCTION[BV:32 -> BV:32]
140413 : Lambda15 : BV:32
140409 : sum(140276, 140279, 140408) : SUM[UNIT,BV:32]
140410 : prod(140276, 140409) : PROD[BV:32,SUM[UNIT,BV:32]]
140414 : lambda(140413, 140410) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
140417 : ind(140287, 140287, 140276, 140408, 140412, 140414) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
140418 : sum(140276, 140279, 140417) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
140419 : sym_const(140418) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=loc 32 expr
1 : input.spec-%tmpvar-9.L3%6%bbentry : BV:32
=loc 32 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 36 expr
1 : input.spec-%tmpvar-3.L3%6%bbentry : BV:32
=loc 36 spreled-expr
140298 : 1 { 0x1 +1.11e129 } : BV:32
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 1 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 20 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 21 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, )
=loc_id 22 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 23 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 24 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 25 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 26 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 27 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 28 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 29 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 30 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 31 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 33 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 34 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 35 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 36 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 37 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 38 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=loc_id 39 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; memlabel-mem--heap, memlabel-mem--arg.0, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 31 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 32 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 36 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%6%bbentry=>L3%7%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%8%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%7%d=>L3%10%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_is(1, 2) : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%8%bbentry=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at L3%10%bbentry=>L3%6%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>L3%6%bbentry
=spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-arr-0.L3%6%bbentry
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%6%bbentry=>L3%7%d
=spec-%tmpvar-0.L3%7%d
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : map_get(1, 2) : SUM[UNIT,BV:32]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%8%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%7%d=>L3%10%bbentry
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%8%bbentry=>E0%0%d
=spec-%tmpvar-11.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-7.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%var-u-0.E0%0%d
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 0 { 0x0 +1.0e1025 } : INT
3 : sum_get(1, 2) : UNIT
=spec-%tmpvar-12.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-8.E0%0%d
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state at L3%10%bbentry=>L3%6%bbentry
=src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.src.spec-ghostvar.itervar.1.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-1.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
2 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
3 : 1 { 0x1 +1.0e1025 } : INT
4 : sum_get(2, 3) : BV:32
5 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : prod_init(1, 4, 5) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=spec-%var-arr_i-0.L3%6%bbentry
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : sum_get(1, 2) : BV:32
=spec-%tmpvar-2.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.spec-%var-i-0.L3%6%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=spec-%var-new_l-0.L3%6%bbentry
1 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
4 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
5 : sum_get(4, 2) : BV:32
6 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
7 : prod_init(3, 5, 6) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
8 : sum_init(1, 2, 7) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d
=graph_with_simplified_assets.simplified_assumes at L3%6%bbentry=>L3%7%d done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%8%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%7%d=>L3%10%bbentry done
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at L3%8%bbentry=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry
=graph_with_simplified_assets.simplified_assumes at L3%10%bbentry=>L3%6%bbentry done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
0
=String-contents:
=Nextpc-map:
=Nextpc-map done
=suffixpaths for src.spec.make_list
=suffixpath_at_L0%0%d for src.spec.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_L3%6%bbentry for src.spec.make_list
=suffixpath_at_L3%6%bbentry.graph_edge_composition
(L0%0%d=>L3%6%bbentry)
=suffixpath_at_L3%7%d for src.spec.make_list
=suffixpath_at_L3%7%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*(L3%6%bbentry=>L3%7%d))
=suffixpath_at_L3%8%bbentry for src.spec.make_list
=suffixpath_at_L3%8%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%8%bbentry)))
=suffixpath_at_L3%10%bbentry for src.spec.make_list
=suffixpath_at_L3%10%bbentry.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*(L3%7%d=>L3%10%bbentry)))
=suffixpath_at_E0%0%d for src.spec.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>L3%6%bbentry)*((L3%6%bbentry=>L3%7%d)*((L3%7%d=>L3%8%bbentry)*(L3%8%bbentry=>E0%0%d))))
=suffixpaths for src.spec.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry
tfg.assumes_around_edge at L0%0%d=>L3%6%bbentry done
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d
tfg.assumes_around_edge at L3%6%bbentry=>L3%7%d done
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%8%bbentry done
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry
tfg.assumes_around_edge at L3%7%d=>L3%10%bbentry done
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d
tfg.assumes_around_edge at L3%8%bbentry=>E0%0%d done
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry
tfg.assumes_around_edge at L3%10%bbentry=>L3%6%bbentry done
tfg.assumes_around_edge done
=TFGdone
=TFG_SPEC_done
=TFG_SSA_done
=dst_tfg
=TFG_SSA:
=TFG_LLVM dst.llvm.make_list:
=TFG:
=Nodes: L0%0%d Lfor.body%1%intermediateVal1 Lfor.body%1%fcallStart Lfor.body%1%fcallEnd Lfor.body%2%d Lfor.cond%1%bbentry Lfor.cond%2%d Lfor.end%1%d E0%0%d
=Edges:
L0%0%d => Lfor.cond%1%bbentry
Lfor.cond%1%bbentry => Lfor.cond%2%d
Lfor.cond%2%d => Lfor.body%1%fcallStart
Lfor.cond%2%d => Lfor.end%1%d
Lfor.end%1%d => E0%0%d
Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
Lfor.body%1%intermediateVal1 => Lfor.body%2%d
Lfor.body%2%d => Lfor.cond%1%bbentry (backedge) 
=graph done
=is_ssa_graph:
1
=StartState:
=dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=state_end
=PC to var-version map at L0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%intermediateVal1
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallStart
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%1%fcallEnd
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.body%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%1%bbentry
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.cond%2%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at Lfor.end%1%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=PC to var-version map at E0%0%d
=version for dst.llvm-mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=version for dst.llvm-mem.alloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=var-version done
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d
=Output: heap
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=Output: llvm-indir_tgt
1 : retaddr_const : BV:32
=Output: llvm-%ret-reg
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Node outputs done for E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
Memlabel map for call-context {*;make_list}
=memlabel_map.0 for call-context {*;make_list}
mlcall.dst.llvm.make_list.3 : memlabel-mem-
=memlabel_map.1 for call-context {*;make_list}
mlcall.dst.llvm.make_list.4 : memlabel-mem-
=memlabel_map.2 for call-context {*;make_list}
mlheap.dst.llvm.make_list : memlabel-mem-may-straddle-symbol.1-heap
=memlabel_map.3 for call-context {*;make_list}
mlvar.dst.llvm.make_list.0 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0
=memlabel_map.4 for call-context {*;make_list}
mlvar.dst.llvm.make_list.1 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=memlabel_map.5 for call-context {*;make_list}
mlvar.dst.llvm.make_list.2 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Edge: L0%0%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:((((((start_pc_edge*  br label %for.cond, !dbg !28)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !28))*  br label %for.cond, !dbg !28)*(  br label %for.cond, !dbg !28*  br label %for.cond, !dbg !28))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge))
tfg_edge_comment end

=Edge: Lfor.cond%1%bbentry => Lfor.cond%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(bb_entry*  %cmp = icmp ult i32 %i.0, %n, !dbg !29)
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.body%1%fcallStart
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*(  br i1 %cmp, label %for.body, label %for.end, !dbg !31*fcall_edge_start))
tfg_edge_comment end

=Edge: Lfor.cond%2%d => Lfor.end%1%d
=Edge.EdgeCond: 
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:2:((  br i1 %cmp, label %for.body, label %for.end, !dbg !31*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)*  br i1 %cmp, label %for.body, label %for.end, !dbg !31)
tfg_edge_comment end

=Edge: Lfor.end%1%d => E0%0%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:1:  ret %struct.list* %l.0, !dbg !46
tfg_edge_comment end

=Edge: Lfor.body%1%fcallStart => Lfor.body%1%fcallEnd
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 1000 { 0x3e8 +1.11920e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : func.call30eccc4aa0775a3174483e053ab761b.mem : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> ARRAY[BV:32 -> BV:8]]
2 : mlcall.dst.llvm.make_list.3 : MEMLABEL
3 : mlcall.dst.llvm.make_list.4 : MEMLABEL
4 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : nextpc_const.1 : BV:32
7 : 0 { 0x0 +1.0e129 } : REGID
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : function_call(1, 2, 3, 4, 5, 6, 7, 8) : ARRAY[BV:32 -> BV:8]
=state_end
=Edge.Assumes.begin:
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_arg*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%fcallEnd => Lfor.body%1%intermediateVal1
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:-1:(fcall_edge_end*  %call = call i8* @malloc(i32 8), !dbg !32)
tfg_edge_comment end

=Edge: Lfor.body%1%intermediateVal1 => Lfor.body%2%d
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(1, 4) : BV:32
6 : ite(3, 2, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 1, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 1, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : eq(4, 2) : BOOL
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc_ptr(1, 6) : BV:32
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvadd(4, 8) : BV:32
10 : bvadd(7, 9) : BV:32
11 : bvule(7, 10) : BOOL
12 : or(5, 11) : BOOL
13 : or(3, 12) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : mlheap.dst.llvm.make_list : MEMLABEL
7 : region_agrees_with_memlabel(4, 1, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:1:  %call = call i8* @malloc(i32 8), !dbg !32
tfg_edge_comment end

=Edge: Lfor.body%2%d => Lfor.cond%1%bbentry
=Edge.EdgeCond: 
1 : 1 { 0x1 } : BOOL
=Edge.StateTo: 
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.1 : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(5, 7) : BV:32
9 : bvadd(8, 5) : BV:32
10 : bvadd(4, 9) : BV:32
11 : mlvar.dst.llvm.make_list.0 : MEMLABEL
12 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
13 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(13, 14) : BV:32
16 : bvadd(5, 15) : BV:32
17 : bvadd(12, 16) : BV:32
18 : 4 { 0x4 +1.0e1025 } : INT
19 : 0 { 0x0 } : BOOL
20 : select(1, 2, 11, 17, 18, 19) : BV:32
21 : store(1, 2, 3, 10, 20, 18, 19) : ARRAY[BV:32 -> BV:8]
22 : mlvar.dst.llvm.make_list.2 : MEMLABEL
23 : bvadd(8, 14) : BV:32
24 : bvadd(4, 23) : BV:32
25 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
26 : store(21, 2, 22, 24, 25, 18, 19) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : mlvar.dst.llvm.make_list.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 0 { 0x0 +1.0e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : bvmul(6, 7) : BV:32
9 : bvadd(5, 8) : BV:32
10 : bvadd(4, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 3, 10, 11, 12) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvadd(4, 5) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(3, 4) : BV:32
6 : bvadd(2, 5) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvadd(1, 3) : BV:32
5 : bvadd(4, 1) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : bvadd(5, 2) : BV:32
7 : bvadd(1, 6) : BV:32
=state_end
=Edge.Assumes.begin:
=EdgeAssume.0
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 8 { 0x8 +1.95e129 } : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(2, 4) : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvadd(5, 6) : BV:32
8 : bvadd(1, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : islangaligned(8, 9) : BOOL
=EdgeAssume.1
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvslt(1, 2) : BOOL
4 : 32 { 0x20 +1.0e1025 } : INT
5 : bvsign_ext(1, 4) : BV:64
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvzero_ext(6, 4) : BV:64
8 : bvmul(5, 7) : BV:64
9 : 63 { 0x3f +1.0e1025 } : INT
10 : bvextract(8, 9, 4) : BV:32
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : eq(10, 11) : BOOL
13 : eq(10, 2) : BOOL
14 : ite(3, 12, 13) : BOOL
15 : 4 { 0x4 +1.0e1025 } : INT
16 : isindexforsize(14, 15) : BOOL
17 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
18 : bvmul(1, 6) : BV:32
19 : bvadd(2, 18) : BV:32
20 : bvadd(17, 19) : BV:32
21 : isgepoffset(20, 18) : BOOL
22 : and(16, 21) : BOOL
23 : islangaligned(20, 15) : BOOL
24 : and(22, 23) : BOOL
25 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
26 : 8 { 0x8 +1.95e129 } : BV:32
27 : bvmul(2, 26) : BV:32
28 : bvadd(2, 27) : BV:32
29 : bvadd(25, 28) : BV:32
30 : isgepoffset(29, 27) : BOOL
31 : bvslt(2, 2) : BOOL
32 : bvsign_ext(2, 4) : BV:64
33 : bvzero_ext(26, 4) : BV:64
34 : bvmul(32, 33) : BV:64
35 : bvextract(34, 9, 4) : BV:32
36 : eq(35, 11) : BOOL
37 : eq(35, 2) : BOOL
38 : ite(31, 36, 37) : BOOL
39 : 8 { 0x8 +1.0e1025 } : INT
40 : isindexforsize(38, 39) : BOOL
41 : and(30, 40) : BOOL
42 : bvadd(28, 2) : BV:32
43 : bvadd(25, 42) : BV:32
44 : isgepoffset(43, 2) : BOOL
45 : and(41, 44) : BOOL
46 : and(24, 45) : BOOL
47 : islangaligned(43, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvadd(28, 6) : BV:32
50 : bvadd(25, 49) : BV:32
51 : isgepoffset(50, 6) : BOOL
52 : and(41, 51) : BOOL
53 : and(48, 52) : BOOL
=Edge.Assumes.end
=Edge.te_comment
0:2:(((((((  %0 = bitcast i8* %call to %struct.list*, !dbg !32*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36)*(  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36*  %arrayidx = getelementptr inbounds i32, i32* %arr, i32 %i.0, !dbg !36))*(  %1 = load i32, i32* %arrayidx, align 4, !dbg !36*  %1 = load i32, i32* %arrayidx, align 4, !dbg !36))*((  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)*(  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37*  %val = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 0, !dbg !37)))*  store i32 %1, i32* %val, align 4, !dbg !38)*((  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)*(  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39*  %next = getelementptr inbounds %struct.list, %struct.list* %0, i32 0, i32 1, !dbg !39)))*(((((  store %struct.list* %l.0, %struct.list** %next, align 4, !dbg !40*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*  br label %for.inc, !dbg !41)*(((((  %inc = add i32 %i.0, 1, !dbg !42*  br label %for.cond, !dbg !43, !llvm.loop !44)*  %l.0 = phi %struct.list* [ null, %entry ], [ %0, %for.inc ], !dbg !22)*(  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ], !dbg !27*  br label %for.cond, !dbg !43, !llvm.loop !44))*  br label %for.cond, !dbg !43, !llvm.loop !44)*(  br label %for.cond, !dbg !43, !llvm.loop !44*  br label %for.cond, !dbg !43, !llvm.loop !44)))*(ghost_var.itervar.firstedge*ghost_var.itervar.secondedge)))
tfg_edge_comment end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=graph_with_precondition_done

=Locs in dst.llvm.make_list
=Loc 100006 in dst.llvm.make_list.
REGMEM
dst.llvm-%n
1 : input.dst.llvm-%n : BV:32
=Loc 100008 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr
1 : input.dst.llvm-%arr : BV:32
=Loc 100031 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg
1 : input.dst.llvm-%hidden-reg : BV:32
=Loc 100033 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.0
1 : input.dst.llvm-callee-save.0 : BV:32
=Loc 100034 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.1
1 : input.dst.llvm-callee-save.1 : BV:32
=Loc 100035 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.2
1 : input.dst.llvm-callee-save.2 : BV:32
=Loc 100036 in dst.llvm.make_list.
REGMEM
dst.llvm-callee-save.3
1 : input.dst.llvm-callee-save.3 : BV:32
=Loc 100040 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.=L0%0%d=
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=Loc 100041 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=Loc 100042 in dst.llvm.make_list.
REGMEM
dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=Loc 100044 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100045 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100046 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100047 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100048 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100049 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100050 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100051 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=Loc 100052 in dst.llvm.make_list.
REGMEM
dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=Loc 100053 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%1%fcallEnd
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=Loc 100054 in dst.llvm.make_list.
REGMEM
dst.llvm-%call.Lfor.body%2%d
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=Loc 100055 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=Loc 100056 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=Loc 100057 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100058 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100059 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=Loc 100060 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=Loc 100061 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=Loc 100062 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=Loc 100063 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=Loc 100064 in dst.llvm.make_list.
REGMEM
dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=Loc 100065 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=Loc 100066 in dst.llvm.make_list.
REGMEM
dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=Loc 100067 in dst.llvm.make_list.
REGMEM
dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=Loc 100068 in dst.llvm.make_list.
REGMEM
dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=Loc 100069 in dst.llvm.make_list.
REGMEM
dst.llvm-indir_tgt.E0%0%d
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=Loc 100070 in dst.llvm.make_list.
REGMEM
dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=Loc 100071 in dst.llvm.make_list.
REGMEM
dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=Loc 100072 in dst.llvm.make_list.
REGMEM
dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=Loc 100073 in dst.llvm.make_list.
REGMEM
dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=Loc 100074 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100075 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100076 in dst.llvm.make_list.
REGMEM
dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100077 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100078 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100079 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100080 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100081 in dst.llvm.make_list.
REGMEM
dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100082 in dst.llvm.make_list.
REGMEM
dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=Loc 100083 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100084 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100085 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=Loc 100086 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100087 in dst.llvm.make_list.
REGMEM
dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=Loc 100088 in dst.llvm.make_list.
REGMEM
dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100089 in dst.llvm.make_list.
REGMEM
dst.llvm-%inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=Loc 100090 in dst.llvm.make_list.
REGMEM
dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=Loc 100091 in dst.llvm.make_list.
REGMEM
dst.llvm-%next.Lfor.cond%1%bbentry
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=Loc 100092 in dst.llvm.make_list.
REGMEM
dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=Loc 100093 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=Loc 100094 in dst.llvm.make_list.
REGMEM
dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
=Loc 100095 in dst.llvm.make_list.
REGMEM
dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=Loc 100096 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100097 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100098 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100099 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100100 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100101 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100102 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100103 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100104 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100105 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100106 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100107 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100108 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100109 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Loc 100110 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.0
=Loc 100111 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem-may-straddle-symbol.1-heap
=Loc 100112 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100113 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
=Loc 100114 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
=Loc 100115 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
=Loc 100116 in dst.llvm.make_list.
MASKED
=mem
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
=memalloc
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=memlabel
memlabel-mem--arg.1
=Locs end
=Liveness in dst.llvm.make_list
=live locs at L0%0%d
100006, 100008, 100040, 100045, 100046, 100047, 100048, 100049, 
=live locs at Lfor.body%1%intermediateVal1
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%1%fcallStart
100052, 100056, 100060, 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.body%1%fcallEnd
100052, 100053, 100056, 100060, 100064, 100094, 100097, 100098, 100099, 100100, 100101, 
=live locs at Lfor.body%2%d
100051, 100054, 100055, 100059, 100063, 100093, 100111, 100112, 100113, 100114, 100115, 
=live locs at Lfor.cond%1%bbentry
100052, 100056, 100060[f], 100064, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.cond%2%d
100052, 100056, 100060[f], 100064, 100070, 100094, 100104, 100105, 100106, 100107, 100108, 
=live locs at Lfor.end%1%d
100060[f], 100104, 
=live locs at E0%0%d
100060[f], 100104, 

=Definedness in dst.llvm.make_list
=loc definedness at L0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050
=loc definedness at Lfor.body%1%intermediateVal1
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallStart
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%1%fcallEnd
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100053, 100056, 100058, 100060, 100062, 100064, 100065, 100070, 100071, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.body%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100051, 100052, 100053, 100054, 100055, 100056, 100057, 100058, 100059, 100060, 100061, 100062, 100063, 100064, 100065, 100066, 100070, 100071, 100093, 100094, 100095, 100096, 100097, 100098, 100099, 100100, 100101, 100102, 100103, 100104, 100105, 100106, 100107, 100108, 100109, 100110, 100111, 100112, 100113, 100114, 100115, 100116
=loc definedness at Lfor.cond%1%bbentry
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.cond%2%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at Lfor.end%1%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109
=loc definedness at E0%0%d
100006, 100008, 100041, 100042, 100044, 100045, 100046, 100047, 100048, 100049, 100050, 100052, 100056, 100058, 100060, 100062, 100064, 100067, 100068, 100069, 100070, 100071, 100094, 100095, 100103, 100104, 100105, 100106, 100107, 100108, 100109

=Branch affecting variable locs in dst.llvm.make_list
=branch affecting variable locs at L0%0%d
100006
=branch affecting variable locs at Lfor.body%1%intermediateVal1
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallStart
100056, 100064
=branch affecting variable locs at Lfor.body%1%fcallEnd
100056, 100064
=branch affecting variable locs at Lfor.body%2%d
100055, 100063
=branch affecting variable locs at Lfor.cond%1%bbentry
100056, 100064
=branch affecting variable locs at Lfor.cond%2%d
100056, 100064, 100070
=branch affecting variable locs at Lfor.end%1%d

=branch affecting variable locs at E0%0%d


=Relevant Memlabels in dst.llvm.make_list
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100095 {input.dst.cur_rounding_mode.Lfor.cond%1%bbentry }
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100051 {input.dst.llvm-%arr.Lfor.body%2%d }
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100054 {input.dst.llvm-%call.Lfor.body%2%d }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100055 {input.dst.llvm-%i.0.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100057 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100059 {input.dst.llvm-%l.0.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100061 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100063 {input.dst.llvm-%n.Lfor.body%2%d }
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100066 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d }
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100093 {input.dst.local_alloc_count.Lfor.body%2%d }
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100110 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.0) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.0 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100111 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem-may-straddle-symbol.1-heap) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100112 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memmask(13, 12, 6) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100113 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100114 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100115 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d for loc_id 100116 {memmask(input.dst.llvm-mem.Lfor.body%2%d, input.dst.llvm-mem.alloc.Lfor.body%2%d, memlabel-mem--arg.1) }
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
14 : memlabel-mem--arg.1 : MEMLABEL
15 : memmask(13, 12, 14) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100053 {input.dst.llvm-%call.Lfor.body%1%fcallEnd }
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100065 {input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd }
1 : 8 { 0x8 +1.95e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100096 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100097 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100098 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100099 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100100 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100101 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd for loc_id 100102 {memmask(input.dst.llvm-mem.Lfor.body%1%fcallEnd, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100052 {input.dst.llvm-%arr.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100056 {input.dst.llvm-%i.0.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100058 {input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100060 {input.dst.llvm-%l.0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100062 {input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100064 {input.dst.llvm-%n.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100071 {input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100072 {input.dst.llvm-%0.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100073 {input.dst.llvm-%1.Lfor.cond%1%bbentry }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100074 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100075 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100076 {input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100077 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100078 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100079 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100080 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100081 {input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100082 {input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100083 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100084 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100085 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100086 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100087 {input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry }
1 : 0 { 0x0 +1.0e129 } : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100088 {input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100089 {input.dst.llvm-%inc.Lfor.cond%1%bbentry }
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100090 {input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100091 {input.dst.llvm-%next.Lfor.cond%1%bbentry }
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100092 {input.dst.llvm-%val.Lfor.cond%1%bbentry }
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100094 {input.dst.local_alloc_count.Lfor.cond%1%bbentry }
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100103 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.0) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100104 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem-may-straddle-symbol.1-heap) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100105 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
18 : memmask(17, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100106 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100107 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100108 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry for loc_id 100109 {memmask(input.dst.llvm-mem.Lfor.cond%1%bbentry, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--arg.1) }
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=graph_with_edge_structures.loc_to_expr_map at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d for loc_id 100070 {input.dst.llvm-%cmp.Lfor.cond%2%d }
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100067 {input.dst.llvm-%hidden-reg.E0%0%d }
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100068 {input.dst.llvm-%ret-reg.E0%0%d }
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d for loc_id 100069 {input.dst.llvm-indir_tgt.E0%0%d }
1 : retaddr_const : BV:32
=graph_with_edge_structures.loc_to_expr_map at Lfor.end%1%d=>E0%0%d done
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
vacuous mls at L0%0%d:
vacuous mls at Lfor.body%1%intermediateVal1:
vacuous mls at Lfor.body%1%fcallStart:
vacuous mls at Lfor.body%1%fcallEnd:
vacuous mls at Lfor.body%2%d:
vacuous mls at Lfor.cond%1%bbentry:
vacuous mls at Lfor.cond%2%d:
vacuous mls at Lfor.end%1%d:
vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info non-vacuous mls
non-vacuous mls at L0%0%d:
non-vacuous mls at Lfor.body%1%intermediateVal1:
non-vacuous mls at Lfor.body%1%fcallStart:
non-vacuous mls at Lfor.body%1%fcallEnd:
non-vacuous mls at Lfor.body%2%d:
non-vacuous mls at Lfor.cond%1%bbentry:
non-vacuous mls at Lfor.cond%2%d:
non-vacuous mls at Lfor.end%1%d:
non-vacuous mls at E0%0%d:
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in dst.llvm.make_list
=avail_exprs begin
=loc 100006
=loc_expr
140456 : input.dst.llvm-%n : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100008
=loc_expr
140457 : input.dst.llvm-%arr : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100031
=loc_expr
140574 : input.dst.llvm-%hidden-reg : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100033
=loc_expr
140575 : input.dst.llvm-callee-save.0 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100034
=loc_expr
140577 : input.dst.llvm-callee-save.1 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100035
=loc_expr
140579 : input.dst.llvm-callee-save.2 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100036
=loc_expr
140581 : input.dst.llvm-callee-save.3 : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100040
=loc_expr
140465 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100041
=loc_expr
140460 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100042
=loc_expr
140461 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=avail_exprs_val.m_is_top 1
=avail_exprs_val.end
=loc 100051
=loc_expr
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100054
=loc_expr
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=avail_exprs_val.end
=loc 100063
=loc_expr
140771 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=avail_exprs_val.end
=loc 100065
=loc_expr
140736 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
=avail_exprs_val.end
=loc 100066
=loc_expr
140806 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=avail_exprs_val.end
=loc 100067
=loc_expr
140807 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=avail_exprs_val.end
=loc 100068
=loc_expr
140808 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.end
=loc 100069
=loc_expr
140809 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : retaddr_const : BV:32
=avail_exprs_val.end
=loc 100072
=loc_expr
140810 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100073
=loc_expr
140811 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=avail_exprs_val.end
=loc 100074
=loc_expr
140812 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100075
=loc_expr
140813 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100076
=loc_expr
140814 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=avail_exprs_val.end
=loc 100077
=loc_expr
140815 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100078
=loc_expr
140816 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100079
=loc_expr
140817 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100080
=loc_expr
140818 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100081
=loc_expr
140819 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
=avail_exprs_val.end
=loc 100082
=loc_expr
140820 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=avail_exprs_val.end
=loc 100083
=loc_expr
140821 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100084
=loc_expr
140822 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100085
=loc_expr
140823 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100086
=loc_expr
140824 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100087
=loc_expr
140825 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 0 { 0x0 +1.0e129 } : BV:32
=avail_exprs_val.end
=loc 100088
=loc_expr
140826 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100089
=loc_expr
140827 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100090
=loc_expr
140828 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100091
=loc_expr
140829 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=avail_exprs_val.end
=loc 100092
=loc_expr
140830 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=avail_exprs_val.end
=loc 100095
=loc_expr
140831 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=avail_exprs_val.m_is_top 0
=avail_exprs_val.m_expr
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=avail_exprs_val.end
=avail_exprs end
=sprel_map in dst.llvm.make_list
=loc 100065 expr
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=loc 100065 spreled-expr
140474 : 8 { 0x8 +1.95e129 } : BV:32
=loc 100069 expr
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=loc 100069 spreled-expr
140267 : retaddr_const : BV:32
=loc 100077 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100077 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100078 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100078 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100080 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100080 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100081 expr
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100081 spreled-expr
140427 : 4 { 0x4 +1.47e129 } : BV:32
=loc 100083 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100083 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100084 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=loc 100084 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100086 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=loc 100086 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100087 expr
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=loc 100087 spreled-expr
140276 : 0 { 0x0 +1.0e129 } : BV:32
=loc 100095 expr
1 : input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : ROUNDING_MODE
=loc 100095 spreled-expr
140466 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=sprel_map done
=lr-status-map
=lr-status-map at call-context {*;make_list}
=loc_id 100006 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100008 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100031 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100033 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100034 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100035 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100036 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100040 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100041 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100042 lr-status in lr-status-map at call-context {*;make_list}
lr_status_top
=loc_id 100044 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100045 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100046 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100047 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100048 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100049 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100050 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100051 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100052 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100053 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(; )
=loc_id 100054 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100055 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100056 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100057 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100058 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100059 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100060 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100061 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100062 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100063 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100064 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=loc_id 100065 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100066 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100067 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100068 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100069 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100070 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100071 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100072 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100073 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100074 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100075 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100076 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100079 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100080 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100082 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100083 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100085 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100086 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100088 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100089 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100090 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100091 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100092 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=loc_id 100093 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100094 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-map at call-context {*;make_list}
lr_status_linearly_related(; )
=loc_id 100096 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100097 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100098 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100099 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100100 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100101 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100102 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100103 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100104 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100105 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100106 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100107 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100108 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100109 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100110 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100111 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100112 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100113 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100114 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100115 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=loc_id 100116 lr-status in lr-status-map at call-context {*;make_list}
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=lr-status-map done
=lr-status-for-sprel-locs-map
=loc_id 100065 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100069 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100077 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100078 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100080 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100081 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100083 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100084 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100086 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100087 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=loc_id 100095 lr-status in lr-status-for-sprel-locs-map
lr_status_linearly_related(; )
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=graph_with_ce done
=graph_with_points done
=graph_with_guessing done
=graph_with_simplified_assets
=graph_with_simplified_assets.simplified_edgecond at L0%0%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.body%2%d=>Lfor.cond%1%bbentry
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%1%bbentry=>Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.body%1%fcallStart
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.cond%2%d=>Lfor.end%1%d
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : not(1) : BOOL
=graph_with_simplified_assets.simplified_edgecond at Lfor.end%1%d=>E0%0%d
1 : 1 { 0x1 } : BOOL
=graph_with_simplified_assets.simplified_edgecond done
=graph_with_simplified_assets.simplified_to_state at L0%0%d=>Lfor.cond%1%bbentry
=dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.=L0%0%d= : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=dst.llvm-%arr.Lfor.body%2%d
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%call.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
5 : heap_alloc_ptr(2, 4) : BV:32
6 : ite(3, 1, 5) : BV:32
=dst.llvm-%i.0.Lfor.body%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.Lfor.body%2%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-%n.Lfor.body%2%d
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 3, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : ite(4, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
10 : malloc_side_effect(1, 9, 6) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : eq(2, 3) : BOOL
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : heap_alloc(5, 6, 3, 1) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(4, 5, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : malloc_side_effect(1, 8, 6) : BV:32
=dst.llvm-mem.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
5 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
6 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : heap_alloc(5, 6, 2, 7) : ARRAY[BV:32 -> MEMLABEL]
9 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
10 : store_uninit(4, 8, 6, 2, 7, 9) : ARRAY[BV:32 -> BV:8]
11 : ite(3, 4, 10) : ARRAY[BV:32 -> BV:8]
12 : ite(3, 5, 8) : ARRAY[BV:32 -> MEMLABEL]
13 : malloc_side_effect(11, 12, 6) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : heap_alloc(4, 5, 2, 6) : ARRAY[BV:32 -> MEMLABEL]
8 : ite(3, 4, 7) : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.body%2%d
1 : input.dst.local_alloc_count.Lfor.cond%1%bbentry : COUNT
2 : increment_count(1) : COUNT
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=dst.llvm-%call.Lfor.body%1%fcallEnd
1 : func.calla4bcb626de6152719ca44f8b649b9c4a.reg : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
2 : memlabel-mem- : MEMLABEL
3 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : nextpc_const.1 : BV:32
6 : 1000 { 0x3e8 +1.11920e129 } : REGID
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : function_call(1, 2, 2, 3, 4, 5, 6, 7) : BV:32
=dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=dst.llvm-mem.Lfor.body%1%fcallEnd
1 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.body%2%d=>Lfor.cond%1%bbentry
=dst.llvm-%arr.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=dst.llvm-%n.Lfor.cond%1%bbentry
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-mem.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
5 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
6 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
7 : 4 { 0x4 +1.47e129 } : BV:32
8 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
9 : bvmul(7, 8) : BV:32
10 : bvadd(6, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(1, 2, 5, 10, 11, 12) : BV:32
14 : store(1, 2, 3, 4, 13, 11, 12) : ARRAY[BV:32 -> BV:8]
15 : bvadd(7, 4) : BV:32
16 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
17 : store(14, 2, 3, 15, 16, 11, 12) : ARRAY[BV:32 -> BV:8]
=dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
=dst.local_alloc_count.Lfor.cond%1%bbentry
1 : input.dst.local_alloc_count.Lfor.body%2%d : COUNT
=dst.llvm-%0.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%1.Lfor.cond%1%bbentry
1 : input.dst.llvm-mem.Lfor.body%2%d : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc.Lfor.body%2%d : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-no-straddle-symbol.1-hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/-heap-arg.0 : MEMLABEL
4 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
7 : bvmul(5, 6) : BV:32
8 : bvadd(4, 7) : BV:32
9 : 4 { 0x4 +1.0e1025 } : INT
10 : 0 { 0x0 } : BOOL
11 : select(1, 2, 3, 8, 9, 10) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvmul(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
4 : bvmul(2, 3) : BV:32
5 : bvadd(1, 4) : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
=dst.llvm-%val.Lfor.cond%1%bbentry
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=dst.llvm-%cmp.Lfor.cond%2%d
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.cond%2%d=>Lfor.end%1%d
=state_end
=graph_with_simplified_assets.simplified_to_state at Lfor.end%1%d=>E0%0%d
=dst.llvm-%hidden-reg.E0%0%d
1 : input.dst.llvm-%hidden-reg : BV:32
2 : input.dst.llvm-callee-save.0 : BV:32
3 : bvxor(1, 2) : BV:32
4 : input.dst.llvm-callee-save.1 : BV:32
5 : bvxor(3, 4) : BV:32
6 : input.dst.llvm-callee-save.2 : BV:32
7 : bvxor(5, 6) : BV:32
8 : input.dst.llvm-callee-save.3 : BV:32
9 : bvxor(7, 8) : BV:32
=dst.llvm-%ret-reg.E0%0%d
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=dst.llvm-indir_tgt.E0%0%d
1 : retaddr_const : BV:32
=state_end
=graph_with_simplified_assets.simplified_to_state done
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry assume# 0
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at L0%0%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 0
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
5 : 8 { 0x8 +1.95e129 } : BV:32
6 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
7 : region_agrees_with_memlabel(4, 2, 5, 6) : BOOL
8 : or(3, 7) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume# 1
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume# 0
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 0
1 : 1 { 0x1 } : BOOL
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : isgepoffset(2, 3) : BOOL
5 : and(1, 4) : BOOL
6 : 4 { 0x4 +1.0e1025 } : BV:64
7 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
8 : 32 { 0x20 +1.0e1025 } : INT
9 : bvsign_ext(7, 8) : BV:64
10 : bvmul(6, 9) : BV:64
11 : 63 { 0x3f +1.0e1025 } : INT
12 : bvextract(10, 11, 8) : BV:32
13 : bvslt(7, 3) : BOOL
14 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
15 : ite(13, 14, 3) : BV:32
16 : eq(12, 15) : BOOL
17 : 4 { 0x4 +1.0e1025 } : INT
18 : isindexforsize(16, 17) : BOOL
19 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 7) : BV:32
22 : bvadd(19, 21) : BV:32
23 : isgepoffset(22, 21) : BOOL
24 : and(18, 23) : BOOL
25 : islangaligned(22, 17) : BOOL
26 : and(24, 25, 4, 5) : BOOL
27 : islangaligned(2, 17) : BOOL
28 : bvadd(20, 2) : BV:32
29 : isgepoffset(28, 20) : BOOL
30 : and(5, 26, 27, 29) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry assume# 1
1 : 4 { 0x4 +1.47e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
3 : bvadd(1, 2) : BV:32
4 : 4 { 0x4 +1.0e1025 } : INT
5 : islangaligned(3, 4) : BOOL
=graph_with_simplified_assets.simplified_assumes at Lfor.body%2%d=>Lfor.cond%1%bbentry done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d
=graph_with_simplified_assets.simplified_assumes at Lfor.cond%2%d=>Lfor.end%1%d done
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d
=graph_with_simplified_assets.simplified_assumes at Lfor.end%1%d=>E0%0%d done
=graph_with_simplified_assets.simplified_assumes done
=graph_with_simplified_assets done
=max-memlabel-varnum
5
=String-contents:
=Nextpc-map:
C_NEXTPC1 : malloc
=Nextpc-map done
=suffixpaths for dst.llvm.make_list
=suffixpath_at_L0%0%d for dst.llvm.make_list
=suffixpath_at_L0%0%d.graph_edge_composition
(epsilon)
=suffixpath_at_Lfor.body%1%intermediateVal1 for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%intermediateVal1.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*(Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)))))
=suffixpath_at_Lfor.body%1%fcallStart for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallStart.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.body%1%fcallStart)))
=suffixpath_at_Lfor.body%1%fcallEnd for dst.llvm.make_list
=suffixpath_at_Lfor.body%1%fcallEnd.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*(Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd))))
=suffixpath_at_Lfor.body%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.body%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.body%1%fcallStart)*((Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd)*((Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1)*(Lfor.body%1%intermediateVal1=>Lfor.body%2%d))))))
=suffixpath_at_Lfor.cond%1%bbentry for dst.llvm.make_list
=suffixpath_at_Lfor.cond%1%bbentry.graph_edge_composition
(L0%0%d=>Lfor.cond%1%bbentry)
=suffixpath_at_Lfor.cond%2%d for dst.llvm.make_list
=suffixpath_at_Lfor.cond%2%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*(Lfor.cond%1%bbentry=>Lfor.cond%2%d))
=suffixpath_at_Lfor.end%1%d for dst.llvm.make_list
=suffixpath_at_Lfor.end%1%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*(Lfor.cond%2%d=>Lfor.end%1%d)))
=suffixpath_at_E0%0%d for dst.llvm.make_list
=suffixpath_at_E0%0%d.graph_edge_composition
((L0%0%d=>Lfor.cond%1%bbentry)*((Lfor.cond%1%bbentry=>Lfor.cond%2%d)*((Lfor.cond%2%d=>Lfor.end%1%d)*(Lfor.end%1%d=>E0%0%d))))
=suffixpaths for dst.llvm.make_list done
=tfg.assumes_around_edge
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at L0%0%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d assume #1.pred
=Comment
undef-behavioursome.edge.Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%intermediateVal1=>Lfor.body%2%d done
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
tfg.assumes_around_edge at Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd done
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1 done
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behavioursome.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
140276 : 0 { 0x0 +1.0e129 } : BV:32
141130 : isgepoffset(140757, 140276) : BOOL
141141 : and(140275, 141130) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140761 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
140781 : bvsign_ext(140761, 140519) : BV:64
141102 : bvmul(140652, 140781) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
141103 : bvextract(141102, 140523, 140519) : BV:32
140780 : bvslt(140761, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
141116 : ite(140780, 140505, 140276) : BV:32
141118 : eq(141103, 141116) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
141120 : isindexforsize(141118, 140430) : BOOL
140760 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
141073 : bvmul(140427, 140761) : BV:32
141077 : bvadd(140760, 141073) : BV:32
141122 : isgepoffset(141077, 141073) : BOOL
141124 : and(141120, 141122) : BOOL
141126 : islangaligned(141077, 140430) : BOOL
141147 : and(141124, 141126, 141130, 141141) : BOOL
141149 : islangaligned(140757, 140430) : BOOL
141080 : bvadd(140427, 140757) : BV:32
141155 : isgepoffset(141080, 140427) : BOOL
141163 : and(141141, 141147, 141149, 141155) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry assume #1.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%2%d=>Lfor.cond%1%bbentry
=LhsExpr
140427 : 4 { 0x4 +1.47e129 } : BV:32
140757 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
141080 : bvadd(140427, 140757) : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
141094 : islangaligned(141080, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

tfg.assumes_around_edge at Lfor.body%2%d=>Lfor.cond%1%bbentry done
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d
tfg.assumes_around_edge at Lfor.cond%1%bbentry=>Lfor.cond%2%d done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.body%1%fcallStart done
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d
tfg.assumes_around_edge at Lfor.cond%2%d=>Lfor.end%1%d done
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d
tfg.assumes_around_edge at Lfor.end%1%d=>E0%0%d done
tfg.assumes_around_edge done
=TFGdone
=PC_to_linename:
=pc
Lentry%1%d
=linename
line 8
=pc
Lfor.body%1%d
=linename
line 9
=pc
Lfor.body%2%d
=linename
line 9
=pc
Lfor.body%3%d
=linename
line 10
=pc
Lfor.body%4%d
=linename
line 10
=pc
Lfor.body%5%d
=linename
line 10
=pc
Lfor.body%6%d
=linename
line 10
=pc
Lfor.body%7%d
=linename
line 11
=pc
Lfor.body%8%d
=linename
line 11
=pc
Lfor.body%9%d
=linename
line 13
=pc
Lfor.cond%1%d
=linename
line 8
=pc
Lfor.cond%2%d
=linename
line 8
=pc
Lfor.end%1%d
=linename
line 14
=pc
Lfor.inc%1%d
=linename
line 8
=pc
Lfor.inc%2%d
=linename
line 8
=PC_to_linename done
=PC_to_column_name:
=pc
Lentry%1%d
=column_name
 at column 8
=pc
Lfor.body%1%d
=column_name
 at column 18
=pc
Lfor.body%2%d
=column_name
 at column 18
=pc
Lfor.body%3%d
=column_name
 at column 17
=pc
Lfor.body%4%d
=column_name
 at column 17
=pc
Lfor.body%5%d
=column_name
 at column 11
=pc
Lfor.body%6%d
=column_name
 at column 15
=pc
Lfor.body%7%d
=column_name
 at column 11
=pc
Lfor.body%8%d
=column_name
 at column 16
=pc
Lfor.body%9%d
=column_name
 at column 3
=pc
Lfor.cond%1%d
=column_name
 at column 26
=pc
Lfor.cond%2%d
=column_name
 at column 3
=pc
Lfor.end%1%d
=column_name
 at column 3
=pc
Lfor.inc%1%d
=column_name
 at column 31
=pc
Lfor.inc%2%d
=column_name
 at column 3
=PC_to_column_name done
=PC_to_line_and_column:
=pc
Lentry%1%d
=line_and_column
(line 8 at column 8)
=pc
Lfor.body%1%d
=line_and_column
line 9
=pc
Lfor.body%2%d
=line_and_column
line 9
=pc
Lfor.body%3%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%4%d
=line_and_column
(line 10 at column 17)
=pc
Lfor.body%5%d
=line_and_column
(line 10 at column 11)
=pc
Lfor.body%6%d
=line_and_column
(line 10 at column 15)
=pc
Lfor.body%7%d
=line_and_column
(line 11 at column 11)
=pc
Lfor.body%8%d
=line_and_column
(line 11 at column 16)
=pc
Lfor.body%9%d
=line_and_column
line 13
=pc
Lfor.cond%1%d
=line_and_column
(line 8 at column 26)
=pc
Lfor.cond%2%d
=line_and_column
(line 8 at column 3)
=pc
Lfor.end%1%d
=line_and_column
line 14
=pc
Lfor.inc%1%d
=line_and_column
(line 8 at column 31)
=pc
Lfor.inc%2%d
=line_and_column
(line 8 at column 3)
=PC_to_line_and_column done
=SourceToLLVMVarnames:
=SourceToLLVMVarnames done
=InputLLVMToSourceVarnames:
input.dst.llvm-%n : L0%0%d : n'
input.dst.llvm-%arr : L0%0%d : arr'
input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : L0%0%d : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
input.dst.llvm-%l.0 : Lfor.cond%1%bbentry : l'
input.dst.local_alloc_count.=L0%0%d= : L0%0%d : input.dst.local_alloc_count.=L0%0%d=
input.dst.llvm-%i.0 : Lfor.cond%1%bbentry : i'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset : L0%0%d : (arr' + input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%1 : L0%0%d : DSTMEM[input.dst.llvm-%arrayidx]_4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset : L0%0%d : 4
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset : L0%0%d : (4 + input.dst.llvm-%0)
input.dst.llvm-%inc : Lfor.inc%2%bbentry : i'
input.dst.llvm-%hidden-reg : L0%0%d : input.dst.llvm-%hidden-reg
input.dst.llvm-callee-save.0 : L0%0%d : input.dst.llvm-callee-save.0
input.dst.llvm-callee-save.1 : L0%0%d : input.dst.llvm-callee-save.1
input.dst.llvm-callee-save.2 : L0%0%d : input.dst.llvm-callee-save.2
input.dst.llvm-callee-save.3 : L0%0%d : input.dst.llvm-callee-save.3
input.dst.llvm-%0 : Lfor.body%3%bbentry : node'
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset : L0%0%d : bvmul(input.dst.llvm-%i.0, 4)
input.dst.llvm-%arrayidx : L0%0%d : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset : L0%0%d : 0
input.dst.llvm-%val : L0%0%d : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset : L0%0%d : 4
input.dst.llvm-%next : L0%0%d : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset
input.dst.llvm-%l.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%0
input.dst.llvm-%i.0.phi.tmpvar.for.inc : L0%0%d : input.dst.llvm-%inc
input.dst.llvm-%ret-reg : L0%0%d : input.dst.llvm-%l.0
input.dst.llvm-indir_tgt : L0%0%d : return-address
input.dst.cur_rounding_mode : L0%0%d : ROUND_to_nearest_ties_to_even
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : L0%0%d : 8
input.dst.llvm-%n.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%n.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%arr.Lfor.body%2%d : L0%0%d : malloc_side_effect(input.dst.llvm-%arr.Lfor.cond%1%bbentry, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%call.Lfor.body%2%d : L0%0%d : ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, 0, heap_alloc_ptr(input.dst.llvm-%call.Lfor.body%1%fcallEnd, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/))
input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-indir_tgt.E0%0%d : L0%0%d : return-address
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%ret-reg.E0%0%d : L0%0%d : input.dst.llvm-%l.0.Lfor.cond%1%bbentry
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : L0%0%d : malloc_side_effect(8, ite(input.dst.llvm-%call.Lfor.body%1%fcallEnd = 0, input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, heap_alloc(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, input.dst.llvm-%call.Lfor.body%1%fcallEnd, 8)), memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/)
input.dst.llvm-%hidden-reg.E0%0%d : L0%0%d : bvxor(bvxor(bvxor(bvxor(input.dst.llvm-%hidden-reg, input.dst.llvm-callee-save.0), input.dst.llvm-callee-save.1), input.dst.llvm-callee-save.2), input.dst.llvm-callee-save.3)
input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : L0%0%d : 4
input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%0.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%1.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-mem.Lfor.body%2%d[(input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)]_4
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : L0%0%d : bvmul(4, input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : L0%0%d : (input.dst.llvm-%arr.Lfor.body%2%d + 4*input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : L0%0%d : 0
input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.llvm-%inc.Lfor.cond%1%bbentry : L0%0%d : (1 + input.dst.llvm-%i.0.Lfor.body%2%d)
input.dst.llvm-%next.Lfor.cond%1%bbentry : L0%0%d : (4 + input.dst.llvm-%call.Lfor.body%2%d)
input.dst.llvm-%val.Lfor.cond%1%bbentry : L0%0%d : input.dst.llvm-%call.Lfor.body%2%d
input.dst.cur_rounding_mode.Lfor.cond%1%bbentry : L0%0%d : ROUND_to_nearest_ties_to_even
=InputLLVMToSourceVarnames done
=PotentialSCEVRelations:
=dst.llvm-%i.0
=dst.llvm-%i.0 loop pc: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb
=dst.llvm-%i.0 val_scevb scev
=dst.llvm-%i.0 val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 val_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 val_scevb scev scev_expr done
=dst.llvm-%i.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb
=dst.llvm-%i.0 atuse_scevb scev
=dst.llvm-%i.0 atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%i.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%i.0 atuse_scevb scev scev_expr
1 : 00000000000000000000000000000000b
2 : 00000000000000000000000000000001b
3 : scev_op_addrec(1, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%i.0 atuse_scevb scev scev_expr done
=dst.llvm-%i.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%i.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%i.0 atexit_scev
=dst.llvm-%i.0 atexit_scev loop: L0%0%d
=dst.llvm-%i.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%i.0 atexit_scev scev_expr
4 : input.dst.llvm-%n : BV32
=dst.llvm-%i.0 atexit_scev scev_expr done
=dst.llvm-%l.0
=dst.llvm-%l.0 loop pc: Lfor.cond%1%d
=dst.llvm-%l.0 val_scevb
=dst.llvm-%l.0 val_scevb scev
=dst.llvm-%l.0 val_scevb scev loop: L0%0%d
=dst.llvm-%l.0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 val_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 val_scevb scev scev_expr done
=dst.llvm-%l.0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb
=dst.llvm-%l.0 atuse_scevb scev
=dst.llvm-%l.0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%l.0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%l.0 atuse_scevb scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atuse_scevb scev scev_expr done
=dst.llvm-%l.0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%l.0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%l.0 atexit_scev
=dst.llvm-%l.0 atexit_scev loop: L0%0%d
=dst.llvm-%l.0 atexit_scev scev_overflow_flag: 
=dst.llvm-%l.0 atexit_scev scev_expr
5 : input.dst.llvm-%l.0 : BV32
=dst.llvm-%l.0 atexit_scev scev_expr done
=dst.llvm-%call
=dst.llvm-%call loop pc: Lfor.cond%1%d
=dst.llvm-%call val_scevb
=dst.llvm-%call val_scevb scev
=dst.llvm-%call val_scevb scev loop: L0%0%d
=dst.llvm-%call val_scevb scev scev_overflow_flag: 
=dst.llvm-%call val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call val_scevb scev scev_expr done
=dst.llvm-%call val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call val_scevb signed lower bound: 32:4294967295
=dst.llvm-%call val_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb
=dst.llvm-%call atuse_scevb scev
=dst.llvm-%call atuse_scevb scev loop: L0%0%d
=dst.llvm-%call atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%call atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atuse_scevb scev scev_expr done
=dst.llvm-%call atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%call atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%call atexit_scev
=dst.llvm-%call atexit_scev loop: L0%0%d
=dst.llvm-%call atexit_scev scev_overflow_flag: 
=dst.llvm-%call atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%call atexit_scev scev_expr done
=dst.llvm-%0
=dst.llvm-%0 loop pc: Lfor.cond%1%d
=dst.llvm-%0 val_scevb
=dst.llvm-%0 val_scevb scev
=dst.llvm-%0 val_scevb scev loop: L0%0%d
=dst.llvm-%0 val_scevb scev scev_overflow_flag: 
=dst.llvm-%0 val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 val_scevb scev scev_expr done
=dst.llvm-%0 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb
=dst.llvm-%0 atuse_scevb scev
=dst.llvm-%0 atuse_scevb scev loop: L0%0%d
=dst.llvm-%0 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%0 atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atuse_scevb scev scev_expr done
=dst.llvm-%0 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%0 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%0 atexit_scev
=dst.llvm-%0 atexit_scev loop: L0%0%d
=dst.llvm-%0 atexit_scev scev_overflow_flag: 
=dst.llvm-%0 atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%0 atexit_scev scev_expr done
=dst.llvm-%arrayidx
=dst.llvm-%arrayidx loop pc: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb
=dst.llvm-%arrayidx val_scevb scev
=dst.llvm-%arrayidx val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx val_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx val_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx val_scevb scev scev_expr done
=dst.llvm-%arrayidx val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx val_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb
=dst.llvm-%arrayidx atuse_scevb scev
=dst.llvm-%arrayidx atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%arrayidx atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr
7 : input.dst.llvm-%arr : BV32
8 : 00000000000000000000000000000100b
9 : scev_op_addrec(7, 8) : loop Lfor.cond%1%d : 
=dst.llvm-%arrayidx atuse_scevb scev scev_expr done
=dst.llvm-%arrayidx atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%arrayidx atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%arrayidx atexit_scev
=dst.llvm-%arrayidx atexit_scev loop: L0%0%d
=dst.llvm-%arrayidx atexit_scev scev_overflow_flag: 
=dst.llvm-%arrayidx atexit_scev scev_expr
8 : 00000000000000000000000000000100b
4 : input.dst.llvm-%n : BV32
10 : scev_op_mul(8, 4) : loop L0%0%d : 
7 : input.dst.llvm-%arr : BV32
11 : scev_op_add(10, 7) : loop L0%0%d : 
=dst.llvm-%arrayidx atexit_scev scev_expr done
=dst.llvm-%1
=dst.llvm-%1 loop pc: Lfor.cond%1%d
=dst.llvm-%1 val_scevb
=dst.llvm-%1 val_scevb scev
=dst.llvm-%1 val_scevb scev loop: L0%0%d
=dst.llvm-%1 val_scevb scev scev_overflow_flag: 
=dst.llvm-%1 val_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 val_scevb scev scev_expr done
=dst.llvm-%1 val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 val_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 val_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb
=dst.llvm-%1 atuse_scevb scev
=dst.llvm-%1 atuse_scevb scev loop: L0%0%d
=dst.llvm-%1 atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%1 atuse_scevb scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atuse_scevb scev scev_expr done
=dst.llvm-%1 atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%1 atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%1 atexit_scev
=dst.llvm-%1 atexit_scev loop: L0%0%d
=dst.llvm-%1 atexit_scev scev_overflow_flag: 
=dst.llvm-%1 atexit_scev scev_expr
12 : input.dst.llvm-%1 : BV32
=dst.llvm-%1 atexit_scev scev_expr done
=dst.llvm-%val
=dst.llvm-%val loop pc: Lfor.cond%1%d
=dst.llvm-%val val_scevb
=dst.llvm-%val val_scevb scev
=dst.llvm-%val val_scevb scev loop: L0%0%d
=dst.llvm-%val val_scevb scev scev_overflow_flag: 
=dst.llvm-%val val_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val val_scevb scev scev_expr done
=dst.llvm-%val val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val val_scevb signed lower bound: 32:4294967295
=dst.llvm-%val val_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb
=dst.llvm-%val atuse_scevb scev
=dst.llvm-%val atuse_scevb scev loop: L0%0%d
=dst.llvm-%val atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%val atuse_scevb scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atuse_scevb scev scev_expr done
=dst.llvm-%val atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%val atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%val atexit_scev
=dst.llvm-%val atexit_scev loop: L0%0%d
=dst.llvm-%val atexit_scev scev_overflow_flag: 
=dst.llvm-%val atexit_scev scev_expr
6 : input.dst.llvm-%call : BV32
=dst.llvm-%val atexit_scev scev_expr done
=dst.llvm-%next
=dst.llvm-%next loop pc: Lfor.cond%1%d
=dst.llvm-%next val_scevb
=dst.llvm-%next val_scevb scev
=dst.llvm-%next val_scevb scev loop: L0%0%d
=dst.llvm-%next val_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next val_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next val_scevb scev scev_expr done
=dst.llvm-%next val_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next val_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next val_scevb signed lower bound: 32:2147483652
=dst.llvm-%next val_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb
=dst.llvm-%next atuse_scevb scev
=dst.llvm-%next atuse_scevb scev loop: L0%0%d
=dst.llvm-%next atuse_scevb scev scev_overflow_flag: nsw
=dst.llvm-%next atuse_scevb scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atuse_scevb scev scev_expr done
=dst.llvm-%next atuse_scevb unsigned lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb unsigned upper bound: 32:2147483648
=dst.llvm-%next atuse_scevb signed lower bound: 32:2147483652
=dst.llvm-%next atuse_scevb signed upper bound: 32:2147483648
=dst.llvm-%next atexit_scev
=dst.llvm-%next atexit_scev loop: L0%0%d
=dst.llvm-%next atexit_scev scev_overflow_flag: nsw
=dst.llvm-%next atexit_scev scev_expr
8 : 00000000000000000000000000000100b
6 : input.dst.llvm-%call : BV32
13 : scev_op_add(8, 6) : loop L0%0%d : nsw
=dst.llvm-%next atexit_scev scev_expr done
=dst.llvm-%inc
=dst.llvm-%inc loop pc: Lfor.cond%1%d
=dst.llvm-%inc val_scevb
=dst.llvm-%inc val_scevb scev
=dst.llvm-%inc val_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc val_scevb scev scev_overflow_flag: 
=dst.llvm-%inc val_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc val_scevb scev scev_expr done
=dst.llvm-%inc val_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc val_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc val_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc val_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb
=dst.llvm-%inc atuse_scevb scev
=dst.llvm-%inc atuse_scevb scev loop: Lfor.cond%1%d
=dst.llvm-%inc atuse_scevb scev scev_overflow_flag: 
=dst.llvm-%inc atuse_scevb scev scev_expr
2 : 00000000000000000000000000000001b
14 : scev_op_addrec(2, 2) : loop Lfor.cond%1%d : 
=dst.llvm-%inc atuse_scevb scev scev_expr done
=dst.llvm-%inc atuse_scevb unsigned lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb unsigned upper bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed lower bound: 32:4294967295
=dst.llvm-%inc atuse_scevb signed upper bound: 32:4294967295
=dst.llvm-%inc atexit_scev
=dst.llvm-%inc atexit_scev loop: L0%0%d
=dst.llvm-%inc atexit_scev scev_overflow_flag: 
=dst.llvm-%inc atexit_scev scev_expr
2 : 00000000000000000000000000000001b
4 : input.dst.llvm-%n : BV32
15 : scev_op_add(2, 4) : loop L0%0%d : 
=dst.llvm-%inc atexit_scev scev_expr done
=PotentialSCEVRelations done
=ReachingDefinitionsForLocs:
=Reaching Definitions at L0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 1 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%intermediateVal1
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallStart
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%1%fcallEnd
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.body%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%1%bbentry
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.cond%2%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at Lfor.end%1%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 27 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 28 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 29 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns done
=Reaching Definitions at E0%0%d
=reaching defns for expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 0 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 0 edges done
=reaching defns for expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 1 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 1 edges done
=reaching defns for expr 2
1 : input.dst.llvm-%n : BV:32
=reaching defns for expr 2 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 2 edges done
=reaching defns for expr 3
1 : input.dst.llvm-%arr : BV:32
=reaching defns for expr 3 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 3 edges done
=reaching defns for expr 4
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 4 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 4 edges done
=reaching defns for expr 5
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.0 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 5 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 5 edges done
=reaching defns for expr 6
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 6 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 6 edges done
=reaching defns for expr 7
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 7 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 7 edges done
=reaching defns for expr 8
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 8 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 8 edges done
=reaching defns for expr 9
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 9 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 9 edges done
=reaching defns for expr 10
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--arg.1 : MEMLABEL
4 : memmask(1, 2, 3) : ARRAY[BV:32 -> BV:8]
=reaching defns for expr 10 edges
  L0%0%d=>L0%0%d
=reaching defns for expr 10 edges done
=reaching defns for expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 11 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 11 edges done
=reaching defns for expr 12
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 12 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 12 edges done
=reaching defns for expr 13
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 13 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 13 edges done
=reaching defns for expr 14
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 14 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 14 edges done
=reaching defns for expr 15
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 15 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 15 edges done
=reaching defns for expr 16
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd : BV:32
=reaching defns for expr 16 edges
  Lfor.body%1%fcallStart=>Lfor.body%1%fcallEnd
=reaching defns for expr 16 edges done
=reaching defns for expr 17
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=reaching defns for expr 17 edges
  Lfor.cond%1%bbentry=>Lfor.cond%2%d
=reaching defns for expr 17 edges done
=reaching defns for expr 18
1 : input.dst.llvm-%call.Lfor.body%2%d : BV:32
=reaching defns for expr 18 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 18 edges done
=reaching defns for expr 19
1 : input.dst.llvm-%arr.Lfor.body%2%d : BV:32
=reaching defns for expr 19 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 19 edges done
=reaching defns for expr 20
1 : input.dst.llvm-%i.0.Lfor.body%2%d : BV:32
=reaching defns for expr 20 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 20 edges done
=reaching defns for expr 21
1 : input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 21 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 21 edges done
=reaching defns for expr 22
1 : input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d : BV:32
=reaching defns for expr 22 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 22 edges done
=reaching defns for expr 23
1 : input.dst.llvm-%n.Lfor.body%2%d : BV:32
=reaching defns for expr 23 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 23 edges done
=reaching defns for expr 24
1 : input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 24 edges
  L0%0%d=>Lfor.cond%1%bbentry
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 24 edges done
=reaching defns for expr 25
1 : input.dst.llvm-%l.0.Lfor.body%2%d : BV:32
=reaching defns for expr 25 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 25 edges done
=reaching defns for expr 26
1 : input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d : BV:32
=reaching defns for expr 26 edges
  Lfor.body%1%intermediateVal1=>Lfor.body%2%d
=reaching defns for expr 26 edges done
=reaching defns for expr 27
1 : input.dst.llvm-%hidden-reg.E0%0%d : BV:32
=reaching defns for expr 27 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 27 edges done
=reaching defns for expr 28
1 : input.dst.llvm-%ret-reg.E0%0%d : BV:32
=reaching defns for expr 28 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 28 edges done
=reaching defns for expr 29
1 : input.dst.llvm-indir_tgt.E0%0%d : BV:32
=reaching defns for expr 29 edges
  Lfor.end%1%d=>E0%0%d
=reaching defns for expr 29 edges done
=reaching defns for expr 30
1 : input.dst.llvm-%0.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 30 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 30 edges done
=reaching defns for expr 31
1 : input.dst.llvm-%1.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 31 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 31 edges done
=reaching defns for expr 32
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 32 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 32 edges done
=reaching defns for expr 33
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 33 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 33 edges done
=reaching defns for expr 34
1 : input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 34 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 34 edges done
=reaching defns for expr 35
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 35 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 35 edges done
=reaching defns for expr 36
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 36 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 36 edges done
=reaching defns for expr 37
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 37 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 37 edges done
=reaching defns for expr 38
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 38 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 38 edges done
=reaching defns for expr 39
1 : input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 39 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 39 edges done
=reaching defns for expr 40
1 : input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 40 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 40 edges done
=reaching defns for expr 41
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 41 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 41 edges done
=reaching defns for expr 42
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 42 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 42 edges done
=reaching defns for expr 43
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 43 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 43 edges done
=reaching defns for expr 44
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 44 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 44 edges done
=reaching defns for expr 45
1 : input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 45 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 45 edges done
=reaching defns for expr 46
1 : input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 46 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 46 edges done
=reaching defns for expr 47
1 : input.dst.llvm-%inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 47 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 47 edges done
=reaching defns for expr 48
1 : input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 48 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 48 edges done
=reaching defns for expr 49
1 : input.dst.llvm-%next.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 49 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 49 edges done
=reaching defns for expr 50
1 : input.dst.llvm-%val.Lfor.cond%1%bbentry : BV:32
=reaching defns for expr 50 edges
  Lfor.body%2%d=>Lfor.cond%1%bbentry
=reaching defns for expr 50 edges done
=reaching defns done
=ReachingDefinitionsForLocs done
=VarnameToLRStatus Begin:
=LR status for var input.dst.llvm-%arr.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%n
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
lr_status_top
=LR status for var input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
lr_status_top
=LR status for var input.dst.local_alloc_count.=L0%0%d=
lr_status_top
=LR status for var input.dst.llvm-%n.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%hidden-reg
lr_status_top
=LR status for var input.dst.llvm-callee-save.0
lr_status_top
=LR status for var input.dst.llvm-callee-save.1
lr_status_top
=LR status for var input.dst.llvm-callee-save.2
lr_status_top
=LR status for var input.dst.llvm-callee-save.3
lr_status_top
=LR status for var input.dst.llvm-%call.Lfor.body%1%fcallEnd
lr_status_bottom(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%cmp.Lfor.cond%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%n.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem-may-straddle-symbol.1-heap, memlabel-mem--arg.1, )
=LR status for var input.dst.llvm-%arr.Lfor.body%2%d
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%i.0.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.local_alloc_count.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%call.Lfor.body%2%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-indir_tgt.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%ret-reg.E0%0%d
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%hidden-reg.E0%0%d
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%0.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%1.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, local./*___y___make_list__x__=L0%0%argnum1=/, local./*___y___make_list__x__=L0%0%argnum0=/, ; memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
lr_status_bottom(hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; memlabel-mem--arg.0, memlabel-mem-may-straddle-symbol.1-heap, )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%inc.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=LR status for var input.dst.llvm-%next.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.llvm-%val.Lfor.cond%1%bbentry
lr_status_linearly_related(hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ; )
=LR status for var input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
lr_status_linearly_related(; )
=VarnameToLRStatus End
=TFG_LLVM_done
=TFG_SSA_done
=eqcheck_info
=eqcheck
=proof_filename ind9.proof
=function_name make_list
=asm_filename NONE
=fixed_reg_mappings begin
0 : 0 : 0
0 : 4 : 4
=fixed_reg_mappings end
=rodata_map begin
=rodata_map end
=dst_iseq
=dst_iseq done
=dst_insn_pcs
=dst_insn_pcs done
=xml_output_format text-color
=use_only_relocatable_memlabels 0
=run_safety_check 0
=debug_header_pc_lsprels
=Local offsets from compile log
=Local offsets from compile log done
=done
=spec_iospecs
=SpecFuncIOSpecs
=FunctionName: make_list
=EntryPreconds
=pred 0
=Comment
pointer-implements-map
=LhsExpr
1 : $spec-arg-0 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : $llvm-arg-1 : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : $llvm-md : ARRAY[BV:32 -> BV:8]
11 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : $llvm-arg-0 : BV:32
14 : 4 { 0x4 +1.47e129 } : BV:32
15 : bvmul(9, 14) : BV:32
16 : bvadd(13, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=EntryPreconds done
=ExitAsserts
=pred 0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : $spec-ret : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : $llvm-ret : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : $llvm-md : ARRAY[BV:32 -> BV:8]
7 : $llvm-ma : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=predicate_set done
=ExitAsserts done
=SpecFuncIOSpecs done
=eqcheck done
=graph_with_guessing
=Nodes: L0%0%d_L0%0%d L3%6%bbentry_Lfor.body%1%fcallStart L3%6%bbentry_Lfor.body%1%fcallEnd L3%6%bbentry_Lfor.cond%1%bbentry E0%0%d_E0%0%d
=Edges:
L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=graph done
=is_ssa_graph:
0
=StartState:
=state_end
=graph_with_var_versions done
=FunctionName: make_list
=Input: tfg-method-arg.0
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
=arg val
1 : input.dst.llvm-%arr : BV:32
=arg end
=Input: tfg-method-arg.1
=arg addr
1 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
=arg val
1 : input.dst.llvm-%n : BV:32
=arg end
=Node outputs: E0%0%d_E0%0%d
=Node outputs done for E0%0%d_E0%0%d
=input_outputs done
=Symbol-map:
C_SYMBOL1 : make_list : 26 : 1 : 0
=Touched symbols:
=Symbol-map done
=Locals-map:
C_LOCAL=L0%0%argnum0= : dst.llvm-%arr : 4 : 4 : 0
C_LOCAL=L0%0%argnum1= : dst.llvm-%n : 4 : 4 : 0
=Locals-map done
=Global assumes
=global assume predicate_set done
=Edge: L0%0%d_L0%0%d => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L0%0%d to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>L3%6%bbentry#{0,0})
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from L0%0%d to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(L0%0%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => E0%0%d_E0%0%d
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%8%bbentry#{0,0})*(L3%8%bbentry#{0,0}=>E0%0%d#{0,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to E0%0%d at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*((Lfor.cond%2%d#{0,0}=>Lfor.end%1%d#{0,0})*(Lfor.end%1%d#{0,0}=>E0%0%d#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.cond%1%bbentry => L3%6%bbentry_Lfor.body%1%fcallStart
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.cond%1%bbentry to Lfor.body%1%fcallStart at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.cond%1%bbentry#{0,0}=>Lfor.cond%2%d#{0,0})*(Lfor.cond%2%d#{0,0}=>Lfor.body%1%fcallStart#{0,0}))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallStart => L3%6%bbentry_Lfor.body%1%fcallEnd
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 0 delta {0,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
(epsilon)
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallStart to Lfor.body%1%fcallEnd at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
(Lfor.body%1%fcallStart#{0,0}=>Lfor.body%1%fcallEnd#{0,0})
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=Edge: L3%6%bbentry_Lfor.body%1%fcallEnd => L3%6%bbentry_Lfor.cond%1%bbentry
=Edge.src_tfg_full_pathset
=Edge.src_tfg_full_pathset.ec from L3%6%bbentry to L3%6%bbentry at unroll 1 delta {1,0}
=Edge.src_tfg_full_pathset.graph_edge_composition
((L3%6%bbentry#{0,0}=>L3%7%d#{0,0})*((L3%7%d#{0,0}=>L3%10%bbentry#{0,0})*(L3%10%bbentry#{0,0}=>L3%6%bbentry#{1,0})))
=Edge.src_tfg_full_pathset done
=Edge.dst_tfg_full_pathset
=Edge.dst_tfg_full_pathset.ec from Lfor.body%1%fcallEnd to Lfor.cond%1%bbentry at unroll 1 delta {1,0}
=Edge.dst_tfg_full_pathset.graph_edge_composition
((Lfor.body%1%fcallEnd#{0,0}=>Lfor.body%1%intermediateVal1#{0,0})*((Lfor.body%1%intermediateVal1#{0,0}=>Lfor.body%2%d#{0,0})*(Lfor.body%2%d#{0,0}=>Lfor.cond%1%bbentry#{0,0})))
=Edge.dst_tfg_full_pathset done
=Edge.cg_edge_assumes.Assumes.begin:
=Edge.cg_edge_assumes.Assumes.end

=graph_with_predicates_done

=start_pc_preconditions
=start_pc_precondition.0
=Comment
precond-mlasserts
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.1
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%n : BV:32
=predicate done
=start_pc_precondition.2
=Comment
pointer-implements-map
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=start_pc_precondition.3
=Comment
arg-location-contents-are-consistent-with-arg-value
=LhsExpr
1 : input.dst.llvm-mem : ARRAY[BV:32 -> BV:8]
2 : input.dst.llvm-mem.alloc : ARRAY[BV:32 -> MEMLABEL]
3 : memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/ : MEMLABEL
4 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
5 : 4 { 0x4 +1.0e1025 } : INT
6 : 0 { 0x0 } : BOOL
7 : select(1, 2, 3, 4, 5, 6) : BV:32
=RhsExpr
1 : input.dst.llvm-%arr : BV:32
=predicate done
=graph_with_precondition_done

=Locs in make_list.A2.B1.C1.D1.E2
=Locs end
=Liveness in make_list.A2.B1.C1.D1.E2
=live locs at L0%0%d_L0%0%d

=live locs at L3%6%bbentry_Lfor.body%1%fcallStart

=live locs at L3%6%bbentry_Lfor.body%1%fcallEnd

=live locs at L3%6%bbentry_Lfor.cond%1%bbentry

=live locs at E0%0%d_E0%0%d


=Definedness in make_list.A2.B1.C1.D1.E2

=Branch affecting variable locs in make_list.A2.B1.C1.D1.E2

=Relevant Memlabels in make_list.A2.B1.C1.D1.E2
=relevant memlabels
=function: make_list
memlabel-mem--arg.0
memlabel-mem-may-straddle-symbol.1-heap
memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/
memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/
memlabel-mem--arg.1
=touched symbol ids

=relevant memlabels done
=graph_with_locs_done
=graph_with_edge_structures
=graph_with_edge_structures.loc_to_expr_map done
=graph_with_edge_structures done
=graph_with_ml_contiguity_info vacuous mls
=graph_with_ml_contiguity_info non-vacuous mls
=graph_with_ml_contiguity_info discontiguous mls
discontiguous mls:
=graph_with_ml_contiguity_info done
=Available expressions in make_list.A2.B1.C1.D1.E2
=avail_exprs begin
=avail_exprs end
=sprel_map in make_list.A2.B1.C1.D1.E2
=sprel_map done
=lr-status-map
=lr-status-map done
=lr-status-for-sprel-locs-map
=lr-status-for-sprel-locs-map done
=graph_with_aliasing_done
=Memlabel assertions empty
=Memlabel assertions done
=graph_with_proofs done
=global counterexamples for reason inductive-invariants
=global nodece 0
=global nodece 0 nodece z3.ce7.num_edges_traversed0
=global nodece 0 nodece_path
=global nodece 0 nodece_path.graph_edge_composition
(epsilon)
=global nodece 0 nodece_cached_counterexample
=counter_example_begin z3.ce7 9ed78bb6681cbd0b8385c8853205f8c
=input.spec-%var-arr-1
1 : Lambda140 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda141 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda143 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda144 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
17 : eq(15, 16) : BOOL
18 : 0 { 0x0 } : BV:8
19 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
20 : eq(15, 19) : BOOL
21 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
22 : eq(15, 21) : BOOL
23 : 239 { 0xef -17 } : BV:8
24 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
25 : eq(15, 24) : BOOL
26 : 119 { 0x77 } : BV:8
27 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
28 : eq(15, 27) : BOOL
29 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
30 : eq(15, 29) : BOOL
31 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
32 : eq(15, 31) : BOOL
33 : 198 { 0xc6 -58 } : BV:8
34 : 251 { 0xfb -5 } : BV:8
35 : ite(32, 33, 34) : BV:8
36 : ite(30, 18, 35) : BV:8
37 : ite(28, 18, 36) : BV:8
38 : ite(25, 26, 37) : BV:8
39 : ite(22, 23, 38) : BV:8
40 : ite(20, 18, 39) : BV:8
41 : ite(17, 18, 40) : BV:8
42 : 2 { 0x2 +1.23e129 } : BV:32
43 : bvadd(42, 13, 14) : BV:32
44 : eq(43, 16) : BOOL
45 : eq(43, 19) : BOOL
46 : eq(43, 21) : BOOL
47 : eq(43, 24) : BOOL
48 : eq(43, 27) : BOOL
49 : eq(43, 29) : BOOL
50 : eq(43, 31) : BOOL
51 : ite(50, 33, 34) : BV:8
52 : ite(49, 18, 51) : BV:8
53 : ite(48, 18, 52) : BV:8
54 : ite(47, 26, 53) : BV:8
55 : ite(46, 23, 54) : BV:8
56 : ite(45, 18, 55) : BV:8
57 : ite(44, 18, 56) : BV:8
58 : 1 { 0x1 +1.11e129 } : BV:32
59 : bvadd(58, 13, 14) : BV:32
60 : eq(59, 16) : BOOL
61 : eq(59, 19) : BOOL
62 : eq(59, 21) : BOOL
63 : eq(59, 24) : BOOL
64 : eq(59, 27) : BOOL
65 : eq(59, 29) : BOOL
66 : eq(59, 31) : BOOL
67 : ite(66, 33, 34) : BV:8
68 : ite(65, 18, 67) : BV:8
69 : ite(64, 18, 68) : BV:8
70 : ite(63, 26, 69) : BV:8
71 : ite(62, 23, 70) : BV:8
72 : ite(61, 18, 71) : BV:8
73 : ite(60, 18, 72) : BV:8
74 : bvadd(13, 14) : BV:32
75 : eq(74, 16) : BOOL
76 : eq(74, 19) : BOOL
77 : eq(74, 21) : BOOL
78 : eq(74, 24) : BOOL
79 : eq(74, 27) : BOOL
80 : eq(74, 29) : BOOL
81 : eq(74, 31) : BOOL
82 : ite(81, 33, 34) : BV:8
83 : ite(80, 18, 82) : BV:8
84 : ite(79, 18, 83) : BV:8
85 : ite(78, 26, 84) : BV:8
86 : ite(77, 23, 85) : BV:8
87 : ite(76, 18, 86) : BV:8
88 : ite(75, 18, 87) : BV:8
89 : bvconcat(41, 57, 73, 88) : BV:32
90 : lambda(10, 89) : FUNCTION[BV:32 -> BV:32]
91 : map(9, 90) : MAP[BV:32 -> BV:32]
92 : sym_const(91) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda120 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform17 : BV:32
4 : Lambda145 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda146 : BV:32
7 : unit : UNIT
8 : 1758393872 { 0x68cef610 +1.61688423e82 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda121 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
8 : eq(6, 7) : BOOL
9 : 0 { 0x0 } : BV:8
10 : 1278990525 { 0x4c3bd8bd +1.46755182e25 } : BV:32
11 : eq(6, 10) : BOOL
12 : 682954989 { 0x28b510ed +1.41457903e210 } : BV:32
13 : eq(6, 12) : BOOL
14 : 239 { 0xef -17 } : BV:8
15 : 682954990 { 0x28b510ee +1.41457915e210 } : BV:32
16 : eq(6, 15) : BOOL
17 : 119 { 0x77 } : BV:8
18 : 1278990526 { 0x4c3bd8be +1.46755194e25 } : BV:32
19 : eq(6, 18) : BOOL
20 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
21 : eq(6, 20) : BOOL
22 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
23 : eq(6, 22) : BOOL
24 : 198 { 0xc6 -58 } : BV:8
25 : 251 { 0xfb -5 } : BV:8
26 : ite(23, 24, 25) : BV:8
27 : ite(21, 9, 26) : BV:8
28 : ite(19, 9, 27) : BV:8
29 : ite(16, 17, 28) : BV:8
30 : ite(13, 14, 29) : BV:8
31 : ite(11, 9, 30) : BV:8
32 : ite(8, 9, 31) : BV:8
33 : 2 { 0x2 +1.23e129 } : BV:32
34 : bvadd(33, 4, 5) : BV:32
35 : eq(34, 7) : BOOL
36 : eq(34, 10) : BOOL
37 : eq(34, 12) : BOOL
38 : eq(34, 15) : BOOL
39 : eq(34, 18) : BOOL
40 : eq(34, 20) : BOOL
41 : eq(34, 22) : BOOL
42 : ite(41, 24, 25) : BV:8
43 : ite(40, 9, 42) : BV:8
44 : ite(39, 9, 43) : BV:8
45 : ite(38, 17, 44) : BV:8
46 : ite(37, 14, 45) : BV:8
47 : ite(36, 9, 46) : BV:8
48 : ite(35, 9, 47) : BV:8
49 : 1 { 0x1 +1.11e129 } : BV:32
50 : bvadd(49, 4, 5) : BV:32
51 : eq(50, 7) : BOOL
52 : eq(50, 10) : BOOL
53 : eq(50, 12) : BOOL
54 : eq(50, 15) : BOOL
55 : eq(50, 18) : BOOL
56 : eq(50, 20) : BOOL
57 : eq(50, 22) : BOOL
58 : ite(57, 24, 25) : BV:8
59 : ite(56, 9, 58) : BV:8
60 : ite(55, 9, 59) : BV:8
61 : ite(54, 17, 60) : BV:8
62 : ite(53, 14, 61) : BV:8
63 : ite(52, 9, 62) : BV:8
64 : ite(51, 9, 63) : BV:8
65 : bvadd(4, 5) : BV:32
66 : eq(65, 7) : BOOL
67 : eq(65, 10) : BOOL
68 : eq(65, 12) : BOOL
69 : eq(65, 15) : BOOL
70 : eq(65, 18) : BOOL
71 : eq(65, 20) : BOOL
72 : eq(65, 22) : BOOL
73 : ite(72, 24, 25) : BV:8
74 : ite(71, 9, 73) : BV:8
75 : ite(70, 9, 74) : BV:8
76 : ite(69, 17, 75) : BV:8
77 : ite(68, 14, 76) : BV:8
78 : ite(67, 9, 77) : BV:8
79 : ite(66, 9, 78) : BV:8
80 : bvconcat(32, 48, 64, 79) : BV:32
81 : lambda(1, 80) : FUNCTION[BV:32 -> BV:32]
82 : sym_const(81) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 4218941382 { 0xfb77efc6 -76025914 -1.93700480e119 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 682954987 ] -> 251, [ 682954988; 682954988 ] -> 198, [ 682954989; 682954989 ] -> 239, [ 682954990; 682954990 ] -> 119, [ 682954991; 1278990523 ] -> 251, [ 1278990524; 1278990527 ] -> 0, [ 1278990528; 4294967295 ] -> 251, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 682954987 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 682954988; 682954991 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 682954992; 1278990523 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1278990524; 1278990527 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1278990528; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1278990524 { 0x4c3bd8bc +1.46755170e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1278990527 { 0x4c3bd8bf +1.46755206e25 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 682954988 { 0x28b510ec +1.41457891e210 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 682954991 { 0x28b510ef +1.41457927e210 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
350272784
=counter_example_end
=global nodece 0 num_edges_traversed 0
=global nodece 0 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 1
=global nodece 1 nodece z3v487.ce8.num_edges_traversed0
=global nodece 1 nodece_path
=global nodece 1 nodece_path.graph_edge_composition
(epsilon)
=global nodece 1 nodece_cached_counterexample
=counter_example_begin z3v487.ce8 d8d35bebb3568514733c13ec219d11e
=input.spec-%var-arr-1
1 : Lambda154 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda155 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda157 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 67372035 { 0x4040403 +1.3137242e137 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda158 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 17) : BV:32
21 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : bvule(2, 22) : BOOL
24 : 1427 { 0x593 +1.17011e129 } : BV:32
25 : bvule(22, 24) : BOOL
26 : and(23, 25) : BOOL
27 : 1 { 0x1 } : BV:8
28 : 1428 { 0x594 +1.17023e129 } : BV:32
29 : bvule(28, 22) : BOOL
30 : 1431 { 0x597 +1.17058e129 } : BV:32
31 : bvule(22, 30) : BOOL
32 : and(29, 31) : BOOL
33 : 4 { 0x4 } : BV:8
34 : 1432 { 0x598 +1.17070e129 } : BV:32
35 : bvule(34, 22) : BOOL
36 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
37 : bvule(22, 36) : BOOL
38 : and(35, 37) : BOOL
39 : 0 { 0x0 } : BV:8
40 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
41 : bvule(40, 22) : BOOL
42 : bvule(22, 10) : BOOL
43 : and(41, 42) : BOOL
44 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
45 : bvule(44, 22) : BOOL
46 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
47 : bvule(22, 46) : BOOL
48 : and(45, 47) : BOOL
49 : 5 { 0x5 } : BV:8
50 : ite(48, 49, 49) : BV:8
51 : ite(43, 39, 50) : BV:8
52 : ite(38, 39, 51) : BV:8
53 : ite(32, 33, 52) : BV:8
54 : ite(26, 27, 53) : BV:8
55 : 2 { 0x2 +1.23e129 } : BV:32
56 : bvadd(55, 20, 21) : BV:32
57 : bvule(2, 56) : BOOL
58 : bvule(56, 24) : BOOL
59 : and(57, 58) : BOOL
60 : bvule(28, 56) : BOOL
61 : bvule(56, 30) : BOOL
62 : and(60, 61) : BOOL
63 : bvule(34, 56) : BOOL
64 : bvule(56, 36) : BOOL
65 : and(63, 64) : BOOL
66 : bvule(40, 56) : BOOL
67 : bvule(56, 10) : BOOL
68 : and(66, 67) : BOOL
69 : bvule(44, 56) : BOOL
70 : bvule(56, 46) : BOOL
71 : and(69, 70) : BOOL
72 : ite(71, 49, 49) : BV:8
73 : ite(68, 39, 72) : BV:8
74 : ite(65, 39, 73) : BV:8
75 : ite(62, 33, 74) : BV:8
76 : ite(59, 27, 75) : BV:8
77 : 1 { 0x1 +1.11e129 } : BV:32
78 : bvadd(77, 20, 21) : BV:32
79 : bvule(2, 78) : BOOL
80 : bvule(78, 24) : BOOL
81 : and(79, 80) : BOOL
82 : bvule(28, 78) : BOOL
83 : bvule(78, 30) : BOOL
84 : and(82, 83) : BOOL
85 : bvule(34, 78) : BOOL
86 : bvule(78, 36) : BOOL
87 : and(85, 86) : BOOL
88 : bvule(40, 78) : BOOL
89 : bvule(78, 10) : BOOL
90 : and(88, 89) : BOOL
91 : bvule(44, 78) : BOOL
92 : bvule(78, 46) : BOOL
93 : and(91, 92) : BOOL
94 : ite(93, 49, 49) : BV:8
95 : ite(90, 39, 94) : BV:8
96 : ite(87, 39, 95) : BV:8
97 : ite(84, 33, 96) : BV:8
98 : ite(81, 27, 97) : BV:8
99 : bvadd(20, 21) : BV:32
100 : bvule(2, 99) : BOOL
101 : bvule(99, 24) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(28, 99) : BOOL
104 : bvule(99, 30) : BOOL
105 : and(103, 104) : BOOL
106 : bvule(34, 99) : BOOL
107 : bvule(99, 36) : BOOL
108 : and(106, 107) : BOOL
109 : bvule(40, 99) : BOOL
110 : bvule(99, 10) : BOOL
111 : and(109, 110) : BOOL
112 : bvule(44, 99) : BOOL
113 : bvule(99, 46) : BOOL
114 : and(112, 113) : BOOL
115 : ite(114, 49, 49) : BV:8
116 : ite(111, 39, 115) : BV:8
117 : ite(108, 39, 116) : BV:8
118 : ite(105, 33, 117) : BV:8
119 : ite(102, 27, 118) : BV:8
120 : bvconcat(54, 76, 98, 119) : BV:32
121 : lambda(17, 120) : FUNCTION[BV:32 -> BV:32]
122 : map(16, 121) : MAP[BV:32 -> BV:32]
123 : sym_const(122) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda131 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform19 : BV:32
4 : Lambda159 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda160 : BV:32
7 : unit : UNIT
8 : 723208484 { 0x2b1b4924 +1.21316957e215 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 67372035 ] -> true, [ 67372036; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda132 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
7 : bvadd(3, 5, 6) : BV:32
8 : bvule(2, 7) : BOOL
9 : 1427 { 0x593 +1.17011e129 } : BV:32
10 : bvule(7, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 1 { 0x1 } : BV:8
13 : 1428 { 0x594 +1.17023e129 } : BV:32
14 : bvule(13, 7) : BOOL
15 : 1431 { 0x597 +1.17058e129 } : BV:32
16 : bvule(7, 15) : BOOL
17 : and(14, 16) : BOOL
18 : 4 { 0x4 } : BV:8
19 : 1432 { 0x598 +1.17070e129 } : BV:32
20 : bvule(19, 7) : BOOL
21 : 1409482759 { 0x54030007 +1.2343833e41 } : BV:32
22 : bvule(7, 21) : BOOL
23 : and(20, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 1409482764 { 0x5403000c +1.2343893e41 } : BV:32
26 : bvule(25, 7) : BOOL
27 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
28 : bvule(7, 27) : BOOL
29 : and(26, 28) : BOOL
30 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
31 : bvule(30, 7) : BOOL
32 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
33 : bvule(7, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : ite(34, 35, 35) : BV:8
37 : ite(29, 24, 36) : BV:8
38 : ite(23, 24, 37) : BV:8
39 : ite(17, 18, 38) : BV:8
40 : ite(11, 12, 39) : BV:8
41 : 2 { 0x2 +1.23e129 } : BV:32
42 : bvadd(41, 5, 6) : BV:32
43 : bvule(2, 42) : BOOL
44 : bvule(42, 9) : BOOL
45 : and(43, 44) : BOOL
46 : bvule(13, 42) : BOOL
47 : bvule(42, 15) : BOOL
48 : and(46, 47) : BOOL
49 : bvule(19, 42) : BOOL
50 : bvule(42, 21) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(25, 42) : BOOL
53 : bvule(42, 27) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(30, 42) : BOOL
56 : bvule(42, 32) : BOOL
57 : and(55, 56) : BOOL
58 : ite(57, 35, 35) : BV:8
59 : ite(54, 24, 58) : BV:8
60 : ite(51, 24, 59) : BV:8
61 : ite(48, 18, 60) : BV:8
62 : ite(45, 12, 61) : BV:8
63 : 1 { 0x1 +1.11e129 } : BV:32
64 : bvadd(63, 5, 6) : BV:32
65 : bvule(2, 64) : BOOL
66 : bvule(64, 9) : BOOL
67 : and(65, 66) : BOOL
68 : bvule(13, 64) : BOOL
69 : bvule(64, 15) : BOOL
70 : and(68, 69) : BOOL
71 : bvule(19, 64) : BOOL
72 : bvule(64, 21) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(25, 64) : BOOL
75 : bvule(64, 27) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(30, 64) : BOOL
78 : bvule(64, 32) : BOOL
79 : and(77, 78) : BOOL
80 : ite(79, 35, 35) : BV:8
81 : ite(76, 24, 80) : BV:8
82 : ite(73, 24, 81) : BV:8
83 : ite(70, 18, 82) : BV:8
84 : ite(67, 12, 83) : BV:8
85 : bvadd(5, 6) : BV:32
86 : bvule(2, 85) : BOOL
87 : bvule(85, 9) : BOOL
88 : and(86, 87) : BOOL
89 : bvule(13, 85) : BOOL
90 : bvule(85, 15) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(19, 85) : BOOL
93 : bvule(85, 21) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(25, 85) : BOOL
96 : bvule(85, 27) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 85) : BOOL
99 : bvule(85, 32) : BOOL
100 : and(98, 99) : BOOL
101 : ite(100, 35, 35) : BV:8
102 : ite(97, 24, 101) : BV:8
103 : ite(94, 24, 102) : BV:8
104 : ite(91, 18, 103) : BV:8
105 : ite(88, 12, 104) : BV:8
106 : bvconcat(40, 62, 84, 105) : BV:32
107 : lambda(1, 106) : FUNCTION[BV:32 -> BV:32]
108 : sym_const(107) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 67372036 { 0x4040404 +1.3137254e137 } : BV:32
=input.dst.llvm-%arr
1 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1427 ] -> 1, [ 1428; 1431 ] -> 4, [ 1432; 1409482759 ] -> 0, [ 1409482760; 1409482763 ] -> 5, [ 1409482764; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1427 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1428; 1431 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1432; 1409482759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1409482760; 1409482763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1409482764; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1428 { 0x594 +1.17023e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1431 { 0x597 +1.17058e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1409482760 { 0x54030008 +1.2343845e41 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1409482763 { 0x5403000b +1.2343881e41 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2603085373
=counter_example_end
=global nodece 1 num_edges_traversed 0
=global nodece 1 nodece_visted_pcs: 
L0%0%d_L0%0%d
=global nodece 2
=global nodece 2 nodece z3.ce19.num_edges_traversed1
=global nodece 2 nodece_path
=global nodece 2 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 2 nodece_cached_counterexample
=counter_example_begin z3.ce19 718761a7fdf5af45e852d2f22da2
=input.spec-%var-arr-1
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda281 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda282 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 318648393 { 0x12fe3049 +1.98584854e166 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 318648393 { 0x12fe3049 +1.98584854e166 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
340383979
=counter_example_end
=global nodece 2 num_edges_traversed 1
=global nodece 2 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 3
=global nodece 3 nodece z3v487.ce20.num_edges_traversed1
=global nodece 3 nodece_path
=global nodece 3 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 3 nodece_cached_counterexample
=counter_example_begin z3v487.ce20 87fee4dbc261fc757f4bd617b898fb
=input.spec-%var-arr-1
1 : Lambda317 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda318 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda317 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda318 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 2, 2) : BV:32
15 : lambda(10, 14) : FUNCTION[BV:32 -> BV:32]
16 : map(9, 15) : MAP[BV:32 -> BV:32]
17 : sym_const(16) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1444; 1447 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1448; 2348892167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2348892168; 2348892171 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2348892172; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2348892168 { 0x8c014008 -1946075128 -1.976657e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1444 { 0x5a4 +1.17213e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 211961543 { 0xca246c7 +1.26778495e154 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 211961543 { 0xca246c7 +1.26778495e154 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1443 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1444; 1447 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1448; 2348892167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2348892168; 2348892171 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2348892172; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1444 { 0x5a4 +1.17213e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1447 { 0x5a7 +1.17249e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2348892168 { 0x8c014008 -1946075128 -1.976657e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2348892171 { 0x8c01400b -1946075125 -1.976693e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
180861690
=counter_example_end
=global nodece 3 num_edges_traversed 1
=global nodece 3 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 4
=global nodece 4 nodece z3.ce47.num_edges_traversed1
=global nodece 4 nodece_path
=global nodece 4 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 4 nodece_cached_counterexample
=counter_example_begin z3.ce47 11933764b299fff92fa62f43dabbac
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1403676883 { 0x53aa68d3 +1.33132398e40 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1403676883 { 0x53aa68d3 +1.33132398e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3436409015
=counter_example_end
=global nodece 4 num_edges_traversed 1
=global nodece 4 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 5
=global nodece 5 nodece z3v487.ce48.num_edges_traversed1
=global nodece 5 nodece_path
=global nodece 5 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 5 nodece_cached_counterexample
=counter_example_begin z3v487.ce48 c4ce48ceeb5ac1c6bcac763a393630
=input.spec-%var-arr-1
1 : Lambda472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda473 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 256 { 0x100 +1.3051e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 524289 { 0x80001 +1.6250011e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda472 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda473 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : 256 { 0x100 +1.3051e129 } : BV:32
15 : bvadd(11, 13, 14) : BV:32
16 : 524289 { 0x80001 +1.6250011e129 } : BV:32
17 : eq(15, 16) : BOOL
18 : 1 { 0x1 } : BV:8
19 : 0 { 0x0 } : BV:8
20 : ite(17, 18, 19) : BV:8
21 : 2 { 0x2 +1.23e129 } : BV:32
22 : bvadd(21, 13, 14) : BV:32
23 : eq(22, 16) : BOOL
24 : ite(23, 18, 19) : BV:8
25 : 1 { 0x1 +1.11e129 } : BV:32
26 : bvadd(25, 13, 14) : BV:32
27 : eq(26, 16) : BOOL
28 : ite(27, 18, 19) : BV:8
29 : bvadd(13, 14) : BV:32
30 : eq(29, 16) : BOOL
31 : ite(30, 18, 19) : BV:8
32 : bvconcat(20, 24, 28, 31) : BV:32
33 : lambda(10, 32) : FUNCTION[BV:32 -> BV:32]
34 : map(9, 33) : MAP[BV:32 -> BV:32]
35 : sym_const(34) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda446 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 256 { 0x100 +1.3051e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 524289 { 0x80001 +1.6250011e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 524288 ] -> 0, [ 524289; 524289 ] -> 1, [ 524290; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda447 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : 4 { 0x4 +1.47e129 } : BV:32
4 : bvmul(3, 1) : BV:32
5 : 256 { 0x100 +1.3051e129 } : BV:32
6 : bvadd(2, 4, 5) : BV:32
7 : 524289 { 0x80001 +1.6250011e129 } : BV:32
8 : eq(6, 7) : BOOL
9 : 1 { 0x1 } : BV:8
10 : 0 { 0x0 } : BV:8
11 : ite(8, 9, 10) : BV:8
12 : 2 { 0x2 +1.23e129 } : BV:32
13 : bvadd(12, 4, 5) : BV:32
14 : eq(13, 7) : BOOL
15 : ite(14, 9, 10) : BV:8
16 : 1 { 0x1 +1.11e129 } : BV:32
17 : bvadd(16, 4, 5) : BV:32
18 : eq(17, 7) : BOOL
19 : ite(18, 9, 10) : BV:8
20 : bvadd(4, 5) : BV:32
21 : eq(20, 7) : BOOL
22 : ite(21, 9, 10) : BV:8
23 : bvconcat(11, 15, 19, 22) : BV:32
24 : lambda(1, 23) : FUNCTION[BV:32 -> BV:32]
25 : sym_const(24) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%arr
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 524288 ] -> 0, [ 524289; 524289 ] -> 1, [ 524290; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 524287 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 524288; 524291 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 524292; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 2025572805 { 0x78bbc9c5 +1.46709501e114 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 2025572805 { 0x78bbc9c5 +1.46709501e114 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 131071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 131072; 131075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 131076; 524287 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 524288; 524291 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 524292; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 131075 { 0x20003 +1.1562535e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 524288 { 0x80000 +1.6250000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 524291 { 0x80003 +1.6250035e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
231027146
=counter_example_end
=global nodece 5 num_edges_traversed 1
=global nodece 5 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 6
=global nodece 6 nodece z3.ce75.num_edges_traversed1
=global nodece 6 nodece_path
=global nodece 6 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 6 nodece_cached_counterexample
=counter_example_begin z3.ce75 9e8524d44def7304d4b6f6d29d94c
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1796448408 { 0x6b13a098 +1.15333843e87 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1796448408 { 0x6b13a098 +1.15333843e87 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3499624422
=counter_example_end
=global nodece 6 num_edges_traversed 1
=global nodece 6 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 7
=global nodece 7 nodece z3v487.ce76.num_edges_traversed1
=global nodece 7 nodece_path
=global nodece 7 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 7 nodece_cached_counterexample
=counter_example_begin z3v487.ce76 dda87bc5a4a965eb47f5cee2c4244dd
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 996631414 { 0x3b676376 +1.80772280e247 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 996631414 { 0x3b676376 +1.80772280e247 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
259437797
=counter_example_end
=global nodece 7 num_edges_traversed 1
=global nodece 7 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 8
=global nodece 8 nodece z3v487.ce103.num_edges_traversed1
=global nodece 8 nodece_path
=global nodece 8 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 8 nodece_cached_counterexample
=counter_example_begin z3v487.ce103 e23c53171de19fe6a10a83aa85c95a8
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 572424172 { 0x221e7fec +1.23827886e197 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424172 { 0x221e7fec +1.23827886e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
334278005
=counter_example_end
=global nodece 8 num_edges_traversed 1
=global nodece 8 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 9
=global nodece 9 nodece z3.ce131.num_edges_traversed1
=global nodece 9 nodece_path
=global nodece 9 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 9 nodece_cached_counterexample
=counter_example_begin z3.ce131 27c09e65b45180ce290da701bc5f344
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 859505774 { 0x333b046e +1.46107268e231 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505774 { 0x333b046e +1.46107268e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2691579155
=counter_example_end
=global nodece 9 num_edges_traversed 1
=global nodece 9 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 10
=global nodece 10 nodece z3.ce159.num_edges_traversed1
=global nodece 10 nodece_path
=global nodece 10 nodece_path.graph_edge_composition
(L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 10 nodece_cached_counterexample
=counter_example_begin z3.ce159 ef2a83dfeb5bc1460cf1dd8c559c91d
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.local_alloc_count.=L0%0%d=
1 : 1506387082 { 0x59c9a48a +1.57533383e52 } : COUNT
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1506387082 { 0x59c9a48a +1.57533383e52 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2559218018
=counter_example_end
=global nodece 10 num_edges_traversed 1
=global nodece 10 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 11
=global nodece 11 nodece z3v487.ce962.num_edges_traversed0
=global nodece 11 nodece_path
=global nodece 11 nodece_path.graph_edge_composition
(epsilon)
=global nodece 11 nodece_cached_counterexample
=counter_example_begin z3v487.ce962 f425fb8c702efb3a6862d358e9944d1
=input.spec-%var-arr-1
1 : Lambda6652 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6653 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
27 : bvule(26, 14) : BOOL
28 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
29 : bvule(14, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
33 : bvule(32, 14) : BOOL
34 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
35 : bvule(14, 34) : BOOL
36 : and(33, 35) : BOOL
37 : 0 { 0x0 } : BV:8
38 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
39 : bvule(38, 14) : BOOL
40 : bvule(14, 4) : BOOL
41 : and(39, 40) : BOOL
42 : ite(41, 37, 37) : BV:8
43 : ite(36, 37, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 28) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(32, 48) : BOOL
59 : bvule(48, 34) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(38, 48) : BOOL
62 : bvule(48, 4) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 37, 37) : BV:8
65 : ite(60, 37, 64) : BV:8
66 : ite(57, 31, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 28) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(32, 70) : BOOL
81 : bvule(70, 34) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(38, 70) : BOOL
84 : bvule(70, 4) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 37, 37) : BV:8
87 : ite(82, 37, 86) : BV:8
88 : ite(79, 31, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 28) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(32, 13) : BOOL
101 : bvule(13, 34) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(38, 13) : BOOL
104 : bvule(13, 4) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 37, 37) : BV:8
107 : ite(102, 37, 106) : BV:8
108 : ite(99, 31, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6655 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6656 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
31 : bvule(30, 18) : BOOL
32 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
33 : bvule(18, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
37 : bvule(36, 18) : BOOL
38 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
39 : bvule(18, 38) : BOOL
40 : and(37, 39) : BOOL
41 : 0 { 0x0 } : BV:8
42 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
43 : bvule(42, 18) : BOOL
44 : bvule(18, 4) : BOOL
45 : and(43, 44) : BOOL
46 : ite(45, 41, 41) : BV:8
47 : ite(40, 41, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 32) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(36, 52) : BOOL
63 : bvule(52, 38) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(42, 52) : BOOL
66 : bvule(52, 4) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 41, 41) : BV:8
69 : ite(64, 41, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 32) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(36, 74) : BOOL
85 : bvule(74, 38) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(42, 74) : BOOL
88 : bvule(74, 4) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 41, 41) : BV:8
91 : ite(86, 41, 90) : BV:8
92 : ite(83, 35, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 32) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(36, 17) : BOOL
105 : bvule(17, 38) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(42, 17) : BOOL
108 : bvule(17, 4) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 41, 41) : BV:8
111 : ite(106, 41, 110) : BV:8
112 : ite(103, 35, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6630 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
25 : bvule(24, 12) : BOOL
26 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
27 : bvule(12, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
31 : bvule(30, 12) : BOOL
32 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
33 : bvule(12, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 0 { 0x0 } : BV:8
36 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
37 : bvule(36, 12) : BOOL
38 : bvule(12, 4) : BOOL
39 : and(37, 38) : BOOL
40 : ite(39, 35, 35) : BV:8
41 : ite(34, 35, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 26) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(30, 46) : BOOL
57 : bvule(46, 32) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(36, 46) : BOOL
60 : bvule(46, 4) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 35, 35) : BV:8
63 : ite(58, 35, 62) : BV:8
64 : ite(55, 29, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 26) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(30, 68) : BOOL
79 : bvule(68, 32) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(36, 68) : BOOL
82 : bvule(68, 4) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 35, 35) : BV:8
85 : ite(80, 35, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 26) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 11) : BOOL
99 : bvule(11, 32) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(36, 11) : BOOL
102 : bvule(11, 4) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 35, 35) : BV:8
105 : ite(100, 35, 104) : BV:8
106 : ite(97, 29, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform639 : BV:32
4 : Lambda6659 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6660 : BV:32
7 : unit : UNIT
8 : 268717159 { 0x10044c67 +1.3358161e161 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> 1, [ 536871552; 536871555 ] -> 5, [ 536871556; 1073741823 ] -> 0, [ 1073741824; 1073741827 ] -> 4, [ 1073741828; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6635 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 536871551 { 0x2000027f +1.7617e193 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 5 { 0x5 } : BV:8
24 : 536871556 { 0x20000284 +1.7677e193 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 1073741823 { 0x3fffffff +1.99999988e0 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 0 { 0x0 } : BV:8
30 : 1073741828 { 0x40000004 +1.47e1 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 29, 29) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 29, 29) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 29, 29) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 29, 29) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform638 : BV:32
4 : Lambda6657 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6658 : BV:32
7 : unit : UNIT
8 : 375442995 { 0x1660ce33 +1.75629270e173 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536871551 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536871552; 536871555 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536871556; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536871552 { 0x20000280 +1.7629e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536871555 { 0x20000283 +1.7665e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2971803236
=counter_example_end
=global nodece 11 num_edges_traversed 0
=global nodece 11 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 12
=global nodece 12 nodece z3.ce963.num_edges_traversed0
=global nodece 12 nodece_path
=global nodece 12 nodece_path.graph_edge_composition
(epsilon)
=global nodece 12 nodece_cached_counterexample
=counter_example_begin z3.ce963 2e6020f1c17863a7df658d43e0f7421
=input.spec-%var-arr-1
1 : Lambda6670 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6671 : BV:32
11 : bvule(2, 10) : BOOL
12 : bvule(10, 4) : BOOL
13 : and(11, 12) : BOOL
14 : ite(13, 7, 7) : BOOL
15 : 3 { 0x3 +1.35e129 } : BV:32
16 : 4 { 0x4 +1.47e129 } : BV:32
17 : bvmul(16, 10) : BV:32
18 : bvadd(15, 17) : BV:32
19 : bvule(2, 18) : BOOL
20 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
21 : bvule(18, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 1 { 0x1 } : BV:8
24 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
25 : bvule(24, 18) : BOOL
26 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
27 : bvule(18, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 4 { 0x4 } : BV:8
30 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
31 : bvule(30, 18) : BOOL
32 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
33 : bvule(18, 32) : BOOL
34 : and(31, 33) : BOOL
35 : 5 { 0x5 } : BV:8
36 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
37 : bvule(36, 18) : BOOL
38 : bvule(18, 4) : BOOL
39 : and(37, 38) : BOOL
40 : 0 { 0x0 } : BV:8
41 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
42 : bvule(41, 18) : BOOL
43 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
44 : bvule(18, 43) : BOOL
45 : and(42, 44) : BOOL
46 : ite(45, 40, 40) : BV:8
47 : ite(39, 40, 46) : BV:8
48 : ite(34, 35, 47) : BV:8
49 : ite(28, 29, 48) : BV:8
50 : ite(22, 23, 49) : BV:8
51 : 2 { 0x2 +1.23e129 } : BV:32
52 : bvadd(51, 17) : BV:32
53 : bvule(2, 52) : BOOL
54 : bvule(52, 20) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(24, 52) : BOOL
57 : bvule(52, 26) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(30, 52) : BOOL
60 : bvule(52, 32) : BOOL
61 : and(59, 60) : BOOL
62 : bvule(36, 52) : BOOL
63 : bvule(52, 4) : BOOL
64 : and(62, 63) : BOOL
65 : bvule(41, 52) : BOOL
66 : bvule(52, 43) : BOOL
67 : and(65, 66) : BOOL
68 : ite(67, 40, 40) : BV:8
69 : ite(64, 40, 68) : BV:8
70 : ite(61, 35, 69) : BV:8
71 : ite(58, 29, 70) : BV:8
72 : ite(55, 23, 71) : BV:8
73 : 1 { 0x1 +1.11e129 } : BV:32
74 : bvadd(73, 17) : BV:32
75 : bvule(2, 74) : BOOL
76 : bvule(74, 20) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(24, 74) : BOOL
79 : bvule(74, 26) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(30, 74) : BOOL
82 : bvule(74, 32) : BOOL
83 : and(81, 82) : BOOL
84 : bvule(36, 74) : BOOL
85 : bvule(74, 4) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(41, 74) : BOOL
88 : bvule(74, 43) : BOOL
89 : and(87, 88) : BOOL
90 : ite(89, 40, 40) : BV:8
91 : ite(86, 40, 90) : BV:8
92 : ite(83, 35, 91) : BV:8
93 : ite(80, 29, 92) : BV:8
94 : ite(77, 23, 93) : BV:8
95 : bvule(2, 17) : BOOL
96 : bvule(17, 20) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(24, 17) : BOOL
99 : bvule(17, 26) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(30, 17) : BOOL
102 : bvule(17, 32) : BOOL
103 : and(101, 102) : BOOL
104 : bvule(36, 17) : BOOL
105 : bvule(17, 4) : BOOL
106 : and(104, 105) : BOOL
107 : bvule(41, 17) : BOOL
108 : bvule(17, 43) : BOOL
109 : and(107, 108) : BOOL
110 : ite(109, 40, 40) : BV:8
111 : ite(106, 40, 110) : BV:8
112 : ite(103, 35, 111) : BV:8
113 : ite(100, 29, 112) : BV:8
114 : ite(97, 23, 113) : BV:8
115 : bvconcat(50, 72, 94, 114) : BV:32
116 : ite(14, 115, 115) : BV:32
117 : lambda(10, 116) : FUNCTION[BV:32 -> BV:32]
118 : map(9, 117) : MAP[BV:32 -> BV:32]
119 : sym_const(118) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6673 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : lambda(1, 8) : FUNCTION[BV:32 -> BOOL]
10 : Lambda6674 : BV:32
11 : 3 { 0x3 +1.35e129 } : BV:32
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(12, 10) : BV:32
14 : bvadd(11, 13) : BV:32
15 : bvule(2, 14) : BOOL
16 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
17 : bvule(14, 16) : BOOL
18 : and(15, 17) : BOOL
19 : 1 { 0x1 } : BV:8
20 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
21 : bvule(20, 14) : BOOL
22 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
23 : bvule(14, 22) : BOOL
24 : and(21, 23) : BOOL
25 : 4 { 0x4 } : BV:8
26 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
27 : bvule(26, 14) : BOOL
28 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
29 : bvule(14, 28) : BOOL
30 : and(27, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
33 : bvule(32, 14) : BOOL
34 : bvule(14, 4) : BOOL
35 : and(33, 34) : BOOL
36 : 0 { 0x0 } : BV:8
37 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
38 : bvule(37, 14) : BOOL
39 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
40 : bvule(14, 39) : BOOL
41 : and(38, 40) : BOOL
42 : ite(41, 36, 36) : BV:8
43 : ite(35, 36, 42) : BV:8
44 : ite(30, 31, 43) : BV:8
45 : ite(24, 25, 44) : BV:8
46 : ite(18, 19, 45) : BV:8
47 : 2 { 0x2 +1.23e129 } : BV:32
48 : bvadd(47, 13) : BV:32
49 : bvule(2, 48) : BOOL
50 : bvule(48, 16) : BOOL
51 : and(49, 50) : BOOL
52 : bvule(20, 48) : BOOL
53 : bvule(48, 22) : BOOL
54 : and(52, 53) : BOOL
55 : bvule(26, 48) : BOOL
56 : bvule(48, 28) : BOOL
57 : and(55, 56) : BOOL
58 : bvule(32, 48) : BOOL
59 : bvule(48, 4) : BOOL
60 : and(58, 59) : BOOL
61 : bvule(37, 48) : BOOL
62 : bvule(48, 39) : BOOL
63 : and(61, 62) : BOOL
64 : ite(63, 36, 36) : BV:8
65 : ite(60, 36, 64) : BV:8
66 : ite(57, 31, 65) : BV:8
67 : ite(54, 25, 66) : BV:8
68 : ite(51, 19, 67) : BV:8
69 : 1 { 0x1 +1.11e129 } : BV:32
70 : bvadd(69, 13) : BV:32
71 : bvule(2, 70) : BOOL
72 : bvule(70, 16) : BOOL
73 : and(71, 72) : BOOL
74 : bvule(20, 70) : BOOL
75 : bvule(70, 22) : BOOL
76 : and(74, 75) : BOOL
77 : bvule(26, 70) : BOOL
78 : bvule(70, 28) : BOOL
79 : and(77, 78) : BOOL
80 : bvule(32, 70) : BOOL
81 : bvule(70, 4) : BOOL
82 : and(80, 81) : BOOL
83 : bvule(37, 70) : BOOL
84 : bvule(70, 39) : BOOL
85 : and(83, 84) : BOOL
86 : ite(85, 36, 36) : BV:8
87 : ite(82, 36, 86) : BV:8
88 : ite(79, 31, 87) : BV:8
89 : ite(76, 25, 88) : BV:8
90 : ite(73, 19, 89) : BV:8
91 : bvule(2, 13) : BOOL
92 : bvule(13, 16) : BOOL
93 : and(91, 92) : BOOL
94 : bvule(20, 13) : BOOL
95 : bvule(13, 22) : BOOL
96 : and(94, 95) : BOOL
97 : bvule(26, 13) : BOOL
98 : bvule(13, 28) : BOOL
99 : and(97, 98) : BOOL
100 : bvule(32, 13) : BOOL
101 : bvule(13, 4) : BOOL
102 : and(100, 101) : BOOL
103 : bvule(37, 13) : BOOL
104 : bvule(13, 39) : BOOL
105 : and(103, 104) : BOOL
106 : ite(105, 36, 36) : BV:8
107 : ite(102, 36, 106) : BV:8
108 : ite(99, 31, 107) : BV:8
109 : ite(96, 25, 108) : BV:8
110 : ite(93, 19, 109) : BV:8
111 : bvconcat(46, 68, 90, 110) : BV:32
112 : lambda(10, 111) : FUNCTION[BV:32 -> BV:32]
113 : map(9, 112) : MAP[BV:32 -> BV:32]
114 : sym_const(113) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6637 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : 3 { 0x3 +1.35e129 } : BV:32
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : bvmul(4, 1) : BV:32
6 : bvadd(3, 5) : BV:32
7 : bvule(2, 6) : BOOL
8 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
9 : bvule(6, 8) : BOOL
10 : and(7, 9) : BOOL
11 : 1 { 0x1 } : BV:8
12 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
13 : bvule(12, 6) : BOOL
14 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
15 : bvule(6, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 4 { 0x4 } : BV:8
18 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
19 : bvule(18, 6) : BOOL
20 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
21 : bvule(6, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 5 { 0x5 } : BV:8
24 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
25 : bvule(24, 6) : BOOL
26 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
27 : bvule(6, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 0 { 0x0 } : BV:8
30 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
31 : bvule(30, 6) : BOOL
32 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
33 : bvule(6, 32) : BOOL
34 : and(31, 33) : BOOL
35 : ite(34, 29, 29) : BV:8
36 : ite(28, 29, 35) : BV:8
37 : ite(22, 23, 36) : BV:8
38 : ite(16, 17, 37) : BV:8
39 : ite(10, 11, 38) : BV:8
40 : 2 { 0x2 +1.23e129 } : BV:32
41 : bvadd(40, 5) : BV:32
42 : bvule(2, 41) : BOOL
43 : bvule(41, 8) : BOOL
44 : and(42, 43) : BOOL
45 : bvule(12, 41) : BOOL
46 : bvule(41, 14) : BOOL
47 : and(45, 46) : BOOL
48 : bvule(18, 41) : BOOL
49 : bvule(41, 20) : BOOL
50 : and(48, 49) : BOOL
51 : bvule(24, 41) : BOOL
52 : bvule(41, 26) : BOOL
53 : and(51, 52) : BOOL
54 : bvule(30, 41) : BOOL
55 : bvule(41, 32) : BOOL
56 : and(54, 55) : BOOL
57 : ite(56, 29, 29) : BV:8
58 : ite(53, 29, 57) : BV:8
59 : ite(50, 23, 58) : BV:8
60 : ite(47, 17, 59) : BV:8
61 : ite(44, 11, 60) : BV:8
62 : 1 { 0x1 +1.11e129 } : BV:32
63 : bvadd(62, 5) : BV:32
64 : bvule(2, 63) : BOOL
65 : bvule(63, 8) : BOOL
66 : and(64, 65) : BOOL
67 : bvule(12, 63) : BOOL
68 : bvule(63, 14) : BOOL
69 : and(67, 68) : BOOL
70 : bvule(18, 63) : BOOL
71 : bvule(63, 20) : BOOL
72 : and(70, 71) : BOOL
73 : bvule(24, 63) : BOOL
74 : bvule(63, 26) : BOOL
75 : and(73, 74) : BOOL
76 : bvule(30, 63) : BOOL
77 : bvule(63, 32) : BOOL
78 : and(76, 77) : BOOL
79 : ite(78, 29, 29) : BV:8
80 : ite(75, 29, 79) : BV:8
81 : ite(72, 23, 80) : BV:8
82 : ite(69, 17, 81) : BV:8
83 : ite(66, 11, 82) : BV:8
84 : bvule(2, 5) : BOOL
85 : bvule(5, 8) : BOOL
86 : and(84, 85) : BOOL
87 : bvule(12, 5) : BOOL
88 : bvule(5, 14) : BOOL
89 : and(87, 88) : BOOL
90 : bvule(18, 5) : BOOL
91 : bvule(5, 20) : BOOL
92 : and(90, 91) : BOOL
93 : bvule(24, 5) : BOOL
94 : bvule(5, 26) : BOOL
95 : and(93, 94) : BOOL
96 : bvule(30, 5) : BOOL
97 : bvule(5, 32) : BOOL
98 : and(96, 97) : BOOL
99 : ite(98, 29, 29) : BV:8
100 : ite(95, 29, 99) : BV:8
101 : ite(92, 23, 100) : BV:8
102 : ite(89, 17, 101) : BV:8
103 : ite(86, 11, 102) : BV:8
104 : bvconcat(39, 61, 83, 103) : BV:32
105 : lambda(1, 104) : FUNCTION[BV:32 -> BV:32]
106 : sym_const(105) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform643 : BV:32
4 : Lambda6677 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6678 : BV:32
7 : unit : UNIT
8 : 2089042569 { 0x7c844289 +1.3328049e122 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> 1, [ 794838608; 794838611 ] -> 4, [ 794838612; 3105033587 ] -> 0, [ 3105033588; 3105033591 ] -> 5, [ 3105033592; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6642 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 0 { 0x0 } : BOOL
8 : ite(6, 7, 7) : BOOL
9 : 3 { 0x3 +1.35e129 } : BV:32
10 : 4 { 0x4 +1.47e129 } : BV:32
11 : bvmul(10, 1) : BV:32
12 : bvadd(9, 11) : BV:32
13 : bvule(2, 12) : BOOL
14 : 794838607 { 0x2f60464f +1.75214564e223 } : BV:32
15 : bvule(12, 14) : BOOL
16 : and(13, 15) : BOOL
17 : 1 { 0x1 } : BV:8
18 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
19 : bvule(18, 12) : BOOL
20 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
21 : bvule(12, 20) : BOOL
22 : and(19, 21) : BOOL
23 : 4 { 0x4 } : BV:8
24 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
25 : bvule(24, 12) : BOOL
26 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
27 : bvule(12, 26) : BOOL
28 : and(25, 27) : BOOL
29 : 5 { 0x5 } : BV:8
30 : 3105033592 { 0xb9130d78 -1189933704 -1.14884853e243 } : BV:32
31 : bvule(30, 12) : BOOL
32 : bvule(12, 4) : BOOL
33 : and(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 794838612 { 0x2f604654 +1.75214624e223 } : BV:32
36 : bvule(35, 12) : BOOL
37 : 3105033587 { 0xb9130d73 -1189933709 -1.14884793e243 } : BV:32
38 : bvule(12, 37) : BOOL
39 : and(36, 38) : BOOL
40 : ite(39, 34, 34) : BV:8
41 : ite(33, 34, 40) : BV:8
42 : ite(28, 29, 41) : BV:8
43 : ite(22, 23, 42) : BV:8
44 : ite(16, 17, 43) : BV:8
45 : 2 { 0x2 +1.23e129 } : BV:32
46 : bvadd(45, 11) : BV:32
47 : bvule(2, 46) : BOOL
48 : bvule(46, 14) : BOOL
49 : and(47, 48) : BOOL
50 : bvule(18, 46) : BOOL
51 : bvule(46, 20) : BOOL
52 : and(50, 51) : BOOL
53 : bvule(24, 46) : BOOL
54 : bvule(46, 26) : BOOL
55 : and(53, 54) : BOOL
56 : bvule(30, 46) : BOOL
57 : bvule(46, 4) : BOOL
58 : and(56, 57) : BOOL
59 : bvule(35, 46) : BOOL
60 : bvule(46, 37) : BOOL
61 : and(59, 60) : BOOL
62 : ite(61, 34, 34) : BV:8
63 : ite(58, 34, 62) : BV:8
64 : ite(55, 29, 63) : BV:8
65 : ite(52, 23, 64) : BV:8
66 : ite(49, 17, 65) : BV:8
67 : 1 { 0x1 +1.11e129 } : BV:32
68 : bvadd(67, 11) : BV:32
69 : bvule(2, 68) : BOOL
70 : bvule(68, 14) : BOOL
71 : and(69, 70) : BOOL
72 : bvule(18, 68) : BOOL
73 : bvule(68, 20) : BOOL
74 : and(72, 73) : BOOL
75 : bvule(24, 68) : BOOL
76 : bvule(68, 26) : BOOL
77 : and(75, 76) : BOOL
78 : bvule(30, 68) : BOOL
79 : bvule(68, 4) : BOOL
80 : and(78, 79) : BOOL
81 : bvule(35, 68) : BOOL
82 : bvule(68, 37) : BOOL
83 : and(81, 82) : BOOL
84 : ite(83, 34, 34) : BV:8
85 : ite(80, 34, 84) : BV:8
86 : ite(77, 29, 85) : BV:8
87 : ite(74, 23, 86) : BV:8
88 : ite(71, 17, 87) : BV:8
89 : bvule(2, 11) : BOOL
90 : bvule(11, 14) : BOOL
91 : and(89, 90) : BOOL
92 : bvule(18, 11) : BOOL
93 : bvule(11, 20) : BOOL
94 : and(92, 93) : BOOL
95 : bvule(24, 11) : BOOL
96 : bvule(11, 26) : BOOL
97 : and(95, 96) : BOOL
98 : bvule(30, 11) : BOOL
99 : bvule(11, 4) : BOOL
100 : and(98, 99) : BOOL
101 : bvule(35, 11) : BOOL
102 : bvule(11, 37) : BOOL
103 : and(101, 102) : BOOL
104 : ite(103, 34, 34) : BV:8
105 : ite(100, 34, 104) : BV:8
106 : ite(97, 29, 105) : BV:8
107 : ite(94, 23, 106) : BV:8
108 : ite(91, 17, 107) : BV:8
109 : bvconcat(44, 66, 88, 108) : BV:32
110 : ite(8, 109, 109) : BV:32
111 : lambda(1, 110) : FUNCTION[BV:32 -> BV:32]
112 : sym_const(111) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform642 : BV:32
4 : Lambda6675 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6676 : BV:32
7 : unit : UNIT
8 : 1591111471 { 0x5ed66f2f +1.67526805e62 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 794838607 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 794838608; 794838611 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 794838612; 3105033587 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3105033588; 3105033591 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3105033592; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 794838608 { 0x2f604650 +1.75214576e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 794838611 { 0x2f604653 +1.75214612e223 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3105033588 { 0xb9130d74 -1189933708 -1.14884805e243 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3105033591 { 0xb9130d77 -1189933705 -1.14884841e243 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2887708723
=counter_example_end
=global nodece 12 num_edges_traversed 0
=global nodece 12 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 13
=global nodece 13 nodece z3.ce1078.num_edges_traversed0
=global nodece 13 nodece_path
=global nodece 13 nodece_path.graph_edge_composition
(epsilon)
=global nodece 13 nodece_cached_counterexample
=counter_example_begin z3.ce1078 4a564fa65f3c3349d38ef394914197
=input.spec-%var-arr-1
1 : Lambda6850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6851 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6855 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform663 : BV:32
4 : Lambda6858 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6859 : BV:32
7 : unit : UNIT
8 : 1715188910 { 0x663bb4ae +1.46645140e77 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform662 : BV:32
4 : Lambda6856 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6857 : BV:32
7 : unit : UNIT
8 : 252991957 { 0xf1459d5 +1.15899145e159 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1298562524
=counter_example_end
=global nodece 13 num_edges_traversed 0
=global nodece 13 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 14
=global nodece 14 nodece z3v487.ce1079.num_edges_traversed0
=global nodece 14 nodece_path
=global nodece 14 nodece_path.graph_edge_composition
(epsilon)
=global nodece 14 nodece_cached_counterexample
=counter_example_begin z3v487.ce1079 c4a67123dea9381a8343f53042ccd3bb
=input.spec-%var-arr-1
1 : Lambda6870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6871 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6873 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6874 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform667 : BV:32
4 : Lambda6877 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6878 : BV:32
7 : unit : UNIT
8 : 714842915 { 0x2a9ba323 +1.21591603e214 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform666 : BV:32
4 : Lambda6875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6876 : BV:32
7 : unit : UNIT
8 : 1579669452 { 0x5e27d7cc +1.31127309e61 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
321890525
=counter_example_end
=global nodece 14 num_edges_traversed 0
=global nodece 14 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 15
=global nodece 15 nodece z3.ce1171.num_edges_traversed2
=global nodece 15 nodece_path
=global nodece 15 nodece_path.graph_edge_composition
(epsilon)
=global nodece 15 nodece_cached_counterexample
=counter_example_begin z3.ce1171 8f6032d7668e2936e6afa3e578e8b
=input.spec-%var-arr-1
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda281 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda282 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 318648393 { 0x12fe3049 +1.98584854e166 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
340383979
=counter_example_end
=global nodece 15 num_edges_traversed 2
=global nodece 15 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 16
=global nodece 16 nodece z3.ce1161.num_edges_traversed2
=global nodece 16 nodece_path
=global nodece 16 nodece_path.graph_edge_composition
(epsilon)
=global nodece 16 nodece_cached_counterexample
=counter_example_begin z3.ce1161 cc72384788f18fdb0ad1aa0e056486d
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1403676883 { 0x53aa68d3 +1.33132398e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3436409015
=counter_example_end
=global nodece 16 num_edges_traversed 2
=global nodece 16 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 17
=global nodece 17 nodece z3.ce1151.num_edges_traversed2
=global nodece 17 nodece_path
=global nodece 17 nodece_path.graph_edge_composition
(epsilon)
=global nodece 17 nodece_cached_counterexample
=counter_example_begin z3.ce1151 516ea88abdb7db49be8a9a59afb8aa74
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1796448408 { 0x6b13a098 +1.15333843e87 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3499624422
=counter_example_end
=global nodece 17 num_edges_traversed 2
=global nodece 17 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 18
=global nodece 18 nodece z3v487.ce1145.num_edges_traversed2
=global nodece 18 nodece_path
=global nodece 18 nodece_path.graph_edge_composition
(epsilon)
=global nodece 18 nodece_cached_counterexample
=counter_example_begin z3v487.ce1145 27513e8fff5424261d5d442dd4c86534
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 996631414 { 0x3b676376 +1.80772280e247 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
259437797
=counter_example_end
=global nodece 18 num_edges_traversed 2
=global nodece 18 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 19
=global nodece 19 nodece z3v487.ce1139.num_edges_traversed2
=global nodece 19 nodece_path
=global nodece 19 nodece_path.graph_edge_composition
(epsilon)
=global nodece 19 nodece_cached_counterexample
=counter_example_begin z3v487.ce1139 b1fa7d899e2627257246a2f97a8aa22
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424172 { 0x221e7fec +1.23827886e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
334278005
=counter_example_end
=global nodece 19 num_edges_traversed 2
=global nodece 19 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 20
=global nodece 20 nodece z3.ce1133.num_edges_traversed2
=global nodece 20 nodece_path
=global nodece 20 nodece_path.graph_edge_composition
(epsilon)
=global nodece 20 nodece_cached_counterexample
=counter_example_begin z3.ce1133 4fe2dbf23130bafd2a978130c7c82fc2
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505774 { 0x333b046e +1.46107268e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2691579155
=counter_example_end
=global nodece 20 num_edges_traversed 2
=global nodece 20 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 21
=global nodece 21 nodece z3.ce1127.num_edges_traversed2
=global nodece 21 nodece_path
=global nodece 21 nodece_path.graph_edge_composition
(epsilon)
=global nodece 21 nodece_cached_counterexample
=counter_example_begin z3.ce1127 97e850b7d7b4bcf844d6e0d5d55a6eab
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1506387082 { 0x59c9a48a +1.57533383e52 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2559218018
=counter_example_end
=global nodece 21 num_edges_traversed 2
=global nodece 21 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 22
=global nodece 22 nodece z3.ce1113.num_edges_traversed1
=global nodece 22 nodece_path
=global nodece 22 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 22 nodece_cached_counterexample
=counter_example_begin z3.ce1113 3d42197a60274e9ea882bc3463cf6e21
=input.spec-%var-arr-1
1 : Lambda6850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6851 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6855 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform663 : BV:32
4 : Lambda6858 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6859 : BV:32
7 : unit : UNIT
8 : 1715188910 { 0x663bb4ae +1.46645140e77 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform662 : BV:32
4 : Lambda6856 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6857 : BV:32
7 : unit : UNIT
8 : 252991957 { 0xf1459d5 +1.15899145e159 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1298562524
=counter_example_end
=global nodece 22 num_edges_traversed 1
=global nodece 22 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 23
=global nodece 23 nodece z3v487.ce1107.num_edges_traversed1
=global nodece 23 nodece_path
=global nodece 23 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 23 nodece_cached_counterexample
=counter_example_begin z3v487.ce1107 9c2fc2645523834ca933f613ea555
=input.spec-%var-arr-1
1 : Lambda6870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6871 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6873 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6874 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform667 : BV:32
4 : Lambda6877 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6878 : BV:32
7 : unit : UNIT
8 : 714842915 { 0x2a9ba323 +1.21591603e214 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform666 : BV:32
4 : Lambda6875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6876 : BV:32
7 : unit : UNIT
8 : 1579669452 { 0x5e27d7cc +1.31127309e61 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
321890525
=counter_example_end
=global nodece 23 num_edges_traversed 1
=global nodece 23 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 24
=global nodece 24 nodece z3.ce1532.num_edges_traversed1
=global nodece 24 nodece_path
=global nodece 24 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 24 nodece_cached_counterexample
=counter_example_begin z3.ce1532 855610bb7fe88d2022fb6fd8c5e2
=input.spec-%var-arr-1
1 : Lambda9894 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9895 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9898 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9899 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform959 : BV:32
4 : Lambda9902 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9903 : BV:32
7 : unit : UNIT
8 : 2113782916 { 0x7dfdc484 +1.98255968e124 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1485923360 { 0x58916420 +1.13586807e50 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2599073504 { 0x9aeab6e0 -1695893792 -1.83370590e182 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform958 : BV:32
4 : Lambda9900 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9901 : BV:32
7 : unit : UNIT
8 : 1419476756 { 0x549b7f14 +1.21481561e42 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2412511232 { 0x8fcc0000 -1882456064 -1.59375000e160 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1485923359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1485923360; 1485923363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1485923364; 2412511231 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2412511232; 2599073503 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2599073504; 2599073507 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2599073508; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2599073504 { 0x9aeab6e0 -1695893792 -1.83370590e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2599073507 { 0x9aeab6e3 -1695893789 -1.83370625e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1485923360 { 0x58916420 +1.13586807e50 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1485923363 { 0x58916423 +1.13586843e50 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1318695080
=counter_example_end
=global nodece 24 num_edges_traversed 1
=global nodece 24 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 25
=global nodece 25 nodece z3.ce1560.num_edges_traversed1
=global nodece 25 nodece_path
=global nodece 25 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 25 nodece_cached_counterexample
=counter_example_begin z3.ce1560 46f5df60a313f2801f18674b28bd954
=input.spec-%var-arr-1
1 : Lambda10090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10091 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10094 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10095 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform983 : BV:32
4 : Lambda10098 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10099 : BV:32
7 : unit : UNIT
8 : 1917044439 { 0x7243c6d7 +1.52950561e101 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10066 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 33554432 { 0x2000000 +1.0e133 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform982 : BV:32
4 : Lambda10096 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10097 : BV:32
7 : unit : UNIT
8 : 796814197 { 0x2f7e6b75 +1.98765432e223 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1006108672 { 0x3bf80000 +1.93750000e248 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2188022803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188022804; 2188022807 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2188022808; 3452230175 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3452230176; 3452230179 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3452230180; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2188022807 { 0x826a9417 -2106944489 -1.83264434e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3452230179 { 0xcdc4da23 -842737117 -1.53790700e28 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2905432009
=counter_example_end
=global nodece 25 num_edges_traversed 1
=global nodece 25 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 26
=global nodece 26 nodece z3v487.ce1561.num_edges_traversed1
=global nodece 26 nodece_path
=global nodece 26 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 26 nodece_cached_counterexample
=counter_example_begin z3v487.ce1561 2fb9b9c8c1457d3d577ec2ae0758fbf
=input.spec-%var-arr-1
1 : Lambda10110 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10111 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10113 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10114 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10073 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388608 { 0x800000 +1.0e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform987 : BV:32
4 : Lambda10117 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10118 : BV:32
7 : unit : UNIT
8 : 2143875888 { 0x7fc8f330 +1.56992149e128 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform986 : BV:32
4 : Lambda10115 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10116 : BV:32
7 : unit : UNIT
8 : 1240928063 { 0x49f70f3f +1.93015277e20 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3439260693
=counter_example_end
=global nodece 26 num_edges_traversed 1
=global nodece 26 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 27
=global nodece 27 nodece z3.ce1588.num_edges_traversed1
=global nodece 27 nodece_path
=global nodece 27 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 27 nodece_cached_counterexample
=counter_example_begin z3.ce1588 eff6e3d71e772282bf8542fc7cbecc1c
=input.spec-%var-arr-1
1 : Lambda10286 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10287 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10290 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10291 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1007 : BV:32
4 : Lambda10294 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10295 : BV:32
7 : unit : UNIT
8 : 610054537 { 0x245cb189 +1.72416794e201 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 268435456 { 0x10000000 +1.0e161 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1006 : BV:32
4 : Lambda10292 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10293 : BV:32
7 : unit : UNIT
8 : 2095011736 { 0x7cdf5798 +1.74486064e122 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 33554560 { 0x2000080 +1.1525e133 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 843719411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 843719412; 843719415 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 843719416; 1368568747 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1368568748; 1368568751 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1368568752; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1368568751 { 0x5192b3af +1.14610850e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 843719415 { 0x324a22f7 +1.57919204e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3923984154
=counter_example_end
=global nodece 27 num_edges_traversed 1
=global nodece 27 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 28
=global nodece 28 nodece z3v487.ce1589.num_edges_traversed1
=global nodece 28 nodece_path
=global nodece 28 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 28 nodece_cached_counterexample
=counter_example_begin z3v487.ce1589 d1d1ff73fbaa1a12aef4a2e51782c8ef
=input.spec-%var-arr-1
1 : Lambda10306 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10307 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10309 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10310 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10269 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1011 : BV:32
4 : Lambda10313 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10314 : BV:32
7 : unit : UNIT
8 : 862135698 { 0x33632592 +1.77458405e231 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1010 : BV:32
4 : Lambda10311 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10312 : BV:32
7 : unit : UNIT
8 : 550789904 { 0x20d46310 +1.65927314e194 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483644 { 0x7ffffffc +1.99999952e128 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
340175966
=counter_example_end
=global nodece 28 num_edges_traversed 1
=global nodece 28 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 29
=global nodece 29 nodece z3v487.ce1616.num_edges_traversed1
=global nodece 29 nodece_path
=global nodece 29 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 29 nodece_cached_counterexample
=counter_example_begin z3v487.ce1616 3683df3f489d157ef934d9e9172f726f
=input.spec-%var-arr-1
1 : Lambda10483 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10484 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10486 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10487 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10454 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1031 : BV:32
4 : Lambda10490 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10491 : BV:32
7 : unit : UNIT
8 : 85995297 { 0x5202f21 +1.25143826e139 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4036984884 { 0xf09f8034 -257982412 -1.24609994e98 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1030 : BV:32
4 : Lambda10488 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10489 : BV:32
7 : unit : UNIT
8 : 1737477161 { 0x678fcc29 +1.12341797e80 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 139530240 { 0x8511000 +1.63330078e145 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 139530239 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 139530240; 4036984883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4036984884; 4036984887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4036984888; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4036984884 { 0xf09f8034 -257982412 -1.24609994e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4036984887 { 0xf09f8037 -257982409 -1.24610030e98 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2813628387
=counter_example_end
=global nodece 29 num_edges_traversed 1
=global nodece 29 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 30
=global nodece 30 nodece z3.ce1644.num_edges_traversed1
=global nodece 30 nodece_path
=global nodece 30 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 30 nodece_cached_counterexample
=counter_example_begin z3.ce1644 ed99c27bb3595a91f47b49fbb15f5
=input.spec-%var-arr-1
1 : Lambda10678 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10679 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10682 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10683 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1055 : BV:32
4 : Lambda10686 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10687 : BV:32
7 : unit : UNIT
8 : 449088175 { 0x1ac48aaf +1.53548228e182 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10654 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3880312928 { 0xe748e060 -414654368 -1.56934738e79 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3937287964 { 0xeaae3f1c -357679332 -1.36130094e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1054 : BV:32
4 : Lambda10684 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10685 : BV:32
7 : unit : UNIT
8 : 251551209 { 0xefe5de9 +1.98724091e158 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2752600064 { 0xa4115800 -1542367232 -1.13549804e201 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3880312927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3880312928; 3880312931 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3880312932; 3937287963 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3937287964; 3937287967 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3937287968; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3937287964 { 0xeaae3f1c -357679332 -1.36130094e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3937287967 { 0xeaae3f1f -357679329 -1.36130130e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3880312928 { 0xe748e060 -414654368 -1.56934738e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3880312931 { 0xe748e063 -414654365 -1.56934773e79 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3996990707
=counter_example_end
=global nodece 30 num_edges_traversed 1
=global nodece 30 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 31
=global nodece 31 nodece z3v487.ce2312.num_edges_traversed0
=global nodece 31 nodece_path
=global nodece 31 nodece_path.graph_edge_composition
(epsilon)
=global nodece 31 nodece_cached_counterexample
=counter_example_begin z3v487.ce2312 55626ec153664267dc7d12c4f764a63b
=input.spec-%var-arr-1
1 : Lambda19360 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19361 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda19363 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19364 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda19331 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2315 : BV:32
4 : Lambda19367 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda19368 : BV:32
7 : unit : UNIT
8 : 2035237902 { 0x794f440e +1.61926436e115 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 87268420 { 0x5339c44 +1.40320634e139 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2314 : BV:32
4 : Lambda19365 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda19366 : BV:32
7 : unit : UNIT
8 : 1748349239 { 0x6835b137 +1.41947066e81 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 87268419 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 87268420; 87268423 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 87268424; 2147483651 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483652; 2147483655 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2147483656; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2147483655 { 0x80000007 -2147483641 -1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 87268420 { 0x5339c44 +1.40320634e139 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 87268423 { 0x5339c47 +1.40320670e139 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
324928020
=counter_example_end
=global nodece 31 num_edges_traversed 0
=global nodece 31 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 32
=global nodece 32 nodece z3.ce2313.num_edges_traversed0
=global nodece 32 nodece_path
=global nodece 32 nodece_path.graph_edge_composition
(epsilon)
=global nodece 32 nodece_cached_counterexample
=counter_example_begin z3.ce2313 18e6acc6812f8199ec36c863256d7764
=input.spec-%var-arr-1
1 : Lambda19378 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19379 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda19382 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 536870912 { 0x20000000 +1.0e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda19383 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2319 : BV:32
4 : Lambda19386 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda19387 : BV:32
7 : unit : UNIT
8 : 1953033865 { 0x7468ee89 +1.81977951e105 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 536870911 ] -> true, [ 536870912; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda19346 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 536870911 { 0x1fffffff +1.99999988e192 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 536870912 { 0x20000000 +1.0e193 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3076519000 { 0xb75ff458 -1218448296 -1.74964427e239 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1629028048 { 0x6118fed0 +1.19527626e67 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2318 : BV:32
4 : Lambda19384 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda19385 : BV:32
7 : unit : UNIT
8 : 722411724 { 0x2b0f20cc +1.11818838e215 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1629028047 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1629028048; 1629028051 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1629028052; 3076518999 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3076519000; 3076519003 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3076519004; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1629028048 { 0x6118fed0 +1.19527626e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1629028051 { 0x6118fed3 +1.19527661e67 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3076519000 { 0xb75ff458 -1218448296 -1.74964427e239 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3076519003 { 0xb75ff45b -1218448293 -1.74964463e239 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3157984022
=counter_example_end
=global nodece 32 num_edges_traversed 0
=global nodece 32 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 33
=global nodece 33 nodece z3.ce2403.num_edges_traversed3
=global nodece 33 nodece_path
=global nodece 33 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 33 nodece_cached_counterexample
=counter_example_begin z3.ce2403 54f6351d39e57fcf5e79eb49f3b20
=nextpc_const.1
1 : 1152738630 { 0x44b56546 +1.41715312e10 } : BV:32
=input.spec-%var-arr-1
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda302 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 285212670 { 0x10fffffe +1.99999976e162 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda303 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
27 : eq(23, 26) : BOOL
28 : 236 { 0xec -20 } : BV:8
29 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
30 : eq(23, 29) : BOOL
31 : 251 { 0xfb -5 } : BV:8
32 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
33 : eq(23, 32) : BOOL
34 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
35 : eq(23, 34) : BOOL
36 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
39 : eq(23, 38) : BOOL
40 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
41 : eq(23, 40) : BOOL
42 : 16 { 0x10 } : BV:8
43 : 255 { 0xff -1 } : BV:8
44 : ite(41, 42, 43) : BV:8
45 : ite(39, 25, 44) : BV:8
46 : ite(37, 25, 45) : BV:8
47 : ite(35, 25, 46) : BV:8
48 : ite(33, 25, 47) : BV:8
49 : ite(30, 31, 48) : BV:8
50 : ite(27, 28, 49) : BV:8
51 : ite(24, 25, 50) : BV:8
52 : 2 { 0x2 +1.23e129 } : BV:32
53 : bvadd(52, 21, 22) : BV:32
54 : eq(53, 22) : BOOL
55 : eq(53, 26) : BOOL
56 : eq(53, 29) : BOOL
57 : eq(53, 32) : BOOL
58 : eq(53, 34) : BOOL
59 : eq(53, 36) : BOOL
60 : eq(53, 38) : BOOL
61 : eq(53, 40) : BOOL
62 : ite(61, 42, 43) : BV:8
63 : ite(60, 25, 62) : BV:8
64 : ite(59, 25, 63) : BV:8
65 : ite(58, 25, 64) : BV:8
66 : ite(57, 25, 65) : BV:8
67 : ite(56, 31, 66) : BV:8
68 : ite(55, 28, 67) : BV:8
69 : ite(54, 25, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 21, 22) : BV:32
72 : eq(71, 22) : BOOL
73 : eq(71, 26) : BOOL
74 : eq(71, 29) : BOOL
75 : eq(71, 32) : BOOL
76 : eq(71, 34) : BOOL
77 : eq(71, 36) : BOOL
78 : eq(71, 38) : BOOL
79 : eq(71, 40) : BOOL
80 : ite(79, 42, 43) : BV:8
81 : ite(78, 25, 80) : BV:8
82 : ite(77, 25, 81) : BV:8
83 : ite(76, 25, 82) : BV:8
84 : ite(75, 25, 83) : BV:8
85 : ite(74, 31, 84) : BV:8
86 : ite(73, 28, 85) : BV:8
87 : ite(72, 25, 86) : BV:8
88 : bvadd(21, 22) : BV:32
89 : eq(88, 22) : BOOL
90 : eq(88, 26) : BOOL
91 : eq(88, 29) : BOOL
92 : eq(88, 32) : BOOL
93 : eq(88, 34) : BOOL
94 : eq(88, 36) : BOOL
95 : eq(88, 38) : BOOL
96 : eq(88, 40) : BOOL
97 : ite(96, 42, 43) : BV:8
98 : ite(95, 25, 97) : BV:8
99 : ite(94, 25, 98) : BV:8
100 : ite(93, 25, 99) : BV:8
101 : ite(92, 25, 100) : BV:8
102 : ite(91, 31, 101) : BV:8
103 : ite(90, 28, 102) : BV:8
104 : ite(89, 25, 103) : BV:8
105 : bvconcat(51, 69, 87, 104) : BV:32
106 : ite(18, 2, 105) : BV:32
107 : lambda(17, 106) : FUNCTION[BV:32 -> BV:32]
108 : map(16, 107) : MAP[BV:32 -> BV:32]
109 : sym_const(108) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda281 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 285212670 ] -> true, [ 285212671; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda282 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
12 : eq(8, 11) : BOOL
13 : 236 { 0xec -20 } : BV:8
14 : 3311781534 { 0xc565c69e -983185762 -1.79512381e11 } : BV:32
15 : eq(8, 14) : BOOL
16 : 251 { 0xfb -5 } : BV:8
17 : 3975937795 { 0xecfbff03 -319029501 -1.96871984e90 } : BV:32
18 : eq(8, 17) : BOOL
19 : 3975937794 { 0xecfbff02 -319029502 -1.96871972e90 } : BV:32
20 : eq(8, 19) : BOOL
21 : 3975937793 { 0xecfbff01 -319029503 -1.96871960e90 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
24 : eq(8, 23) : BOOL
25 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
26 : eq(8, 25) : BOOL
27 : 16 { 0x10 } : BV:8
28 : 255 { 0xff -1 } : BV:8
29 : ite(26, 27, 28) : BV:8
30 : ite(24, 10, 29) : BV:8
31 : ite(22, 10, 30) : BV:8
32 : ite(20, 10, 31) : BV:8
33 : ite(18, 10, 32) : BV:8
34 : ite(15, 16, 33) : BV:8
35 : ite(12, 13, 34) : BV:8
36 : ite(9, 10, 35) : BV:8
37 : 2 { 0x2 +1.23e129 } : BV:32
38 : bvadd(37, 6, 7) : BV:32
39 : eq(38, 7) : BOOL
40 : eq(38, 11) : BOOL
41 : eq(38, 14) : BOOL
42 : eq(38, 17) : BOOL
43 : eq(38, 19) : BOOL
44 : eq(38, 21) : BOOL
45 : eq(38, 23) : BOOL
46 : eq(38, 25) : BOOL
47 : ite(46, 27, 28) : BV:8
48 : ite(45, 10, 47) : BV:8
49 : ite(44, 10, 48) : BV:8
50 : ite(43, 10, 49) : BV:8
51 : ite(42, 10, 50) : BV:8
52 : ite(41, 16, 51) : BV:8
53 : ite(40, 13, 52) : BV:8
54 : ite(39, 10, 53) : BV:8
55 : 1 { 0x1 +1.11e129 } : BV:32
56 : bvadd(55, 6, 7) : BV:32
57 : eq(56, 7) : BOOL
58 : eq(56, 11) : BOOL
59 : eq(56, 14) : BOOL
60 : eq(56, 17) : BOOL
61 : eq(56, 19) : BOOL
62 : eq(56, 21) : BOOL
63 : eq(56, 23) : BOOL
64 : eq(56, 25) : BOOL
65 : ite(64, 27, 28) : BV:8
66 : ite(63, 10, 65) : BV:8
67 : ite(62, 10, 66) : BV:8
68 : ite(61, 10, 67) : BV:8
69 : ite(60, 10, 68) : BV:8
70 : ite(59, 16, 69) : BV:8
71 : ite(58, 13, 70) : BV:8
72 : ite(57, 10, 71) : BV:8
73 : bvadd(6, 7) : BV:32
74 : eq(73, 7) : BOOL
75 : eq(73, 11) : BOOL
76 : eq(73, 14) : BOOL
77 : eq(73, 17) : BOOL
78 : eq(73, 19) : BOOL
79 : eq(73, 21) : BOOL
80 : eq(73, 23) : BOOL
81 : eq(73, 25) : BOOL
82 : ite(81, 27, 28) : BV:8
83 : ite(80, 10, 82) : BV:8
84 : ite(79, 10, 83) : BV:8
85 : ite(78, 10, 84) : BV:8
86 : ite(77, 10, 85) : BV:8
87 : ite(76, 16, 86) : BV:8
88 : ite(75, 13, 87) : BV:8
89 : ite(74, 10, 88) : BV:8
90 : bvconcat(36, 54, 72, 89) : BV:32
91 : ite(3, 2, 90) : BV:32
92 : lambda(1, 91) : FUNCTION[BV:32 -> BV:32]
93 : sym_const(92) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.dst.llvm-%arr
1 : 3975937792 { 0xecfbff00 -319029504 -1.96871948e90 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 285212671 { 0x10ffffff +1.99999988e162 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 42), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1152738630 , 1000 , 8 ) -> 44611973, () -> 1256379572, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 44611973 { 0x2a8b985 +1.31816160e134 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 318648393 { 0x12fe3049 +1.98584854e166 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1841143103 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1841143104; 1841143107 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1841143108; 3311781531 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3311781532; 3311781535 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3311781536; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1841143106 ] -> 255, [ 1841143107; 1841143107 ] -> 16, [ 1841143108; 3311781531 ] -> 255, [ 3311781532; 3311781532 ] -> 0, [ 3311781533; 3311781533 ] -> 255, [ 3311781534; 3311781534 ] -> 251, [ 3311781535; 3311781535 ] -> 236, [ 3311781536; 3975937791 ] -> 255, [ 3975937792; 3975937795 ] -> 0, [ 3975937796; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1841143104 { 0x6dbd9d40 +1.48136138e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1841143107 { 0x6dbd9d43 +1.48136174e92 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3311781532 { 0xc565c69c -983185764 -1.79512357e11 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3311781535 { 0xc565c69f -983185761 -1.79512393e11 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 123 , m_adder -> 42), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2543366799
=counter_example_end
=global nodece 33 num_edges_traversed 3
=global nodece 33 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 34
=global nodece 34 nodece z3.ce2398.num_edges_traversed3
=global nodece 34 nodece_path
=global nodece 34 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 34 nodece_cached_counterexample
=counter_example_begin z3.ce2398 73afbe9282c5428cc80654a69b11c36
=nextpc_const.1
1 : 1854456996 { 0x6e88c4a4 +1.6850099e94 } : BV:32
=input.spec-%var-arr-1
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda458 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8844999 { 0x86f6c7 +1.5440604e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda459 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 33554432 { 0x2000000 +1.0e133 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
27 : eq(23, 26) : BOOL
28 : 2 { 0x2 } : BV:8
29 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
30 : eq(23, 29) : BOOL
31 : 200 { 0xc8 -56 } : BV:8
32 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
33 : eq(23, 32) : BOOL
34 : 246 { 0xf6 -10 } : BV:8
35 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
36 : eq(23, 35) : BOOL
37 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
38 : eq(23, 37) : BOOL
39 : 33554435 { 0x2000003 +1.35e133 } : BV:32
40 : eq(23, 39) : BOOL
41 : 33554434 { 0x2000002 +1.23e133 } : BV:32
42 : eq(23, 41) : BOOL
43 : 33554433 { 0x2000001 +1.11e133 } : BV:32
44 : eq(23, 43) : BOOL
45 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
46 : eq(23, 45) : BOOL
47 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
48 : eq(23, 47) : BOOL
49 : 134 { 0x86 -122 } : BV:8
50 : ite(48, 25, 49) : BV:8
51 : ite(46, 25, 50) : BV:8
52 : ite(44, 25, 51) : BV:8
53 : ite(42, 25, 52) : BV:8
54 : ite(40, 25, 53) : BV:8
55 : ite(38, 25, 54) : BV:8
56 : ite(36, 25, 55) : BV:8
57 : ite(33, 34, 56) : BV:8
58 : ite(30, 31, 57) : BV:8
59 : ite(27, 28, 58) : BV:8
60 : ite(24, 25, 59) : BV:8
61 : 2 { 0x2 +1.23e129 } : BV:32
62 : bvadd(61, 21, 22) : BV:32
63 : eq(62, 22) : BOOL
64 : eq(62, 26) : BOOL
65 : eq(62, 29) : BOOL
66 : eq(62, 32) : BOOL
67 : eq(62, 35) : BOOL
68 : eq(62, 37) : BOOL
69 : eq(62, 39) : BOOL
70 : eq(62, 41) : BOOL
71 : eq(62, 43) : BOOL
72 : eq(62, 45) : BOOL
73 : eq(62, 47) : BOOL
74 : ite(73, 25, 49) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 25, 77) : BV:8
79 : ite(68, 25, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : ite(66, 34, 80) : BV:8
82 : ite(65, 31, 81) : BV:8
83 : ite(64, 28, 82) : BV:8
84 : ite(63, 25, 83) : BV:8
85 : 1 { 0x1 +1.11e129 } : BV:32
86 : bvadd(85, 21, 22) : BV:32
87 : eq(86, 22) : BOOL
88 : eq(86, 26) : BOOL
89 : eq(86, 29) : BOOL
90 : eq(86, 32) : BOOL
91 : eq(86, 35) : BOOL
92 : eq(86, 37) : BOOL
93 : eq(86, 39) : BOOL
94 : eq(86, 41) : BOOL
95 : eq(86, 43) : BOOL
96 : eq(86, 45) : BOOL
97 : eq(86, 47) : BOOL
98 : ite(97, 25, 49) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 25, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 25, 102) : BV:8
104 : ite(91, 25, 103) : BV:8
105 : ite(90, 34, 104) : BV:8
106 : ite(89, 31, 105) : BV:8
107 : ite(88, 28, 106) : BV:8
108 : ite(87, 25, 107) : BV:8
109 : bvadd(21, 22) : BV:32
110 : eq(109, 22) : BOOL
111 : eq(109, 26) : BOOL
112 : eq(109, 29) : BOOL
113 : eq(109, 32) : BOOL
114 : eq(109, 35) : BOOL
115 : eq(109, 37) : BOOL
116 : eq(109, 39) : BOOL
117 : eq(109, 41) : BOOL
118 : eq(109, 43) : BOOL
119 : eq(109, 45) : BOOL
120 : eq(109, 47) : BOOL
121 : ite(120, 25, 49) : BV:8
122 : ite(119, 25, 121) : BV:8
123 : ite(118, 25, 122) : BV:8
124 : ite(117, 25, 123) : BV:8
125 : ite(116, 25, 124) : BV:8
126 : ite(115, 25, 125) : BV:8
127 : ite(114, 25, 126) : BV:8
128 : ite(113, 34, 127) : BV:8
129 : ite(112, 31, 128) : BV:8
130 : ite(111, 28, 129) : BV:8
131 : ite(110, 25, 130) : BV:8
132 : bvconcat(60, 84, 108, 131) : BV:32
133 : ite(18, 2, 132) : BV:32
134 : lambda(17, 133) : FUNCTION[BV:32 -> BV:32]
135 : map(16, 134) : MAP[BV:32 -> BV:32]
136 : sym_const(135) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8844999 ] -> true, [ 8845000; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda438 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 33554432 { 0x2000000 +1.0e133 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
12 : eq(8, 11) : BOOL
13 : 2 { 0x2 } : BV:8
14 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
15 : eq(8, 14) : BOOL
16 : 200 { 0xc8 -56 } : BV:8
17 : 3704408701 { 0xdcccca7d -590558595 -1.59992945e58 } : BV:32
18 : eq(8, 17) : BOOL
19 : 246 { 0xf6 -10 } : BV:8
20 : 1870977746 { 0x6f84dad2 +1.3792786e96 } : BV:32
21 : eq(8, 20) : BOOL
22 : 1870977745 { 0x6f84dad1 +1.3792774e96 } : BV:32
23 : eq(8, 22) : BOOL
24 : 33554435 { 0x2000003 +1.35e133 } : BV:32
25 : eq(8, 24) : BOOL
26 : 33554434 { 0x2000002 +1.23e133 } : BV:32
27 : eq(8, 26) : BOOL
28 : 33554433 { 0x2000001 +1.11e133 } : BV:32
29 : eq(8, 28) : BOOL
30 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
31 : eq(8, 30) : BOOL
32 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
33 : eq(8, 32) : BOOL
34 : 134 { 0x86 -122 } : BV:8
35 : ite(33, 10, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 10, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(21, 10, 40) : BV:8
42 : ite(18, 19, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 20) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 10, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 10, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : ite(51, 19, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 20) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 10, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 10, 88) : BV:8
90 : ite(75, 19, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 20) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 10, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 10, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 10, 111) : BV:8
113 : ite(98, 19, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.dst.llvm-%arr
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8845000 { 0x86f6c8 +1.5440616e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 58 , m_adder -> 190), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1854456996 , 1000 , 8 ) -> 639099466, () -> 984303049, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 639099466 { 0x2617e24a +1.18659329e205 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1403676883 { 0x53aa68d3 +1.33132398e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1870977743 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1870977744; 1870977747 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1870977748; 3704408699 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3704408700; 3704408703 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3704408704; 4294967295 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 33554431 ] -> 134, [ 33554432; 33554435 ] -> 0, [ 33554436; 1870977743 ] -> 134, [ 1870977744; 1870977746 ] -> 0, [ 1870977747; 1870977747 ] -> 2, [ 1870977748; 3704408699 ] -> 134, [ 3704408700; 3704408700 ] -> 200, [ 3704408701; 3704408701 ] -> 246, [ 3704408702; 3704408702 ] -> 134, [ 3704408703; 3704408703 ] -> 0, [ 3704408704; 4294967295 ] -> 134, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3704408700 { 0xdcccca7c -590558596 -1.59992933e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3704408703 { 0xdcccca7f -590558593 -1.59992969e58 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1870977744 { 0x6f84dad0 +1.3792762e96 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1870977747 { 0x6f84dad3 +1.3792798e96 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 58 , m_adder -> 190), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
780145051
=counter_example_end
=global nodece 34 num_edges_traversed 3
=global nodece 34 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 35
=global nodece 35 nodece z3.ce2393.num_edges_traversed3
=global nodece 35 nodece_path
=global nodece 35 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 35 nodece_cached_counterexample
=counter_example_begin z3.ce2393 bf035aadf7d58df1637258d1f793b32
=nextpc_const.1
1 : 1350176668 { 0x507a0f9c +1.95360136e33 } : BV:32
=input.spec-%var-arr-1
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda616 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967040 { 0xffffff00 -256 -1.99996948e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda617 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
27 : eq(23, 26) : BOOL
28 : 1 { 0x1 } : BV:8
29 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
30 : eq(23, 29) : BOOL
31 : 252 { 0xfc -4 } : BV:8
32 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
33 : eq(23, 32) : BOOL
34 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
35 : eq(23, 34) : BOOL
36 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
37 : eq(23, 36) : BOOL
38 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
39 : eq(23, 38) : BOOL
40 : 64 { 0x40 } : BV:8
41 : 255 { 0xff -1 } : BV:8
42 : ite(39, 40, 41) : BV:8
43 : ite(37, 25, 42) : BV:8
44 : ite(35, 25, 43) : BV:8
45 : ite(33, 25, 44) : BV:8
46 : ite(30, 31, 45) : BV:8
47 : ite(27, 28, 46) : BV:8
48 : ite(24, 25, 47) : BV:8
49 : 2 { 0x2 +1.23e129 } : BV:32
50 : bvadd(49, 21, 22) : BV:32
51 : eq(50, 22) : BOOL
52 : eq(50, 26) : BOOL
53 : eq(50, 29) : BOOL
54 : eq(50, 32) : BOOL
55 : eq(50, 34) : BOOL
56 : eq(50, 36) : BOOL
57 : eq(50, 38) : BOOL
58 : ite(57, 40, 41) : BV:8
59 : ite(56, 25, 58) : BV:8
60 : ite(55, 25, 59) : BV:8
61 : ite(54, 25, 60) : BV:8
62 : ite(53, 31, 61) : BV:8
63 : ite(52, 28, 62) : BV:8
64 : ite(51, 25, 63) : BV:8
65 : 1 { 0x1 +1.11e129 } : BV:32
66 : bvadd(65, 21, 22) : BV:32
67 : eq(66, 22) : BOOL
68 : eq(66, 26) : BOOL
69 : eq(66, 29) : BOOL
70 : eq(66, 32) : BOOL
71 : eq(66, 34) : BOOL
72 : eq(66, 36) : BOOL
73 : eq(66, 38) : BOOL
74 : ite(73, 40, 41) : BV:8
75 : ite(72, 25, 74) : BV:8
76 : ite(71, 25, 75) : BV:8
77 : ite(70, 25, 76) : BV:8
78 : ite(69, 31, 77) : BV:8
79 : ite(68, 28, 78) : BV:8
80 : ite(67, 25, 79) : BV:8
81 : bvadd(21, 22) : BV:32
82 : eq(81, 22) : BOOL
83 : eq(81, 26) : BOOL
84 : eq(81, 29) : BOOL
85 : eq(81, 32) : BOOL
86 : eq(81, 34) : BOOL
87 : eq(81, 36) : BOOL
88 : eq(81, 38) : BOOL
89 : ite(88, 40, 41) : BV:8
90 : ite(87, 25, 89) : BV:8
91 : ite(86, 25, 90) : BV:8
92 : ite(85, 25, 91) : BV:8
93 : ite(84, 31, 92) : BV:8
94 : ite(83, 28, 93) : BV:8
95 : ite(82, 25, 94) : BV:8
96 : bvconcat(48, 64, 80, 95) : BV:32
97 : ite(18, 2, 96) : BV:32
98 : lambda(17, 97) : FUNCTION[BV:32 -> BV:32]
99 : map(16, 98) : MAP[BV:32 -> BV:32]
100 : sym_const(99) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda595 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : ite(3, 2, 82) : BV:32
84 : lambda(1, 83) : FUNCTION[BV:32 -> BV:32]
85 : sym_const(84) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967040 ] -> true, [ 4294967041; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
12 : eq(8, 11) : BOOL
13 : 1 { 0x1 } : BV:8
14 : 3860458281 { 0xe619eb29 -434509015 -1.20248901e77 } : BV:32
15 : eq(8, 14) : BOOL
16 : 252 { 0xfc -4 } : BV:8
17 : 4294966339 { 0xfffffc43 -957 -1.99988591e128 } : BV:32
18 : eq(8, 17) : BOOL
19 : 4294966338 { 0xfffffc42 -958 -1.99988579e128 } : BV:32
20 : eq(8, 19) : BOOL
21 : 4294966337 { 0xfffffc41 -959 -1.99988567e128 } : BV:32
22 : eq(8, 21) : BOOL
23 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
24 : eq(8, 23) : BOOL
25 : 64 { 0x40 } : BV:8
26 : 255 { 0xff -1 } : BV:8
27 : ite(24, 25, 26) : BV:8
28 : ite(22, 10, 27) : BV:8
29 : ite(20, 10, 28) : BV:8
30 : ite(18, 10, 29) : BV:8
31 : ite(15, 16, 30) : BV:8
32 : ite(12, 13, 31) : BV:8
33 : ite(9, 10, 32) : BV:8
34 : 2 { 0x2 +1.23e129 } : BV:32
35 : bvadd(34, 6, 7) : BV:32
36 : eq(35, 7) : BOOL
37 : eq(35, 11) : BOOL
38 : eq(35, 14) : BOOL
39 : eq(35, 17) : BOOL
40 : eq(35, 19) : BOOL
41 : eq(35, 21) : BOOL
42 : eq(35, 23) : BOOL
43 : ite(42, 25, 26) : BV:8
44 : ite(41, 10, 43) : BV:8
45 : ite(40, 10, 44) : BV:8
46 : ite(39, 10, 45) : BV:8
47 : ite(38, 16, 46) : BV:8
48 : ite(37, 13, 47) : BV:8
49 : ite(36, 10, 48) : BV:8
50 : 1 { 0x1 +1.11e129 } : BV:32
51 : bvadd(50, 6, 7) : BV:32
52 : eq(51, 7) : BOOL
53 : eq(51, 11) : BOOL
54 : eq(51, 14) : BOOL
55 : eq(51, 17) : BOOL
56 : eq(51, 19) : BOOL
57 : eq(51, 21) : BOOL
58 : eq(51, 23) : BOOL
59 : ite(58, 25, 26) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 16, 62) : BV:8
64 : ite(53, 13, 63) : BV:8
65 : ite(52, 10, 64) : BV:8
66 : bvadd(6, 7) : BV:32
67 : eq(66, 7) : BOOL
68 : eq(66, 11) : BOOL
69 : eq(66, 14) : BOOL
70 : eq(66, 17) : BOOL
71 : eq(66, 19) : BOOL
72 : eq(66, 21) : BOOL
73 : eq(66, 23) : BOOL
74 : ite(73, 25, 26) : BV:8
75 : ite(72, 10, 74) : BV:8
76 : ite(71, 10, 75) : BV:8
77 : ite(70, 10, 76) : BV:8
78 : ite(69, 16, 77) : BV:8
79 : ite(68, 13, 78) : BV:8
80 : ite(67, 10, 79) : BV:8
81 : bvconcat(33, 49, 65, 80) : BV:32
82 : ite(3, 2, 81) : BV:32
83 : lambda(1, 82) : FUNCTION[BV:32 -> BV:32]
84 : sym_const(83) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.dst.llvm-%arr
1 : 4294966336 { 0xfffffc40 -960 -1.99988555e128 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967041 { 0xffffff01 -255 -1.99996960e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 150), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1350176668 , 1000 , 8 ) -> 1356156122, () -> 1807783300, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1356156122 { 0x50d54cda +1.66640782e34 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1796448408 { 0x6b13a098 +1.15333843e87 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3860458279 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3860458280; 3860458283 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3860458284; 3936709639 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3936709640; 3936709643 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3936709644; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3860458279 ] -> 255, [ 3860458280; 3860458280 ] -> 64, [ 3860458281; 3860458281 ] -> 252, [ 3860458282; 3936709639 ] -> 255, [ 3936709640; 3936709640 ] -> 1, [ 3936709641; 4294966335 ] -> 255, [ 4294966336; 4294966339 ] -> 0, [ 4294966340; 4294967295 ] -> 255, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3936709640 { 0xeaa56c08 -358257656 -1.29235935e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3936709643 { 0xeaa56c0b -358257653 -1.29235970e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3860458280 { 0xe619eb28 -434509016 -1.20248889e77 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3860458283 { 0xe619eb2b -434509013 -1.20248925e77 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 34 , m_adder -> 150), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3772127962
=counter_example_end
=global nodece 35 num_edges_traversed 3
=global nodece 35 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 36
=global nodece 36 nodece z3v487.ce2388.num_edges_traversed3
=global nodece 36 nodece_path
=global nodece 36 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 36 nodece_cached_counterexample
=counter_example_begin z3v487.ce2388 64a54813952697dab786c28a57f8aa8
=nextpc_const.1
1 : 1819091611 { 0x6c6d229b +1.85261857e89 } : BV:32
=input.spec-%var-arr-1
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda631 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 538976287 { 0x2020201f +1.25098025e193 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda632 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 538976287 ] -> true, [ 538976288; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 538976288, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-%arr
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 538976288 { 0x20202020 +1.25098037e193 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 243 , m_adder -> 16), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1819091611 , 1000 , 8 ) -> 1448266853, () -> 439590519, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1448266853 { 0x5652cc65 +1.64686262e45 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 996631414 { 0x3b676376 +1.80772280e247 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 884; 887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 888; 2266038847 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2266038848; 2266038851 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2266038852; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 32, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 884 { 0x374 +1.10538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 887 { 0x377 +1.10573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2266038848 { 0x87110240 -2028928448 -1.13288116e143 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2266038851 { 0x87110243 -2028928445 -1.13288152e143 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 243 , m_adder -> 16), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3329150185
=counter_example_end
=global nodece 36 num_edges_traversed 3
=global nodece 36 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 37
=global nodece 37 nodece z3v487.ce2383.num_edges_traversed3
=global nodece 37 nodece_path
=global nodece 37 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 37 nodece_cached_counterexample
=counter_example_begin z3v487.ce2383 a42d184538e1f5998cace239a2c299fd
=nextpc_const.1
1 : 1641629405 { 0x61d946dd +1.69747507e68 } : BV:32
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1641629405 , 1000 , 8 ) -> 2057953528, () -> 1480501418, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2057953528 { 0x7aa9e0f8 +1.32717800e118 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424172 { 0x221e7fec +1.23827886e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2145741945
=counter_example_end
=global nodece 37 num_edges_traversed 3
=global nodece 37 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 38
=global nodece 38 nodece z3.ce2378.num_edges_traversed3
=global nodece 38 nodece_path
=global nodece 38 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 38 nodece_cached_counterexample
=counter_example_begin z3.ce2378 7dd6f08fed551dcb459c85d53b012ba
=nextpc_const.1
1 : 1406621718 { 0x53d75816 +1.68237566e40 } : BV:32
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1406621718 , 1000 , 8 ) -> 1930142540, () -> 1873264657, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1930142540 { 0x730ba34c +1.9092092e103 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505774 { 0x333b046e +1.46107268e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
383355959
=counter_example_end
=global nodece 38 num_edges_traversed 3
=global nodece 38 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 39
=global nodece 39 nodece z3.ce2373.num_edges_traversed3
=global nodece 39 nodece_path
=global nodece 39 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 39 nodece_cached_counterexample
=counter_example_begin z3.ce2373 96b0cd62a1c7576b184962836a73
=nextpc_const.1
1 : 1903208602 { 0x7170a89a +1.88014531e99 } : BV:32
=input.spec-%var-arr-1
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda1090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda1091 : BV:32
17 : eq(16, 2) : BOOL
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 16) : BV:32
21 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
22 : bvadd(18, 20, 21) : BV:32
23 : eq(22, 21) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
26 : eq(22, 25) : BOOL
27 : 255 { 0xff -1 } : BV:8
28 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
29 : eq(22, 28) : BOOL
30 : 223 { 0xdf -33 } : BV:8
31 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
32 : eq(22, 31) : BOOL
33 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
34 : eq(22, 33) : BOOL
35 : 247 { 0xf7 -9 } : BV:8
36 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
37 : eq(22, 36) : BOOL
38 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
39 : eq(22, 38) : BOOL
40 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
41 : eq(22, 40) : BOOL
42 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
43 : eq(22, 42) : BOOL
44 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
45 : eq(22, 44) : BOOL
46 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
47 : eq(22, 46) : BOOL
48 : 248 { 0xf8 -8 } : BV:8
49 : ite(47, 27, 48) : BV:8
50 : ite(45, 24, 49) : BV:8
51 : ite(43, 24, 50) : BV:8
52 : ite(41, 24, 51) : BV:8
53 : ite(39, 27, 52) : BV:8
54 : ite(37, 24, 53) : BV:8
55 : ite(34, 35, 54) : BV:8
56 : ite(32, 27, 55) : BV:8
57 : ite(29, 30, 56) : BV:8
58 : ite(26, 27, 57) : BV:8
59 : ite(23, 24, 58) : BV:8
60 : 2 { 0x2 +1.23e129 } : BV:32
61 : bvadd(60, 20, 21) : BV:32
62 : eq(61, 21) : BOOL
63 : eq(61, 25) : BOOL
64 : eq(61, 28) : BOOL
65 : eq(61, 31) : BOOL
66 : eq(61, 33) : BOOL
67 : eq(61, 36) : BOOL
68 : eq(61, 38) : BOOL
69 : eq(61, 40) : BOOL
70 : eq(61, 42) : BOOL
71 : eq(61, 44) : BOOL
72 : eq(61, 46) : BOOL
73 : ite(72, 27, 48) : BV:8
74 : ite(71, 24, 73) : BV:8
75 : ite(70, 24, 74) : BV:8
76 : ite(69, 24, 75) : BV:8
77 : ite(68, 27, 76) : BV:8
78 : ite(67, 24, 77) : BV:8
79 : ite(66, 35, 78) : BV:8
80 : ite(65, 27, 79) : BV:8
81 : ite(64, 30, 80) : BV:8
82 : ite(63, 27, 81) : BV:8
83 : ite(62, 24, 82) : BV:8
84 : 1 { 0x1 +1.11e129 } : BV:32
85 : bvadd(84, 20, 21) : BV:32
86 : eq(85, 21) : BOOL
87 : eq(85, 25) : BOOL
88 : eq(85, 28) : BOOL
89 : eq(85, 31) : BOOL
90 : eq(85, 33) : BOOL
91 : eq(85, 36) : BOOL
92 : eq(85, 38) : BOOL
93 : eq(85, 40) : BOOL
94 : eq(85, 42) : BOOL
95 : eq(85, 44) : BOOL
96 : eq(85, 46) : BOOL
97 : ite(96, 27, 48) : BV:8
98 : ite(95, 24, 97) : BV:8
99 : ite(94, 24, 98) : BV:8
100 : ite(93, 24, 99) : BV:8
101 : ite(92, 27, 100) : BV:8
102 : ite(91, 24, 101) : BV:8
103 : ite(90, 35, 102) : BV:8
104 : ite(89, 27, 103) : BV:8
105 : ite(88, 30, 104) : BV:8
106 : ite(87, 27, 105) : BV:8
107 : ite(86, 24, 106) : BV:8
108 : bvadd(20, 21) : BV:32
109 : eq(108, 21) : BOOL
110 : eq(108, 25) : BOOL
111 : eq(108, 28) : BOOL
112 : eq(108, 31) : BOOL
113 : eq(108, 33) : BOOL
114 : eq(108, 36) : BOOL
115 : eq(108, 38) : BOOL
116 : eq(108, 40) : BOOL
117 : eq(108, 42) : BOOL
118 : eq(108, 44) : BOOL
119 : eq(108, 46) : BOOL
120 : ite(119, 27, 48) : BV:8
121 : ite(118, 24, 120) : BV:8
122 : ite(117, 24, 121) : BV:8
123 : ite(116, 24, 122) : BV:8
124 : ite(115, 27, 123) : BV:8
125 : ite(114, 24, 124) : BV:8
126 : ite(113, 35, 125) : BV:8
127 : ite(112, 27, 126) : BV:8
128 : ite(111, 30, 127) : BV:8
129 : ite(110, 27, 128) : BV:8
130 : ite(109, 24, 129) : BV:8
131 : bvconcat(59, 83, 107, 130) : BV:32
132 : ite(17, 2, 131) : BV:32
133 : lambda(16, 132) : FUNCTION[BV:32 -> BV:32]
134 : map(15, 133) : MAP[BV:32 -> BV:32]
135 : sym_const(134) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda1069 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : ite(3, 2, 118) : BV:32
120 : lambda(1, 119) : FUNCTION[BV:32 -> BV:32]
121 : sym_const(120) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda1070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
12 : eq(8, 11) : BOOL
13 : 255 { 0xff -1 } : BV:8
14 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
15 : eq(8, 14) : BOOL
16 : 223 { 0xdf -33 } : BV:8
17 : 3442203933 { 0xcd2bdd1d -852763363 -1.34268534e27 } : BV:32
18 : eq(8, 17) : BOOL
19 : 751019026 { 0x2cc3a412 +1.52844452e218 } : BV:32
20 : eq(8, 19) : BOOL
21 : 247 { 0xf7 -9 } : BV:8
22 : 3757570051 { 0xdff7f803 -537397245 -1.93725621e64 } : BV:32
23 : eq(8, 22) : BOOL
24 : 3442203934 { 0xcd2bdd1e -852763362 -1.34268546e27 } : BV:32
25 : eq(8, 24) : BOOL
26 : 3757570050 { 0xdff7f802 -537397246 -1.93725609e64 } : BV:32
27 : eq(8, 26) : BOOL
28 : 3757570049 { 0xdff7f801 -537397247 -1.93725597e64 } : BV:32
29 : eq(8, 28) : BOOL
30 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
31 : eq(8, 30) : BOOL
32 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
33 : eq(8, 32) : BOOL
34 : 248 { 0xf8 -8 } : BV:8
35 : ite(33, 13, 34) : BV:8
36 : ite(31, 10, 35) : BV:8
37 : ite(29, 10, 36) : BV:8
38 : ite(27, 10, 37) : BV:8
39 : ite(25, 13, 38) : BV:8
40 : ite(23, 10, 39) : BV:8
41 : ite(20, 21, 40) : BV:8
42 : ite(18, 13, 41) : BV:8
43 : ite(15, 16, 42) : BV:8
44 : ite(12, 13, 43) : BV:8
45 : ite(9, 10, 44) : BV:8
46 : 2 { 0x2 +1.23e129 } : BV:32
47 : bvadd(46, 6, 7) : BV:32
48 : eq(47, 7) : BOOL
49 : eq(47, 11) : BOOL
50 : eq(47, 14) : BOOL
51 : eq(47, 17) : BOOL
52 : eq(47, 19) : BOOL
53 : eq(47, 22) : BOOL
54 : eq(47, 24) : BOOL
55 : eq(47, 26) : BOOL
56 : eq(47, 28) : BOOL
57 : eq(47, 30) : BOOL
58 : eq(47, 32) : BOOL
59 : ite(58, 13, 34) : BV:8
60 : ite(57, 10, 59) : BV:8
61 : ite(56, 10, 60) : BV:8
62 : ite(55, 10, 61) : BV:8
63 : ite(54, 13, 62) : BV:8
64 : ite(53, 10, 63) : BV:8
65 : ite(52, 21, 64) : BV:8
66 : ite(51, 13, 65) : BV:8
67 : ite(50, 16, 66) : BV:8
68 : ite(49, 13, 67) : BV:8
69 : ite(48, 10, 68) : BV:8
70 : 1 { 0x1 +1.11e129 } : BV:32
71 : bvadd(70, 6, 7) : BV:32
72 : eq(71, 7) : BOOL
73 : eq(71, 11) : BOOL
74 : eq(71, 14) : BOOL
75 : eq(71, 17) : BOOL
76 : eq(71, 19) : BOOL
77 : eq(71, 22) : BOOL
78 : eq(71, 24) : BOOL
79 : eq(71, 26) : BOOL
80 : eq(71, 28) : BOOL
81 : eq(71, 30) : BOOL
82 : eq(71, 32) : BOOL
83 : ite(82, 13, 34) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 10, 85) : BV:8
87 : ite(78, 13, 86) : BV:8
88 : ite(77, 10, 87) : BV:8
89 : ite(76, 21, 88) : BV:8
90 : ite(75, 13, 89) : BV:8
91 : ite(74, 16, 90) : BV:8
92 : ite(73, 13, 91) : BV:8
93 : ite(72, 10, 92) : BV:8
94 : bvadd(6, 7) : BV:32
95 : eq(94, 7) : BOOL
96 : eq(94, 11) : BOOL
97 : eq(94, 14) : BOOL
98 : eq(94, 17) : BOOL
99 : eq(94, 19) : BOOL
100 : eq(94, 22) : BOOL
101 : eq(94, 24) : BOOL
102 : eq(94, 26) : BOOL
103 : eq(94, 28) : BOOL
104 : eq(94, 30) : BOOL
105 : eq(94, 32) : BOOL
106 : ite(105, 13, 34) : BV:8
107 : ite(104, 10, 106) : BV:8
108 : ite(103, 10, 107) : BV:8
109 : ite(102, 10, 108) : BV:8
110 : ite(101, 13, 109) : BV:8
111 : ite(100, 10, 110) : BV:8
112 : ite(99, 21, 111) : BV:8
113 : ite(98, 13, 112) : BV:8
114 : ite(97, 16, 113) : BV:8
115 : ite(96, 13, 114) : BV:8
116 : ite(95, 10, 115) : BV:8
117 : bvconcat(45, 69, 93, 116) : BV:32
118 : ite(3, 2, 117) : BV:32
119 : lambda(1, 118) : FUNCTION[BV:32 -> BV:32]
120 : sym_const(119) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.dst.llvm-%arr
1 : 3757570048 { 0xdff7f800 -537397248 -1.93725585e64 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 196 , m_adder -> 102), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1903208602 , 1000 , 8 ) -> 69998110, () -> 2108191646, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 69998110 { 0x42c161e +1.34442496e137 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1506387082 { 0x59c9a48a +1.57533383e52 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 751019023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 751019024; 751019027 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 751019028; 3442203931 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3442203932; 3442203935 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3442203936; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 751019023 ] -> 248, [ 751019024; 751019024 ] -> 0, [ 751019025; 751019025 ] -> 248, [ 751019026; 751019026 ] -> 247, [ 751019027; 751019027 ] -> 223, [ 751019028; 3442203931 ] -> 248, [ 3442203932; 3442203935 ] -> 255, [ 3442203936; 3757570047 ] -> 248, [ 3757570048; 3757570051 ] -> 0, [ 3757570052; 4294967295 ] -> 248, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3442203932 { 0xcd2bdd1c -852763364 -1.34268522e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3442203935 { 0xcd2bdd1f -852763361 -1.34268558e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 751019024 { 0x2cc3a410 +1.52844429e218 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 751019027 { 0x2cc3a413 +1.52844464e218 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 196 , m_adder -> 102), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
68149398
=counter_example_end
=global nodece 39 num_edges_traversed 3
=global nodece 39 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 40
=global nodece 40 nodece z3.ce2368.num_edges_traversed2
=global nodece 40 nodece_path
=global nodece 40 nodece_path.graph_edge_composition
(epsilon)
=global nodece 40 nodece_cached_counterexample
=counter_example_begin z3.ce2368 dacbc10cb285be6e7521167595a454a
=nextpc_const.1
1 : 844058964 { 0x324f5154 +1.61966943e229 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6850 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6851 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6854 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4 { 0x4 +1.47e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6855 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform663 : BV:32
4 : Lambda6858 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6859 : BV:32
7 : unit : UNIT
8 : 1715188910 { 0x663bb4ae +1.46645140e77 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 3 ] -> true, [ 4; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda6826 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 3 { 0x3 +1.35e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 79 , m_adder -> 8), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 844058964 , 1000 , 8 ) -> 1730948379, () -> 1010156673, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform662 : BV:32
4 : Lambda6856 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6857 : BV:32
7 : unit : UNIT
8 : 252991957 { 0xf1459d5 +1.15899145e159 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1730948379 { 0x672c2d1b +1.34512650e79 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3098354591 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3098354592; 3098354595 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3098354596; 4188535123 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4188535124; 4188535127 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 4188535128; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4188535124 { 0xf9a7f954 -106432172 -1.31229639e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 4188535127 { 0xf9a7f957 -106432169 -1.31229674e116 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3098354592 { 0xb8ad23a0 -1196612704 -1.35264968e242 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3098354595 { 0xb8ad23a3 -1196612701 -1.35265004e242 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 79 , m_adder -> 8), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2389279600
=counter_example_end
=global nodece 40 num_edges_traversed 2
=global nodece 40 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 41
=global nodece 41 nodece z3v487.ce2363.num_edges_traversed2
=global nodece 41 nodece_path
=global nodece 41 nodece_path.graph_edge_composition
(epsilon)
=global nodece 41 nodece_cached_counterexample
=counter_example_begin z3v487.ce2363 8db247c0c8801e15c23c73613ff80e8
=nextpc_const.1
1 : 181362593 { 0xacf5fa1 +1.62010586e150 } : BV:32
=input.spec-%var-arr-1
1 : Lambda6870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6871 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda6873 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda6874 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda6833 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform667 : BV:32
4 : Lambda6877 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6878 : BV:32
7 : unit : UNIT
8 : 714842915 { 0x2a9ba323 +1.21591603e214 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 167 , m_adder -> 141), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 181362593 , 1000 , 8 ) -> 1857082485, () -> 593695192, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform666 : BV:32
4 : Lambda6875 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda6876 : BV:32
7 : unit : UNIT
8 : 1579669452 { 0x5e27d7cc +1.31127309e61 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1857082485 { 0x6eb0d475 +1.38148367e94 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 675284095 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 675284096; 675284099 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 675284100; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 675284096 { 0x28400480 +1.50013732e209 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 675284099 { 0x28400483 +1.50013768e209 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 167 , m_adder -> 141), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
71510369
=counter_example_end
=global nodece 41 num_edges_traversed 2
=global nodece 41 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 42
=global nodece 42 nodece z3.ce2358.num_edges_traversed2
=global nodece 42 nodece_path
=global nodece 42 nodece_path.graph_edge_composition
(epsilon)
=global nodece 42 nodece_cached_counterexample
=counter_example_begin z3.ce2358 b19beed56117524336aaa8623f4da17
=nextpc_const.1
1 : 1396566385 { 0x533de971 +1.48368656e39 } : BV:32
=input.spec-%var-arr-1
1 : Lambda9894 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9895 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 2) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(7, 16) : BOOL
22 : bvule(16, 9) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 6, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda9898 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : bvule(1, 2) : BOOL
5 : and(3, 4) : BOOL
6 : 1 { 0x1 } : BOOL
7 : 1 { 0x1 +1.11e129 } : BV:32
8 : bvule(7, 1) : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(1, 9) : BOOL
11 : and(8, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(5, 6, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda9899 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 9) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform959 : BV:32
4 : Lambda9902 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9903 : BV:32
7 : unit : UNIT
8 : 2113782916 { 0x7dfdc484 +1.98255968e124 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 0 ] -> true, [ 1; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda9870 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : bvule(1, 2) : BOOL
6 : and(4, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1 { 0x1 +1.11e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1485923360 { 0x58916420 +1.13586807e50 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2599073504 { 0x9aeab6e0 -1695893792 -1.83370590e182 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 52 , m_adder -> 103), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1396566385 , 1000 , 8 ) -> 573853930, () -> 912210998, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform958 : BV:32
4 : Lambda9900 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda9901 : BV:32
7 : unit : UNIT
8 : 1419476756 { 0x549b7f14 +1.21481561e42 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 573853930 { 0x223450ea +1.40871930e197 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1485923359 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1485923360; 1485923363 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1485923364; 2412511231 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2412511232; 2599073503 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2599073504; 2599073507 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2599073508; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2599073504 { 0x9aeab6e0 -1695893792 -1.83370590e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2599073507 { 0x9aeab6e3 -1695893789 -1.83370625e182 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1485923360 { 0x58916420 +1.13586807e50 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1485923363 { 0x58916423 +1.13586843e50 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 52 , m_adder -> 103), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2389298556
=counter_example_end
=global nodece 42 num_edges_traversed 2
=global nodece 42 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 43
=global nodece 43 nodece z3.ce2353.num_edges_traversed2
=global nodece 43 nodece_path
=global nodece 43 nodece_path.graph_edge_composition
(epsilon)
=global nodece 43 nodece_cached_counterexample
=counter_example_begin z3.ce2353 da9fc4aca128326e5b36ed9d196fe294
=nextpc_const.1
1 : 1601775509 { 0x5f792795 +1.94652044e63 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10090 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10091 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 131072 { 0x20000 +1.1562500e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10094 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 33554432 { 0x2000000 +1.0e133 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10095 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform983 : BV:32
4 : Lambda10098 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10099 : BV:32
7 : unit : UNIT
8 : 1917044439 { 0x7243c6d7 +1.52950561e101 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 33554431 ] -> true, [ 33554432; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10066 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 33554431 { 0x1ffffff +1.99999988e132 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 33554432 { 0x2000000 +1.0e133 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 33554432 { 0x2000000 +1.0e133 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 236), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1601775509 , 1000 , 8 ) -> 1613245977, () -> 1352322639, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform982 : BV:32
4 : Lambda10096 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10097 : BV:32
7 : unit : UNIT
8 : 796814197 { 0x2f7e6b75 +1.98765432e223 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1613245977 { 0x60282e19 +1.31390678e65 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2188022803 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2188022804; 2188022807 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2188022808; 3452230175 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3452230176; 3452230179 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3452230180; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2188022804 { 0x826a9414 -2106944492 -1.83264398e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2188022807 { 0x826a9417 -2106944489 -1.83264434e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3452230176 { 0xcdc4da20 -842737120 -1.53790664e28 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3452230179 { 0xcdc4da23 -842737117 -1.53790700e28 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 54 , m_adder -> 236), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1238832525
=counter_example_end
=global nodece 43 num_edges_traversed 2
=global nodece 43 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 44
=global nodece 44 nodece z3v487.ce2348.num_edges_traversed2
=global nodece 44 nodece_path
=global nodece 44 nodece_path.graph_edge_composition
(epsilon)
=global nodece 44 nodece_cached_counterexample
=counter_example_begin z3v487.ce2348 87f58e3132a5ec8829be41de46c3d6f6
=nextpc_const.1
1 : 1118449863 { 0x42aa30c7 +1.32961356e6 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10110 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10111 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10113 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8388608 { 0x800000 +1.0e130 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10114 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10073 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 8388607 { 0x7fffff +1.99999988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 8388608 { 0x800000 +1.0e130 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform987 : BV:32
4 : Lambda10117 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10118 : BV:32
7 : unit : UNIT
8 : 2143875888 { 0x7fc8f330 +1.56992149e128 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8388607 ] -> true, [ 8388608; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8388608 { 0x800000 +1.0e130 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 70 , m_adder -> 181), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1118449863 , 1000 , 8 ) -> 1803199734, () -> 965110658, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform986 : BV:32
4 : Lambda10115 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10116 : BV:32
7 : unit : UNIT
8 : 1240928063 { 0x49f70f3f +1.93015277e20 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1803199734 { 0x6b7aa4f6 +1.95815920e87 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 70 , m_adder -> 181), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2012227865
=counter_example_end
=global nodece 44 num_edges_traversed 2
=global nodece 44 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 45
=global nodece 45 nodece z3.ce2343.num_edges_traversed2
=global nodece 45 nodece_path
=global nodece 45 nodece_path.graph_edge_composition
(epsilon)
=global nodece 45 nodece_cached_counterexample
=counter_example_begin z3.ce2343 3d19d4be9343dae6e8788347e8f43
=nextpc_const.1
1 : 829549240 { 0x3171eab8 +1.88997554e227 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10286 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10287 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 256 { 0x100 +1.3051e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10290 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 268435456 { 0x10000000 +1.0e161 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10291 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1007 : BV:32
4 : Lambda10294 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10295 : BV:32
7 : unit : UNIT
8 : 610054537 { 0x245cb189 +1.72416794e201 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 268435455 ] -> true, [ 268435456; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10262 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 268435455 { 0xfffffff +1.99999988e160 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 268435456 { 0x10000000 +1.0e161 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 268435456 { 0x10000000 +1.0e161 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 126), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 829549240 , 1000 , 8 ) -> 806289158, () -> 1025595670, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1006 : BV:32
4 : Lambda10292 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10293 : BV:32
7 : unit : UNIT
8 : 2095011736 { 0x7cdf5798 +1.74486064e122 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 806289158 { 0x300eff06 +1.11715769e225 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 843719411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 843719412; 843719415 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 843719416; 1368568747 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1368568748; 1368568751 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1368568752; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1368568748 { 0x5192b3ac +1.14610815e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1368568751 { 0x5192b3af +1.14610850e36 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 843719412 { 0x324a22f4 +1.57919168e229 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 843719415 { 0x324a22f7 +1.57919204e229 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 18 , m_adder -> 126), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
1933286094
=counter_example_end
=global nodece 45 num_edges_traversed 2
=global nodece 45 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 46
=global nodece 46 nodece z3v487.ce2338.num_edges_traversed2
=global nodece 46 nodece_path
=global nodece 46 nodece_path.graph_edge_composition
(epsilon)
=global nodece 46 nodece_cached_counterexample
=counter_example_begin z3v487.ce2338 63531476537c20cf1436b37216d6ae
=nextpc_const.1
1 : 352327031 { 0x15001577 +1.65505e171 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10306 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10307 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10309 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 16777216 { 0x1000000 +1.0e131 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10310 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10269 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 16777215 { 0xffffff +1.99999988e130 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 16777216 { 0x1000000 +1.0e131 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1011 : BV:32
4 : Lambda10313 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10314 : BV:32
7 : unit : UNIT
8 : 862135698 { 0x33632592 +1.77458405e231 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 16777215 ] -> true, [ 16777216; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 16777216 { 0x1000000 +1.0e131 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 36 , m_adder -> 21), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 352327031 , 1000 , 8 ) -> 187439757, () -> 1786648662, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1010 : BV:32
4 : Lambda10311 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10312 : BV:32
7 : unit : UNIT
8 : 550789904 { 0x20d46310 +1.65927314e194 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 187439757 { 0xb2c1a8d +1.34456026e151 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 8191 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 8192; 8195 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8196; 2147483643 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483644; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8192 { 0x2000 +1.97656e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 8195 { 0x2003 +1.97692e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 36 , m_adder -> 21), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3102384082
=counter_example_end
=global nodece 46 num_edges_traversed 2
=global nodece 46 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 47
=global nodece 47 nodece z3v487.ce2333.num_edges_traversed2
=global nodece 47 nodece_path
=global nodece 47 nodece_path.graph_edge_composition
(epsilon)
=global nodece 47 nodece_cached_counterexample
=counter_example_begin z3v487.ce2333 a84626f97bca79707fb4abca56ba9ba8
=nextpc_const.1
1 : 78413103 { 0x4ac7d2f +1.34757030e138 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10483 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10484 : BV:32
17 : bvule(2, 16) : BOOL
18 : bvule(16, 8) : BOOL
19 : and(17, 18) : BOOL
20 : ite(19, 2, 2) : BV:32
21 : lambda(16, 20) : FUNCTION[BV:32 -> BV:32]
22 : map(15, 21) : MAP[BV:32 -> BV:32]
23 : sym_const(22) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10486 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
9 : bvule(8, 1) : BOOL
10 : bvule(1, 8) : BOOL
11 : and(9, 10) : BOOL
12 : 0 { 0x0 } : BOOL
13 : ite(11, 12, 12) : BOOL
14 : ite(6, 7, 13) : BOOL
15 : lambda(1, 14) : FUNCTION[BV:32 -> BOOL]
16 : Lambda10487 : BV:32
17 : eq(16, 2) : BOOL
18 : bvule(2, 16) : BOOL
19 : bvule(16, 4) : BOOL
20 : and(18, 19) : BOOL
21 : bvule(8, 16) : BOOL
22 : bvule(16, 8) : BOOL
23 : and(21, 22) : BOOL
24 : ite(23, 12, 12) : BOOL
25 : ite(20, 7, 24) : BOOL
26 : and(18, 22) : BOOL
27 : ite(26, 2, 2) : BV:32
28 : ite(25, 27, 2) : BV:32
29 : ite(17, 2, 28) : BV:32
30 : lambda(16, 29) : FUNCTION[BV:32 -> BV:32]
31 : map(15, 30) : MAP[BV:32 -> BV:32]
32 : sym_const(31) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda10454 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
10 : bvule(9, 1) : BOOL
11 : bvule(1, 9) : BOOL
12 : and(10, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(7, 8, 14) : BOOL
16 : and(4, 11) : BOOL
17 : ite(16, 2, 2) : BV:32
18 : ite(15, 17, 2) : BV:32
19 : ite(3, 2, 18) : BV:32
20 : lambda(1, 19) : FUNCTION[BV:32 -> BV:32]
21 : sym_const(20) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1031 : BV:32
4 : Lambda10490 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10491 : BV:32
7 : unit : UNIT
8 : 85995297 { 0x5202f21 +1.25143826e139 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4294967294 ] -> true, [ 4294967295; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4036984884 { 0xf09f8034 -257982412 -1.24609994e98 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 157 , m_adder -> 228), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 78413103 , 1000 , 8 ) -> 77224233, () -> 1472971483, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1030 : BV:32
4 : Lambda10488 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10489 : BV:32
7 : unit : UNIT
8 : 1737477161 { 0x678fcc29 +1.12341797e80 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 77224233 { 0x49a5929 +1.20584595e138 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 139530239 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 139530240; 4036984883 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4036984884; 4036984887 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4036984888; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4036984884 { 0xf09f8034 -257982412 -1.24609994e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4036984887 { 0xf09f8037 -257982409 -1.24610030e98 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 157 , m_adder -> 228), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
63152647
=counter_example_end
=global nodece 47 num_edges_traversed 2
=global nodece 47 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 48
=global nodece 48 nodece z3.ce2328.num_edges_traversed2
=global nodece 48 nodece_path
=global nodece 48 nodece_path.graph_edge_composition
(epsilon)
=global nodece 48 nodece_cached_counterexample
=counter_example_begin z3.ce2328 f77c9d4b7081fa18b6f252e6e0415e6e
=nextpc_const.1
1 : 2037754809 { 0x7975abb9 +1.91930305e115 } : BV:32
=input.spec-%var-arr-1
1 : Lambda10678 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10679 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda10682 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda10683 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1055 : BV:32
4 : Lambda10686 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10687 : BV:32
7 : unit : UNIT
8 : 449088175 { 0x1ac48aaf +1.53548228e182 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda10654 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3880312928 { 0xe748e060 -414654368 -1.56934738e79 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3937287964 { 0xeaae3f1c -357679332 -1.36130094e86 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 146), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 2037754809 , 1000 , 8 ) -> 1139913833, () -> 746601333, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform1054 : BV:32
4 : Lambda10684 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda10685 : BV:32
7 : unit : UNIT
8 : 251551209 { 0xefe5de9 +1.98724091e158 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1139913833 { 0x43f1b469 +1.88831818e8 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3880312927 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3880312928; 3880312931 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3880312932; 3937287963 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3937287964; 3937287967 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3937287968; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3937287964 { 0xeaae3f1c -357679332 -1.36130094e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3937287967 { 0xeaae3f1f -357679329 -1.36130130e86 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3880312928 { 0xe748e060 -414654368 -1.56934738e79 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3880312931 { 0xe748e063 -414654365 -1.56934773e79 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 14 , m_adder -> 146), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3211996695
=counter_example_end
=global nodece 48 num_edges_traversed 2
=global nodece 48 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 49
=global nodece 49 nodece z3.ce2883.num_edges_traversed1
=global nodece 49 nodece_path
=global nodece 49 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 49 nodece_cached_counterexample
=counter_example_begin z3.ce2883 10e1cc4eb8b4ffbc73adad481d91051
=nextpc_const.1
1 : 1210560061 { 0x4827ae3d +1.31000483e17 } : BV:32
=input.spec-%var-arr-1
1 : Lambda21707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda21708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda21711 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1 { 0x1 +1.11e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2 { 0x2 +1.23e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda21712 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2571 : BV:32
4 : Lambda21715 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda21716 : BV:32
7 : unit : UNIT
8 : 208236444 { 0xc696f9c +1.82371854e153 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1 ] -> true, [ 2; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda21683 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1 { 0x1 +1.11e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2 { 0x2 +1.23e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2917241680 { 0xade19350 -1377725616 -1.76230812e220 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 226390252 { 0xd7e70ec +1.98782110e155 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 162), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1210560061 , 1000 , 8 ) -> 481474290, () -> 1463129173, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform2570 : BV:32
4 : Lambda21713 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda21714 : BV:32
7 : unit : UNIT
8 : 1997485940 { 0x770f3774 +1.11887979e111 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 481474290 { 0x1cb2b6f2 +1.39620804e186 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 226390251 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 226390252; 226390255 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 226390256; 2917241679 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2917241680; 2917241683 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2917241684; 3221602303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3221602304; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 226390252 { 0xd7e70ec +1.98782110e155 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 226390255 { 0xd7e70ef +1.98782145e155 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2917241680 { 0xade19350 -1377725616 -1.76230812e220 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2917241683 { 0xade19353 -1377725613 -1.76230847e220 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 65 , m_adder -> 162), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
238680660
=counter_example_end
=global nodece 49 num_edges_traversed 1
=global nodece 49 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 50
=global nodece 50 nodece z3v487.ce3465.num_edges_traversed0
=global nodece 50 nodece_path
=global nodece 50 nodece_path.graph_edge_composition
(epsilon)
=global nodece 50 nodece_cached_counterexample
=counter_example_begin z3v487.ce3465 8216882e2eaf8e602daeeb3c82a43e
=input.spec-%var-arr-1
1 : Lambda32422 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32423 : BV:32
18 : eq(17, 2) : BOOL
19 : 1269608839 { 0x4bacb187 +1.34916770e24 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 1269608836 { 0x4bacb184 +1.34916734e24 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 1269608837 { 0x4bacb185 +1.34916746e24 } : BV:32
27 : eq(22, 26) : BOOL
28 : 1269608838 { 0x4bacb186 +1.34916758e24 } : BV:32
29 : eq(22, 28) : BOOL
30 : eq(22, 19) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(29, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(28, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 28) : BOOL
40 : eq(36, 19) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(26, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 28) : BOOL
49 : eq(45, 19) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(23, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 28) : BOOL
58 : eq(54, 19) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1269608836 { 0x4bacb184 +1.34916734e24 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32425 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32426 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 1269608839 { 0x4bacb187 +1.34916770e24 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 1269608836 { 0x4bacb184 +1.34916734e24 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 1269608837 { 0x4bacb185 +1.34916746e24 } : BV:32
35 : eq(30, 34) : BOOL
36 : 1269608838 { 0x4bacb186 +1.34916758e24 } : BV:32
37 : eq(30, 36) : BOOL
38 : eq(30, 27) : BOOL
39 : 5 { 0x5 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(37, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(36, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 36) : BOOL
48 : eq(44, 27) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(34, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 36) : BOOL
57 : eq(53, 27) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(31, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 36) : BOOL
66 : eq(62, 27) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32407 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 1269608839 { 0x4bacb187 +1.34916770e24 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 1269608836 { 0x4bacb184 +1.34916734e24 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 1269608837 { 0x4bacb185 +1.34916746e24 } : BV:32
25 : eq(20, 24) : BOOL
26 : 1269608838 { 0x4bacb186 +1.34916758e24 } : BV:32
27 : eq(20, 26) : BOOL
28 : eq(20, 17) : BOOL
29 : 5 { 0x5 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(27, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(26, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 26) : BOOL
38 : eq(34, 17) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(24, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 26) : BOOL
47 : eq(43, 17) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(21, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 26) : BOOL
56 : eq(52, 17) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4099 : BV:32
4 : Lambda32429 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32430 : BV:32
7 : unit : UNIT
8 : 1524387242 { 0x5adc4daa +1.72112011e54 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-1.1.1
1 : Lambda32411 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 1269608839 { 0x4bacb187 +1.34916770e24 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 1269608836 { 0x4bacb184 +1.34916734e24 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 1269608837 { 0x4bacb185 +1.34916746e24 } : BV:32
12 : eq(7, 11) : BOOL
13 : 1269608838 { 0x4bacb186 +1.34916758e24 } : BV:32
14 : eq(7, 13) : BOOL
15 : eq(7, 4) : BOOL
16 : 5 { 0x5 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(14, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(13, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 13) : BOOL
25 : eq(21, 4) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(11, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 13) : BOOL
34 : eq(30, 4) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(8, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 13) : BOOL
43 : eq(39, 4) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4098 : BV:32
4 : Lambda32427 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32428 : BV:32
7 : unit : UNIT
8 : 935887582 { 0x37c882de +1.56649374e240 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1073741823 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1073741824; 1073741827 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1073741828; 1269608835 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1269608836; 1269608839 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1269608840; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1269608835 ] -> 5, [ 1269608836; 1269608839 ] -> 0, [ 1269608840; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1073741824 { 0x40000000 +1.0e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1073741827 { 0x40000003 +1.35e1 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2005682421
=counter_example_end
=global nodece 50 num_edges_traversed 0
=global nodece 50 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 51
=global nodece 51 nodece z3v487.ce3539.num_edges_traversed4
=global nodece 51 nodece_path
=global nodece 51 nodece_path.graph_edge_composition
(epsilon)
=global nodece 51 nodece_cached_counterexample
=counter_example_begin z3v487.ce3539 43496f3f5480ee66ebaf2eb7e1cbda
=nextpc_const.1
1 : 1641629405 { 0x61d946dd +1.69747507e68 } : BV:32
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2057953527 ] -> 8, [ 2057953528; 2057953528 ] -> 8, [ 2057953529; 2057953529 ] -> 8, [ 2057953530; 2057953530 ] -> 8, [ 2057953531; 2057953531 ] -> 8, [ 2057953532; 2057953532 ] -> 0, [ 2057953533; 2057953533 ] -> 0, [ 2057953534; 2057953534 ] -> 0, [ 2057953535; 2057953535 ] -> 0, [ 2057953536; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1641629405 , 1000 , 8 ) -> 2057953528, () -> 1480501418, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4113 : BV:32
7 : Lambda32457 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda32458 : BV:32
10 : sum(4, 2, 6) : SUM[UNIT,BV:32]
11 : prod(4, 10) : PROD[BV:32,SUM[UNIT,BV:32]]
12 : lambda(9, 11) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
13 : ind(5, 5, 4, 6, 8, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(4, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424173 { 0x221e7fed +1.23827898e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2057953527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2057953528; 2057953535 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2057953536; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2057953528 { 0x7aa9e0f8 +1.32717800e118 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2145741945
=counter_example_end
=global nodece 51 num_edges_traversed 4
=global nodece 51 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 52
=global nodece 52 nodece z3v487.ce3578.num_edges_traversed5
=global nodece 52 nodece_path
=global nodece 52 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 52 nodece_cached_counterexample
=counter_example_begin z3v487.ce3578 6b3fc84d5019bd992c2e8daa36d94188
=nextpc_const.1
1 : 1641629405 { 0x61d946dd +1.69747507e68 } : BV:32
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2057953527 ] -> 8, [ 2057953528; 2057953528 ] -> 8, [ 2057953529; 2057953529 ] -> 8, [ 2057953530; 2057953530 ] -> 8, [ 2057953531; 2057953531 ] -> 8, [ 2057953532; 2057953532 ] -> 0, [ 2057953533; 2057953533 ] -> 0, [ 2057953534; 2057953534 ] -> 0, [ 2057953535; 2057953535 ] -> 0, [ 2057953536; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1641629405 , 1000 , 8 ) -> 2057953528, () -> 1480501418, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4113 : BV:32
7 : Lambda32457 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda32458 : BV:32
10 : sum(4, 2, 6) : SUM[UNIT,BV:32]
11 : prod(4, 10) : PROD[BV:32,SUM[UNIT,BV:32]]
12 : lambda(9, 11) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
13 : ind(5, 5, 4, 6, 8, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(4, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424173 { 0x221e7fed +1.23827898e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2057953527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2057953528; 2057953535 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2057953536; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2057953528 { 0x7aa9e0f8 +1.32717800e118 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2145741945
=counter_example_end
=global nodece 52 num_edges_traversed 5
=global nodece 52 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 53
=global nodece 53 nodece z3v487.ce3592.num_edges_traversed6
=global nodece 53 nodece_path
=global nodece 53 nodece_path.graph_edge_composition
(epsilon)
=global nodece 53 nodece_cached_counterexample
=counter_example_begin z3v487.ce3592 2b7e1a8de17ae195d437d5b52975c1bd
=nextpc_const.1
1 : 1641629405 { 0x61d946dd +1.69747507e68 } : BV:32
=input.spec-%var-arr-1
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda771 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 134744071 { 0x8080807 +1.6274497e145 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda772 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 8, 8) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 134744071 ] -> true, [ 134744072; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2057953527 ] -> 8, [ 2057953528; 2057953528 ] -> 8, [ 2057953529; 2057953529 ] -> 8, [ 2057953530; 2057953530 ] -> 8, [ 2057953531; 2057953531 ] -> 8, [ 2057953532; 2057953532 ] -> 0, [ 2057953533; 2057953533 ] -> 0, [ 2057953534; 2057953534 ] -> 0, [ 2057953535; 2057953535 ] -> 0, [ 2057953536; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 134744072, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-%arr
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1641629405 , 1000 , 8 ) -> 2057953528, () -> 1480501418, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 134744072 { 0x8080808 +1.6274509e145 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4113 : BV:32
7 : Lambda32457 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda32458 : BV:32
10 : sum(4, 2, 6) : SUM[UNIT,BV:32]
11 : prod(4, 10) : PROD[BV:32,SUM[UNIT,BV:32]]
12 : lambda(9, 11) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
13 : ind(5, 5, 4, 6, 8, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sum(4, 2, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(3, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : sym_const(16) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2057953528 { 0x7aa9e0f8 +1.32717800e118 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 572424173 { 0x221e7fed +1.23827898e197 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 524383 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 524384; 524387 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 524388; 2057953527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2057953528; 2057953535 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2057953536; 2147529367 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147529368; 2147529371 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147529372; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2057953527 ] -> 8, [ 2057953528; 2057953528 ] -> 8, [ 2057953529; 2057953529 ] -> 8, [ 2057953530; 2057953530 ] -> 8, [ 2057953531; 2057953531 ] -> 8, [ 2057953532; 2057953532 ] -> 0, [ 2057953533; 2057953533 ] -> 0, [ 2057953534; 2057953534 ] -> 0, [ 2057953535; 2057953535 ] -> 0, [ 2057953536; 4294967295 ] -> 8, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2057953528 { 0x7aa9e0f8 +1.32717800e118 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 524384 { 0x80060 +1.6251144e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 524387 { 0x80063 +1.6251180e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147529368 { 0x8000b298 -2147437928 -1.545024e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147529371 { 0x8000b29b -2147437925 -1.545060e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 63 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2145741945
=counter_example_end
=global nodece 53 num_edges_traversed 6
=global nodece 53 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 54
=global nodece 54 nodece z3.ce3529.num_edges_traversed4
=global nodece 54 nodece_path
=global nodece 54 nodece_path.graph_edge_composition
(epsilon)
=global nodece 54 nodece_cached_counterexample
=counter_example_begin z3.ce3529 aa911884c591cb80294c71d7ca7c3b21
=nextpc_const.1
1 : 1406621718 { 0x53d75816 +1.68237566e40 } : BV:32
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 1930142539 ] -> 242, [ 1930142540; 1930142540 ] -> 0, [ 1930142541; 1930142541 ] -> 0, [ 1930142542; 1930142542 ] -> 0, [ 1930142543; 1930142543 ] -> 0, [ 1930142544; 1930142544 ] -> 0, [ 1930142545; 1930142545 ] -> 0, [ 1930142546; 1930142546 ] -> 0, [ 1930142547; 1930142547 ] -> 0, [ 1930142548; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1406621718 , 1000 , 8 ) -> 1930142540, () -> 1873264657, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4106 : BV:32
6 : Lambda32443 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32444 : BV:32
9 : sum(3, 2, 5) : SUM[UNIT,BV:32]
10 : prod(3, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 4, 3, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(3, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505775 { 0x333b046f +1.46107280e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1930142539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1930142540; 1930142547 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1930142548; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1930142540 { 0x730ba34c +1.9092092e103 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
383355959
=counter_example_end
=global nodece 54 num_edges_traversed 4
=global nodece 54 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 55
=global nodece 55 nodece z3.ce3619.num_edges_traversed5
=global nodece 55 nodece_path
=global nodece 55 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 55 nodece_cached_counterexample
=counter_example_begin z3.ce3619 c17ae080d236ac74fc195e1db2026b0
=nextpc_const.1
1 : 1406621718 { 0x53d75816 +1.68237566e40 } : BV:32
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 1930142539 ] -> 242, [ 1930142540; 1930142540 ] -> 0, [ 1930142541; 1930142541 ] -> 0, [ 1930142542; 1930142542 ] -> 0, [ 1930142543; 1930142543 ] -> 0, [ 1930142544; 1930142544 ] -> 0, [ 1930142545; 1930142545 ] -> 0, [ 1930142546; 1930142546 ] -> 0, [ 1930142547; 1930142547 ] -> 0, [ 1930142548; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1406621718 , 1000 , 8 ) -> 1930142540, () -> 1873264657, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4106 : BV:32
6 : Lambda32443 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32444 : BV:32
9 : sum(3, 2, 5) : SUM[UNIT,BV:32]
10 : prod(3, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 4, 3, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(3, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505775 { 0x333b046f +1.46107280e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1930142539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1930142540; 1930142547 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1930142548; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1930142540 { 0x730ba34c +1.9092092e103 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
383355959
=counter_example_end
=global nodece 55 num_edges_traversed 5
=global nodece 55 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 56
=global nodece 56 nodece z3.ce3633.num_edges_traversed6
=global nodece 56 nodece_path
=global nodece 56 nodece_path.graph_edge_composition
(epsilon)
=global nodece 56 nodece_cached_counterexample
=counter_example_begin z3.ce3633 11b4129b8b696ff3e1210fe56c6ff29
=nextpc_const.1
1 : 1406621718 { 0x53d75816 +1.68237566e40 } : BV:32
=input.spec-%var-arr-1
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda930 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 4060214001 { 0xf201f2f1 -234753295 -1.1522648e101 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda931 : BV:32
18 : eq(17, 2) : BOOL
19 : 3 { 0x3 +1.35e129 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
23 : bvadd(19, 21, 22) : BV:32
24 : eq(23, 22) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
27 : eq(23, 26) : BOOL
28 : 91 { 0x5b } : BV:8
29 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
30 : eq(23, 29) : BOOL
31 : 238 { 0xee -18 } : BV:8
32 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
33 : eq(23, 32) : BOOL
34 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
35 : eq(23, 34) : BOOL
36 : 1 { 0x1 } : BV:8
37 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
38 : eq(23, 37) : BOOL
39 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
40 : eq(23, 39) : BOOL
41 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
42 : eq(23, 41) : BOOL
43 : 4 { 0x4 } : BV:8
44 : 242 { 0xf2 -14 } : BV:8
45 : ite(42, 43, 44) : BV:8
46 : ite(40, 25, 45) : BV:8
47 : ite(38, 25, 46) : BV:8
48 : ite(35, 36, 47) : BV:8
49 : ite(33, 25, 48) : BV:8
50 : ite(30, 31, 49) : BV:8
51 : ite(27, 28, 50) : BV:8
52 : ite(24, 25, 51) : BV:8
53 : 2 { 0x2 +1.23e129 } : BV:32
54 : bvadd(53, 21, 22) : BV:32
55 : eq(54, 22) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 29) : BOOL
58 : eq(54, 32) : BOOL
59 : eq(54, 34) : BOOL
60 : eq(54, 37) : BOOL
61 : eq(54, 39) : BOOL
62 : eq(54, 41) : BOOL
63 : ite(62, 43, 44) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 36, 65) : BV:8
67 : ite(58, 25, 66) : BV:8
68 : ite(57, 31, 67) : BV:8
69 : ite(56, 28, 68) : BV:8
70 : ite(55, 25, 69) : BV:8
71 : 1 { 0x1 +1.11e129 } : BV:32
72 : bvadd(71, 21, 22) : BV:32
73 : eq(72, 22) : BOOL
74 : eq(72, 26) : BOOL
75 : eq(72, 29) : BOOL
76 : eq(72, 32) : BOOL
77 : eq(72, 34) : BOOL
78 : eq(72, 37) : BOOL
79 : eq(72, 39) : BOOL
80 : eq(72, 41) : BOOL
81 : ite(80, 43, 44) : BV:8
82 : ite(79, 25, 81) : BV:8
83 : ite(78, 25, 82) : BV:8
84 : ite(77, 36, 83) : BV:8
85 : ite(76, 25, 84) : BV:8
86 : ite(75, 31, 85) : BV:8
87 : ite(74, 28, 86) : BV:8
88 : ite(73, 25, 87) : BV:8
89 : bvadd(21, 22) : BV:32
90 : eq(89, 22) : BOOL
91 : eq(89, 26) : BOOL
92 : eq(89, 29) : BOOL
93 : eq(89, 32) : BOOL
94 : eq(89, 34) : BOOL
95 : eq(89, 37) : BOOL
96 : eq(89, 39) : BOOL
97 : eq(89, 41) : BOOL
98 : ite(97, 43, 44) : BV:8
99 : ite(96, 25, 98) : BV:8
100 : ite(95, 25, 99) : BV:8
101 : ite(94, 36, 100) : BV:8
102 : ite(93, 25, 101) : BV:8
103 : ite(92, 31, 102) : BV:8
104 : ite(91, 28, 103) : BV:8
105 : ite(90, 25, 104) : BV:8
106 : bvconcat(52, 70, 88, 105) : BV:32
107 : ite(18, 2, 106) : BV:32
108 : lambda(17, 107) : FUNCTION[BV:32 -> BV:32]
109 : map(16, 108) : MAP[BV:32 -> BV:32]
110 : sym_const(109) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda909 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : ite(3, 2, 92) : BV:32
94 : lambda(1, 93) : FUNCTION[BV:32 -> BV:32]
95 : sym_const(94) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : unit : UNIT
3 : 1 { 0x1 +1.0e1025 } : INT
4 : Indxform7 : BV:32
5 : Lambda14 : BV:32
6 : lambda(5, 5) : FUNCTION[BV:32 -> BV:32]
7 : Lambda15 : BV:32
8 : sum(1, 2, 4) : SUM[UNIT,BV:32]
9 : prod(1, 8) : PROD[BV:32,SUM[UNIT,BV:32]]
10 : lambda(7, 9) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
11 : ind(3, 3, 1, 4, 6, 10) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
12 : sum(1, 2, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 4060214001 ] -> true, [ 4060214002; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 1930142539 ] -> 242, [ 1930142540; 1930142540 ] -> 0, [ 1930142541; 1930142541 ] -> 0, [ 1930142542; 1930142542 ] -> 0, [ 1930142543; 1930142543 ] -> 0, [ 1930142544; 1930142544 ] -> 0, [ 1930142545; 1930142545 ] -> 0, [ 1930142546; 1930142546 ] -> 0, [ 1930142547; 1930142547 ] -> 0, [ 1930142548; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda910 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3 { 0x3 +1.35e129 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
8 : bvadd(4, 6, 7) : BV:32
9 : eq(8, 7) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
12 : eq(8, 11) : BOOL
13 : 91 { 0x5b } : BV:8
14 : 2353442853 { 0x8c46b025 -1941524443 -1.55225050e153 } : BV:32
15 : eq(8, 14) : BOOL
16 : 238 { 0xee -18 } : BV:8
17 : 1542647303 { 0x5bf2ee07 +1.89788901e56 } : BV:32
18 : eq(8, 17) : BOOL
19 : 2334330310 { 0x8b230dc6 -1960636986 -1.27385783e151 } : BV:32
20 : eq(8, 19) : BOOL
21 : 1 { 0x1 } : BV:8
22 : 1542647302 { 0x5bf2ee06 +1.89788889e56 } : BV:32
23 : eq(8, 22) : BOOL
24 : 1542647301 { 0x5bf2ee05 +1.89788877e56 } : BV:32
25 : eq(8, 24) : BOOL
26 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
27 : eq(8, 26) : BOOL
28 : 4 { 0x4 } : BV:8
29 : 242 { 0xf2 -14 } : BV:8
30 : ite(27, 28, 29) : BV:8
31 : ite(25, 10, 30) : BV:8
32 : ite(23, 10, 31) : BV:8
33 : ite(20, 21, 32) : BV:8
34 : ite(18, 10, 33) : BV:8
35 : ite(15, 16, 34) : BV:8
36 : ite(12, 13, 35) : BV:8
37 : ite(9, 10, 36) : BV:8
38 : 2 { 0x2 +1.23e129 } : BV:32
39 : bvadd(38, 6, 7) : BV:32
40 : eq(39, 7) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 14) : BOOL
43 : eq(39, 17) : BOOL
44 : eq(39, 19) : BOOL
45 : eq(39, 22) : BOOL
46 : eq(39, 24) : BOOL
47 : eq(39, 26) : BOOL
48 : ite(47, 28, 29) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 21, 50) : BV:8
52 : ite(43, 10, 51) : BV:8
53 : ite(42, 16, 52) : BV:8
54 : ite(41, 13, 53) : BV:8
55 : ite(40, 10, 54) : BV:8
56 : 1 { 0x1 +1.11e129 } : BV:32
57 : bvadd(56, 6, 7) : BV:32
58 : eq(57, 7) : BOOL
59 : eq(57, 11) : BOOL
60 : eq(57, 14) : BOOL
61 : eq(57, 17) : BOOL
62 : eq(57, 19) : BOOL
63 : eq(57, 22) : BOOL
64 : eq(57, 24) : BOOL
65 : eq(57, 26) : BOOL
66 : ite(65, 28, 29) : BV:8
67 : ite(64, 10, 66) : BV:8
68 : ite(63, 10, 67) : BV:8
69 : ite(62, 21, 68) : BV:8
70 : ite(61, 10, 69) : BV:8
71 : ite(60, 16, 70) : BV:8
72 : ite(59, 13, 71) : BV:8
73 : ite(58, 10, 72) : BV:8
74 : bvadd(6, 7) : BV:32
75 : eq(74, 7) : BOOL
76 : eq(74, 11) : BOOL
77 : eq(74, 14) : BOOL
78 : eq(74, 17) : BOOL
79 : eq(74, 19) : BOOL
80 : eq(74, 22) : BOOL
81 : eq(74, 24) : BOOL
82 : eq(74, 26) : BOOL
83 : ite(82, 28, 29) : BV:8
84 : ite(81, 10, 83) : BV:8
85 : ite(80, 10, 84) : BV:8
86 : ite(79, 21, 85) : BV:8
87 : ite(78, 10, 86) : BV:8
88 : ite(77, 16, 87) : BV:8
89 : ite(76, 13, 88) : BV:8
90 : ite(75, 10, 89) : BV:8
91 : bvconcat(37, 55, 73, 90) : BV:32
92 : ite(3, 2, 91) : BV:32
93 : lambda(1, 92) : FUNCTION[BV:32 -> BV:32]
94 : sym_const(93) : FUNCTION[BV:32 -> BV:32]
=input.dst.llvm-%n
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.dst.llvm-%arr
1 : 1542647300 { 0x5bf2ee04 +1.89788866e56 } : BV:32
=input.dst.llvm-mem
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-mem.alloc
1 : ([ 0; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 4060214002 { 0xf201f2f2 -234753294 -1.1522660e101 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1406621718 , 1000 , 8 ) -> 1930142540, () -> 1873264657, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4106 : BV:32
6 : Lambda32443 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32444 : BV:32
9 : sum(3, 2, 5) : SUM[UNIT,BV:32]
10 : prod(3, 9) : PROD[BV:32,SUM[UNIT,BV:32]]
11 : lambda(8, 10) : FUNCTION[BV:32 -> PROD[BV:32,SUM[UNIT,BV:32]]]
12 : ind(4, 4, 3, 5, 7, 11) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
13 : sum(3, 2, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1930142540 { 0x730ba34c +1.9092092e103 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 859505775 { 0x333b046f +1.46107280e231 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 1930142539 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1930142540; 1930142547 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1930142548; 2334330307 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2334330308; 2334330311 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2334330312; 2353442851 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2353442852; 2353442855 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2353442856; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1542647299 ] -> 242, [ 1542647300; 1542647303 ] -> 0, [ 1542647304; 1930142539 ] -> 242, [ 1930142540; 1930142540 ] -> 0, [ 1930142541; 1930142541 ] -> 0, [ 1930142542; 1930142542 ] -> 0, [ 1930142543; 1930142543 ] -> 0, [ 1930142544; 1930142544 ] -> 0, [ 1930142545; 1930142545 ] -> 0, [ 1930142546; 1930142546 ] -> 0, [ 1930142547; 1930142547 ] -> 0, [ 1930142548; 2334330309 ] -> 242, [ 2334330310; 2334330310 ] -> 1, [ 2334330311; 2353442851 ] -> 242, [ 2353442852; 2353442852 ] -> 4, [ 2353442853; 2353442853 ] -> 238, [ 2353442854; 2353442854 ] -> 242, [ 2353442855; 2353442855 ] -> 91, [ 2353442856; 4294967295 ] -> 242, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1930142540 { 0x730ba34c +1.9092092e103 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.cur_rounding_mode.Lfor.cond%1%bbentry
1 : ROUND_to_nearest_ties_to_even : ROUNDING_MODE
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2334330308 { 0x8b230dc4 -1960636988 -1.27385759e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2334330311 { 0x8b230dc7 -1960636985 -1.27385795e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2353442852 { 0x8c46b024 -1941524444 -1.55225038e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2353442855 { 0x8c46b027 -1941524441 -1.55225074e153 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 235 , m_adder -> 105), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
383355959
=counter_example_end
=global nodece 56 num_edges_traversed 6
=global nodece 56 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 57
=global nodece 57 nodece z3v487.ce3812.num_edges_traversed1
=global nodece 57 nodece_path
=global nodece 57 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 57 nodece_cached_counterexample
=counter_example_begin z3v487.ce3812 70c474e54f1744bdc559f32cb34521f4
=input.spec-%var-arr-1
1 : Lambda32596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32597 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32599 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32600 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32578 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4125 : BV:32
4 : Lambda32603 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32604 : BV:32
7 : unit : UNIT
8 : 509322503 { 0x1e5ba507 +1.71597373e189 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4126 : BV:32
4 : Lambda32605 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32606 : BV:32
7 : unit : UNIT
8 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4128 : BV:32
6 : Lambda32609 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32610 : BV:32
9 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 0, [ 2147483649; 2147483649 ] -> 0, [ 2147483650; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4130 : BV:32
6 : Lambda32613 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32614 : BV:32
9 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4132 : BV:32
6 : Lambda32617 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32618 : BV:32
9 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1578736519 { 0x5e199b87 +1.20005881e61 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 33107013 { 0x1f92c45 +1.94666349e132 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 274971074 { 0x1063b9c2 +1.77910637e161 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33760; 33763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 33764; 1065885099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1065885100; 2147483647 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483648; 2147483655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483656; 2336260951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2336260952; 2336260955 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2336260956; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 33107013 { 0x1f92c45 +1.94666349e132 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 443162082 { 0x1a6a1de2 +1.82903695e181 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1433728173 { 0x5574f4ad +1.91371691e43 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483655 ] -> 193, [ 2147483656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 443162082 { 0x1a6a1de2 +1.82903695e181 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 33759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33760; 33763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 33764; 1065885099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1065885100; 2147483647 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483648; 2147483655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483656; 2336260951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2336260952; 2336260955 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2336260956; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 274971074 { 0x1063b9c2 +1.77910637e161 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 2147483652 { 0x80000004 -2147483644 -1.47e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2336260955 { 0x8b40835b -1958706341 -1.50400865e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 33763 { 0x83e3 +1.402486e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1018209624
=counter_example_end
=global nodece 57 num_edges_traversed 1
=global nodece 57 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 58
=global nodece 58 nodece z3v487.ce3847.num_edges_traversed2
=global nodece 58 nodece_path
=global nodece 58 nodece_path.graph_edge_composition
(epsilon)
=global nodece 58 nodece_cached_counterexample
=counter_example_begin z3v487.ce3847 fdec519485a6720c1a15219a4a2654f
=input.spec-%var-arr-1
1 : Lambda32596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32597 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32599 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32600 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32578 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4125 : BV:32
4 : Lambda32603 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32604 : BV:32
7 : unit : UNIT
8 : 509322503 { 0x1e5ba507 +1.71597373e189 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 0, [ 2147483649; 2147483649 ] -> 0, [ 2147483650; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4132 : BV:32
6 : Lambda32617 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32618 : BV:32
9 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1578736519 { 0x5e199b87 +1.20005881e61 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 274971074 { 0x1063b9c2 +1.77910637e161 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33760; 33763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 33764; 1065885099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1065885100; 2147483647 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483648; 2147483655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483656; 2336260951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2336260952; 2336260955 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2336260956; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 33107013 { 0x1f92c45 +1.94666349e132 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 443162082 { 0x1a6a1de2 +1.82903695e181 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1433728173 { 0x5574f4ad +1.91371691e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2336260955 { 0x8b40835b -1958706341 -1.50400865e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 33763 { 0x83e3 +1.402486e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
1018209624
=counter_example_end
=global nodece 58 num_edges_traversed 2
=global nodece 58 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 59
=global nodece 59 nodece z3v487.ce3855.num_edges_traversed3
=global nodece 59 nodece_path
=global nodece 59 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 59 nodece_cached_counterexample
=counter_example_begin z3v487.ce3855 fbc0a684a72657bd9c3f36697896c3b4
=nextpc_const.1
1 : 980801869 { 0x3a75d94d +1.92069399e245 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32596 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32597 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1065885100 { 0x3f881dac +1.6340551e0 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32599 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32600 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32578 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4125 : BV:32
4 : Lambda32603 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32604 : BV:32
7 : unit : UNIT
8 : 509322503 { 0x1e5ba507 +1.71597373e189 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 0, [ 2147483649; 2147483649 ] -> 0, [ 2147483650; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 150 , m_adder -> 244), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 980801869 , 1000 , 8 ) -> 957883078, () -> 131402574, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4132 : BV:32
6 : Lambda32617 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32618 : BV:32
9 : 256168672 { 0xf44d2e0 +1.53768539e159 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1578736519 { 0x5e199b87 +1.20005881e61 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 957883078 { 0x391822c6 +1.18856120e243 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 274971074 { 0x1063b9c2 +1.77910637e161 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33759 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33760; 33763 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 33764; 1065885099 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1065885100; 2147483647 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483648; 2147483655 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2147483656; 2336260951 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2336260952; 2336260955 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2336260956; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 33107013 { 0x1f92c45 +1.94666349e132 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2147483647 ] -> 0, [ 2147483648; 2147483648 ] -> 0, [ 2147483649; 2147483649 ] -> 0, [ 2147483650; 2147483650 ] -> 0, [ 2147483651; 2147483651 ] -> 0, [ 2147483652; 2147483652 ] -> 0, [ 2147483653; 2147483653 ] -> 0, [ 2147483654; 2147483654 ] -> 0, [ 2147483655; 2147483655 ] -> 0, [ 2147483656; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 443162082 { 0x1a6a1de2 +1.82903695e181 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1433728173 { 0x5574f4ad +1.91371691e43 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2336260952 { 0x8b408358 -1958706344 -1.50400829e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2336260955 { 0x8b40835b -1958706341 -1.50400865e151 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 33760 { 0x83e0 +1.402450e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 33763 { 0x83e3 +1.402486e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 150 , m_adder -> 244), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2265646892
=counter_example_end
=global nodece 59 num_edges_traversed 3
=global nodece 59 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 60
=global nodece 60 nodece z3.ce3871.num_edges_traversed1
=global nodece 60 nodece_path
=global nodece 60 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 60 nodece_cached_counterexample
=counter_example_begin z3.ce3871 74d036c8688f9c58b5a9e220ab7cb0e4
=input.spec-%var-arr-1
1 : Lambda32707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
35 : eq(30, 34) : BOOL
36 : eq(30, 27) : BOOL
37 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
38 : eq(30, 37) : BOOL
39 : 3 { 0x3 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(36, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(31, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 27) : BOOL
48 : eq(44, 37) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(37, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 37) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(34, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 27) : BOOL
66 : eq(62, 37) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32710 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32711 : BV:32
18 : eq(17, 2) : BOOL
19 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
27 : eq(22, 26) : BOOL
28 : eq(22, 19) : BOOL
29 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
30 : eq(22, 29) : BOOL
31 : 3 { 0x3 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(28, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(23, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 19) : BOOL
40 : eq(36, 29) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(29, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 29) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(26, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 19) : BOOL
58 : eq(54, 29) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32692 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
12 : eq(7, 11) : BOOL
13 : eq(7, 4) : BOOL
14 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
15 : eq(7, 14) : BOOL
16 : 3 { 0x3 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(13, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(8, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 4) : BOOL
25 : eq(21, 14) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(14, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 4) : BOOL
34 : eq(30, 14) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(11, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 4) : BOOL
43 : eq(39, 14) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4144 : BV:32
4 : Lambda32714 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32715 : BV:32
7 : unit : UNIT
8 : 836929377 { 0x31e28761 +1.76975643e228 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4145 : BV:32
4 : Lambda32716 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32717 : BV:32
7 : unit : UNIT
8 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4147 : BV:32
6 : Lambda32720 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32721 : BV:32
9 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4281769983 ] -> 3, [ 4281769984; 4281769984 ] -> 0, [ 4281769985; 4281769985 ] -> 0, [ 4281769986; 4281769986 ] -> 0, [ 4281769987; 4281769987 ] -> 0, [ 4281769988; 4281769988 ] -> 0, [ 4281769989; 4281769989 ] -> 0, [ 4281769990; 4281769990 ] -> 0, [ 4281769991; 4281769991 ] -> 0, [ 4281769992; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda32696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 63 { 0x3f +1.751e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 64 { 0x40 +1.762e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
25 : eq(20, 24) : BOOL
26 : eq(20, 17) : BOOL
27 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
28 : eq(20, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(26, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(21, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 17) : BOOL
38 : eq(34, 27) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(27, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 27) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(24, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 17) : BOOL
56 : eq(52, 27) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4149 : BV:32
6 : Lambda32724 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32725 : BV:32
9 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4151 : BV:32
6 : Lambda32728 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32729 : BV:32
9 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 609636101 { 0x24564f05 +1.67428648e201 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1339298578 { 0x4fd41312 +1.65683197e32 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1421441159 { 0x54b97887 +1.44899070e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2356535807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2356535808; 2356535811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2356535812; 2853637631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2853637632; 2853637635 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2853637636; 3495839267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3495839268; 3495839271 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3495839272; 4281769983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281769984; 4281769991 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4281769992; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1339298578 { 0x4fd41312 +1.65683197e32 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 732449547 { 0x2ba84b0b +1.31479012e216 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 537637059 { 0x200bb0c3 +1.9133183e193 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4281769983 ] -> 3, [ 4281769984; 4281769991 ] -> 134, [ 4281769992; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 732449547 { 0x2ba84b0b +1.31479012e216 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 2356535807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2356535808; 2356535811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2356535812; 2853637631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2853637632; 2853637635 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2853637636; 3495839267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3495839268; 3495839271 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3495839272; 4281769983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281769984; 4281769991 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4281769992; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1421441159 { 0x54b97887 +1.44899070e42 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4281769988 { 0xff36a004 -13197308 -1.42675828e127 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4281769988 { 0xff36a004 -13197308 -1.42675828e127 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2356535811 { 0x8c75e203 -1938431485 -1.92095983e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2853637635 { 0xaa170e03 -1441329661 -1.18011510e213 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3711939242
=counter_example_end
=global nodece 60 num_edges_traversed 1
=global nodece 60 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 61
=global nodece 61 nodece z3.ce3906.num_edges_traversed2
=global nodece 61 nodece_path
=global nodece 61 nodece_path.graph_edge_composition
(epsilon)
=global nodece 61 nodece_cached_counterexample
=counter_example_begin z3.ce3906 2fa33aaede52d078962812b8641499
=input.spec-%var-arr-1
1 : Lambda32707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
35 : eq(30, 34) : BOOL
36 : eq(30, 27) : BOOL
37 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
38 : eq(30, 37) : BOOL
39 : 3 { 0x3 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(36, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(31, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 27) : BOOL
48 : eq(44, 37) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(37, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 37) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(34, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 27) : BOOL
66 : eq(62, 37) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32710 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32711 : BV:32
18 : eq(17, 2) : BOOL
19 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
27 : eq(22, 26) : BOOL
28 : eq(22, 19) : BOOL
29 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
30 : eq(22, 29) : BOOL
31 : 3 { 0x3 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(28, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(23, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 19) : BOOL
40 : eq(36, 29) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(29, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 29) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(26, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 19) : BOOL
58 : eq(54, 29) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32692 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
12 : eq(7, 11) : BOOL
13 : eq(7, 4) : BOOL
14 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
15 : eq(7, 14) : BOOL
16 : 3 { 0x3 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(13, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(8, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 4) : BOOL
25 : eq(21, 14) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(14, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 4) : BOOL
34 : eq(30, 14) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(11, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 4) : BOOL
43 : eq(39, 14) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4144 : BV:32
4 : Lambda32714 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32715 : BV:32
7 : unit : UNIT
8 : 836929377 { 0x31e28761 +1.76975643e228 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4281769983 ] -> 3, [ 4281769984; 4281769984 ] -> 0, [ 4281769985; 4281769985 ] -> 0, [ 4281769986; 4281769986 ] -> 0, [ 4281769987; 4281769987 ] -> 0, [ 4281769988; 4281769988 ] -> 0, [ 4281769989; 4281769989 ] -> 0, [ 4281769990; 4281769990 ] -> 0, [ 4281769991; 4281769991 ] -> 0, [ 4281769992; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda32696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 63 { 0x3f +1.751e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 64 { 0x40 +1.762e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
25 : eq(20, 24) : BOOL
26 : eq(20, 17) : BOOL
27 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
28 : eq(20, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(26, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(21, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 17) : BOOL
38 : eq(34, 27) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(27, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 27) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(24, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 17) : BOOL
56 : eq(52, 27) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4151 : BV:32
6 : Lambda32728 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32729 : BV:32
9 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 609636101 { 0x24564f05 +1.67428648e201 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1421441159 { 0x54b97887 +1.44899070e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2356535807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2356535808; 2356535811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2356535812; 2853637631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2853637632; 2853637635 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2853637636; 3495839267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3495839268; 3495839271 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3495839272; 4281769983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281769984; 4281769991 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4281769992; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1339298578 { 0x4fd41312 +1.65683197e32 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 732449547 { 0x2ba84b0b +1.31479012e216 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 537637059 { 0x200bb0c3 +1.9133183e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2356535811 { 0x8c75e203 -1938431485 -1.92095983e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2853637635 { 0xaa170e03 -1441329661 -1.18011510e213 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3711939242
=counter_example_end
=global nodece 61 num_edges_traversed 2
=global nodece 61 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 62
=global nodece 62 nodece z3.ce3914.num_edges_traversed3
=global nodece 62 nodece_path
=global nodece 62 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 62 nodece_cached_counterexample
=counter_example_begin z3.ce3914 f8e444eba92ce9535ccb3491cecbba34
=nextpc_const.1
1 : 1622157636 { 0x60b02944 +1.37625932e66 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32707 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32708 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
28 : 4 { 0x4 +1.47e129 } : BV:32
29 : bvmul(28, 17) : BV:32
30 : bvadd(27, 29) : BV:32
31 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
35 : eq(30, 34) : BOOL
36 : eq(30, 27) : BOOL
37 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
38 : eq(30, 37) : BOOL
39 : 3 { 0x3 } : BV:8
40 : ite(38, 33, 39) : BV:8
41 : ite(36, 33, 40) : BV:8
42 : ite(35, 33, 41) : BV:8
43 : ite(32, 33, 42) : BV:8
44 : bvadd(31, 29) : BV:32
45 : eq(44, 31) : BOOL
46 : eq(44, 34) : BOOL
47 : eq(44, 27) : BOOL
48 : eq(44, 37) : BOOL
49 : ite(48, 33, 39) : BV:8
50 : ite(47, 33, 49) : BV:8
51 : ite(46, 33, 50) : BV:8
52 : ite(45, 33, 51) : BV:8
53 : bvadd(37, 29) : BV:32
54 : eq(53, 31) : BOOL
55 : eq(53, 34) : BOOL
56 : eq(53, 27) : BOOL
57 : eq(53, 37) : BOOL
58 : ite(57, 33, 39) : BV:8
59 : ite(56, 33, 58) : BV:8
60 : ite(55, 33, 59) : BV:8
61 : ite(54, 33, 60) : BV:8
62 : bvadd(34, 29) : BV:32
63 : eq(62, 31) : BOOL
64 : eq(62, 34) : BOOL
65 : eq(62, 27) : BOOL
66 : eq(62, 37) : BOOL
67 : ite(66, 33, 39) : BV:8
68 : ite(65, 33, 67) : BV:8
69 : ite(64, 33, 68) : BV:8
70 : ite(63, 33, 69) : BV:8
71 : bvconcat(43, 52, 61, 70) : BV:32
72 : ite(18, 2, 71) : BV:32
73 : ite(26, 72, 71) : BV:32
74 : ite(18, 2, 73) : BV:32
75 : lambda(17, 74) : FUNCTION[BV:32 -> BV:32]
76 : map(16, 75) : MAP[BV:32 -> BV:32]
77 : sym_const(76) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32710 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 63 { 0x3f +1.751e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 64 { 0x40 +1.762e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32711 : BV:32
18 : eq(17, 2) : BOOL
19 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
20 : 4 { 0x4 +1.47e129 } : BV:32
21 : bvmul(20, 17) : BV:32
22 : bvadd(19, 21) : BV:32
23 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
27 : eq(22, 26) : BOOL
28 : eq(22, 19) : BOOL
29 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
30 : eq(22, 29) : BOOL
31 : 3 { 0x3 } : BV:8
32 : ite(30, 25, 31) : BV:8
33 : ite(28, 25, 32) : BV:8
34 : ite(27, 25, 33) : BV:8
35 : ite(24, 25, 34) : BV:8
36 : bvadd(23, 21) : BV:32
37 : eq(36, 23) : BOOL
38 : eq(36, 26) : BOOL
39 : eq(36, 19) : BOOL
40 : eq(36, 29) : BOOL
41 : ite(40, 25, 31) : BV:8
42 : ite(39, 25, 41) : BV:8
43 : ite(38, 25, 42) : BV:8
44 : ite(37, 25, 43) : BV:8
45 : bvadd(29, 21) : BV:32
46 : eq(45, 23) : BOOL
47 : eq(45, 26) : BOOL
48 : eq(45, 19) : BOOL
49 : eq(45, 29) : BOOL
50 : ite(49, 25, 31) : BV:8
51 : ite(48, 25, 50) : BV:8
52 : ite(47, 25, 51) : BV:8
53 : ite(46, 25, 52) : BV:8
54 : bvadd(26, 21) : BV:32
55 : eq(54, 23) : BOOL
56 : eq(54, 26) : BOOL
57 : eq(54, 19) : BOOL
58 : eq(54, 29) : BOOL
59 : ite(58, 25, 31) : BV:8
60 : ite(57, 25, 59) : BV:8
61 : ite(56, 25, 60) : BV:8
62 : ite(55, 25, 61) : BV:8
63 : bvconcat(35, 44, 53, 62) : BV:32
64 : ite(18, 2, 63) : BV:32
65 : lambda(17, 64) : FUNCTION[BV:32 -> BV:32]
66 : map(16, 65) : MAP[BV:32 -> BV:32]
67 : sym_const(66) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32692 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
5 : 4 { 0x4 +1.47e129 } : BV:32
6 : bvmul(5, 1) : BV:32
7 : bvadd(4, 6) : BV:32
8 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
12 : eq(7, 11) : BOOL
13 : eq(7, 4) : BOOL
14 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
15 : eq(7, 14) : BOOL
16 : 3 { 0x3 } : BV:8
17 : ite(15, 10, 16) : BV:8
18 : ite(13, 10, 17) : BV:8
19 : ite(12, 10, 18) : BV:8
20 : ite(9, 10, 19) : BV:8
21 : bvadd(8, 6) : BV:32
22 : eq(21, 8) : BOOL
23 : eq(21, 11) : BOOL
24 : eq(21, 4) : BOOL
25 : eq(21, 14) : BOOL
26 : ite(25, 10, 16) : BV:8
27 : ite(24, 10, 26) : BV:8
28 : ite(23, 10, 27) : BV:8
29 : ite(22, 10, 28) : BV:8
30 : bvadd(14, 6) : BV:32
31 : eq(30, 8) : BOOL
32 : eq(30, 11) : BOOL
33 : eq(30, 4) : BOOL
34 : eq(30, 14) : BOOL
35 : ite(34, 10, 16) : BV:8
36 : ite(33, 10, 35) : BV:8
37 : ite(32, 10, 36) : BV:8
38 : ite(31, 10, 37) : BV:8
39 : bvadd(11, 6) : BV:32
40 : eq(39, 8) : BOOL
41 : eq(39, 11) : BOOL
42 : eq(39, 4) : BOOL
43 : eq(39, 14) : BOOL
44 : ite(43, 10, 16) : BV:8
45 : ite(42, 10, 44) : BV:8
46 : ite(41, 10, 45) : BV:8
47 : ite(40, 10, 46) : BV:8
48 : bvconcat(20, 29, 38, 47) : BV:32
49 : ite(3, 2, 48) : BV:32
50 : lambda(1, 49) : FUNCTION[BV:32 -> BV:32]
51 : sym_const(50) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4144 : BV:32
4 : Lambda32714 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32715 : BV:32
7 : unit : UNIT
8 : 836929377 { 0x31e28761 +1.76975643e228 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 63 ] -> true, [ 64; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4281769983 ] -> 3, [ 4281769984; 4281769984 ] -> 0, [ 4281769985; 4281769985 ] -> 0, [ 4281769986; 4281769986 ] -> 0, [ 4281769987; 4281769987 ] -> 0, [ 4281769988; 4281769988 ] -> 0, [ 4281769989; 4281769989 ] -> 0, [ 4281769990; 4281769990 ] -> 0, [ 4281769991; 4281769991 ] -> 0, [ 4281769992; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda32696 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 63 { 0x3f +1.751e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 64 { 0x40 +1.762e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : 3495839271 { 0xd05e4627 -799128025 -1.73651587e33 } : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : bvmul(18, 1) : BV:32
20 : bvadd(17, 19) : BV:32
21 : 3495839270 { 0xd05e4626 -799128026 -1.73651576e33 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 3495839268 { 0xd05e4624 -799128028 -1.73651552e33 } : BV:32
25 : eq(20, 24) : BOOL
26 : eq(20, 17) : BOOL
27 : 3495839269 { 0xd05e4625 -799128027 -1.73651564e33 } : BV:32
28 : eq(20, 27) : BOOL
29 : 3 { 0x3 } : BV:8
30 : ite(28, 23, 29) : BV:8
31 : ite(26, 23, 30) : BV:8
32 : ite(25, 23, 31) : BV:8
33 : ite(22, 23, 32) : BV:8
34 : bvadd(21, 19) : BV:32
35 : eq(34, 21) : BOOL
36 : eq(34, 24) : BOOL
37 : eq(34, 17) : BOOL
38 : eq(34, 27) : BOOL
39 : ite(38, 23, 29) : BV:8
40 : ite(37, 23, 39) : BV:8
41 : ite(36, 23, 40) : BV:8
42 : ite(35, 23, 41) : BV:8
43 : bvadd(27, 19) : BV:32
44 : eq(43, 21) : BOOL
45 : eq(43, 24) : BOOL
46 : eq(43, 17) : BOOL
47 : eq(43, 27) : BOOL
48 : ite(47, 23, 29) : BV:8
49 : ite(46, 23, 48) : BV:8
50 : ite(45, 23, 49) : BV:8
51 : ite(44, 23, 50) : BV:8
52 : bvadd(24, 19) : BV:32
53 : eq(52, 21) : BOOL
54 : eq(52, 24) : BOOL
55 : eq(52, 17) : BOOL
56 : eq(52, 27) : BOOL
57 : ite(56, 23, 29) : BV:8
58 : ite(55, 23, 57) : BV:8
59 : ite(54, 23, 58) : BV:8
60 : ite(53, 23, 59) : BV:8
61 : bvconcat(33, 42, 51, 60) : BV:32
62 : ite(3, 2, 61) : BV:32
63 : ite(16, 62, 61) : BV:32
64 : ite(3, 2, 63) : BV:32
65 : lambda(1, 64) : FUNCTION[BV:32 -> BV:32]
66 : sym_const(65) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 64 { 0x40 +1.762e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 83 , m_adder -> 134), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1622157636 , 1000 , 8 ) -> 456297525, () -> 9733481, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4151 : BV:32
6 : Lambda32728 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32729 : BV:32
9 : 920439041 { 0x36dcc901 +1.72488415e238 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 609636101 { 0x24564f05 +1.67428648e201 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 456297525 { 0x1b328c35 +1.39490377e183 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1421441159 { 0x54b97887 +1.44899070e42 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 2356535807 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2356535808; 2356535811 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2356535812; 2853637631 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2853637632; 2853637635 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2853637636; 3495839267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3495839268; 3495839271 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3495839272; 4281769983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4281769984; 4281769991 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4281769992; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1339298578 { 0x4fd41312 +1.65683197e32 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3495839267 ] -> 3, [ 3495839268; 3495839271 ] -> 0, [ 3495839272; 4281769983 ] -> 3, [ 4281769984; 4281769984 ] -> 0, [ 4281769985; 4281769985 ] -> 0, [ 4281769986; 4281769986 ] -> 0, [ 4281769987; 4281769987 ] -> 0, [ 4281769988; 4281769988 ] -> 0, [ 4281769989; 4281769989 ] -> 0, [ 4281769990; 4281769990 ] -> 0, [ 4281769991; 4281769991 ] -> 0, [ 4281769992; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 732449547 { 0x2ba84b0b +1.31479012e216 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4281769984 { 0xff36a000 -13197312 -1.42675781e127 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 537637059 { 0x200bb0c3 +1.9133183e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2356535808 { 0x8c75e200 -1938431488 -1.92095947e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2356535811 { 0x8c75e203 -1938431485 -1.92095983e153 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2853637632 { 0xaa170e00 -1441329664 -1.18011474e213 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2853637635 { 0xaa170e03 -1441329661 -1.18011510e213 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 83 , m_adder -> 134), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3520726366
=counter_example_end
=global nodece 62 num_edges_traversed 3
=global nodece 62 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 63
=global nodece 63 nodece z3v487.ce3931.num_edges_traversed1
=global nodece 63 nodece_path
=global nodece 63 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 63 nodece_cached_counterexample
=counter_example_begin z3v487.ce3931 71d6ed7cfcabd593cf29d8b1f69e9692
=input.spec-%var-arr-1
1 : Lambda32827 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32828 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32831 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32809 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4163 : BV:32
4 : Lambda32834 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32835 : BV:32
7 : unit : UNIT
8 : 1238710401 { 0x49d53881 +1.66578686e20 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4164 : BV:32
4 : Lambda32836 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32837 : BV:32
7 : unit : UNIT
8 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4166 : BV:32
6 : Lambda32840 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32841 : BV:32
9 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> 0, [ 33554944; 33554944 ] -> 0, [ 33554945; 33554945 ] -> 0, [ 33554946; 33554946 ] -> 0, [ 33554947; 33554947 ] -> 0, [ 33554948; 33554948 ] -> 0, [ 33554949; 33554949 ] -> 0, [ 33554950; 33554950 ] -> 0, [ 33554951; 33554951 ] -> 0, [ 33554952; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4168 : BV:32
6 : Lambda32844 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32845 : BV:32
9 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4170 : BV:32
6 : Lambda32848 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32849 : BV:32
9 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 599104051 { 0x23b59a33 +1.41876828e200 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 20431047 { 0x137c0c7 +1.43557059e131 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1074115057 { 0x4005b1f1 +1.4449284e1 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554944; 33554951 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33554952; 805306599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805306600; 805306603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 805306604; 2215023759 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2215023760; 4026861671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4026861672; 4026861675 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4026861676; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 20431047 { 0x137c0c7 +1.43557059e131 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2045961531 { 0x79f2e53b +1.89762055e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2054132188 { 0x7a6f91dc +1.87163877e117 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 33554943 ] -> 0, [ 33554944; 33554951 ] -> 240, [ 33554952; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 2045961531 { 0x79f2e53b +1.89762055e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 33554943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554944; 33554951 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33554952; 805306599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805306600; 805306603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 805306604; 2215023759 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2215023760; 4026861671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4026861672; 4026861675 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4026861676; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1074115057 { 0x4005b1f1 +1.4449284e1 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 33554948 { 0x2000204 +1.6151e133 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 33554948 { 0x2000204 +1.6151e133 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 805306603 { 0x300000eb +1.2801e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4026861675 { 0xf005086b -268105621 -1.3931939e97 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
874820210
=counter_example_end
=global nodece 63 num_edges_traversed 1
=global nodece 63 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 64
=global nodece 64 nodece z3v487.ce3966.num_edges_traversed2
=global nodece 64 nodece_path
=global nodece 64 nodece_path.graph_edge_composition
(epsilon)
=global nodece 64 nodece_cached_counterexample
=counter_example_begin z3v487.ce3966 93b67e14ebbb57997cf58198fcc5afe
=input.spec-%var-arr-1
1 : Lambda32827 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32828 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32831 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32809 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4163 : BV:32
4 : Lambda32834 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32835 : BV:32
7 : unit : UNIT
8 : 1238710401 { 0x49d53881 +1.66578686e20 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> 0, [ 33554944; 33554944 ] -> 0, [ 33554945; 33554945 ] -> 0, [ 33554946; 33554946 ] -> 0, [ 33554947; 33554947 ] -> 0, [ 33554948; 33554948 ] -> 0, [ 33554949; 33554949 ] -> 0, [ 33554950; 33554950 ] -> 0, [ 33554951; 33554951 ] -> 0, [ 33554952; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4170 : BV:32
6 : Lambda32848 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32849 : BV:32
9 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 599104051 { 0x23b59a33 +1.41876828e200 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1074115057 { 0x4005b1f1 +1.4449284e1 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554944; 33554951 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33554952; 805306599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805306600; 805306603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 805306604; 2215023759 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2215023760; 4026861671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4026861672; 4026861675 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4026861676; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 20431047 { 0x137c0c7 +1.43557059e131 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2045961531 { 0x79f2e53b +1.89762055e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2054132188 { 0x7a6f91dc +1.87163877e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 805306603 { 0x300000eb +1.2801e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4026861675 { 0xf005086b -268105621 -1.3931939e97 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
874820210
=counter_example_end
=global nodece 64 num_edges_traversed 2
=global nodece 64 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 65
=global nodece 65 nodece z3v487.ce3974.num_edges_traversed3
=global nodece 65 nodece_path
=global nodece 65 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 65 nodece_cached_counterexample
=counter_example_begin z3v487.ce3974 38f7b45bd2559692a21d8167345faa
=nextpc_const.1
1 : 44668332 { 0x2a995ac +1.32488012e134 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32827 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32828 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2215023760 { 0x84069490 -2079943536 -1.5140876e137 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32830 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32831 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32809 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4163 : BV:32
4 : Lambda32834 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32835 : BV:32
7 : unit : UNIT
8 : 1238710401 { 0x49d53881 +1.66578686e20 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> 0, [ 33554944; 33554944 ] -> 0, [ 33554945; 33554945 ] -> 0, [ 33554946; 33554946 ] -> 0, [ 33554947; 33554947 ] -> 0, [ 33554948; 33554948 ] -> 0, [ 33554949; 33554949 ] -> 0, [ 33554950; 33554950 ] -> 0, [ 33554951; 33554951 ] -> 0, [ 33554952; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 2 , m_adder -> 172), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 44668332 , 1000 , 8 ) -> 1578751489, () -> 18640158, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4170 : BV:32
6 : Lambda32848 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32849 : BV:32
9 : 954162770 { 0x38df5e52 +1.74506592e242 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 599104051 { 0x23b59a33 +1.41876828e200 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1578751489 { 0x5e19d601 +1.20184338e61 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1074115057 { 0x4005b1f1 +1.4449284e1 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33554943 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33554944; 33554951 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33554952; 805306599 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 805306600; 805306603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 805306604; 2215023759 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2215023760; 4026861671 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4026861672; 4026861675 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 4026861676; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 20431047 { 0x137c0c7 +1.43557059e131 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 33554943 ] -> 0, [ 33554944; 33554944 ] -> 0, [ 33554945; 33554945 ] -> 0, [ 33554946; 33554946 ] -> 0, [ 33554947; 33554947 ] -> 0, [ 33554948; 33554948 ] -> 0, [ 33554949; 33554949 ] -> 0, [ 33554950; 33554950 ] -> 0, [ 33554951; 33554951 ] -> 0, [ 33554952; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 2045961531 { 0x79f2e53b +1.89762055e116 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33554944 { 0x2000200 +1.6103e133 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2054132188 { 0x7a6f91dc +1.87163877e117 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 805306600 { 0x300000e8 +1.2765e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 805306603 { 0x300000eb +1.2801e225 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4026861672 { 0xf0050868 -268105624 -1.3931903e97 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 4026861675 { 0xf005086b -268105621 -1.3931939e97 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 2 , m_adder -> 172), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3124076710
=counter_example_end
=global nodece 65 num_edges_traversed 3
=global nodece 65 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 66
=global nodece 66 nodece z3v487.ce3990.num_edges_traversed1
=global nodece 66 nodece_path
=global nodece 66 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 66 nodece_cached_counterexample
=counter_example_begin z3v487.ce3990 a6a9a8b87a5b16184817d759809e8aa
=input.spec-%var-arr-1
1 : Lambda32947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32948 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32951 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32929 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4182 : BV:32
4 : Lambda32954 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32955 : BV:32
7 : unit : UNIT
8 : 368373706 { 0x15f4efca +1.91356778e172 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4183 : BV:32
4 : Lambda32956 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32957 : BV:32
7 : unit : UNIT
8 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4185 : BV:32
6 : Lambda32960 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32961 : BV:32
9 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> 0, [ 33423616; 33423616 ] -> 0, [ 33423617; 33423617 ] -> 0, [ 33423618; 33423618 ] -> 0, [ 33423619; 33423619 ] -> 0, [ 33423620; 33423620 ] -> 0, [ 33423621; 33423621 ] -> 0, [ 33423622; 33423622 ] -> 0, [ 33423623; 33423623 ] -> 0, [ 33423624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4187 : BV:32
6 : Lambda32964 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32965 : BV:32
9 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4189 : BV:32
6 : Lambda32968 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32969 : BV:32
9 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1336638570 { 0x4fab7c6a +1.33973431e32 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1608741593 { 0x5fe372d9 +1.77694237e64 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 88600013 { 0x547edcd +1.56194460e139 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33423616; 33423623 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33423624; 604021815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604021816; 604021819 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 604021820; 3505001599 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3505001600; 3505001603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3505001604; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1608741593 { 0x5fe372d9 +1.77694237e64 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 316613118 { 0x12df21fe +1.74322485e166 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1231162264 { 0x49620b98 +1.76597881e19 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 33423615 ] -> 0, [ 33423616; 33423623 ] -> 204, [ 33423624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 316613118 { 0x12df21fe +1.74322485e166 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 33423615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33423616; 33423623 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33423624; 604021815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604021816; 604021819 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 604021820; 3505001599 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3505001600; 3505001603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3505001604; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 88600013 { 0x547edcd +1.56194460e139 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 33423620 { 0x1fe0104 +1.98440599e132 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 33423620 { 0x1fe0104 +1.98440599e132 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 604021819 { 0x2400a43b +1.501191e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3505001603 { 0xd0ea1483 -789965693 -1.82875096e34 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
591825817
=counter_example_end
=global nodece 66 num_edges_traversed 1
=global nodece 66 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 67
=global nodece 67 nodece z3v487.ce4025.num_edges_traversed2
=global nodece 67 nodece_path
=global nodece 67 nodece_path.graph_edge_composition
(epsilon)
=global nodece 67 nodece_cached_counterexample
=counter_example_begin z3v487.ce4025 a375da45d5c56b19fc5ba51879b21f2
=input.spec-%var-arr-1
1 : Lambda32947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32948 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32951 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32929 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4182 : BV:32
4 : Lambda32954 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32955 : BV:32
7 : unit : UNIT
8 : 368373706 { 0x15f4efca +1.91356778e172 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> 0, [ 33423616; 33423616 ] -> 0, [ 33423617; 33423617 ] -> 0, [ 33423618; 33423618 ] -> 0, [ 33423619; 33423619 ] -> 0, [ 33423620; 33423620 ] -> 0, [ 33423621; 33423621 ] -> 0, [ 33423622; 33423622 ] -> 0, [ 33423623; 33423623 ] -> 0, [ 33423624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4189 : BV:32
6 : Lambda32968 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32969 : BV:32
9 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1336638570 { 0x4fab7c6a +1.33973431e32 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 88600013 { 0x547edcd +1.56194460e139 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33423616; 33423623 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33423624; 604021815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604021816; 604021819 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 604021820; 3505001599 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3505001600; 3505001603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3505001604; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1608741593 { 0x5fe372d9 +1.77694237e64 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 316613118 { 0x12df21fe +1.74322485e166 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1231162264 { 0x49620b98 +1.76597881e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 604021819 { 0x2400a43b +1.501191e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3505001603 { 0xd0ea1483 -789965693 -1.82875096e34 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
591825817
=counter_example_end
=global nodece 67 num_edges_traversed 2
=global nodece 67 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 68
=global nodece 68 nodece z3v487.ce4033.num_edges_traversed3
=global nodece 68 nodece_path
=global nodece 68 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 68 nodece_cached_counterexample
=counter_example_begin z3v487.ce4033 59e8395fa5ef41d6c3cabf14dfd93989
=nextpc_const.1
1 : 1317166110 { 0x4e825c1e +1.1843619e30 } : BV:32
=input.spec-%var-arr-1
1 : Lambda32947 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32948 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 83920736 { 0x5008760 +1.413131e139 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda32950 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda32951 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda32929 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4182 : BV:32
4 : Lambda32954 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda32955 : BV:32
7 : unit : UNIT
8 : 368373706 { 0x15f4efca +1.91356778e172 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> 0, [ 33423616; 33423616 ] -> 0, [ 33423617; 33423617 ] -> 0, [ 33423618; 33423618 ] -> 0, [ 33423619; 33423619 ] -> 0, [ 33423620; 33423620 ] -> 0, [ 33423621; 33423621 ] -> 0, [ 33423622; 33423622 ] -> 0, [ 33423623; 33423623 ] -> 0, [ 33423624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 213 , m_adder -> 43), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1317166110 , 1000 , 8 ) -> 1637144181, () -> 1290769396, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4189 : BV:32
6 : Lambda32968 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda32969 : BV:32
9 : 141953681 { 0x8760a91 +1.92219746e145 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1336638570 { 0x4fab7c6a +1.33973431e32 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1637144181 { 0x6194d675 +1.16279470e68 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 88600013 { 0x547edcd +1.56194460e139 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 33423615 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 33423616; 33423623 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 33423624; 604021815 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 604021816; 604021819 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 604021820; 3505001599 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3505001600; 3505001603 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 3505001604; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1608741593 { 0x5fe372d9 +1.77694237e64 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 33423615 ] -> 0, [ 33423616; 33423616 ] -> 0, [ 33423617; 33423617 ] -> 0, [ 33423618; 33423618 ] -> 0, [ 33423619; 33423619 ] -> 0, [ 33423620; 33423620 ] -> 0, [ 33423621; 33423621 ] -> 0, [ 33423622; 33423622 ] -> 0, [ 33423623; 33423623 ] -> 0, [ 33423624; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 316613118 { 0x12df21fe +1.74322485e166 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 33423616 { 0x1fe0100 +1.98440551e132 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1231162264 { 0x49620b98 +1.76597881e19 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 604021816 { 0x2400a438 +1.501155e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 604021819 { 0x2400a43b +1.501191e201 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 3505001600 { 0xd0ea1480 -789965696 -1.82875061e34 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 3505001603 { 0xd0ea1483 -789965693 -1.82875096e34 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 213 , m_adder -> 43), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
4242109533
=counter_example_end
=global nodece 68 num_edges_traversed 3
=global nodece 68 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 69
=global nodece 69 nodece z3v487.ce4049.num_edges_traversed1
=global nodece 69 nodece_path
=global nodece 69 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 69 nodece_cached_counterexample
=counter_example_begin z3v487.ce4049 83a9ae7d4e306510c93886fba1ab9c0
=input.spec-%var-arr-1
1 : Lambda33067 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33068 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33071 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4201 : BV:32
4 : Lambda33074 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33075 : BV:32
7 : unit : UNIT
8 : 1702618576 { 0x657be5d0 +1.96795082e75 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4202 : BV:32
4 : Lambda33076 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33077 : BV:32
7 : unit : UNIT
8 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4204 : BV:32
6 : Lambda33080 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33081 : BV:32
9 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> 0, [ 128; 128 ] -> 0, [ 129; 129 ] -> 0, [ 130; 130 ] -> 0, [ 131; 131 ] -> 0, [ 132; 132 ] -> 0, [ 133; 133 ] -> 0, [ 134; 134 ] -> 0, [ 135; 135 ] -> 0, [ 136; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4206 : BV:32
6 : Lambda33084 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33085 : BV:32
9 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4208 : BV:32
6 : Lambda33088 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33089 : BV:32
9 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 765445330 { 0x2d9fc4d2 +1.24819397e220 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 134639075 { 0x8066de3 +1.5022847e145 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170069331 { 0x45bdd753 +1.48313367e12 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 135 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 136; 79382831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 79382832; 79382835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 79382836; 3292621303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3292621304; 3596658071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3596658072; 3596658075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3596658076; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 134639075 { 0x8066de3 +1.5022847e145 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1216978653 { 0x48899edd +1.7516062e18 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1270063087 { 0x4bb39fef +1.40331828e24 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 127 ] -> 0, [ 128; 135 ] -> 82, [ 136; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1216978653 { 0x48899edd +1.7516062e18 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 135 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 136; 79382831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 79382832; 79382835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 79382836; 3292621303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3292621304; 3596658071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3596658072; 3596658075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3596658076; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1170069331 { 0x45bdd753 +1.48313367e12 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 132 { 0x84 +1.1573e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3596658075 { 0xd660a59b -698309221 -1.75505387e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 79382835 { 0x4bb4933 +1.46317136e138 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2491401917
=counter_example_end
=global nodece 69 num_edges_traversed 1
=global nodece 69 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 70
=global nodece 70 nodece z3v487.ce4084.num_edges_traversed2
=global nodece 70 nodece_path
=global nodece 70 nodece_path.graph_edge_composition
(epsilon)
=global nodece 70 nodece_cached_counterexample
=counter_example_begin z3v487.ce4084 5573cc8f4eb798dda417b7c91f5ad482
=input.spec-%var-arr-1
1 : Lambda33067 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33068 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33071 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4201 : BV:32
4 : Lambda33074 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33075 : BV:32
7 : unit : UNIT
8 : 1702618576 { 0x657be5d0 +1.96795082e75 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> 0, [ 128; 128 ] -> 0, [ 129; 129 ] -> 0, [ 130; 130 ] -> 0, [ 131; 131 ] -> 0, [ 132; 132 ] -> 0, [ 133; 133 ] -> 0, [ 134; 134 ] -> 0, [ 135; 135 ] -> 0, [ 136; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4208 : BV:32
6 : Lambda33088 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33089 : BV:32
9 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 765445330 { 0x2d9fc4d2 +1.24819397e220 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170069331 { 0x45bdd753 +1.48313367e12 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 135 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 136; 79382831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 79382832; 79382835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 79382836; 3292621303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3292621304; 3596658071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3596658072; 3596658075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3596658076; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 134639075 { 0x8066de3 +1.5022847e145 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1216978653 { 0x48899edd +1.7516062e18 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1270063087 { 0x4bb39fef +1.40331828e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3596658075 { 0xd660a59b -698309221 -1.75505387e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 79382835 { 0x4bb4933 +1.46317136e138 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
2491401917
=counter_example_end
=global nodece 70 num_edges_traversed 2
=global nodece 70 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 71
=global nodece 71 nodece z3v487.ce4092.num_edges_traversed3
=global nodece 71 nodece_path
=global nodece 71 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 71 nodece_cached_counterexample
=counter_example_begin z3v487.ce4092 4fdb9d62b37af9492a72e36c01752
=nextpc_const.1
1 : 1111339415 { 0x423db197 +1.48198211e5 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33067 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33068 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3292621304 { 0xc44169f8 -1002345992 -1.51104640e9 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33070 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33071 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4201 : BV:32
4 : Lambda33074 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33075 : BV:32
7 : unit : UNIT
8 : 1702618576 { 0x657be5d0 +1.96795082e75 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> 0, [ 128; 128 ] -> 0, [ 129; 129 ] -> 0, [ 130; 130 ] -> 0, [ 131; 131 ] -> 0, [ 132; 132 ] -> 0, [ 133; 133 ] -> 0, [ 134; 134 ] -> 0, [ 135; 135 ] -> 0, [ 136; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 22 , m_adder -> 146), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1111339415 , 1000 , 8 ) -> 1660988401, () -> 875652351, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4208 : BV:32
6 : Lambda33088 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33089 : BV:32
9 : 1350131786 { 0x5079604a +1.94825100e33 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 765445330 { 0x2d9fc4d2 +1.24819397e220 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1660988401 { 0x6300abf1 +1.524723e71 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1170069331 { 0x45bdd753 +1.48313367e12 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 127 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 128; 135 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 136; 79382831 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 79382832; 79382835 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 79382836; 3292621303 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3292621304; 3596658071 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3596658072; 3596658075 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 3596658076; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 134639075 { 0x8066de3 +1.5022847e145 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 127 ] -> 0, [ 128; 128 ] -> 0, [ 129; 129 ] -> 0, [ 130; 130 ] -> 0, [ 131; 131 ] -> 0, [ 132; 132 ] -> 0, [ 133; 133 ] -> 0, [ 134; 134 ] -> 0, [ 135; 135 ] -> 0, [ 136; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1216978653 { 0x48899edd +1.7516062e18 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 128 { 0x80 +1.1525e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1270063087 { 0x4bb39fef +1.40331828e24 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 3596658072 { 0xd660a598 -698309224 -1.75505352e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 3596658075 { 0xd660a59b -698309221 -1.75505387e45 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 79382832 { 0x4bb4930 +1.46317100e138 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 79382835 { 0x4bb4933 +1.46317136e138 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 22 , m_adder -> 146), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3293972801
=counter_example_end
=global nodece 71 num_edges_traversed 3
=global nodece 71 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 72
=global nodece 72 nodece z3v487.ce4108.num_edges_traversed1
=global nodece 72 nodece_path
=global nodece 72 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 72 nodece_cached_counterexample
=counter_example_begin z3v487.ce4108 d08aaa65aa34b72031ab13e88477576
=input.spec-%var-arr-1
1 : Lambda33187 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33188 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33191 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4220 : BV:32
4 : Lambda33194 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33195 : BV:32
7 : unit : UNIT
8 : 1755240936 { 0x689ed9e8 +1.24102497e82 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4221 : BV:32
4 : Lambda33196 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33197 : BV:32
7 : unit : UNIT
8 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4223 : BV:32
6 : Lambda33200 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33201 : BV:32
9 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4225 : BV:32
6 : Lambda33204 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33205 : BV:32
9 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4227 : BV:32
6 : Lambda33208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33209 : BV:32
9 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1210108670 { 0x4820cafe +1.25619482e17 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 755107557 { 0x2d0206e5 +1.1583540e219 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1445539651 { 0x56292f43 +1.32175481e45 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 27391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27392; 27395 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 27396; 1126498823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1126498824; 2921677983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2921677984; 2921677987 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2921677988; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 755107557 { 0x2d0206e5 +1.1583540e219 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 857652490 { 0x331ebd0a +1.24014401e231 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1809411760 { 0x6bd96eb0 +1.69869041e88 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 15 ] -> 0, [ 16; 23 ] -> 66, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 857652490 { 0x331ebd0a +1.24014401e231 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 27391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27392; 27395 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 27396; 1126498823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1126498824; 2921677983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2921677984; 2921677987 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2921677988; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1445539651 { 0x56292f43 +1.32175481e45 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 20 { 0x14 +1.238e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 27395 { 0x6b03 +1.326573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2921677987 { 0xae2544a3 -1373289309 -1.29115712e221 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
945989760
=counter_example_end
=global nodece 72 num_edges_traversed 1
=global nodece 72 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 73
=global nodece 73 nodece z3v487.ce4143.num_edges_traversed2
=global nodece 73 nodece_path
=global nodece 73 nodece_path.graph_edge_composition
(epsilon)
=global nodece 73 nodece_cached_counterexample
=counter_example_begin z3v487.ce4143 72c8654481a37145276e6918cafa7bb
=input.spec-%var-arr-1
1 : Lambda33187 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33188 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33191 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4220 : BV:32
4 : Lambda33194 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33195 : BV:32
7 : unit : UNIT
8 : 1755240936 { 0x689ed9e8 +1.24102497e82 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4227 : BV:32
6 : Lambda33208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33209 : BV:32
9 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1210108670 { 0x4820cafe +1.25619482e17 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1445539651 { 0x56292f43 +1.32175481e45 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 27391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27392; 27395 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 27396; 1126498823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1126498824; 2921677983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2921677984; 2921677987 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2921677988; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 755107557 { 0x2d0206e5 +1.1583540e219 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 857652490 { 0x331ebd0a +1.24014401e231 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1809411760 { 0x6bd96eb0 +1.69869041e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 27395 { 0x6b03 +1.326573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2921677987 { 0xae2544a3 -1373289309 -1.29115712e221 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
945989760
=counter_example_end
=global nodece 73 num_edges_traversed 2
=global nodece 73 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 74
=global nodece 74 nodece z3v487.ce4151.num_edges_traversed3
=global nodece 74 nodece_path
=global nodece 74 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 74 nodece_cached_counterexample
=counter_example_begin z3v487.ce4151 dc92c9e6302d7cd78ca1c362855fb97
=nextpc_const.1
1 : 1166721795 { 0x458ac303 +1.8407628e12 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33187 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33188 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1126498824 { 0x43250208 +1.28912448e7 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33190 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33191 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 1048575 { 0xfffff +1.12499988e129 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4220 : BV:32
4 : Lambda33194 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33195 : BV:32
7 : unit : UNIT
8 : 1755240936 { 0x689ed9e8 +1.24102497e82 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 1048575 ] -> true, [ 1048576; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 215 , m_adder -> 44), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1166721795 , 1000 , 8 ) -> 1240402325, () -> 653170342, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4227 : BV:32
6 : Lambda33208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33209 : BV:32
9 : 1581295942 { 0x5e40a946 +1.50516581e61 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1210108670 { 0x4820cafe +1.25619482e17 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1240402325 { 0x49ef0995 +1.86747992e20 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1445539651 { 0x56292f43 +1.32175481e45 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 15 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 16; 23 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 24; 27391 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 27392; 27395 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 27396; 1126498823 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1126498824; 2921677983 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2921677984; 2921677987 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2921677988; 4294967295 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 755107557 { 0x2d0206e5 +1.1583540e219 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 15 ] -> 0, [ 16; 16 ] -> 0, [ 17; 17 ] -> 0, [ 18; 18 ] -> 0, [ 19; 19 ] -> 0, [ 20; 20 ] -> 0, [ 21; 21 ] -> 0, [ 22; 22 ] -> 0, [ 23; 23 ] -> 0, [ 24; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 857652490 { 0x331ebd0a +1.24014401e231 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1809411760 { 0x6bd96eb0 +1.69869041e88 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 27392 { 0x6b00 +1.326538e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 27395 { 0x6b03 +1.326573e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2921677984 { 0xae2544a0 -1373289312 -1.29115676e221 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2921677987 { 0xae2544a3 -1373289309 -1.29115712e221 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 215 , m_adder -> 44), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
481595348
=counter_example_end
=global nodece 74 num_edges_traversed 3
=global nodece 74 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 75
=global nodece 75 nodece z3v487.ce4168.num_edges_traversed1
=global nodece 75 nodece_path
=global nodece 75 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 75 nodece_cached_counterexample
=counter_example_begin z3v487.ce4168 9db97739d68b861f786717d59e4e113
=input.spec-%var-arr-1
1 : Lambda33307 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33308 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33311 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4239 : BV:32
4 : Lambda33314 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33315 : BV:32
7 : unit : UNIT
8 : 1034696743 { 0x3dac3827 +1.34546363e252 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4240 : BV:32
4 : Lambda33316 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33317 : BV:32
7 : unit : UNIT
8 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4242 : BV:32
6 : Lambda33320 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33321 : BV:32
9 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 939524099 ] -> 0, [ 939524100; 939524100 ] -> 0, [ 939524101; 939524101 ] -> 0, [ 939524102; 939524102 ] -> 0, [ 939524103; 939524103 ] -> 0, [ 939524104; 939524104 ] -> 0, [ 939524105; 939524105 ] -> 0, [ 939524106; 939524106 ] -> 0, [ 939524107; 939524107 ] -> 0, [ 939524108; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4244 : BV:32
6 : Lambda33324 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33325 : BV:32
9 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4246 : BV:32
6 : Lambda33328 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33329 : BV:32
9 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1754658186 { 0x6895f58a +1.17155575e82 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1627430845 { 0x61009fbd +1.487482e67 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 878364210 { 0x345ac632 +1.70917344e233 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536870916; 939524099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 939524100; 939524107 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 939524108; 1677870527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1677870528; 2432696319 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2432696320; 2432696323 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2432696324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627430845 { 0x61009fbd +1.487482e67 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1010013206 { 0x3c339416 +1.40295672e249 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1616158436 { 0x60549ee4 +1.66109895e65 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 939524099 ] -> 0, [ 939524100; 939524107 ] -> 49, [ 939524108; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1010013206 { 0x3c339416 +1.40295672e249 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536870916; 939524099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 939524100; 939524107 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 939524108; 1677870527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1677870528; 2432696319 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2432696320; 2432696323 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2432696324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 878364210 { 0x345ac632 +1.70917344e233 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 939524104 { 0x38000008 +1.95e241 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 939524104 { 0x38000008 +1.95e241 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2432696323 { 0x91000003 -1862270973 -1.35e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3079869447
=counter_example_end
=global nodece 75 num_edges_traversed 1
=global nodece 75 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 76
=global nodece 76 nodece z3v487.ce4203.num_edges_traversed2
=global nodece 76 nodece_path
=global nodece 76 nodece_path.graph_edge_composition
(epsilon)
=global nodece 76 nodece_cached_counterexample
=counter_example_begin z3v487.ce4203 8b5c60dac692451fa566cae3b6ec30
=input.spec-%var-arr-1
1 : Lambda33307 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33308 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33311 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4239 : BV:32
4 : Lambda33314 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33315 : BV:32
7 : unit : UNIT
8 : 1034696743 { 0x3dac3827 +1.34546363e252 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 939524099 ] -> 0, [ 939524100; 939524100 ] -> 0, [ 939524101; 939524101 ] -> 0, [ 939524102; 939524102 ] -> 0, [ 939524103; 939524103 ] -> 0, [ 939524104; 939524104 ] -> 0, [ 939524105; 939524105 ] -> 0, [ 939524106; 939524106 ] -> 0, [ 939524107; 939524107 ] -> 0, [ 939524108; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4246 : BV:32
6 : Lambda33328 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33329 : BV:32
9 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1754658186 { 0x6895f58a +1.17155575e82 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 878364210 { 0x345ac632 +1.70917344e233 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536870916; 939524099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 939524100; 939524107 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 939524108; 1677870527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1677870528; 2432696319 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2432696320; 2432696323 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2432696324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627430845 { 0x61009fbd +1.487482e67 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1010013206 { 0x3c339416 +1.40295672e249 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1616158436 { 0x60549ee4 +1.66109895e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2432696323 { 0x91000003 -1862270973 -1.35e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3079869447
=counter_example_end
=global nodece 76 num_edges_traversed 2
=global nodece 76 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 77
=global nodece 77 nodece z3v487.ce4211.num_edges_traversed3
=global nodece 77 nodece_path
=global nodece 77 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 77 nodece_cached_counterexample
=counter_example_begin z3v487.ce4211 fba6d0a534e315c677ba591e6c8d5a3
=nextpc_const.1
1 : 1648272417 { 0x623ea421 +1.48938381e69 } : BV:32
=input.spec-%var-arr-1
1 : Lambda33307 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33308 : BV:32
18 : bvule(2, 17) : BOOL
19 : bvule(17, 10) : BOOL
20 : and(18, 19) : BOOL
21 : ite(20, 2, 2) : BV:32
22 : lambda(17, 21) : FUNCTION[BV:32 -> BV:32]
23 : map(16, 22) : MAP[BV:32 -> BV:32]
24 : sym_const(23) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 1677870528 { 0x640245c0 +1.1775360e73 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda33310 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda33311 : BV:32
18 : eq(17, 2) : BOOL
19 : bvule(2, 17) : BOOL
20 : bvule(17, 4) : BOOL
21 : and(19, 20) : BOOL
22 : bvule(8, 17) : BOOL
23 : bvule(17, 10) : BOOL
24 : and(22, 23) : BOOL
25 : ite(24, 13, 13) : BOOL
26 : ite(21, 7, 25) : BOOL
27 : and(19, 23) : BOOL
28 : ite(27, 2, 2) : BV:32
29 : ite(26, 28, 2) : BV:32
30 : ite(18, 2, 29) : BV:32
31 : lambda(17, 30) : FUNCTION[BV:32 -> BV:32]
32 : map(16, 31) : MAP[BV:32 -> BV:32]
33 : sym_const(32) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda33289 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : bvule(2, 1) : BOOL
5 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
6 : bvule(1, 5) : BOOL
7 : and(4, 6) : BOOL
8 : 1 { 0x1 } : BOOL
9 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
10 : bvule(9, 1) : BOOL
11 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
12 : bvule(1, 11) : BOOL
13 : and(10, 12) : BOOL
14 : 0 { 0x0 } : BOOL
15 : ite(13, 14, 14) : BOOL
16 : ite(7, 8, 15) : BOOL
17 : and(4, 12) : BOOL
18 : ite(17, 2, 2) : BV:32
19 : ite(16, 18, 2) : BV:32
20 : ite(3, 2, 19) : BV:32
21 : lambda(1, 20) : FUNCTION[BV:32 -> BV:32]
22 : sym_const(21) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4239 : BV:32
4 : Lambda33314 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda33315 : BV:32
7 : unit : UNIT
8 : 1034696743 { 0x3dac3827 +1.34546363e252 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 939524099 ] -> 0, [ 939524100; 939524100 ] -> 0, [ 939524101; 939524101 ] -> 0, [ 939524102; 939524102 ] -> 0, [ 939524103; 939524103 ] -> 0, [ 939524104; 939524104 ] -> 0, [ 939524105; 939524105 ] -> 0, [ 939524106; 939524106 ] -> 0, [ 939524107; 939524107 ] -> 0, [ 939524108; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : ([ 0; 4294967295 ] -> 0, ) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 246 , m_adder -> 209), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1648272417 , 1000 , 8 ) -> 130625073, () -> 521548293, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4246 : BV:32
6 : Lambda33328 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda33329 : BV:32
9 : 494337444 { 0x1d76fda4 +1.92961549e187 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1754658186 { 0x6895f58a +1.17155575e82 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 130625073 { 0x7c92e31 +1.57172214e144 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 878364210 { 0x345ac632 +1.70917344e233 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 536870911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 536870912; 536870915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 536870916; 939524099 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 939524100; 939524107 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 939524108; 1677870527 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1677870528; 2432696319 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 2432696320; 2432696323 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 2432696324; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1627430845 { 0x61009fbd +1.487482e67 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 939524099 ] -> 0, [ 939524100; 939524100 ] -> 0, [ 939524101; 939524101 ] -> 0, [ 939524102; 939524102 ] -> 0, [ 939524103; 939524103 ] -> 0, [ 939524104; 939524104 ] -> 0, [ 939524105; 939524105 ] -> 0, [ 939524106; 939524106 ] -> 0, [ 939524107; 939524107 ] -> 0, [ 939524108; 4294967295 ] -> 0, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1010013206 { 0x3c339416 +1.40295672e249 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 939524100 { 0x38000004 +1.47e241 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1616158436 { 0x60549ee4 +1.66109895e65 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 2432696320 { 0x91000000 -1862270976 -1.0e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 2432696323 { 0x91000003 -1862270973 -1.35e163 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 536870912 { 0x20000000 +1.0e193 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 536870915 { 0x20000003 +1.35e193 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 246 , m_adder -> 209), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2094264299
=counter_example_end
=global nodece 77 num_edges_traversed 3
=global nodece 77 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 78
=global nodece 78 nodece z3v487.ce4272.num_edges_traversed1
=global nodece 78 nodece_path
=global nodece 78 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 78 nodece_cached_counterexample
=counter_example_begin z3v487.ce4272 b8655b5d7263a3880a27ebea5cbc0ff
=input.spec-%var-arr-1
1 : Lambda34938 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34939 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
28 : eq(23, 27) : BOOL
29 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda34941 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34942 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
36 : eq(31, 35) : BOOL
37 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
38 : eq(31, 37) : BOOL
39 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda34923 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
26 : eq(21, 25) : BOOL
27 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
28 : eq(21, 27) : BOOL
29 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4434 : BV:32
4 : Lambda34945 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda34946 : BV:32
7 : unit : UNIT
8 : 391391035 { 0x1754273b +1.65744721e175 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4435 : BV:32
4 : Lambda34947 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda34948 : BV:32
7 : unit : UNIT
8 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4437 : BV:32
6 : Lambda34951 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34952 : BV:32
9 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1048575 ] -> 5, [ 1048576; 1048576 ] -> 0, [ 1048577; 1048577 ] -> 0, [ 1048578; 1048578 ] -> 0, [ 1048579; 1048579 ] -> 0, [ 1048580; 1048580 ] -> 0, [ 1048581; 1048581 ] -> 0, [ 1048582; 1048582 ] -> 0, [ 1048583; 1048583 ] -> 0, [ 1048584; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda34927 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4439 : BV:32
6 : Lambda34955 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34956 : BV:32
9 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4441 : BV:32
6 : Lambda34959 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34960 : BV:32
9 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 895598515 { 0x3561bfb3 +1.76366269e235 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1859592221 { 0x6ed7201d +1.68066751e94 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1097361355 { 0x416867cb +1.81566751e3 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1048584; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1859592221 { 0x6ed7201d +1.68066751e94 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1521207051 { 0x5aabc70b +1.34201180e54 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1297048769 { 0x4d4f64c1 +1.62026226e27 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 1048575 ] -> 5, [ 1048576; 1048583 ] -> 202, [ 1048584; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1521207051 { 0x5aabc70b +1.34201180e54 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1048584; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1097361355 { 0x416867cb +1.81566751e3 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 1048580 { 0x100004 +1.12500047e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
422935582
=counter_example_end
=global nodece 78 num_edges_traversed 1
=global nodece 78 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 79
=global nodece 79 nodece z3v487.ce4307.num_edges_traversed2
=global nodece 79 nodece_path
=global nodece 79 nodece_path.graph_edge_composition
(epsilon)
=global nodece 79 nodece_cached_counterexample
=counter_example_begin z3v487.ce4307 af9a5a125749858f3b8fdcaca98b033
=input.spec-%var-arr-1
1 : Lambda34938 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34939 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
28 : eq(23, 27) : BOOL
29 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda34941 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34942 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
36 : eq(31, 35) : BOOL
37 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
38 : eq(31, 37) : BOOL
39 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda34923 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
26 : eq(21, 25) : BOOL
27 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
28 : eq(21, 27) : BOOL
29 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4434 : BV:32
4 : Lambda34945 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda34946 : BV:32
7 : unit : UNIT
8 : 391391035 { 0x1754273b +1.65744721e175 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1048575 ] -> 5, [ 1048576; 1048576 ] -> 0, [ 1048577; 1048577 ] -> 0, [ 1048578; 1048578 ] -> 0, [ 1048579; 1048579 ] -> 0, [ 1048580; 1048580 ] -> 0, [ 1048581; 1048581 ] -> 0, [ 1048582; 1048582 ] -> 0, [ 1048583; 1048583 ] -> 0, [ 1048584; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda34927 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4441 : BV:32
6 : Lambda34959 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34960 : BV:32
9 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 895598515 { 0x3561bfb3 +1.76366269e235 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1097361355 { 0x416867cb +1.81566751e3 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1048584; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1859592221 { 0x6ed7201d +1.68066751e94 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1521207051 { 0x5aabc70b +1.34201180e54 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1297048769 { 0x4d4f64c1 +1.62026226e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
422935582
=counter_example_end
=global nodece 79 num_edges_traversed 2
=global nodece 79 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 80
=global nodece 80 nodece z3v487.ce4315.num_edges_traversed3
=global nodece 80 nodece_path
=global nodece 80 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 80 nodece_cached_counterexample
=counter_example_begin z3v487.ce4315 b39b7370c22ed46d8179fa8593fe7e9
=nextpc_const.1
1 : 1287244704 { 0x4cb9cba0 +1.45152664e26 } : BV:32
=input.spec-%var-arr-1
1 : Lambda34938 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34939 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
28 : eq(23, 27) : BOOL
29 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
30 : eq(23, 29) : BOOL
31 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda34941 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 7 { 0x7 +1.83e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 8 { 0x8 +1.95e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda34942 : BV:32
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
36 : eq(31, 35) : BOOL
37 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
38 : eq(31, 37) : BOOL
39 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda34923 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 7 { 0x7 +1.83e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 8 { 0x8 +1.95e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
26 : eq(21, 25) : BOOL
27 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
28 : eq(21, 27) : BOOL
29 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4434 : BV:32
4 : Lambda34945 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda34946 : BV:32
7 : unit : UNIT
8 : 391391035 { 0x1754273b +1.65744721e175 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 7 ] -> true, [ 8; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1048575 ] -> 5, [ 1048576; 1048576 ] -> 0, [ 1048577; 1048577 ] -> 0, [ 1048578; 1048578 ] -> 0, [ 1048579; 1048579 ] -> 0, [ 1048580; 1048580 ] -> 0, [ 1048581; 1048581 ] -> 0, [ 1048582; 1048582 ] -> 0, [ 1048583; 1048583 ] -> 0, [ 1048584; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda34927 : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 2667577343 { 0x9effffff -1627389953 -1.99999988e190 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 2667577347 { 0x9f000003 -1627389949 -1.35e191 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 2667577345 { 0x9f000001 -1627389951 -1.11e191 } : BV:32
13 : eq(8, 12) : BOOL
14 : 2667577346 { 0x9f000002 -1627389950 -1.23e191 } : BV:32
15 : eq(8, 14) : BOOL
16 : 2667577344 { 0x9f000000 -1627389952 -1.0e191 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 2667577342 { 0x9efffffe -1627389954 -1.99999976e190 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 2667577341 { 0x9efffffd -1627389955 -1.99999964e190 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 2667577340 { 0x9efffffc -1627389956 -1.99999952e190 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 221), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1287244704 , 1000 , 8 ) -> 1716570965, () -> 281399402, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4441 : BV:32
6 : Lambda34959 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda34960 : BV:32
9 : 555791373 { 0x2120b40d +1.25549471e195 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 895598515 { 0x3561bfb3 +1.76366269e235 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1716570965 { 0x6650cb55 +1.63120520e77 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1097361355 { 0x416867cb +1.81566751e3 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1048575 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1048576; 1048583 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1048584; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1859592221 { 0x6ed7201d +1.68066751e94 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1048575 ] -> 5, [ 1048576; 1048576 ] -> 0, [ 1048577; 1048577 ] -> 0, [ 1048578; 1048578 ] -> 0, [ 1048579; 1048579 ] -> 0, [ 1048580; 1048580 ] -> 0, [ 1048581; 1048581 ] -> 0, [ 1048582; 1048582 ] -> 0, [ 1048583; 1048583 ] -> 0, [ 1048584; 2667577343 ] -> 5, [ 2667577344; 2667577347 ] -> 0, [ 2667577348; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1521207051 { 0x5aabc70b +1.34201180e54 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 2 { 0x2 +1.23e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1048576 { 0x100000 +1.12500000e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1297048769 { 0x4d4f64c1 +1.62026226e27 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 4 , m_adder -> 221), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2438050706
=counter_example_end
=global nodece 80 num_edges_traversed 3
=global nodece 80 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 81
=global nodece 81 nodece z3v487.ce4332.num_edges_traversed1
=global nodece 81 nodece_path
=global nodece 81 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 81 nodece_cached_counterexample
=counter_example_begin z3v487.ce4332 34c782f2ccb338be6fbc44d75c37793
=input.spec-%var-arr-1
1 : Lambda35049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35050 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35052 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35053 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35034 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4453 : BV:32
4 : Lambda35056 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35057 : BV:32
7 : unit : UNIT
8 : 86459137 { 0x5274301 +1.30673229e139 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4454 : BV:32
4 : Lambda35058 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35059 : BV:32
7 : unit : UNIT
8 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4456 : BV:32
6 : Lambda35062 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35063 : BV:32
9 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1179663 ] -> 5, [ 1179664; 1179664 ] -> 0, [ 1179665; 1179665 ] -> 0, [ 1179666; 1179666 ] -> 0, [ 1179667; 1179667 ] -> 0, [ 1179668; 1179668 ] -> 0, [ 1179669; 1179669 ] -> 0, [ 1179670; 1179670 ] -> 0, [ 1179671; 1179671 ] -> 0, [ 1179672; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35038 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4458 : BV:32
6 : Lambda35066 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35067 : BV:32
9 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4460 : BV:32
6 : Lambda35070 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35071 : BV:32
9 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1488872585 { 0x58be6489 +1.48744308e50 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 489834479 { 0x1d3247ef +1.39282023e187 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1471956576 { 0x57bc4660 +1.47089767e48 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1179672; 1071777799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071777800; 1071777803 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1071777804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 489834479 { 0x1d3247ef +1.39282023e187 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 381386924 { 0x16bb80ac +1.46486425e174 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 568503022 { 0x21e2aaee +1.77084136e196 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 1179663 ] -> 5, [ 1179664; 1179671 ] -> 95, [ 1179672; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 381386924 { 0x16bb80ac +1.46486425e174 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 3 { 0x3 +1.35e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1179672; 1071777799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071777800; 1071777803 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1071777804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1471956576 { 0x57bc4660 +1.47089767e48 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1179668 { 0x120014 +1.14062738e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 12 { 0xc +1.143e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 1179668 { 0x120014 +1.14062738e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1071777803 { 0x3fe2080b +1.76587045e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3286490033
=counter_example_end
=global nodece 81 num_edges_traversed 1
=global nodece 81 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 82
=global nodece 82 nodece z3v487.ce4367.num_edges_traversed2
=global nodece 82 nodece_path
=global nodece 82 nodece_path.graph_edge_composition
(epsilon)
=global nodece 82 nodece_cached_counterexample
=counter_example_begin z3v487.ce4367 611a78253a942aaff7226ca187ec63aa
=input.spec-%var-arr-1
1 : Lambda35049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35050 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35052 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35053 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35034 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4453 : BV:32
4 : Lambda35056 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35057 : BV:32
7 : unit : UNIT
8 : 86459137 { 0x5274301 +1.30673229e139 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1179663 ] -> 5, [ 1179664; 1179664 ] -> 0, [ 1179665; 1179665 ] -> 0, [ 1179666; 1179666 ] -> 0, [ 1179667; 1179667 ] -> 0, [ 1179668; 1179668 ] -> 0, [ 1179669; 1179669 ] -> 0, [ 1179670; 1179670 ] -> 0, [ 1179671; 1179671 ] -> 0, [ 1179672; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35038 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4460 : BV:32
6 : Lambda35070 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35071 : BV:32
9 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1488872585 { 0x58be6489 +1.48744308e50 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1471956576 { 0x57bc4660 +1.47089767e48 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1179672; 1071777799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071777800; 1071777803 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1071777804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 489834479 { 0x1d3247ef +1.39282023e187 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 381386924 { 0x16bb80ac +1.46486425e174 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 568503022 { 0x21e2aaee +1.77084136e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1071777803 { 0x3fe2080b +1.76587045e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3286490033
=counter_example_end
=global nodece 82 num_edges_traversed 2
=global nodece 82 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 83
=global nodece 83 nodece z3v487.ce4375.num_edges_traversed3
=global nodece 83 nodece_path
=global nodece 83 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 83 nodece_cached_counterexample
=counter_example_begin z3v487.ce4375 131b472d3dabdcfe8d0a5c4e0108c44
=nextpc_const.1
1 : 229240289 { 0xda9ede1 +1.32757198e156 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35049 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35050 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35052 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35053 : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35034 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4453 : BV:32
4 : Lambda35056 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35057 : BV:32
7 : unit : UNIT
8 : 86459137 { 0x5274301 +1.30673229e139 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1179663 ] -> 5, [ 1179664; 1179664 ] -> 0, [ 1179665; 1179665 ] -> 0, [ 1179666; 1179666 ] -> 0, [ 1179667; 1179667 ] -> 0, [ 1179668; 1179668 ] -> 0, [ 1179669; 1179669 ] -> 0, [ 1179670; 1179670 ] -> 0, [ 1179671; 1179671 ] -> 0, [ 1179672; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35038 : BV:32
2 : 3 { 0x3 +1.35e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4137566203 { 0xf69e3ffb -157401093 -1.23632752e110 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4137566215 { 0xf69e4007 -157401081 -1.23632895e110 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4137566214 { 0xf69e4006 -157401082 -1.23632884e110 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4137566213 { 0xf69e4005 -157401083 -1.23632872e110 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4137566212 { 0xf69e4004 -157401084 -1.23632860e110 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4137566202 { 0xf69e3ffa -157401094 -1.23632740e110 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4137566201 { 0xf69e3ff9 -157401095 -1.23632729e110 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4137566200 { 0xf69e3ff8 -157401096 -1.23632717e110 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 183 , m_adder -> 33), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 229240289 , 1000 , 8 ) -> 1843479129, () -> 1365321372, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4460 : BV:32
6 : Lambda35070 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35071 : BV:32
9 : 1155898524 { 0x44e59c9c +1.79384183e10 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1488872585 { 0x58be6489 +1.48744308e50 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1843479129 { 0x6de14259 +1.75983726e92 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1471956576 { 0x57bc4660 +1.47089767e48 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 7 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 12; 1179663 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1179664; 1179671 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1179672; 1071777799 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1071777800; 1071777803 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1071777804; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 489834479 { 0x1d3247ef +1.39282023e187 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1179663 ] -> 5, [ 1179664; 1179664 ] -> 0, [ 1179665; 1179665 ] -> 0, [ 1179666; 1179666 ] -> 0, [ 1179667; 1179667 ] -> 0, [ 1179668; 1179668 ] -> 0, [ 1179669; 1179669 ] -> 0, [ 1179670; 1179670 ] -> 0, [ 1179671; 1179671 ] -> 0, [ 1179672; 4137566211 ] -> 5, [ 4137566212; 4137566215 ] -> 0, [ 4137566216; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 381386924 { 0x16bb80ac +1.46486425e174 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1179664 { 0x120010 +1.14062690e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 568503022 { 0x21e2aaee +1.77084136e196 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1071777800 { 0x3fe20808 +1.76587009e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1071777803 { 0x3fe2080b +1.76587045e0 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 183 , m_adder -> 33), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
168151797
=counter_example_end
=global nodece 83 num_edges_traversed 3
=global nodece 83 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 84
=global nodece 84 nodece z3.ce4392.num_edges_traversed1
=global nodece 84 nodece_path
=global nodece 84 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 84 nodece_cached_counterexample
=counter_example_begin z3.ce4392 45e67c77b01d492eafb96b767fb11ef4
=input.spec-%var-arr-1
1 : Lambda35169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35170 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
35 : eq(30, 34) : BOOL
36 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
37 : eq(30, 36) : BOOL
38 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
39 : eq(30, 38) : BOOL
40 : 3 { 0x3 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35173 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
27 : eq(22, 26) : BOOL
28 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
29 : eq(22, 28) : BOOL
30 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
31 : eq(22, 30) : BOOL
32 : 3 { 0x3 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35145 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
12 : eq(7, 11) : BOOL
13 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
14 : eq(7, 13) : BOOL
15 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
16 : eq(7, 15) : BOOL
17 : 3 { 0x3 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4472 : BV:32
4 : Lambda35176 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35177 : BV:32
7 : unit : UNIT
8 : 918549783 { 0x36bff517 +1.49966704e238 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4477 : BV:32
4 : Lambda35196 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35197 : BV:32
7 : unit : UNIT
8 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4479 : BV:32
6 : Lambda35200 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35201 : BV:32
9 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 3536535555 ] -> 3, [ 3536535556; 3536535556 ] -> 0, [ 3536535557; 3536535557 ] -> 0, [ 3536535558; 3536535558 ] -> 0, [ 3536535559; 3536535559 ] -> 0, [ 3536535560; 3536535560 ] -> 0, [ 3536535561; 3536535561 ] -> 0, [ 3536535562; 3536535562 ] -> 0, [ 3536535563; 3536535563 ] -> 0, [ 3536535564; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35149 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 9 { 0x9 +1.107e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
25 : eq(20, 24) : BOOL
26 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
27 : eq(20, 26) : BOOL
28 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
29 : eq(20, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4481 : BV:32
6 : Lambda35204 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35205 : BV:32
9 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4483 : BV:32
6 : Lambda35208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35209 : BV:32
9 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 555882926 { 0x212219ae +1.26640868e195 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1856224847 { 0x6ea3be4f +1.27924525e94 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1683825336 { 0x645d22b8 +1.72762203e73 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133091284; 133091287 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 133091288; 1285734911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1285734912; 1285734915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1285734916; 1892900863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1892900864; 1892900867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1892900868; 3536535555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3536535556; 3536535563 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3536535564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1856224847 { 0x6ea3be4f +1.27924525e94 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1870864998 { 0x6f832266 +1.2448725e96 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1602238991 { 0x5f803a0f +1.177180e64 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 3536535555 ] -> 3, [ 3536535556; 3536535563 ] -> 183, [ 3536535564; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1870864998 { 0x6f832266 +1.2448725e96 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 133091283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133091284; 133091287 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 133091288; 1285734911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1285734912; 1285734915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1285734916; 1892900863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1892900864; 1892900867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1892900868; 3536535555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3536535556; 3536535563 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3536535564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1683825336 { 0x645d22b8 +1.72762203e73 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 3536535560 { 0xd2cb4008 -758431736 -1.58789157e38 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 16 { 0x10 +1.190e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 3536535560 { 0xd2cb4008 -758431736 -1.58789157e38 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1892900867 { 0x70d36003 +1.65136754e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1285734915 { 0x4ca2c203 +1.27154576e26 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3197387534
=counter_example_end
=global nodece 84 num_edges_traversed 1
=global nodece 84 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 85
=global nodece 85 nodece z3.ce4428.num_edges_traversed2
=global nodece 85 nodece_path
=global nodece 85 nodece_path.graph_edge_composition
(epsilon)
=global nodece 85 nodece_cached_counterexample
=counter_example_begin z3.ce4428 2edb78eacfe3c47e91973a55d8d79cb
=input.spec-%var-arr-1
1 : Lambda35169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35170 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
35 : eq(30, 34) : BOOL
36 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
37 : eq(30, 36) : BOOL
38 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
39 : eq(30, 38) : BOOL
40 : 3 { 0x3 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35173 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
27 : eq(22, 26) : BOOL
28 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
29 : eq(22, 28) : BOOL
30 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
31 : eq(22, 30) : BOOL
32 : 3 { 0x3 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35145 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
12 : eq(7, 11) : BOOL
13 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
14 : eq(7, 13) : BOOL
15 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
16 : eq(7, 15) : BOOL
17 : 3 { 0x3 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4472 : BV:32
4 : Lambda35176 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35177 : BV:32
7 : unit : UNIT
8 : 918549783 { 0x36bff517 +1.49966704e238 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 3536535555 ] -> 3, [ 3536535556; 3536535556 ] -> 0, [ 3536535557; 3536535557 ] -> 0, [ 3536535558; 3536535558 ] -> 0, [ 3536535559; 3536535559 ] -> 0, [ 3536535560; 3536535560 ] -> 0, [ 3536535561; 3536535561 ] -> 0, [ 3536535562; 3536535562 ] -> 0, [ 3536535563; 3536535563 ] -> 0, [ 3536535564; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35149 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 9 { 0x9 +1.107e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
25 : eq(20, 24) : BOOL
26 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
27 : eq(20, 26) : BOOL
28 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
29 : eq(20, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4483 : BV:32
6 : Lambda35208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35209 : BV:32
9 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 555882926 { 0x212219ae +1.26640868e195 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1683825336 { 0x645d22b8 +1.72762203e73 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133091284; 133091287 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 133091288; 1285734911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1285734912; 1285734915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1285734916; 1892900863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1892900864; 1892900867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1892900868; 3536535555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3536535556; 3536535563 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3536535564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1856224847 { 0x6ea3be4f +1.27924525e94 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1870864998 { 0x6f832266 +1.2448725e96 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1602238991 { 0x5f803a0f +1.177180e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1892900867 { 0x70d36003 +1.65136754e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1285734915 { 0x4ca2c203 +1.27154576e26 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3197387534
=counter_example_end
=global nodece 85 num_edges_traversed 2
=global nodece 85 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 86
=global nodece 86 nodece z3.ce4436.num_edges_traversed3
=global nodece 86 nodece_path
=global nodece 86 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 86 nodece_cached_counterexample
=counter_example_begin z3.ce4436 635c53034ad487214781c4ed6662
=nextpc_const.1
1 : 1178040555 { 0x463778eb +1.43337762e13 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35169 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35170 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
29 : bvmul(18, 17) : BV:32
30 : bvadd(28, 29) : BV:32
31 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
32 : eq(30, 31) : BOOL
33 : 0 { 0x0 } : BV:8
34 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
35 : eq(30, 34) : BOOL
36 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
37 : eq(30, 36) : BOOL
38 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
39 : eq(30, 38) : BOOL
40 : 3 { 0x3 } : BV:8
41 : ite(39, 33, 40) : BV:8
42 : ite(37, 33, 41) : BV:8
43 : ite(35, 33, 42) : BV:8
44 : ite(32, 33, 43) : BV:8
45 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
46 : bvadd(45, 29) : BV:32
47 : eq(46, 31) : BOOL
48 : eq(46, 34) : BOOL
49 : eq(46, 36) : BOOL
50 : eq(46, 38) : BOOL
51 : ite(50, 33, 40) : BV:8
52 : ite(49, 33, 51) : BV:8
53 : ite(48, 33, 52) : BV:8
54 : ite(47, 33, 53) : BV:8
55 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
56 : bvadd(55, 29) : BV:32
57 : eq(56, 31) : BOOL
58 : eq(56, 34) : BOOL
59 : eq(56, 36) : BOOL
60 : eq(56, 38) : BOOL
61 : ite(60, 33, 40) : BV:8
62 : ite(59, 33, 61) : BV:8
63 : ite(58, 33, 62) : BV:8
64 : ite(57, 33, 63) : BV:8
65 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
66 : bvadd(65, 29) : BV:32
67 : eq(66, 31) : BOOL
68 : eq(66, 34) : BOOL
69 : eq(66, 36) : BOOL
70 : eq(66, 38) : BOOL
71 : ite(70, 33, 40) : BV:8
72 : ite(69, 33, 71) : BV:8
73 : ite(68, 33, 72) : BV:8
74 : ite(67, 33, 73) : BV:8
75 : bvconcat(44, 54, 64, 74) : BV:32
76 : ite(19, 2, 75) : BV:32
77 : ite(27, 76, 75) : BV:32
78 : ite(19, 2, 77) : BV:32
79 : lambda(17, 78) : FUNCTION[BV:32 -> BV:32]
80 : map(16, 79) : MAP[BV:32 -> BV:32]
81 : sym_const(80) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35172 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 8 { 0x8 +1.95e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 9 { 0x9 +1.107e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35173 : BV:32
18 : 4 { 0x4 +1.47e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
21 : bvmul(18, 17) : BV:32
22 : bvadd(20, 21) : BV:32
23 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
24 : eq(22, 23) : BOOL
25 : 0 { 0x0 } : BV:8
26 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
27 : eq(22, 26) : BOOL
28 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
29 : eq(22, 28) : BOOL
30 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
31 : eq(22, 30) : BOOL
32 : 3 { 0x3 } : BV:8
33 : ite(31, 25, 32) : BV:8
34 : ite(29, 25, 33) : BV:8
35 : ite(27, 25, 34) : BV:8
36 : ite(24, 25, 35) : BV:8
37 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
38 : bvadd(37, 21) : BV:32
39 : eq(38, 23) : BOOL
40 : eq(38, 26) : BOOL
41 : eq(38, 28) : BOOL
42 : eq(38, 30) : BOOL
43 : ite(42, 25, 32) : BV:8
44 : ite(41, 25, 43) : BV:8
45 : ite(40, 25, 44) : BV:8
46 : ite(39, 25, 45) : BV:8
47 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
48 : bvadd(47, 21) : BV:32
49 : eq(48, 23) : BOOL
50 : eq(48, 26) : BOOL
51 : eq(48, 28) : BOOL
52 : eq(48, 30) : BOOL
53 : ite(52, 25, 32) : BV:8
54 : ite(51, 25, 53) : BV:8
55 : ite(50, 25, 54) : BV:8
56 : ite(49, 25, 55) : BV:8
57 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
58 : bvadd(57, 21) : BV:32
59 : eq(58, 23) : BOOL
60 : eq(58, 26) : BOOL
61 : eq(58, 28) : BOOL
62 : eq(58, 30) : BOOL
63 : ite(62, 25, 32) : BV:8
64 : ite(61, 25, 63) : BV:8
65 : ite(60, 25, 64) : BV:8
66 : ite(59, 25, 65) : BV:8
67 : bvconcat(36, 46, 56, 66) : BV:32
68 : ite(19, 2, 67) : BV:32
69 : lambda(17, 68) : FUNCTION[BV:32 -> BV:32]
70 : map(16, 69) : MAP[BV:32 -> BV:32]
71 : sym_const(70) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35145 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
6 : bvmul(2, 1) : BV:32
7 : bvadd(5, 6) : BV:32
8 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
9 : eq(7, 8) : BOOL
10 : 0 { 0x0 } : BV:8
11 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
12 : eq(7, 11) : BOOL
13 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
14 : eq(7, 13) : BOOL
15 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
16 : eq(7, 15) : BOOL
17 : 3 { 0x3 } : BV:8
18 : ite(16, 10, 17) : BV:8
19 : ite(14, 10, 18) : BV:8
20 : ite(12, 10, 19) : BV:8
21 : ite(9, 10, 20) : BV:8
22 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
23 : bvadd(22, 6) : BV:32
24 : eq(23, 8) : BOOL
25 : eq(23, 11) : BOOL
26 : eq(23, 13) : BOOL
27 : eq(23, 15) : BOOL
28 : ite(27, 10, 17) : BV:8
29 : ite(26, 10, 28) : BV:8
30 : ite(25, 10, 29) : BV:8
31 : ite(24, 10, 30) : BV:8
32 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
33 : bvadd(32, 6) : BV:32
34 : eq(33, 8) : BOOL
35 : eq(33, 11) : BOOL
36 : eq(33, 13) : BOOL
37 : eq(33, 15) : BOOL
38 : ite(37, 10, 17) : BV:8
39 : ite(36, 10, 38) : BV:8
40 : ite(35, 10, 39) : BV:8
41 : ite(34, 10, 40) : BV:8
42 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
43 : bvadd(42, 6) : BV:32
44 : eq(43, 8) : BOOL
45 : eq(43, 11) : BOOL
46 : eq(43, 13) : BOOL
47 : eq(43, 15) : BOOL
48 : ite(47, 10, 17) : BV:8
49 : ite(46, 10, 48) : BV:8
50 : ite(45, 10, 49) : BV:8
51 : ite(44, 10, 50) : BV:8
52 : bvconcat(21, 31, 41, 51) : BV:32
53 : ite(3, 4, 52) : BV:32
54 : lambda(1, 53) : FUNCTION[BV:32 -> BV:32]
55 : sym_const(54) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4472 : BV:32
4 : Lambda35176 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35177 : BV:32
7 : unit : UNIT
8 : 918549783 { 0x36bff517 +1.49966704e238 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 8 ] -> true, [ 9; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 3536535555 ] -> 3, [ 3536535556; 3536535556 ] -> 0, [ 3536535557; 3536535557 ] -> 0, [ 3536535558; 3536535558 ] -> 0, [ 3536535559; 3536535559 ] -> 0, [ 3536535560; 3536535560 ] -> 0, [ 3536535561; 3536535561 ] -> 0, [ 3536535562; 3536535562 ] -> 0, [ 3536535563; 3536535563 ] -> 0, [ 3536535564; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35149 : BV:32
2 : 4 { 0x4 +1.47e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 8 { 0x8 +1.95e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 9 { 0x9 +1.107e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 133091271 { 0x7eecfc7 +1.86571586e144 } : BV:32
19 : bvmul(2, 1) : BV:32
20 : bvadd(18, 19) : BV:32
21 : 133091287 { 0x7eecfd7 +1.86571776e144 } : BV:32
22 : eq(20, 21) : BOOL
23 : 0 { 0x0 } : BV:8
24 : 133091286 { 0x7eecfd6 +1.86571764e144 } : BV:32
25 : eq(20, 24) : BOOL
26 : 133091284 { 0x7eecfd4 +1.86571741e144 } : BV:32
27 : eq(20, 26) : BOOL
28 : 133091285 { 0x7eecfd5 +1.86571753e144 } : BV:32
29 : eq(20, 28) : BOOL
30 : 3 { 0x3 } : BV:8
31 : ite(29, 23, 30) : BV:8
32 : ite(27, 23, 31) : BV:8
33 : ite(25, 23, 32) : BV:8
34 : ite(22, 23, 33) : BV:8
35 : 133091270 { 0x7eecfc6 +1.86571574e144 } : BV:32
36 : bvadd(35, 19) : BV:32
37 : eq(36, 21) : BOOL
38 : eq(36, 24) : BOOL
39 : eq(36, 26) : BOOL
40 : eq(36, 28) : BOOL
41 : ite(40, 23, 30) : BV:8
42 : ite(39, 23, 41) : BV:8
43 : ite(38, 23, 42) : BV:8
44 : ite(37, 23, 43) : BV:8
45 : 133091269 { 0x7eecfc5 +1.86571562e144 } : BV:32
46 : bvadd(45, 19) : BV:32
47 : eq(46, 21) : BOOL
48 : eq(46, 24) : BOOL
49 : eq(46, 26) : BOOL
50 : eq(46, 28) : BOOL
51 : ite(50, 23, 30) : BV:8
52 : ite(49, 23, 51) : BV:8
53 : ite(48, 23, 52) : BV:8
54 : ite(47, 23, 53) : BV:8
55 : 133091268 { 0x7eecfc4 +1.86571550e144 } : BV:32
56 : bvadd(55, 19) : BV:32
57 : eq(56, 21) : BOOL
58 : eq(56, 24) : BOOL
59 : eq(56, 26) : BOOL
60 : eq(56, 28) : BOOL
61 : ite(60, 23, 30) : BV:8
62 : ite(59, 23, 61) : BV:8
63 : ite(58, 23, 62) : BV:8
64 : ite(57, 23, 63) : BV:8
65 : bvconcat(34, 44, 54, 64) : BV:32
66 : ite(3, 4, 65) : BV:32
67 : ite(17, 66, 65) : BV:32
68 : ite(3, 4, 67) : BV:32
69 : lambda(1, 68) : FUNCTION[BV:32 -> BV:32]
70 : sym_const(69) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 237 , m_adder -> 181), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1178040555 , 1000 , 8 ) -> 996728965, () -> 1787655138, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4483 : BV:32
6 : Lambda35208 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35209 : BV:32
9 : 732894476 { 0x2baf150c +1.36782979e216 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 555882926 { 0x212219ae +1.26640868e195 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 996728965 { 0x3b68e085 +1.81935179e247 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1683825336 { 0x645d22b8 +1.72762203e73 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 133091283 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 133091284; 133091287 ] -> memlabel-mem--hpalloc.R2p./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 133091288; 1285734911 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1285734912; 1285734915 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 1285734916; 1892900863 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1892900864; 1892900867 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 1892900868; 3536535555 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 3536535556; 3536535563 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 3536535564; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1856224847 { 0x6ea3be4f +1.27924525e94 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 133091283 ] -> 3, [ 133091284; 133091287 ] -> 0, [ 133091288; 3536535555 ] -> 3, [ 3536535556; 3536535556 ] -> 0, [ 3536535557; 3536535557 ] -> 0, [ 3536535558; 3536535558 ] -> 0, [ 3536535559; 3536535559 ] -> 0, [ 3536535560; 3536535560 ] -> 0, [ 3536535561; 3536535561 ] -> 0, [ 3536535562; 3536535562 ] -> 0, [ 3536535563; 3536535563 ] -> 0, [ 3536535564; 4294967295 ] -> 3, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1870864998 { 0x6f832266 +1.2448725e96 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 5 { 0x5 +1.59e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 3536535556 { 0xd2cb4004 -758431740 -1.58789110e38 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 1602238991 { 0x5f803a0f +1.177180e64 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 1892900864 { 0x70d36000 +1.65136718e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 1892900867 { 0x70d36003 +1.65136754e98 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 1285734912 { 0x4ca2c200 +1.27154541e26 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 1285734915 { 0x4ca2c203 +1.27154576e26 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 237 , m_adder -> 181), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
3951975298
=counter_example_end
=global nodece 86 num_edges_traversed 3
=global nodece 86 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 87
=global nodece 87 nodece z3v487.ce4476.num_edges_traversed1
=global nodece 87 nodece_path
=global nodece 87 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 87 nodece_cached_counterexample
=counter_example_begin z3v487.ce4476 a3ef5c2747e68aed7b354c24f7d3951f
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4503 : BV:32
4 : Lambda35321 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35322 : BV:32
7 : unit : UNIT
8 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4505 : BV:32
6 : Lambda35325 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35326 : BV:32
9 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967268 ] -> 0, [ 4294967269; 4294967269 ] -> 0, [ 4294967270; 4294967270 ] -> 0, [ 4294967271; 4294967271 ] -> 0, [ 4294967272; 4294967272 ] -> 0, [ 4294967273; 4294967273 ] -> 0, [ 4294967274; 4294967274 ] -> 0, [ 4294967275; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4507 : BV:32
6 : Lambda35329 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35330 : BV:32
9 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4509 : BV:32
6 : Lambda35333 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35334 : BV:32
9 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350579 { 0x136474b3 +1.78481137e167 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551984 { 0x53e589f0 +1.79327201e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131251 { 0x7ef73933 +1.93143308e126 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967275 ] -> 239, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 1407551984 { 0x53e589f0 +1.79327201e40 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4294967272 { 0xffffffe8 -24 -1.99999713e128 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 28 { 0x1c +1.333e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 4294967272 { 0xffffffe8 -24 -1.99999713e128 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3093731788
=counter_example_end
=global nodece 87 num_edges_traversed 1
=global nodece 87 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 88
=global nodece 88 nodece z3v487.ce4511.num_edges_traversed2
=global nodece 88 nodece_path
=global nodece 88 nodece_path.graph_edge_composition
(epsilon)
=global nodece 88 nodece_cached_counterexample
=counter_example_begin z3v487.ce4511 8b76e4693ba19b224598a784ded7f
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967268 ] -> 0, [ 4294967269; 4294967269 ] -> 0, [ 4294967270; 4294967270 ] -> 0, [ 4294967271; 4294967271 ] -> 0, [ 4294967272; 4294967272 ] -> 0, [ 4294967273; 4294967273 ] -> 0, [ 4294967274; 4294967274 ] -> 0, [ 4294967275; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4509 : BV:32
6 : Lambda35333 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35334 : BV:32
9 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350579 { 0x136474b3 +1.78481137e167 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551984 { 0x53e589f0 +1.79327201e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131251 { 0x7ef73933 +1.93143308e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
3093731788
=counter_example_end
=global nodece 88 num_edges_traversed 2
=global nodece 88 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 89
=global nodece 89 nodece z3v487.ce4519.num_edges_traversed3
=global nodece 89 nodece_path
=global nodece 89 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 89 nodece_cached_counterexample
=counter_example_begin z3v487.ce4519 abd5ea0b38078670adade9aba91125
=nextpc_const.1
1 : 1698051356 { 0x6536351c +1.42349576e75 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967268 ] -> 0, [ 4294967269; 4294967269 ] -> 0, [ 4294967270; 4294967270 ] -> 0, [ 4294967271; 4294967271 ] -> 0, [ 4294967272; 4294967272 ] -> 0, [ 4294967273; 4294967273 ] -> 0, [ 4294967274; 4294967274 ] -> 0, [ 4294967275; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1698051356 , 1000 , 8 ) -> 1498648160, () -> 382731704, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4509 : BV:32
6 : Lambda35333 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35334 : BV:32
9 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350579 { 0x136474b3 +1.78481137e167 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1498648160 { 0x59538e60 +1.65278244e51 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551984 { 0x53e589f0 +1.79327201e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967268 ] -> 0, [ 4294967269; 4294967269 ] -> 0, [ 4294967270; 4294967270 ] -> 0, [ 4294967271; 4294967271 ] -> 0, [ 4294967272; 4294967272 ] -> 0, [ 4294967273; 4294967273 ] -> 0, [ 4294967274; 4294967274 ] -> 0, [ 4294967275; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 4294967268 { 0xffffffe4 -28 -1.99999666e128 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131251 { 0x7ef73933 +1.93143308e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2675519584
=counter_example_end
=global nodece 89 num_edges_traversed 3
=global nodece 89 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 90
=global nodece 90 nodece z3v487.ce4538.num_edges_traversed4
=global nodece 90 nodece_path
=global nodece 90 nodece_path.graph_edge_composition
(epsilon)
=global nodece 90 nodece_cached_counterexample
=counter_example_begin z3v487.ce4538 eeded04b147e46106cbc7bd119e2b3be
=nextpc_const.1
1 : 1698051356 { 0x6536351c +1.42349576e75 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1498648159 ] -> 5, [ 1498648160; 1498648160 ] -> 5, [ 1498648161; 1498648161 ] -> 5, [ 1498648162; 1498648162 ] -> 5, [ 1498648163; 1498648163 ] -> 5, [ 1498648164; 1498648164 ] -> 228, [ 1498648165; 1498648165 ] -> 255, [ 1498648166; 1498648166 ] -> 255, [ 1498648167; 1498648167 ] -> 255, [ 1498648168; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1698051356 , 1000 , 8 ) -> 1498648160, () -> 382731704, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4516 : BV:32
7 : Lambda35347 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda35348 : BV:32
10 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350580 { 0x136474b4 +1.78481149e167 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551985 { 0x53e589f1 +1.79327213e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1498648159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1498648160; 1498648167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1498648168; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1498648160 { 0x59538e60 +1.65278244e51 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131252 { 0x7ef73934 +1.93143320e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2675519584
=counter_example_end
=global nodece 90 num_edges_traversed 4
=global nodece 90 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 91
=global nodece 91 nodece z3v487.ce4558.num_edges_traversed5
=global nodece 91 nodece_path
=global nodece 91 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart)
=global nodece 91 nodece_cached_counterexample
=counter_example_begin z3v487.ce4558 98993c85af65ca132258196e191528
=nextpc_const.1
1 : 1698051356 { 0x6536351c +1.42349576e75 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1498648159 ] -> 5, [ 1498648160; 1498648160 ] -> 5, [ 1498648161; 1498648161 ] -> 5, [ 1498648162; 1498648162 ] -> 5, [ 1498648163; 1498648163 ] -> 5, [ 1498648164; 1498648164 ] -> 228, [ 1498648165; 1498648165 ] -> 255, [ 1498648166; 1498648166 ] -> 255, [ 1498648167; 1498648167 ] -> 255, [ 1498648168; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1698051356 , 1000 , 8 ) -> 1498648160, () -> 382731704, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4516 : BV:32
7 : Lambda35347 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda35348 : BV:32
10 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350580 { 0x136474b4 +1.78481149e167 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551985 { 0x53e589f1 +1.79327213e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1498648159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1498648160; 1498648167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1498648168; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1498648160 { 0x59538e60 +1.65278244e51 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131252 { 0x7ef73934 +1.93143320e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2675519584
=counter_example_end
=global nodece 91 num_edges_traversed 5
=global nodece 91 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 92
=global nodece 92 nodece z3v487.ce4572.num_edges_traversed6
=global nodece 92 nodece_path
=global nodece 92 nodece_path.graph_edge_composition
(epsilon)
=global nodece 92 nodece_cached_counterexample
=counter_example_begin z3v487.ce4572 f9172eb48a9111880112aab35db9dc
=nextpc_const.1
1 : 1698051356 { 0x6536351c +1.42349576e75 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35312 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35313 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
28 : eq(23, 27) : BOOL
29 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
30 : eq(23, 29) : BOOL
31 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35315 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35316 : BV:32
18 : 7 { 0x7 +1.83e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
36 : eq(31, 35) : BOOL
37 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
38 : eq(31, 37) : BOOL
39 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35297 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 2147483647 { 0x7fffffff +1.99999988e128 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
26 : eq(21, 25) : BOOL
27 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
28 : eq(21, 27) : BOOL
29 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4502 : BV:32
4 : Lambda35319 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35320 : BV:32
7 : unit : UNIT
8 : 1896747557 { 0x710e1225 +1.10992872e99 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 2147483647 ] -> true, [ 2147483648; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1498648159 ] -> 5, [ 1498648160; 1498648160 ] -> 5, [ 1498648161; 1498648161 ] -> 5, [ 1498648162; 1498648162 ] -> 5, [ 1498648163; 1498648163 ] -> 5, [ 1498648164; 1498648164 ] -> 228, [ 1498648165; 1498648165 ] -> 255, [ 1498648166; 1498648166 ] -> 255, [ 1498648167; 1498648167 ] -> 255, [ 1498648168; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35301 : BV:32
2 : 7 { 0x7 +1.83e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 3187671011 { 0xbdffffe3 -1107296285 -1.99999654e252 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 3187671039 { 0xbdffffff -1107296257 -1.99999988e252 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 3187671037 { 0xbdfffffd -1107296259 -1.99999964e252 } : BV:32
13 : eq(8, 12) : BOOL
14 : 3187671038 { 0xbdfffffe -1107296258 -1.99999976e252 } : BV:32
15 : eq(8, 14) : BOOL
16 : 3187671036 { 0xbdfffffc -1107296260 -1.99999952e252 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 3187671010 { 0xbdffffe2 -1107296286 -1.99999642e252 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 3187671009 { 0xbdffffe1 -1107296287 -1.99999630e252 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 3187671008 { 0xbdffffe0 -1107296288 -1.99999618e252 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1698051356 , 1000 , 8 ) -> 1498648160, () -> 382731704, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4516 : BV:32
7 : Lambda35347 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda35348 : BV:32
10 : 403728152 { 0x18106718 +1.12814617e177 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 325350580 { 0x136474b4 +1.78481149e167 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1498648160 { 0x59538e60 +1.65278244e51 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 1407551985 { 0x53e589f1 +1.79327213e40 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 8; 1498648159 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1498648160; 1498648167 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1498648168; 2147483647 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 2147483648; 2147483651 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 2147483652; 4294967267 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4294967268; 4294967275 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 4294967276; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 86300046 { 0x524d58e +1.28776717e139 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1498648159 ] -> 5, [ 1498648160; 1498648160 ] -> 5, [ 1498648161; 1498648161 ] -> 5, [ 1498648162; 1498648162 ] -> 5, [ 1498648163; 1498648163 ] -> 5, [ 1498648164; 1498648164 ] -> 228, [ 1498648165; 1498648165 ] -> 255, [ 1498648166; 1498648166 ] -> 255, [ 1498648167; 1498648167 ] -> 255, [ 1498648168; 3187671035 ] -> 5, [ 3187671036; 3187671039 ] -> 0, [ 3187671040; 4294967267 ] -> 5, [ 4294967268; 4294967275 ] -> 0, [ 4294967276; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 185168549 { 0xb0972a5 +1.7381117e151 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1498648160 { 0x59538e60 +1.65278244e51 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 2130131252 { 0x7ef73934 +1.93143320e126 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 2147483648 { 0x80000000 -2147483648 -1.0e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 2147483651 { 0x80000003 -2147483645 -1.35e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 223 , m_adder -> 129), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2675519584
=counter_example_end
=global nodece 92 num_edges_traversed 6
=global nodece 92 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 93
=global nodece 93 nodece z3v487.ce4578.num_edges_traversed1
=global nodece 93 nodece_path
=global nodece 93 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry)
=global nodece 93 nodece_cached_counterexample
=counter_example_begin z3v487.ce4578 e05cbf884eb0458b8ceb1cf06258dcb
=input.spec-%var-arr-1
1 : Lambda35437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35438 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35440 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35441 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%tmpvar-4.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-0.L3%7%d
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : sum(1, 2, 3) : SUM[UNIT,BV:32]
5 : sym_const(4) : SUM[UNIT,BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35422 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4528 : BV:32
4 : Lambda35444 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35445 : BV:32
7 : unit : UNIT
8 : 281221898 { 0x10c31b0a +1.52426266e162 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-1.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : Indxform4529 : BV:32
4 : Lambda35446 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35447 : BV:32
7 : unit : UNIT
8 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(1, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(2, 2, 1, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : prod(1, 12) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
14 : sym_const(13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%tmpvar-2.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4531 : BV:32
6 : Lambda35450 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35451 : BV:32
9 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%tmpvar-3.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35426 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.spec-%var-arr_i-0.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-new_l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4533 : BV:32
6 : Lambda35454 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35455 : BV:32
9 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4535 : BV:32
6 : Lambda35458 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35459 : BV:32
9 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1619460871 { 0x60870307 +1.5477988e66 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 1807307638 { 0x6bb95376 +1.44785952e88 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 722021258 { 0x2b092b8a +1.7164120e215 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1807307638 { 0x6bb95376 +1.44785952e88 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 964633825 { 0x397f24e1 +1.99331295e243 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 246824981 { 0xeb64015 +1.42383062e158 } : BV:32
=input.dst.llvm-%n.Lfor.body%2%d
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.dst.llvm-%arr.Lfor.body%2%d
1 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
=input.dst.llvm-mem.Lfor.body%2%d
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 137, [ 1032; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.body%2%d
1 : 964633825 { 0x397f24e1 +1.99331295e243 } : BV:32
=input.dst.llvm-%i.0.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.body%2%d
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-mem.alloc.Lfor.body%2%d
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.local_alloc_count.Lfor.body%2%d
1 : 722021258 { 0x2b092b8a +1.7164120e215 } : COUNT
=input.dst.llvm-%call.Lfor.body%2%d
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%2%d
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%5886e9cac8f92ed81c176d98bf7d1784.intermediate.gepoffset.2.offset.Lfor.cond%1%bbentry
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.llvm-%arrayidx.Lfor.cond%1%bbentry
1 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
=input.dst.llvm-%0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%1.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.1.total_offset.Lfor.cond%1%bbentry
1 : 32 { 0x20 +1.381e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%537c02a60f148c42acb992374da0f0.gepoffset.2.total_offset.Lfor.cond%1%bbentry
1 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.gepoffset.3.total_offset.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%b266369ba4ec8e93ac6eb6338c72c0.intermediate.gepoffset.1.offset.Lfor.cond%1%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.dst.llvm-%l.0.phi.tmpvar.for.inc.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-%inc.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%next.Lfor.cond%1%bbentry
1 : 1028 { 0x404 +1.12254e129 } : BV:32
=input.dst.llvm-%val.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
786369947
=counter_example_end
=global nodece 93 num_edges_traversed 1
=global nodece 93 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=global nodece 94
=global nodece 94 nodece z3v487.ce4613.num_edges_traversed2
=global nodece 94 nodece_path
=global nodece 94 nodece_path.graph_edge_composition
(epsilon)
=global nodece 94 nodece_cached_counterexample
=counter_example_begin z3v487.ce4613 d236ff1bbd32630f865429235c1124e
=input.spec-%var-arr-1
1 : Lambda35437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35438 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35440 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35441 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35422 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4528 : BV:32
4 : Lambda35444 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35445 : BV:32
7 : unit : UNIT
8 : 281221898 { 0x10c31b0a +1.52426266e162 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35426 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4535 : BV:32
6 : Lambda35458 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35459 : BV:32
9 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1619460871 { 0x60870307 +1.5477988e66 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 722021258 { 0x2b092b8a +1.7164120e215 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1807307638 { 0x6bb95376 +1.44785952e88 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 964633825 { 0x397f24e1 +1.99331295e243 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 246824981 { 0xeb64015 +1.42383062e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=counter_example.random_seed
786369947
=counter_example_end
=global nodece 94 num_edges_traversed 2
=global nodece 94 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallStart
=global nodece 95
=global nodece 95 nodece z3v487.ce4621.num_edges_traversed3
=global nodece 95 nodece_path
=global nodece 95 nodece_path.graph_edge_composition
(L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd)
=global nodece 95 nodece_cached_counterexample
=counter_example_begin z3v487.ce4621 3885fcc68a2e24831cae25a5ce83360
=nextpc_const.1
1 : 1074165093 { 0x40067565 +1.5045759e1 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35438 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35440 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35441 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35422 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4528 : BV:32
4 : Lambda35444 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35445 : BV:32
7 : unit : UNIT
8 : 281221898 { 0x10c31b0a +1.52426266e162 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35426 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 153 , m_adder -> 151), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1074165093 , 1000 , 8 ) -> 1955883412, () -> 398415268, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : 1 { 0x1 +1.0e1025 } : INT
5 : Indxform4535 : BV:32
6 : Lambda35458 : BV:32
7 : lambda(6, 6) : FUNCTION[BV:32 -> BV:32]
8 : Lambda35459 : BV:32
9 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
10 : prod(9, 5) : PROD[BV:32,BV:32]
11 : sum(3, 2, 10) : SUM[UNIT,PROD[BV:32,BV:32]]
12 : lambda(8, 11) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
13 : ind(4, 4, 3, 5, 7, 12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
14 : prod(3, 13) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
15 : sum(1, 2, 14) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
16 : sym_const(15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1619460871 { 0x60870307 +1.5477988e66 } : BV:32
=input.dst.llvm-%call.Lfor.body%1%fcallEnd
1 : 1955883412 { 0x74946994 +1.15947198e106 } : BV:32
=input.dst.llvm-%cmp.Lfor.cond%2%d
1 : 1 { 0x1 } : BOOL
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 722021258 { 0x2b092b8a +1.7164120e215 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1807307638 { 0x6bb95376 +1.44785952e88 } : BV:32
=input.dst.llvm-mem.Lfor.body%1%fcallEnd
1 : ([ 0; 1023 ] -> 5, [ 1024; 1024 ] -> 0, [ 1025; 1025 ] -> 0, [ 1026; 1026 ] -> 0, [ 1027; 1027 ] -> 0, [ 1028; 1028 ] -> 0, [ 1029; 1029 ] -> 0, [ 1030; 1030 ] -> 0, [ 1031; 1031 ] -> 0, [ 1032; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.dst.llvm-fcall_arg_copy.0.8.BV_32.Lfor.body%1%fcallEnd
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 964633825 { 0x397f24e1 +1.99331295e243 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 9 { 0x9 +1.107e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1024 { 0x400 +1.12207e129 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 246824981 { 0xeb64015 +1.42383062e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 153 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2845060159
=counter_example_end
=global nodece 95 num_edges_traversed 3
=global nodece 95 nodece_visted_pcs: 
L3%6%bbentry_Lfor.body%1%fcallEnd
=global nodece 96
=global nodece 96 nodece z3v487.ce4640.num_edges_traversed4
=global nodece 96 nodece_path
=global nodece 96 nodece_path.graph_edge_composition
(epsilon)
=global nodece 96 nodece_cached_counterexample
=counter_example_begin z3v487.ce4640 474f2337281799f40ea82155dd2d68
=nextpc_const.1
1 : 1074165093 { 0x40067565 +1.5045759e1 } : BV:32
=input.spec-%var-arr-1
1 : Lambda35437 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35438 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
21 : 4 { 0x4 +1.47e129 } : BV:32
22 : bvmul(21, 17) : BV:32
23 : bvadd(20, 22) : BV:32
24 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
25 : eq(23, 24) : BOOL
26 : 0 { 0x0 } : BV:8
27 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
28 : eq(23, 27) : BOOL
29 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
30 : eq(23, 29) : BOOL
31 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
32 : eq(23, 31) : BOOL
33 : 5 { 0x5 } : BV:8
34 : ite(32, 26, 33) : BV:8
35 : ite(30, 26, 34) : BV:8
36 : ite(28, 26, 35) : BV:8
37 : ite(25, 26, 36) : BV:8
38 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
39 : bvadd(38, 22) : BV:32
40 : eq(39, 24) : BOOL
41 : eq(39, 27) : BOOL
42 : eq(39, 29) : BOOL
43 : eq(39, 31) : BOOL
44 : ite(43, 26, 33) : BV:8
45 : ite(42, 26, 44) : BV:8
46 : ite(41, 26, 45) : BV:8
47 : ite(40, 26, 46) : BV:8
48 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
49 : bvadd(48, 22) : BV:32
50 : eq(49, 24) : BOOL
51 : eq(49, 27) : BOOL
52 : eq(49, 29) : BOOL
53 : eq(49, 31) : BOOL
54 : ite(53, 26, 33) : BV:8
55 : ite(52, 26, 54) : BV:8
56 : ite(51, 26, 55) : BV:8
57 : ite(50, 26, 56) : BV:8
58 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
59 : bvadd(58, 22) : BV:32
60 : eq(59, 24) : BOOL
61 : eq(59, 27) : BOOL
62 : eq(59, 29) : BOOL
63 : eq(59, 31) : BOOL
64 : ite(63, 26, 33) : BV:8
65 : ite(62, 26, 64) : BV:8
66 : ite(61, 26, 65) : BV:8
67 : ite(60, 26, 66) : BV:8
68 : bvconcat(37, 47, 57, 67) : BV:32
69 : ite(19, 2, 68) : BV:32
70 : lambda(17, 69) : FUNCTION[BV:32 -> BV:32]
71 : map(16, 70) : MAP[BV:32 -> BV:32]
72 : sym_const(71) : MAP[BV:32 -> BV:32]
=input.dst.llvm-%arr.Lfor.cond%1%bbentry
1 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
=input.spec-%var-arr-0.L3%6%bbentry
1 : Lambda35440 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : 32767 { 0x7fff +1.390613e129 } : BV:32
5 : bvule(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : 1 { 0x1 } : BOOL
8 : 32768 { 0x8000 +1.390625e129 } : BV:32
9 : bvule(8, 1) : BOOL
10 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
11 : bvule(1, 10) : BOOL
12 : and(9, 11) : BOOL
13 : 0 { 0x0 } : BOOL
14 : ite(12, 13, 13) : BOOL
15 : ite(6, 7, 14) : BOOL
16 : lambda(1, 15) : FUNCTION[BV:32 -> BOOL]
17 : Lambda35441 : BV:32
18 : 8 { 0x8 +1.95e129 } : BV:32
19 : eq(17, 18) : BOOL
20 : bvule(2, 17) : BOOL
21 : bvule(17, 4) : BOOL
22 : and(20, 21) : BOOL
23 : bvule(8, 17) : BOOL
24 : bvule(17, 10) : BOOL
25 : and(23, 24) : BOOL
26 : ite(25, 13, 13) : BOOL
27 : ite(22, 7, 26) : BOOL
28 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
29 : 4 { 0x4 +1.47e129 } : BV:32
30 : bvmul(29, 17) : BV:32
31 : bvadd(28, 30) : BV:32
32 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
33 : eq(31, 32) : BOOL
34 : 0 { 0x0 } : BV:8
35 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
36 : eq(31, 35) : BOOL
37 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
38 : eq(31, 37) : BOOL
39 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
40 : eq(31, 39) : BOOL
41 : 5 { 0x5 } : BV:8
42 : ite(40, 34, 41) : BV:8
43 : ite(38, 34, 42) : BV:8
44 : ite(36, 34, 43) : BV:8
45 : ite(33, 34, 44) : BV:8
46 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
47 : bvadd(46, 30) : BV:32
48 : eq(47, 32) : BOOL
49 : eq(47, 35) : BOOL
50 : eq(47, 37) : BOOL
51 : eq(47, 39) : BOOL
52 : ite(51, 34, 41) : BV:8
53 : ite(50, 34, 52) : BV:8
54 : ite(49, 34, 53) : BV:8
55 : ite(48, 34, 54) : BV:8
56 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
57 : bvadd(56, 30) : BV:32
58 : eq(57, 32) : BOOL
59 : eq(57, 35) : BOOL
60 : eq(57, 37) : BOOL
61 : eq(57, 39) : BOOL
62 : ite(61, 34, 41) : BV:8
63 : ite(60, 34, 62) : BV:8
64 : ite(59, 34, 63) : BV:8
65 : ite(58, 34, 64) : BV:8
66 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
67 : bvadd(66, 30) : BV:32
68 : eq(67, 32) : BOOL
69 : eq(67, 35) : BOOL
70 : eq(67, 37) : BOOL
71 : eq(67, 39) : BOOL
72 : ite(71, 34, 41) : BV:8
73 : ite(70, 34, 72) : BV:8
74 : ite(69, 34, 73) : BV:8
75 : ite(68, 34, 74) : BV:8
76 : bvconcat(45, 55, 65, 75) : BV:32
77 : ite(19, 2, 76) : BV:32
78 : ite(27, 77, 76) : BV:32
79 : ite(19, 2, 78) : BV:32
80 : lambda(17, 79) : FUNCTION[BV:32 -> BV:32]
81 : map(16, 80) : MAP[BV:32 -> BV:32]
82 : sym_const(81) : MAP[BV:32 -> BV:32]
=input.spec-%var-arr-0.L3%6%bbentry.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.spec-%var-arr-0.L3%6%bbentry.1.1
1 : Lambda35422 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : bvule(4, 1) : BOOL
6 : 32767 { 0x7fff +1.390613e129 } : BV:32
7 : bvule(1, 6) : BOOL
8 : and(5, 7) : BOOL
9 : 1 { 0x1 } : BOOL
10 : 32768 { 0x8000 +1.390625e129 } : BV:32
11 : bvule(10, 1) : BOOL
12 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
13 : bvule(1, 12) : BOOL
14 : and(11, 13) : BOOL
15 : 0 { 0x0 } : BOOL
16 : ite(14, 15, 15) : BOOL
17 : ite(8, 9, 16) : BOOL
18 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
19 : 4 { 0x4 +1.47e129 } : BV:32
20 : bvmul(19, 1) : BV:32
21 : bvadd(18, 20) : BV:32
22 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
23 : eq(21, 22) : BOOL
24 : 0 { 0x0 } : BV:8
25 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
26 : eq(21, 25) : BOOL
27 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
28 : eq(21, 27) : BOOL
29 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
30 : eq(21, 29) : BOOL
31 : 5 { 0x5 } : BV:8
32 : ite(30, 24, 31) : BV:8
33 : ite(28, 24, 32) : BV:8
34 : ite(26, 24, 33) : BV:8
35 : ite(23, 24, 34) : BV:8
36 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
37 : bvadd(36, 20) : BV:32
38 : eq(37, 22) : BOOL
39 : eq(37, 25) : BOOL
40 : eq(37, 27) : BOOL
41 : eq(37, 29) : BOOL
42 : ite(41, 24, 31) : BV:8
43 : ite(40, 24, 42) : BV:8
44 : ite(39, 24, 43) : BV:8
45 : ite(38, 24, 44) : BV:8
46 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
47 : bvadd(46, 20) : BV:32
48 : eq(47, 22) : BOOL
49 : eq(47, 25) : BOOL
50 : eq(47, 27) : BOOL
51 : eq(47, 29) : BOOL
52 : ite(51, 24, 31) : BV:8
53 : ite(50, 24, 52) : BV:8
54 : ite(49, 24, 53) : BV:8
55 : ite(48, 24, 54) : BV:8
56 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
57 : bvadd(56, 20) : BV:32
58 : eq(57, 22) : BOOL
59 : eq(57, 25) : BOOL
60 : eq(57, 27) : BOOL
61 : eq(57, 29) : BOOL
62 : ite(61, 24, 31) : BV:8
63 : ite(60, 24, 62) : BV:8
64 : ite(59, 24, 63) : BV:8
65 : ite(58, 24, 64) : BV:8
66 : bvconcat(35, 45, 55, 65) : BV:32
67 : ite(3, 4, 66) : BV:32
68 : ite(17, 67, 66) : BV:32
69 : ite(3, 4, 68) : BV:32
70 : lambda(1, 69) : FUNCTION[BV:32 -> BV:32]
71 : sym_const(70) : FUNCTION[BV:32 -> BV:32]
=input.spec-%tmpvar-9.L3%6%bbentry
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry
1 : 1 { 0x1 +1.0e1025 } : INT
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : Indxform4528 : BV:32
4 : Lambda35444 : BV:32
5 : lambda(4, 4) : FUNCTION[BV:32 -> BV:32]
6 : Lambda35445 : BV:32
7 : unit : UNIT
8 : 281221898 { 0x10c31b0a +1.52426266e162 } : BV:32
9 : prod(8, 3) : PROD[BV:32,BV:32]
10 : sum(2, 7, 9) : SUM[UNIT,PROD[BV:32,BV:32]]
11 : lambda(6, 10) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
12 : ind(1, 1, 2, 3, 5, 11) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
13 : sym_const(12) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.spec-%var-arr-1.0.1
1 : ([ 0; 32767 ] -> true, [ 32768; 4294967295 ] -> false, ) : FUNCTION[BV:32 -> BOOL]
=input.dst.llvm-mem.Lfor.cond%1%bbentry
1 : ([ 0; 1023 ] -> 5, [ 1024; 1031 ] -> 0, [ 1032; 1955883411 ] -> 5, [ 1955883412; 1955883412 ] -> 5, [ 1955883413; 1955883413 ] -> 5, [ 1955883414; 1955883414 ] -> 5, [ 1955883415; 1955883415 ] -> 5, [ 1955883416; 1955883416 ] -> 0, [ 1955883417; 1955883417 ] -> 4, [ 1955883418; 1955883418 ] -> 0, [ 1955883419; 1955883419 ] -> 0, [ 1955883420; 4294945795 ] -> 5, [ 4294945796; 4294945799 ] -> 0, [ 4294945800; 4294967295 ] -> 5, ) : ARRAY[BV:32 -> BV:8]
=input.spec-%var-arr-1.1.1
1 : Lambda35426 : BV:32
2 : 8 { 0x8 +1.95e129 } : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 4294945767 { 0xffffabe7 -21529 -1.99743354e128 } : BV:32
6 : 4 { 0x4 +1.47e129 } : BV:32
7 : bvmul(6, 1) : BV:32
8 : bvadd(5, 7) : BV:32
9 : 4294945799 { 0xffffac07 -21497 -1.99743735e128 } : BV:32
10 : eq(8, 9) : BOOL
11 : 0 { 0x0 } : BV:8
12 : 4294945797 { 0xffffac05 -21499 -1.99743711e128 } : BV:32
13 : eq(8, 12) : BOOL
14 : 4294945798 { 0xffffac06 -21498 -1.99743723e128 } : BV:32
15 : eq(8, 14) : BOOL
16 : 4294945796 { 0xffffac04 -21500 -1.99743700e128 } : BV:32
17 : eq(8, 16) : BOOL
18 : 5 { 0x5 } : BV:8
19 : ite(17, 11, 18) : BV:8
20 : ite(15, 11, 19) : BV:8
21 : ite(13, 11, 20) : BV:8
22 : ite(10, 11, 21) : BV:8
23 : 4294945766 { 0xffffabe6 -21530 -1.99743342e128 } : BV:32
24 : bvadd(23, 7) : BV:32
25 : eq(24, 9) : BOOL
26 : eq(24, 12) : BOOL
27 : eq(24, 14) : BOOL
28 : eq(24, 16) : BOOL
29 : ite(28, 11, 18) : BV:8
30 : ite(27, 11, 29) : BV:8
31 : ite(26, 11, 30) : BV:8
32 : ite(25, 11, 31) : BV:8
33 : 4294945765 { 0xffffabe5 -21531 -1.99743330e128 } : BV:32
34 : bvadd(33, 7) : BV:32
35 : eq(34, 9) : BOOL
36 : eq(34, 12) : BOOL
37 : eq(34, 14) : BOOL
38 : eq(34, 16) : BOOL
39 : ite(38, 11, 18) : BV:8
40 : ite(37, 11, 39) : BV:8
41 : ite(36, 11, 40) : BV:8
42 : ite(35, 11, 41) : BV:8
43 : 4294945764 { 0xffffabe4 -21532 -1.99743318e128 } : BV:32
44 : bvadd(43, 7) : BV:32
45 : eq(44, 9) : BOOL
46 : eq(44, 12) : BOOL
47 : eq(44, 14) : BOOL
48 : eq(44, 16) : BOOL
49 : ite(48, 11, 18) : BV:8
50 : ite(47, 11, 49) : BV:8
51 : ite(46, 11, 50) : BV:8
52 : ite(45, 11, 51) : BV:8
53 : bvconcat(22, 32, 42, 52) : BV:32
54 : ite(3, 4, 53) : BV:32
55 : lambda(1, 54) : FUNCTION[BV:32 -> BV:32]
56 : sym_const(55) : FUNCTION[BV:32 -> BV:32]
=input.dst.local./*___y___make_list__x__=L0%0%argnum0=/
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.local./*___y___make_list__x__=L0%0%argnum1=/
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.llvm-%n.Lfor.cond%1%bbentry
1 : 32768 { 0x8000 +1.390625e129 } : BV:32
=input.spec-%var-i-0.L3%6%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=func.calla4bcb626de6152719ca44f8b649b9c4a.reg
1 : (( memlabel-mem--dummy , memlabel-mem--dummy , ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 153 , m_adder -> 151), ) , ([ 0; 4294967295 ] -> memlabel-mem--dummy, ) , 1074165093 , 1000 , 8 ) -> 1955883412, () -> 398415268, ) : FUNCTION[MEMLABEL,MEMLABEL,ARRAY[BV:32 -> BV:8],ARRAY[BV:32 -> MEMLABEL],BV:32,REGID,BV:32 -> BV:32]
=input.spec-%var-l-0.L3%6%bbentry
1 : 1 { 0x1 +1.11e129 } : BV:32
2 : unit : UNIT
3 : 84215045 { 0x5050505 +1.3921568e139 } : BV:32
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : 1 { 0x1 +1.0e1025 } : INT
6 : Indxform4542 : BV:32
7 : Lambda35472 : BV:32
8 : lambda(7, 7) : FUNCTION[BV:32 -> BV:32]
9 : Lambda35473 : BV:32
10 : 185944581 { 0xb154a05 +1.16632139e151 } : BV:32
11 : prod(10, 6) : PROD[BV:32,BV:32]
12 : sum(4, 2, 11) : SUM[UNIT,PROD[BV:32,BV:32]]
13 : lambda(9, 12) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
14 : ind(5, 5, 4, 6, 8, 13) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
15 : prod(4, 14) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
16 : sum(1, 2, 15) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
17 : prod(3, 16) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
18 : sum(1, 2, 17) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
19 : sym_const(18) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=input.src.spec-ghostvar.itervar.1.L3%6%bbentry
1 : 1619460872 { 0x60870308 +1.5478000e66 } : BV:32
=input.dst.local_alloc_count.Lfor.cond%1%bbentry
1 : 722021259 { 0x2b092b8b +1.7164132e215 } : COUNT
=input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry
1 : ([ 0; 3 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 4; 7 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/, [ 8; 11 ] -> memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/, [ 12; 1023 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1024; 1031 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1032; 1955883411 ] -> memlabel-mem-may-straddle-symbol.1-heap, [ 1955883412; 1955883419 ] -> memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/, [ 1955883420; 4294967295 ] -> memlabel-mem-may-straddle-symbol.1-heap, ) : ARRAY[BV:32 -> MEMLABEL]
=input.dst.llvm-%l.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 1807307638 { 0x6bb95376 +1.44785952e88 } : BV:32
=input.dst.llvm-%i.0.phi.tmpvar.entry.Lfor.cond%1%bbentry
1 : 964633825 { 0x397f24e1 +1.99331295e243 } : BV:32
=input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1 : 10 { 0xa +1.119e129 } : BV:32
=input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1 : 1955883412 { 0x74946994 +1.15947198e106 } : BV:32
=input.dst.llvm-ghostvar.itervar.1.Lfor.cond%1%bbentry
1 : 246824982 { 0xeb64016 +1.42383074e158 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin
1 : 8 { 0x8 +1.95e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end
1 : 11 { 0xb +1.131e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin
1 : 4 { 0x4 +1.47e129 } : BV:32
=input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end
1 : 7 { 0x7 +1.83e129 } : BV:32
=input.spec-%tmpvar-10.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=input.spec-%var-l-0.L3%6%bbentry.0
1 : 0 { 0x0 +1.0e129 } : BV:32
=memzero_memvar
1 : ({ [ 0; 4294967295 ], } -> (RAC: m_multiplier -> 153 , m_adder -> 151), ) : ARRAY[BV:32 -> BV:8]
=counter_example.random_seed
2845060159
=counter_example_end
=global nodece 96 num_edges_traversed 4
=global nodece 96 nodece_visted_pcs: 
L3%6%bbentry_Lfor.cond%1%bbentry
=graph_with_ce done
=point_set for reason inductive-invariants
=inductive-invariants point_set global exprs map
=inductive-invariants point_set point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=inductive-invariants point_set point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=inductive-invariants point_set point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=inductive-invariants point_set point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=inductive-invariants point_set point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=inductive-invariants point_set point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=inductive-invariants point_set point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=inductive-invariants point_set point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=inductive-invariants point_set point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 33
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=inductive-invariants point_set point_expr 34
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=inductive-invariants point_set point_expr 35
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 36
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 37
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 41
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=inductive-invariants point_set point_expr 42
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 43
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 44
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 45
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 46
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 47
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 48
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 49
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 50
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 54
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=inductive-invariants point_set point_expr 55
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 56
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 57
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 58
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 59
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 60
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=inductive-invariants point_set point_expr 61
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 62
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 63
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 64
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=inductive-invariants point_set point_expr 65
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 66
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 67
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=inductive-invariants point_set point_expr 68
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 69
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=inductive-invariants point_set point_expr 70
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 71
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 72
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 73
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=inductive-invariants point_set point_expr 74
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=inductive-invariants point_set point_expr 75
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 76
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 77
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 78
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 80
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 81
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 82
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 83
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 84
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 90
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 91
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 92
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 93
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 94
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=inductive-invariants point_set point_expr 95
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 96
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 97
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=inductive-invariants point_set point_expr 98
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set point_expr 99
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=inductive-invariants point_set global exprs map done
=inductive-invariants point_set points
=inductive-invariants point_set point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce76 expr point z3v487.ce76 done
=inductive-invariants point_set point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294966336
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967041
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce75 expr point z3.ce75 done
=inductive-invariants point_set point z3v487.ce20
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce20 expr point z3v487.ce20 done
=inductive-invariants point_set point z3.ce19
=inductive-invariants point_set point z3.ce19 expr point z3.ce19
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce19 expr point z3.ce19 done
=inductive-invariants point_set point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce48 expr point z3v487.ce48 done
=inductive-invariants point_set point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8845000
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce47 expr point z3.ce47 done
=inductive-invariants point_set point z3v487.ce103
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce103 expr point z3v487.ce103 done
=inductive-invariants point_set point z3.ce104
=inductive-invariants point_set point z3.ce104 expr point z3.ce104
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2884599568
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce104 expr point z3.ce104 done
=inductive-invariants point_set point z3v487.ce132
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
67372036
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce132 expr point z3v487.ce132 done
=inductive-invariants point_set point z3.ce131
=inductive-invariants point_set point z3.ce131 expr point z3.ce131
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1542647300
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4060214002
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce131 expr point z3.ce131 done
=inductive-invariants point_set point z3v487.ce160
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294967040
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce160 expr point z3v487.ce160 done
=inductive-invariants point_set point z3.ce159
=inductive-invariants point_set point z3.ce159 expr point z3.ce159
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3757570048
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce159 expr point z3.ce159 done
=inductive-invariants point_set point z3.ce187
=inductive-invariants point_set point z3.ce187 expr point z3.ce187
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
297838144
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
176510465
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce187 expr point z3.ce187 done
=inductive-invariants point_set point z3v487.ce188
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce188 expr point z3v487.ce188 done
=inductive-invariants point_set point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
276857440
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
129
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce216 expr point z3v487.ce216 done
=inductive-invariants point_set point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3780798120
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce215 expr point z3.ce215 done
=inductive-invariants point_set point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3203489720
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce243 expr point z3.ce243 done
=inductive-invariants point_set point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
276857440
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
129
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce244 expr point z3v487.ce244 done
=inductive-invariants point_set point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce288 expr point z3v487.ce288 done
=inductive-invariants point_set point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce287 expr point z3.ce287 done
=inductive-invariants point_set point z3v487.ce316
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce316 expr point z3v487.ce316 done
=inductive-invariants point_set point z3.ce315
=inductive-invariants point_set point z3.ce315 expr point z3.ce315
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289186944
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65541
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce315 expr point z3.ce315 done
=inductive-invariants point_set point z3v487.ce343
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce343 expr point z3v487.ce343 done
=inductive-invariants point_set point z3.ce344
=inductive-invariants point_set point z3.ce344 expr point z3.ce344
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2479384256
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce344 expr point z3.ce344 done
=inductive-invariants point_set point z3.ce379
=inductive-invariants point_set point z3.ce379 expr point z3.ce379
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
289186944
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65541
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce379 expr point z3.ce379 done
=inductive-invariants point_set point z3v487.ce380
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1207961600
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce380 expr point z3v487.ce380 done
=inductive-invariants point_set point z3.ce2398
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8845000
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
639099466
=inductive-invariants point_set point z3.ce2398 expr point z3.ce2398 done
=inductive-invariants point_set point z3v487.ce1107
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1107 expr point z3v487.ce1107 done
=inductive-invariants point_set point z3.ce1113
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1113 expr point z3.ce1113 done
=inductive-invariants point_set point z3.ce1532
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1532 expr point z3.ce1532 done
=inductive-invariants point_set point z3v487.ce1533
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1533 expr point z3v487.ce1533 done
=inductive-invariants point_set point z3.ce1560
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1560 expr point z3.ce1560 done
=inductive-invariants point_set point z3v487.ce1561
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1561 expr point z3v487.ce1561 done
=inductive-invariants point_set point z3.ce1588
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1588 expr point z3.ce1588 done
=inductive-invariants point_set point z3v487.ce1589
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1589 expr point z3v487.ce1589 done
=inductive-invariants point_set point z3.ce1617
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1617 expr point z3.ce1617 done
=inductive-invariants point_set point z3v487.ce1616
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1616 expr point z3v487.ce1616 done
=inductive-invariants point_set point z3.ce1644
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1644 expr point z3.ce1644 done
=inductive-invariants point_set point z3v487.ce1645
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1645 expr point z3v487.ce1645 done
=inductive-invariants point_set point z3.ce3619
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1542647300
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1930142540
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4060214002
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce3619 expr point z3.ce3619 done
=inductive-invariants point_set point z3v487.ce3855
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1065885100
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
957883078
=inductive-invariants point_set point z3v487.ce3855 expr point z3v487.ce3855 done
=inductive-invariants point_set point z3.ce1697
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
60228676
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65536
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1697 expr point z3.ce1697 done
=inductive-invariants point_set point z3v487.ce1696
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
268633120
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1696 expr point z3v487.ce1696 done
=inductive-invariants point_set point z3v487.ce1725
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
607658784
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1725 expr point z3v487.ce1725 done
=inductive-invariants point_set point z3.ce1724
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2706123936
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1724 expr point z3.ce1724 done
=inductive-invariants point_set point z3v487.ce3974
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2215023760
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
33554944
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1578751489
=inductive-invariants point_set point z3v487.ce3974 expr point z3v487.ce3974 done
=inductive-invariants point_set point z3v487.ce1752
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3288576520
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
262144
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1752 expr point z3v487.ce1752 done
=inductive-invariants point_set point z3.ce1753
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1333940304
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1753 expr point z3.ce1753 done
=inductive-invariants point_set point z3v487.ce1781
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
377757744
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1781 expr point z3v487.ce1781 done
=inductive-invariants point_set point z3.ce1780
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2189468576
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1780 expr point z3.ce1780 done
=inductive-invariants point_set point z3v487.ce1832
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
336347392
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1832 expr point z3v487.ce1832 done
=inductive-invariants point_set point z3.ce1833
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
723536232
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134217728
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1833 expr point z3.ce1833 done
=inductive-invariants point_set point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1860 expr point z3.ce1860 done
=inductive-invariants point_set point z3v487.ce1861
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1861 expr point z3v487.ce1861 done
=inductive-invariants point_set point z3.ce1897
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
33554432
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1897 expr point z3.ce1897 done
=inductive-invariants point_set point z3v487.ce1896
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2097152
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1896 expr point z3v487.ce1896 done
=inductive-invariants point_set point z3v487.ce1925
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1925 expr point z3v487.ce1925 done
=inductive-invariants point_set point z3.ce1924
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1924 expr point z3.ce1924 done
=inductive-invariants point_set point z3v487.ce1961
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
402657344
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce1961 expr point z3v487.ce1961 done
=inductive-invariants point_set point z3.ce1960
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4085465104
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce1960 expr point z3.ce1960 done
=inductive-invariants point_set point z3v487.ce2013
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2013 expr point z3v487.ce2013 done
=inductive-invariants point_set point z3.ce2012
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
256
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2012 expr point z3.ce2012 done
=inductive-invariants point_set point z3.ce2121
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3.ce2121 expr point z3.ce2121 done
=inductive-invariants point_set point z3v487.ce2120
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
512
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce2120 expr point z3v487.ce2120 done
=inductive-invariants point_set point z3.ce2318
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
536870912
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
297424219
=inductive-invariants point_set point z3.ce2318 expr point z3.ce2318 done
=inductive-invariants point_set point z3v487.ce2323
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1742806239
=inductive-invariants point_set point z3v487.ce2323 expr point z3v487.ce2323 done
=inductive-invariants point_set point z3.ce2373
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3757570048
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967295
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
69998110
=inductive-invariants point_set point z3.ce2373 expr point z3.ce2373 done
=inductive-invariants point_set point z3.ce2378
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1542647300
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4060214002
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1930142540
=inductive-invariants point_set point z3.ce2378 expr point z3.ce2378 done
=inductive-invariants point_set point z3v487.ce2383
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2057953528
=inductive-invariants point_set point z3v487.ce2383 expr point z3v487.ce2383 done
=inductive-invariants point_set point z3v487.ce2388
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
538976288
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1448266853
=inductive-invariants point_set point z3v487.ce2388 expr point z3v487.ce2388 done
=inductive-invariants point_set point z3.ce2393
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294966336
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4294967041
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1356156122
=inductive-invariants point_set point z3.ce2393 expr point z3.ce2393 done
=inductive-invariants point_set point z3.ce2403
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3975937792
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
285212671
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
44611973
=inductive-invariants point_set point z3.ce2403 expr point z3.ce2403 done
=inductive-invariants point_set point z3.ce2883
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
481474290
=inductive-invariants point_set point z3.ce2883 expr point z3.ce2883 done
=inductive-invariants point_set point z3v487.ce2884
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1741223619
=inductive-invariants point_set point z3v487.ce2884 expr point z3v487.ce2884 done
=inductive-invariants point_set point z3.ce2910
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1408891659
=inductive-invariants point_set point z3.ce2910 expr point z3.ce2910 done
=inductive-invariants point_set point z3v487.ce2909
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
650213103
=inductive-invariants point_set point z3v487.ce2909 expr point z3v487.ce2909 done
=inductive-invariants point_set point z3v487.ce2933
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2415920528
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2147483650
=inductive-invariants point_set point z3v487.ce2933 expr point z3v487.ce2933 done
=inductive-invariants point_set point z3v487.ce2948
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
0
=inductive-invariants point_set point z3v487.ce2948 expr point z3v487.ce2948 done
=inductive-invariants point_set point z3.ce2949
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2097152
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
0
=inductive-invariants point_set point z3.ce2949 expr point z3.ce2949 done
=inductive-invariants point_set point z3v487.ce2980
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
411058272
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2147483649
=inductive-invariants point_set point z3v487.ce2980 expr point z3v487.ce2980 done
=inductive-invariants point_set point z3.ce2996
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
838112003
=inductive-invariants point_set point z3.ce2996 expr point z3.ce2996 done
=inductive-invariants point_set point z3v487.ce2995
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1464270204
=inductive-invariants point_set point z3v487.ce2995 expr point z3v487.ce2995 done
=inductive-invariants point_set point z3v487.ce3037
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
37748748
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1690127003
=inductive-invariants point_set point z3v487.ce3037 expr point z3v487.ce3037 done
=inductive-invariants point_set point z3.ce3038
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2164458928
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2097152
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
862836532
=inductive-invariants point_set point z3.ce3038 expr point z3.ce3038 done
=inductive-invariants point_set point z3v487.ce3064
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
269485328
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
2066431213
=inductive-invariants point_set point z3v487.ce3064 expr point z3v487.ce3064 done
=inductive-invariants point_set point z3.ce3063
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3019985068
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
131072
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
948166294
=inductive-invariants point_set point z3.ce3063 expr point z3.ce3063 done
=inductive-invariants point_set point z3v487.ce3089
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
273219592
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1729772412
=inductive-invariants point_set point z3v487.ce3089 expr point z3v487.ce3089 done
=inductive-invariants point_set point z3.ce3090
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2223000872
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
610817829
=inductive-invariants point_set point z3.ce3090 expr point z3.ce3090 done
=inductive-invariants point_set point z3v487.ce3115
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2425571416
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
4096
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
969388195
=inductive-invariants point_set point z3v487.ce3115 expr point z3v487.ce3115 done
=inductive-invariants point_set point z3.ce3116
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2147618992
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1955403147
=inductive-invariants point_set point z3.ce3116 expr point z3.ce3116 done
=inductive-invariants point_set point z3v487.ce3150
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
34605824
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1487357508
=inductive-invariants point_set point z3v487.ce3150 expr point z3v487.ce3150 done
=inductive-invariants point_set point z3.ce3149
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1672544536
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
115590009
=inductive-invariants point_set point z3.ce3149 expr point z3.ce3149 done
=inductive-invariants point_set point z3v487.ce3175
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
404203530
=inductive-invariants point_set point z3v487.ce3175 expr point z3v487.ce3175 done
=inductive-invariants point_set point z3.ce3176
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
733572407
=inductive-invariants point_set point z3.ce3176 expr point z3.ce3176 done
=inductive-invariants point_set point z3v487.ce3318
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
183095497
=inductive-invariants point_set point z3v487.ce3318 expr point z3v487.ce3318 done
=inductive-invariants point_set point z3.ce3317
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
65536
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
327781760
=inductive-invariants point_set point z3.ce3317 expr point z3.ce3317 done
=inductive-invariants point_set point z3.ce3408
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
152332888
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
875125492
=inductive-invariants point_set point z3.ce3408 expr point z3.ce3408 done
=inductive-invariants point_set point z3v487.ce3407
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2299796240
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8388608
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1948475710
=inductive-invariants point_set point z3v487.ce3407 expr point z3v487.ce3407 done
=inductive-invariants point_set point z3.ce3433
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
268435456
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
500377006
=inductive-invariants point_set point z3.ce3433 expr point z3.ce3433 done
=inductive-invariants point_set point z3v487.ce3434
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 2 for input.spec-%var-i-0.L3%6%bbentry
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
16777216
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1603968613
=inductive-invariants point_set point z3v487.ce3434 expr point z3v487.ce3434 done
=inductive-invariants point_set point z3v487.ce3578
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2057953528
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
134744072
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce3578 expr point z3v487.ce3578 done
=inductive-invariants point_set point z3v487.ce3812
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1065885100
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3812 expr point z3v487.ce3812 done
=inductive-invariants point_set point z3.ce3871
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3495839268
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4281769984
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3871 expr point z3.ce3871 done
=inductive-invariants point_set point z3.ce3914
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3495839268
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4281769984
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
64
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
456297525
=inductive-invariants point_set point z3.ce3914 expr point z3.ce3914 done
=inductive-invariants point_set point z3v487.ce3931
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2215023760
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
33554944
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3931 expr point z3v487.ce3931 done
=inductive-invariants point_set point z3v487.ce3990
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
83920736
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
33423616
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce3990 expr point z3v487.ce3990 done
=inductive-invariants point_set point z3v487.ce4033
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
83920736
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
33423616
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1637144181
=inductive-invariants point_set point z3v487.ce4033 expr point z3v487.ce4033 done
=inductive-invariants point_set point z3v487.ce4049
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3292621304
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4049 expr point z3v487.ce4049 done
=inductive-invariants point_set point z3v487.ce4092
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3292621304
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
128
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1660988401
=inductive-invariants point_set point z3v487.ce4092 expr point z3v487.ce4092 done
=inductive-invariants point_set point z3v487.ce4108
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1126498824
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1048576
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4108 expr point z3v487.ce4108 done
=inductive-invariants point_set point z3v487.ce4151
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1126498824
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
16
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1048576
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1240402325
=inductive-invariants point_set point z3v487.ce4151 expr point z3v487.ce4151 done
=inductive-invariants point_set point z3v487.ce4211
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1677870528
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
939524100
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
130625073
=inductive-invariants point_set point z3v487.ce4211 expr point z3v487.ce4211 done
=inductive-invariants point_set point z3v487.ce4168
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 2 for input.spec-%var-i-0.L3%6%bbentry
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
1677870528
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
939524100
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4168 expr point z3v487.ce4168 done
=inductive-invariants point_set point z3v487.ce4315
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2667577340
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1048576
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1716570965
=inductive-invariants point_set point z3v487.ce4315 expr point z3v487.ce4315 done
=inductive-invariants point_set point z3v487.ce4272
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 2 for input.spec-%var-i-0.L3%6%bbentry
2
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
2667577340
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
2
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1048576
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4272 expr point z3v487.ce4272 done
=inductive-invariants point_set point z3v487.ce4375
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4137566200
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1179664
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1843479129
=inductive-invariants point_set point z3v487.ce4375 expr point z3v487.ce4375 done
=inductive-invariants point_set point z3v487.ce4332
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 2 for input.spec-%var-i-0.L3%6%bbentry
4
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4137566200
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
4
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1179664
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4332 expr point z3v487.ce4332 done
=inductive-invariants point_set point z3.ce4436
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
133091268
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3536535556
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
996728965
=inductive-invariants point_set point z3.ce4436 expr point z3.ce4436 done
=inductive-invariants point_set point z3.ce4392
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
133091268
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
3536535556
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3.ce4392 expr point z3.ce4392 done
=inductive-invariants point_set point z3v487.ce4393
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 2 for input.spec-%var-i-0.L3%6%bbentry
5
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3793227768
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
5
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
537919488
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
1073741824
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4393 expr point z3v487.ce4393 done
=inductive-invariants point_set point z3v487.ce4519
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3187671008
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967268
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1498648160
=inductive-invariants point_set point z3v487.ce4519 expr point z3v487.ce4519 done
=inductive-invariants point_set point z3v487.ce4476
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 2 for input.spec-%var-i-0.L3%6%bbentry
8
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3187671008
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
8
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
4294967268
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4476 expr point z3v487.ce4476 done
=inductive-invariants point_set point z3v487.ce4558
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
3187671008
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1498648160
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
2147483648
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4558 expr point z3v487.ce4558 done
=inductive-invariants point_set point z3v487.ce4621
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294945764
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 val 54 for input.dst.llvm-%call.Lfor.body%1%fcallEnd
1955883412
=inductive-invariants point_set point z3v487.ce4621 expr point z3v487.ce4621 done
=inductive-invariants point_set point z3v487.ce4578
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 2 for input.spec-%var-i-0.L3%6%bbentry
9
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294945764
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
9
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1024
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4578 expr point z3v487.ce4578 done
=inductive-invariants point_set point z3v487.ce4660
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 1 for and(and(and(and(and(and(bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin, bvadd(4, 4294967295)))), bvule(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end)), eq(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end, bvadd(input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin, bvadd(4, 4294967295)))), and(eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, 3), 0), eq(bvand(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, 3), 0))), and(eq(input.dst.local./*___y___make_list__x__=L0%0%argnum1=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin), eq(input.dst.local./*___y___make_list__x__=L0%0%argnum0=/, input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin))), region_agrees_with_memlabel(input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry, 0, 1, memlabel-mem-may-straddle-symbol.1-heap))
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 2 for input.spec-%var-i-0.L3%6%bbentry
10
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 3 for input.dst.llvm-%arr.Lfor.cond%1%bbentry
4294945764
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 4 for input.dst.llvm-%i.0.Lfor.cond%1%bbentry
10
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 5 for input.dst.llvm-%l.0.Lfor.cond%1%bbentry
1955883412
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 6 for input.dst.llvm-%n.Lfor.cond%1%bbentry
32768
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 7 for bvslt(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 8 for bvult(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 9 for bvslt(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 10 for bvult(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 11 for bvsle(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 12 for bvule(input.dst.llvm-%i.0.Lfor.cond%1%bbentry, input.dst.llvm-%n.Lfor.cond%1%bbentry)
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 13 for bvsle(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 14 for bvule(input.dst.llvm-%n.Lfor.cond%1%bbentry, input.dst.llvm-%i.0.Lfor.cond%1%bbentry)
0
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 val 33 for input.dst.llvm-%cmp.Lfor.cond%2%d
1
=inductive-invariants point_set point z3v487.ce4660 expr point z3v487.ce4660 done
=inductive-invariants point_set points done
=out-of-bound-exprs for reason inductive-invariants
=out-of-bound-exprs for reason inductive-invariants at L0%0%d_L0%0%d

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallStart

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.body%1%fcallEnd

=out-of-bound-exprs for reason inductive-invariants at L3%6%bbentry_Lfor.cond%1%bbentry

=out-of-bound-exprs for reason inductive-invariants at E0%0%d_E0%0%d

=graph_with_points done
=Invariant state at node L0%0%d_L0%0%d for reason inductive-invariants
=pc L0%0%d_L0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.description

=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond.expr is null
=pc L0%0%d_L0%0%d inductive-invariants invariant_state failcond done
=pc L0%0%d_L0%0%d inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallStart for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv point_expr 33
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-32-free_var_idx.33
=LhsExpr
1 : 1 { 0x1 +1.11e129 } : BV:32
=RhsExpr
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
2 : bool_to_bv(1) : BV:1
3 : 31 { 0x1f +1.0e1025 } : INT
4 : bvzero_ext(2, 3) : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv pred 3
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce1107
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3.ce1532
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce1560
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce1561
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce1588
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce1589
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce3619
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3578
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=9; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 33->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 33->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 33->0; 
33
-2147483648->4294967295; 2->0; 3->0; 4->0; 5->0; 6->0; 33->1; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3578
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce4558
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3578
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce4558
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=3; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3v487.ce1107
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce1532
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3v487.ce1616
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ce 4: z3.ce1644
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=5; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3v487.ce1616
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 38 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 34
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 35
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 36
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 37
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 38
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 39
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 40
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 41
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 42
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 43
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 44
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 45
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 46
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 47
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 48
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 49
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 50
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 51
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 52
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 53
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce1113
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=38; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallStart inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.body%1%fcallEnd for reason inductive-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 6 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv point_expr 54
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear2-32-free_var_idx.4
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3.ce2398
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3v487.ce3855
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce3974
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce2378
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce2383
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3v487.ce2388
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3.ce2393
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3.ce3914
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3v487.ce4033
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3v487.ce4092
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce4151
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce4211
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=6; number of visited CEs=13; number of preds=3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 54->0; 
4
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 54->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 54->0; 
matrix done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3v487.ce3855
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce4315
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce4375
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce4436
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce4519
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce4621
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3v487.ce3855
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce4315
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce4375
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce4436
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce4519
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce4621
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry.lb-unsigned
=LhsExpr
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.11e129 } : BV:32
3 : bvuge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce2373
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3.ce2393
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce2883
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=1
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 1
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 1
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini pred 1
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce2393
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=2; number of preds=2
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 47 exprs
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 55
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 56
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 57
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 58
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 59
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 60
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 61
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 62
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 63
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 64
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 65
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 66
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 67
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : eq(1, 22) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 68
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 69
1 : input.spec-%tmpvar-0.L3%7%d : SUM[UNIT,BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : input.spec-%var-i-0.L3%6%bbentry : BV:32
23 : map_get(21, 22) : SUM[UNIT,BV:32]
24 : eq(1, 23) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 70
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 71
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 72
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 73
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : sum_get(21, 22) : BV:32
27 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(27, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(25, 26, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : eq(24, 31) : BOOL
33 : and(23, 32) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 74
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-1.L3%6%bbentry : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(22, 23) : BV:32
28 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(28, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(26, 27, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : eq(25, 32) : BOOL
34 : and(24, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 75
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 76
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 77
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 78
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 79
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%tmpvar-2.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 80
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 81
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 82
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 83
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 84
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 85
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 86
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 87
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 88
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 89
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-new_l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 90
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 91
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 92
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 93
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 94
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 95
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 96
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 97
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : bvadd(13, 4) : BV:32
15 : 4 { 0x4 +1.0e1025 } : INT
16 : 0 { 0x0 } : BOOL
17 : select(9, 10, 11, 14, 15, 16) : BV:32
18 : lambda(8, 17) : FUNCTION[BV:32 -> BV:32]
19 : map(7, 18) : MAP[BV:32 -> BV:32]
20 : input.spec-%var-i-0.L3%6%bbentry : BV:32
21 : map_get(19, 20) : SUM[UNIT,BV:32]
22 : 1 { 0x1 +1.0e1025 } : INT
23 : sum_is(21, 22) : BOOL
24 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
25 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
27 : sum_get(21, 22) : BV:32
28 : 0 { 0x0 +1.0e1025 } : INT
29 : unit : UNIT
30 : sum_init(25, 28, 29) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
31 : prod_init(26, 27, 30) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
32 : sum_init(25, 22, 31) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
33 : eq(24, 32) : BOOL
34 : and(23, 33) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 98
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 99
1 : Lambda0 : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvule(2, 1) : BOOL
4 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
5 : bvult(1, 4) : BOOL
6 : and(3, 5) : BOOL
7 : lambda(1, 6) : FUNCTION[BV:32 -> BOOL]
8 : Lambda1 : BV:32
9 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
10 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
11 : memlabel-top : MEMLABEL
12 : 4 { 0x4 +1.47e129 } : BV:32
13 : bvmul(8, 12) : BV:32
14 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
15 : bvadd(13, 14) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(9, 10, 11, 15, 16, 17) : BV:32
19 : lambda(8, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(7, 19) : MAP[BV:32 -> BV:32]
21 : input.spec-%var-i-0.L3%6%bbentry : BV:32
22 : map_get(20, 21) : SUM[UNIT,BV:32]
23 : 1 { 0x1 +1.0e1025 } : INT
24 : sum_is(22, 23) : BOOL
25 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
27 : SORT2EXPR.VAR : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
28 : sum_get(22, 23) : BV:32
29 : 0 { 0x0 +1.0e1025 } : INT
30 : unit : UNIT
31 : sum_init(26, 29, 30) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
32 : prod_init(27, 28, 31) : IND[Type0,PROD[BV:32,SUM[UNIT,DECL[Type0]]]]
33 : sum_init(26, 23, 32) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
34 : eq(25, 33) : BOOL
35 : and(24, 34) : BOOL
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.body%1%fcallEnd : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce2403
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=47; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.body%1%fcallEnd inductive-invariants invariant_state done
=Invariant state at node L3%6%bbentry_Lfor.cond%1%bbentry for reason inductive-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.description

=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond.expr is null
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state failcond done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability name abstract-memlabel-asserts
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability expr_group_type HOUDINI_EXPECTS_STABILITY with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability point_expr 1
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability pred 0
=Comment
abstract-memlabel-asserts-houdini-guess
=LhsExpr
1 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_begin : BV:32
2 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum1=/_end : BV:32
3 : bvule(1, 2) : BOOL
4 : 4 { 0x4 +1.47e129 } : BV:32
5 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
6 : bvadd(4, 5) : BV:32
7 : bvadd(1, 6) : BV:32
8 : eq(2, 7) : BOOL
9 : and(3, 8) : BOOL
10 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_begin : BV:32
11 : input.dst.memlabel-mem--local./*___y___make_list__x__=L0%0%argnum0=/_end : BV:32
12 : bvule(10, 11) : BOOL
13 : and(9, 12) : BOOL
14 : bvadd(10, 6) : BV:32
15 : eq(11, 14) : BOOL
16 : and(13, 15) : BOOL
17 : input.dst.local./*___y___make_list__x__=L0%0%argnum1=/ : BV:32
18 : 3 { 0x3 +1.35e129 } : BV:32
19 : bvand(17, 18) : BV:32
20 : 0 { 0x0 +1.0e129 } : BV:32
21 : eq(19, 20) : BOOL
22 : input.dst.local./*___y___make_list__x__=L0%0%argnum0=/ : BV:32
23 : bvand(22, 18) : BV:32
24 : eq(23, 20) : BOOL
25 : and(21, 24) : BOOL
26 : and(16, 25) : BOOL
27 : eq(17, 1) : BOOL
28 : eq(22, 10) : BOOL
29 : and(27, 28) : BOOL
30 : and(26, 29) : BOOL
31 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
32 : 1 { 0x1 +1.11e129 } : BV:32
33 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
34 : region_agrees_with_memlabel(31, 20, 32, 33) : BOOL
35 : and(30, 34) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ce 0: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 0 type houdini_expects_stability summary: number of exprs=1; number of visited CEs=1; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv name expr-group-bvs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv expr_group_type BV_EQ with 5 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 3
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 5
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 0
=Comment
expr-group-bvs.linear1-2-free_var_idx.5
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 1
=Comment
expr-group-bvs.linear1-2-free_var_idx.3
=LhsExpr
1 : 0 { 0x0 } : BV:2
=RhsExpr
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : 0 { 0x0 +1.0e1025 } : INT
4 : bvextract(1, 2, 3) : BV:2
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv pred 2
=Comment
expr-group-bvs.linear2-32-free_var_idx.2
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
3 : bvmul(1, 2) : BV:32
4 : bvneg(3) : BV:32
=RhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 0: z3v487.ce76
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 1: z3.ce75
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 2: z3v487.ce20
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 3: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 4: z3v487.ce48
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 5: z3.ce47
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 6: z3v487.ce103
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 7: z3.ce131
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 8: z3v487.ce3812
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 9: z3.ce3871
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 10: z3v487.ce3931
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 11: z3v487.ce3990
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 12: z3v487.ce4049
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 13: z3v487.ce4108
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ce 14: z3v487.ce4168
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv summary: number of exprs=5; number of visited CEs=15; number of preds=3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv output matrix
matrix:
2
-2147483648->0; 2->4294967295; 3->0; 4->1; 5->0; 6->0; 
3
-2147483648->0; 2->0; 3->1073741824; 4->0; 5->0; 6->0; 
5
-2147483648->0; 2->0; 3->0; 4->0; 5->1073741824; 6->0; 
matrix done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 1 type bv state elems done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const name src-branches-const-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const point_expr 2
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 0
=Comment
src-branches-const-ineq.ub-unsigned
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const pred 1
=Comment
src-branches-const-ineq.lb-signed
=LhsExpr
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 0: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 1: z3v487.ce3812
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 2: z3v487.ce4272
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 3: z3v487.ce4332
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 4: z3.ce4392
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 5: z3v487.ce4476
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ce 6: z3v487.ce4578
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 2 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const point_expr 4
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 0
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.ub-unsigned
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 4294967294 { 0xfffffffe -2 -1.99999976e128 } : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const pred 1
=Comment
dst-branches-const-ineq.input.dst.llvm-%i.0.Lfor.cond%1%bbentry.lb-signed
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : 0 { 0x0 +1.0e129 } : BV:32
3 : bvsge(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 0: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 1: z3v487.ce3812
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 2: z3v487.ce4272
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 3: z3v487.ce4332
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 4: z3.ce4392
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 5: z3v487.ce4476
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ce 6: z3v487.ce4578
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const summary: number of exprs=1; number of visited CEs=7; number of preds=2
=m_lower_bound_signed_cur 0
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967294
=m_lower_bound_signed_known 0
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967294
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 3 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const name dst-branches-const-ineq.input.dst.llvm-%n.Lfor.cond%1%bbentry
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const expr_group_type BV_CONST_INEQ with 1 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const point_expr 6
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 0: z3.ce75
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 1: z3v487.ce20
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 2: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ce 3: z3.ce159
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const summary: number of exprs=1; number of visited CEs=4; number of preds=0
=m_lower_bound_signed_cur -2147483648
=m_upper_bound_signed_cur 2147483647
=m_lower_bound_unsigned_cur 0
=m_upper_bound_unsigned_cur 4294967295
=m_lower_bound_signed_known -2147483648
=m_upper_bound_signed_known 2147483647
=m_lower_bound_unsigned_known 0
=m_upper_bound_unsigned_known 4294967295
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 0
1 : 0 { 0x0 +1.0e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 1
1 : 1 { 0x1 +1.11e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 2
1 : 4 { 0x4 +1.47e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 3
1 : 8 { 0x8 +1.95e129 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_expr 4
1 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 4 type ineq_const const_bound_exprs done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini name dst-ineq
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini expr_group_type HOUDINI with 8 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 7
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 8
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 9
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvslt(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 10
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 11
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 12
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 13
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvsle(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini point_expr 14
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini pred 0
=Comment
dst-ineq-houdini-guess
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvule(1, 2) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 0: z3.ce75
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 1: z3v487.ce20
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ce 2: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 5 type houdini summary: number of exprs=8; number of visited CEs=3; number of preds=1
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based name spec-coupling-invariants
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based expr_group_type HOUDINI_AXIOM_BASED with 18 exprs
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 15
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 16
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 17
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 18
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 19
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 20
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : bvadd(14, 5) : BV:32
16 : 4 { 0x4 +1.0e1025 } : INT
17 : 0 { 0x0 } : BOOL
18 : select(10, 11, 12, 15, 16, 17) : BV:32
19 : lambda(9, 18) : FUNCTION[BV:32 -> BV:32]
20 : map(8, 19) : MAP[BV:32 -> BV:32]
21 : eq(1, 20) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 21
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 22
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 23
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 24
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 25
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 26
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 27
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 28
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 29
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 30
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 31
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based point_expr 32
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 0
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 1
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
2 : Lambda0 : BV:32
3 : 0 { 0x0 +1.0e129 } : BV:32
4 : bvule(3, 2) : BOOL
5 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
6 : bvult(2, 5) : BOOL
7 : and(4, 6) : BOOL
8 : lambda(2, 7) : FUNCTION[BV:32 -> BOOL]
9 : Lambda1 : BV:32
10 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
11 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
12 : memlabel-top : MEMLABEL
13 : 4 { 0x4 +1.47e129 } : BV:32
14 : bvmul(9, 13) : BV:32
15 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
16 : bvadd(14, 15) : BV:32
17 : 4 { 0x4 +1.0e1025 } : INT
18 : 0 { 0x0 } : BOOL
19 : select(10, 11, 12, 16, 17, 18) : BV:32
20 : lambda(9, 19) : FUNCTION[BV:32 -> BV:32]
21 : map(8, 20) : MAP[BV:32 -> BV:32]
22 : eq(1, 21) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 2
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based pred 3
=Comment
houdini-axiom-based-guess
=LhsExpr
1 : input.spec-%tmpvar-10.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : SORT2EXPR.VAR : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
3 : 0 { 0x0 +1.0e1025 } : INT
4 : unit : UNIT
5 : sum_init(2, 3, 4) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
6 : eq(1, 5) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based predicate_set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based is assumed eqclass : 0
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ce 0: z3.ce19
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based visited ces set done
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants smallest_point_cover 6 type houdini-axiom-based summary: number of exprs=18; number of visited CEs=1; number of preds=4
=pc L3%6%bbentry_Lfor.cond%1%bbentry inductive-invariants invariant_state done
=Invariant state at node E0%0%d_E0%0%d for reason inductive-invariants
=pc E0%0%d_E0%0%d inductive-invariants invariant_state 
is_top 0
is_stable 1
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.description

=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond.expr is null
=pc E0%0%d_E0%0%d inductive-invariants invariant_state failcond done
=pc E0%0%d_E0%0%d inductive-invariants invariant_state done
=invariant_state_changed_at_pcs for reason inductive-invariants:
=graph_with_guessing done
=graph_with_correctness_covers begin
=graph_with_correctness_covers done
=m_dst_fcall_edges_already_updated_from_pcs:
=m_internal_pcs:
=m_super_edges:
=AllocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=AllocaPCLocalSprelAssumptionsEnd
=DeallocaPCLocalSprelAssumptionsBegin:
=Local offsets from compile log
=Local offsets from compile log done
=done
=DeallocaPCLocalSprelAssumptionsEnd
=src_tfg pcs reaching pcpair L0%0%d_L0%0%d
=src_tfg pc: L0%0%d
=exit_pc_asserts at E0%0%d_E0%0%d
=exit_pc_assert.0 at E0%0%d_E0%0%d
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL0%0%d_L0%0%d.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%arr : BV:32
2 : 4 { 0x4 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 1 { 0x1 } : BOOL
5 : implies(3, 4) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.body%1%fcallStart.to_pcL3%6%bbentry_Lfor.body%1%fcallEnd-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
12 : 1 { 0x1 +1.0e1025 } : INT
13 : islangaligned(2, 12) : BOOL
14 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
17 : region_agrees_with_memlabel(14, 2, 15, 16) : BOOL
18 : or(3, 17) : BOOL
19 : and(11, 13, 18) : BOOL
20 : 1 { 0x1 } : BOOL
21 : implies(19, 20) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.body%1%fcallEnd.to_pcL3%6%bbentry_Lfor.cond%1%bbentry-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
2 : 1 { 0x1 +1.0e1025 } : INT
3 : islangaligned(1, 2) : BOOL
4 : 0 { 0x0 +1.0e129 } : BV:32
5 : eq(4, 1) : BOOL
6 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
7 : 8 { 0x8 +1.95e129 } : BV:32
8 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
9 : region_agrees_with_memlabel(6, 1, 7, 8) : BOOL
10 : or(5, 9) : BOOL
11 : 0 { 0x0 } : BOOL
12 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
13 : heap_alloc_ptr(1, 12) : BV:32
14 : 7 { 0x7 +1.83e129 } : BV:32
15 : bvadd(14, 13) : BV:32
16 : bvule(13, 15) : BOOL
17 : or(11, 16) : BOOL
18 : or(5, 17) : BOOL
19 : and(10, 18) : BOOL
20 : 1 { 0x1 } : BOOL
21 : ite(5, 4, 13) : BV:32
22 : isgepoffset(21, 4) : BOOL
23 : and(20, 22) : BOOL
24 : 4 { 0x4 +1.0e1025 } : BV:64
25 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
26 : heap_alloc(6, 12, 1, 7) : ARRAY[BV:32 -> MEMLABEL]
27 : ite(5, 6, 26) : ARRAY[BV:32 -> MEMLABEL]
28 : malloc_side_effect(25, 27, 12) : BV:32
29 : 32 { 0x20 +1.0e1025 } : INT
30 : bvsign_ext(28, 29) : BV:64
31 : bvmul(24, 30) : BV:64
32 : 63 { 0x3f +1.0e1025 } : INT
33 : bvextract(31, 32, 29) : BV:32
34 : bvslt(28, 4) : BOOL
35 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
36 : ite(34, 35, 4) : BV:32
37 : eq(33, 36) : BOOL
38 : 4 { 0x4 +1.0e1025 } : INT
39 : isindexforsize(37, 38) : BOOL
40 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
41 : malloc_side_effect(40, 27, 12) : BV:32
42 : 4 { 0x4 +1.47e129 } : BV:32
43 : bvmul(42, 28) : BV:32
44 : bvadd(41, 43) : BV:32
45 : isgepoffset(44, 43) : BOOL
46 : and(39, 45) : BOOL
47 : islangaligned(44, 38) : BOOL
48 : and(46, 47, 22, 23) : BOOL
49 : islangaligned(21, 38) : BOOL
50 : bvadd(42, 21) : BV:32
51 : isgepoffset(50, 42) : BOOL
52 : and(23, 48, 49, 51) : BOOL
53 : islangaligned(50, 38) : BOOL
54 : and(52, 53) : BOOL
55 : and(3, 19, 54) : BOOL
56 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
57 : input.spec-%var-i-0.L3%6%bbentry : BV:32
58 : map_get(56, 57) : SUM[UNIT,BV:32]
59 : sum_is(58, 2) : BOOL
60 : implies(55, 59) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcL3%6%bbentry_Lfor.body%1%fcallStart-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : 0 { 0x0 +1.0e129 } : BV:32
2 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
3 : eq(1, 2) : BOOL
4 : 0 { 0x0 } : BOOL
5 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
6 : heap_alloc_ptr(2, 5) : BV:32
7 : 7 { 0x7 +1.83e129 } : BV:32
8 : bvadd(7, 6) : BV:32
9 : bvule(6, 8) : BOOL
10 : or(4, 9) : BOOL
11 : or(3, 10) : BOOL
12 : 1 { 0x1 +1.0e1025 } : INT
13 : islangaligned(2, 12) : BOOL
14 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
15 : 8 { 0x8 +1.95e129 } : BV:32
16 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
17 : region_agrees_with_memlabel(14, 2, 15, 16) : BOOL
18 : or(3, 17) : BOOL
19 : and(11, 13, 18) : BOOL
20 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
21 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
22 : bvult(20, 21) : BOOL
23 : 1 { 0x1 } : BOOL
24 : implies(22, 23) : BOOL
25 : implies(19, 24) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart edge well-formedness condition done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
wfcond.from_pcL3%6%bbentry_Lfor.cond%1%bbentry.to_pcE0%0%d_E0%0%d-dst-edgecond-implies-src-edgecond
=LhsExpr
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
2 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
3 : bvult(1, 2) : BOOL
4 : not(3) : BOOL
5 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
6 : input.spec-%var-i-0.L3%6%bbentry : BV:32
7 : map_get(5, 6) : SUM[UNIT,BV:32]
8 : 0 { 0x0 +1.0e1025 } : INT
9 : sum_is(7, 8) : BOOL
10 : implies(4, 9) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond cg_path.graph_edge_composition
(L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond src_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond dst_path.graph_edge_composition
(epsilon)
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge-wf-cond pred.0
=Comment
ret-pointer-implements-inductive-list
=LhsExpr
1 : input.spec-%tmpvar-12.E0%0%d : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
2 : 1 { 0x1 +1.0e1025 } : INT
3 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
4 : Indxform0 : BV:32
5 : Lambda1 : BV:32
6 : input.dst.llvm-mem.Lfor.cond%1%bbentry : ARRAY[BV:32 -> BV:8]
7 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
8 : memlabel-top : MEMLABEL
9 : 4 { 0x4 +1.47e129 } : BV:32
10 : bvadd(5, 9) : BV:32
11 : 4 { 0x4 +1.0e1025 } : INT
12 : 0 { 0x0 } : BOOL
13 : select(6, 7, 8, 10, 11, 12) : BV:32
14 : lambda(5, 13) : FUNCTION[BV:32 -> BV:32]
15 : Lambda0 : BV:32
16 : 0 { 0x0 +1.0e129 } : BV:32
17 : eq(16, 15) : BOOL
18 : 1 { 0x1 +1.11e129 } : BV:32
19 : ite(17, 16, 18) : BV:32
20 : unit : UNIT
21 : select(6, 7, 8, 15, 11, 12) : BV:32
22 : prod(21, 4) : PROD[BV:32,BV:32]
23 : sum(19, 20, 22) : SUM[UNIT,PROD[BV:32,BV:32]]
24 : lambda(15, 23) : FUNCTION[BV:32 -> SUM[UNIT,PROD[BV:32,BV:32]]]
25 : ind(2, 2, 3, 4, 14, 24) : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
26 : eq(1, 25) : BOOL
=RhsExpr
1 : 1 { 0x1 } : BOOL
=predicate done
=well-formedness-conditions for L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d edge well-formedness condition done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallStart
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=DST Tie Breaking expr 0
1 : input.dst.llvm-%cmp.Lfor.cond%2%d : BOOL
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.body%1%fcallEnd
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 4
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs at node L3%6%bbentry_Lfor.cond%1%bbentry
=SRC Ranking expr 0
1 : input.spec-%var-i-0.L3%6%bbentry : BV:32
=SRC Tie Breaking expr 0
1 : input.spec-%var-arr-1 : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 1
1 : input.spec-%var-arr-0.L3%6%bbentry : MAP[BV:32 -> BV:32]
=SRC Tie Breaking expr 2
1 : input.spec-%var-l-0.L3%6%bbentry : IND[Type0,SUM[UNIT,PROD[BV:32,DECL[Type0]]]]
=DST Ranking expr 0
1 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 1
1 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 2
1 : input.dst.llvm-%l.0.Lfor.cond%1%bbentry : BV:32
=DST Ranking expr 3
1 : input.dst.llvm-%n.Lfor.cond%1%bbentry : BV:32
=bv_rank_exprs done
=Ranking exprs done
=dst-to-src submaps done
=cg-edge-contains-repeated-src-tfg-edge at edge-id L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
0
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
1
=cg-edge-contains-repeated-src-tfg-edge at edge-id L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
0
=cg-edge-contains-repeated-src-tfg-edge-map done
=cg.assumes_around_edge
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.L0%0%d=>Lfor.cond%1%bbentry
=LhsExpr
140457 : input.dst.llvm-%arr : BV:32
140430 : 4 { 0x4 +1.0e1025 } : INT
140467 : islangaligned(140457, 140430) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L0%0%d_L0%0%d=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #1.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallStart=>L3%6%bbentry_Lfor.body%1%fcallEnd done
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #0.pred
=Comment
undef-behaviour-align-assume.edge.Lfor.body%1%fcallEnd=>Lfor.body%1%intermediateVal1
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #1.pred
=Comment
merged-predicate
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
244041 : and(141263, 140954) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry assume #2.pred
=Comment
merged-predicate
=LhsExpr
140275 : 1 { 0x1 } : BOOL
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140911 : ite(140903, 140276, 140722) : BV:32
243916 : isgepoffset(140911, 140276) : BOOL
243917 : and(140275, 243916) : BOOL
140652 : 4 { 0x4 +1.0e1025 } : BV:64
140726 : input.dst.llvm-%i.0.Lfor.cond%1%bbentry : BV:32
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140718 : heap_alloc(140714, 140487, 140713, 140474) : ARRAY[BV:32 -> MEMLABEL]
140905 : ite(140903, 140714, 140718) : ARRAY[BV:32 -> MEMLABEL]
140913 : malloc_side_effect(140726, 140905, 140487) : BV:32
140519 : 32 { 0x20 +1.0e1025 } : INT
243918 : bvsign_ext(140913, 140519) : BV:64
243919 : bvmul(140652, 243918) : BV:64
140523 : 63 { 0x3f +1.0e1025 } : INT
243920 : bvextract(243919, 140523, 140519) : BV:32
243921 : bvslt(140913, 140276) : BOOL
140505 : 4294967295 { 0xffffffff -1 -1.99999988e128 } : BV:32
243922 : ite(243921, 140505, 140276) : BV:32
243923 : eq(243920, 243922) : BOOL
140430 : 4 { 0x4 +1.0e1025 } : INT
243924 : isindexforsize(243923, 140430) : BOOL
140712 : input.dst.llvm-%arr.Lfor.cond%1%bbentry : BV:32
140908 : malloc_side_effect(140712, 140905, 140487) : BV:32
140427 : 4 { 0x4 +1.47e129 } : BV:32
241714 : bvmul(140427, 140913) : BV:32
356115 : bvadd(140908, 241714) : BV:32
243925 : isgepoffset(356115, 241714) : BOOL
243926 : and(243924, 243925) : BOOL
243927 : islangaligned(356115, 140430) : BOOL
244035 : and(243926, 243927, 243916, 243917) : BOOL
244036 : islangaligned(140911, 140430) : BOOL
356178 : bvadd(140427, 140911) : BV:32
244037 : isgepoffset(356178, 140427) : BOOL
244038 : and(243917, 244035, 244036, 244037) : BOOL
244039 : islangaligned(356178, 140430) : BOOL
244040 : and(244038, 244039) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.body%1%fcallEnd=>L3%6%bbentry_Lfor.cond%1%bbentry done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #0.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140431 : 0 { 0x0 } : BOOL
140487 : memlabel-mem--hpalloc.R1./*___y___make_list__x__=Lfor.body%1%intermediateVal0=/ : MEMLABEL
140722 : heap_alloc_ptr(140713, 140487) : BV:32
140647 : 7 { 0x7 +1.83e129 } : BV:32
140944 : bvadd(140647, 140722) : BV:32
140947 : bvule(140722, 140944) : BOOL
140950 : or(140431, 140947) : BOOL
140954 : or(140903, 140950) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #1.pred
=Comment
undef-behaviour-align-assume
=LhsExpr
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140287 : 1 { 0x1 +1.0e1025 } : INT
140750 : islangaligned(140713, 140287) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.ec.graph_edge_composition
(epsilon)
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart assume #2.pred
=Comment
undef-behavioursome
=LhsExpr
140276 : 0 { 0x0 +1.0e129 } : BV:32
140713 : input.dst.llvm-%call.Lfor.body%1%fcallEnd : BV:32
140903 : eq(140276, 140713) : BOOL
140714 : input.dst.llvm-mem.alloc.Lfor.cond%1%bbentry : ARRAY[BV:32 -> MEMLABEL]
140474 : 8 { 0x8 +1.95e129 } : BV:32
140462 : memlabel-mem-may-straddle-symbol.1-heap : MEMLABEL
141257 : region_agrees_with_memlabel(140714, 140713, 140474, 140462) : BOOL
141263 : or(140903, 141257) : BOOL
=RhsExpr
140275 : 1 { 0x1 } : BOOL
=predicate done

cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>L3%6%bbentry_Lfor.body%1%fcallStart done
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d
cg.assumes_around_edge at L3%6%bbentry_Lfor.cond%1%bbentry=>E0%0%d_E0%0%d done
cg.assumes_around_edge done
=corr_graph_done
=bv_rank_map
=bv_rank at L0%0%d_L0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallStart
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 35
=bv_rank at L3%6%bbentry_Lfor.body%1%fcallEnd
m_dst_rank: 4, m_src_rank: 0, m_spec_rank: 44
=bv_rank at L3%6%bbentry_Lfor.cond%1%bbentry
m_dst_rank: 3, m_src_rank: 0, m_spec_rank: 15
=bv_rank at E0%0%d_E0%0%d
m_dst_rank: 0, m_src_rank: 0, m_spec_rank: 0
=cg_with_rank done
=cg_with_backtracker done
=asm filename

=cg_with_asm_annotation done
