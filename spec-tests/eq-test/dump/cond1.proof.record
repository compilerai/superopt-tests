==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x5 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x14 (and $x10 $x12)))
 (let (($x19 (and $x14 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x86 (not $x85)))
 (let (($x87 (or $x85 $x86)))
 (let (($x88 (= $x87 false)))
 (let (($x89 (= $x88 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x70 (concat ?x66 ?x64)))))
 (let (($x75 (= ?x74 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x29)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x16 $x12)))
 (let (($x50 (and $x30 $x10)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x36 $x50)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x14)))))))
 (let (($x52 (and $x43 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x61 (and $x55 $x60)))
 (let (($x78 (and $x61 $x77)))
 (let (($x41 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x13 (= $x41 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x79 (and $x13 $x78)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x80 (and $x39 $x79)))
 (let (($x49 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x81 (and $x49 $x80)))
 (let ((?x46 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x19 (= ?x46 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x82 (and $x19 $x81)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x84 (and $x23 $x83)))
 (let (($x90 (=> $x84 $x89)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x85 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x86 (not $x85)))
 (let (($x87 (or $x85 $x86)))
 (let (($x88 (= $x87 false)))
 (let (($x89 (= $x88 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x74 (concat ?x73 (concat ?x70 (concat ?x66 ?x64)))))
 (let (($x75 (= ?x74 input.dst.llvm-%x)))
 (let (($x76 (= $x75 true)))
 (let (($x77 (= $x76 true)))
 (let (($x57 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let ((?x29 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x10 (= (_ bv0 32) ?x29)))
 (let ((?x42 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x42)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x16 $x12)))
 (let (($x50 (and $x30 $x10)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x36 $x50)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x43 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x14)))))))
 (let (($x52 (and $x43 $x51)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x61 (and $x55 $x60)))
 (let (($x78 (and $x61 $x77)))
 (let (($x41 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x13 (= $x41 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x79 (and $x13 $x78)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x80 (and $x39 $x79)))
 (let (($x49 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x81 (and $x49 $x80)))
 (let ((?x46 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x19 (= ?x46 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x82 (and $x19 $x81)))
 (let (($x34 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x83 (and $x34 $x82)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x23 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x84 (and $x23 $x83)))
 (let (($x90 (=> $x84 $x89)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L2%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L2%10%bbentry #b00000000000000000000000000000101)
(= input.spec-%tmpvar-3.L2%10%bbentry #b11111111111111111111111111111011)
(= input.spec-%tmpvar-4.L2%10%bbentry #b00000000000000000000000000001100)
(= input.spec-%tmpvar-5.L2%10%bbentry #b00000000000000000000000000001100)
(= input.dst.llvm-mem @fun_5)
(function @fun_5
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32)
    #xfffffffb)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d () Bool
    false)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32)
    #x00000005)
  (define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv2147483651 32))
(define-fun input.spec-%tmpvar-1.L2%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32) (_ bv5 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32) (_ bv4294967291 32))
(define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32) (_ bv12 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32) (_ bv12 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x90 (not $x39)))
 (let (($x91 (or $x39 $x90)))
 (let (($x87 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x88 (not $x87)))
 (let (($x89 (or $x87 $x88)))
 (let (($x11 (=> $x89 $x91)))
 (let (($x63 (= $x11 true)))
 (let (($x92 (= $x63 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x67 (concat ?x70 ?x68)))))
 (let (($x77 (= ?x76 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x58 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x10)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x27 $x30)))
 (let (($x51 (and $x29 $x50)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x40 $x51)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x53 (and $x16 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x62 (and $x56 $x61)))
 (let (($x80 (and $x62 $x79)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x81 (and $x48 $x80)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x82 (and $x44 $x81)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x83 (and $x31 $x82)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x84 (and $x47 $x83)))
 (let (($x20 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x85 (and $x20 $x84)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x18 (= ?x25 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x86 (and $x18 $x85)))
 (let (($x93 (=> $x86 $x92)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x90 (not $x39)))
 (let (($x91 (or $x39 $x90)))
 (let (($x87 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x88 (not $x87)))
 (let (($x89 (or $x87 $x88)))
 (let (($x11 (=> $x89 $x91)))
 (let (($x63 (= $x11 true)))
 (let (($x92 (= $x63 true)))
 (let ((?x68 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x70 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x76 (concat ?x75 (concat ?x67 (concat ?x70 ?x68)))))
 (let (($x77 (= ?x76 input.dst.llvm-%x)))
 (let (($x78 (= $x77 true)))
 (let (($x79 (= $x78 true)))
 (let (($x58 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let ((?x10 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x50 (= (_ bv0 32) ?x10)))
 (let ((?x12 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x30 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x12)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x27 $x30)))
 (let (($x51 (and $x29 $x50)))
 (let (($x40 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (and $x40 $x51)))
 (let (($x33 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x37 $x33)))))))
 (let (($x53 (and $x16 $x52)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let (($x56 (= $x55 true)))
 (let (($x62 (and $x56 $x61)))
 (let (($x80 (and $x62 $x79)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x81 (and $x48 $x80)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x82 (and $x44 $x81)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x83 (and $x31 $x82)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x84 (and $x47 $x83)))
 (let (($x20 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x85 (and $x20 $x84)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x18 (= ?x25 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x86 (and $x18 $x85)))
 (let (($x93 (=> $x86 $x92)))
 (not $x93))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x9 (= ?x5 ?x13)))
 (let (($x73 (= $x9 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x76 ?x65)))))
 (let (($x85 (= ?x84 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x66 (= $x75 true)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let (($x60 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (= $x62 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x12 $x10)))
 (let (($x53 (and $x50 $x52)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x6 $x53)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x55 (and $x42 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x74 (and $x58 $x72)))
 (let (($x69 (and $x74 $x67)))
 (let (($x88 (and $x69 $x87)))
 (let (($x90 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x91 (and $x48 $x90)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x11 (and $x44 $x91)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x63 (and $x31 $x11)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x92 (and $x34 $x63)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x93 (and $x25 $x92)))
 (let (($x46 (= ?x5 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x94 (and $x46 $x93)))
 (let (($x96 (=> $x94 $x95)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x13 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x9 (= ?x5 ?x13)))
 (let (($x73 (= $x9 true)))
 (let (($x95 (= $x73 true)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x84 (concat ?x83 (concat ?x80 (concat ?x76 ?x65)))))
 (let (($x85 (= ?x84 input.dst.llvm-%x)))
 (let (($x86 (= $x85 true)))
 (let (($x87 (= $x86 true)))
 (let (($x75 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x66 (= $x75 true)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let (($x60 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (= $x62 true)))
 (let ((?x51 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x52 (= (_ bv0 32) ?x51)))
 (let ((?x29 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x10 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x29)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x50 (and $x12 $x10)))
 (let (($x53 (and $x50 $x52)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x6 $x53)))
 (let (($x43 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x42 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x43)))))))
 (let (($x55 (and $x42 $x54)))
 (let (($x56 (= $x55 true)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x74 (and $x58 $x72)))
 (let (($x69 (and $x74 $x67)))
 (let (($x88 (and $x69 $x87)))
 (let (($x90 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x88)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x91 (and $x48 $x90)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x11 (and $x44 $x91)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x63 (and $x31 $x11)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x92 (and $x34 $x63)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x93 (and $x25 $x92)))
 (let (($x46 (= ?x5 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x94 (and $x46 $x93)))
 (let (($x96 (=> $x94 $x95)))
 (not $x96))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x97 (= ?x24 ?x96)))
 (let (($x35 (= $x97 true)))
 (let (($x7 (= $x35 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x81 (concat ?x71 ?x79)))))
 (let (($x88 (= ?x87 input.dst.llvm-%x)))
 (let (($x90 (= $x88 true)))
 (let (($x91 (= $x90 true)))
 (let (($x64 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let (($x70 (= $x69 true)))
 (let (($x61 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x62 (not $x61)))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x30 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x27 $x54)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x16)))))))
 (let (($x56 (and $x12 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x66 (and $x59 $x75)))
 (let (($x82 (and $x66 $x70)))
 (let (($x11 (and $x82 $x91)))
 (let (($x92 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x11)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x93 (and $x48 $x92)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x94 (and $x44 $x93)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x13 (and $x31 $x94)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x9 (and $x34 $x13)))
 (let (($x47 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x73 (and $x47 $x9)))
 (let (($x5 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x95 (and $x5 $x73)))
 (let (($x68 (=> $x95 $x7)))
 (not $x68)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x97 (= ?x24 ?x96)))
 (let (($x35 (= $x97 true)))
 (let (($x7 (= $x35 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x87 (concat ?x86 (concat ?x81 (concat ?x71 ?x79)))))
 (let (($x88 (= ?x87 input.dst.llvm-%x)))
 (let (($x90 (= $x88 true)))
 (let (($x91 (= $x90 true)))
 (let (($x64 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let (($x70 (= $x69 true)))
 (let (($x61 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x62 (not $x61)))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x52)))
 (let ((?x10 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x10)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x30 $x50)))
 (let (($x54 (and $x51 $x53)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x27 $x54)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x12 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x15 $x16)))))))
 (let (($x56 (and $x12 $x55)))
 (let (($x57 (= $x56 true)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x66 (and $x59 $x75)))
 (let (($x82 (and $x66 $x70)))
 (let (($x11 (and $x82 $x91)))
 (let (($x92 (and (not (bvslt input.spec-%var-x-0 (_ bv0 32))) $x11)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x93 (and $x48 $x92)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x94 (and $x44 $x93)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x13 (and $x31 $x94)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x9 (and $x34 $x13)))
 (let (($x47 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x73 (and $x47 $x9)))
 (let (($x5 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x95 (and $x5 $x73)))
 (let (($x68 (=> $x95 $x7)))
 (not $x68)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x23 ?x97)))
 (let (($x7 (= $x35 true)))
 (let (($x68 (= $x7 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x79 (concat ?x77 ?x86)))))
 (let (($x90 (= ?x88 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x11 (= $x91 true)))
 (let (($x64 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let (($x70 (= $x69 true)))
 (let (($x62 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x29 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x6 $x55)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x40)))))))
 (let (($x57 (and $x30 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x66 (and $x60 $x75)))
 (let (($x82 (and $x66 $x70)))
 (let (($x92 (and $x82 $x11)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x93 (and $x39 $x92)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x94 (and $x48 $x93)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x13 (and $x44 $x94)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x9 (and $x31 $x13)))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x73 (and $x34 $x9)))
 (let (($x46 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x95 (and $x46 $x73)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x24 (= ?x25 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x96 (and $x24 $x95)))
 (let (($x98 (=> $x96 $x68)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x97 (bvadd (_ bv4294967291 32) input.dst.llvm-%x)))
 (let ((?x23 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x35 (= ?x23 ?x97)))
 (let (($x7 (= $x35 true)))
 (let (($x68 (= $x7 true)))
 (let ((?x86 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x79 (concat ?x77 ?x86)))))
 (let (($x90 (= ?x88 input.dst.llvm-%x)))
 (let (($x91 (= $x90 true)))
 (let (($x11 (= $x91 true)))
 (let (($x64 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let (($x70 (= $x69 true)))
 (let (($x62 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x75 (= $x74 true)))
 (let ((?x53 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x54 (= (_ bv0 32) ?x53)))
 (let ((?x50 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x50)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x29 $x51)))
 (let (($x55 (and $x52 $x54)))
 (let (($x6 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x6 $x55)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x40)))))))
 (let (($x57 (and $x30 $x56)))
 (let (($x58 (= $x57 true)))
 (let (($x59 (= $x58 true)))
 (let (($x60 (= $x59 true)))
 (let (($x66 (and $x60 $x75)))
 (let (($x82 (and $x66 $x70)))
 (let (($x92 (and $x82 $x11)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x93 (and $x39 $x92)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x94 (and $x48 $x93)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x13 (and $x44 $x94)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x9 (and $x31 $x13)))
 (let (($x34 (= ?x23 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x73 (and $x34 $x9)))
 (let (($x46 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x95 (and $x46 $x73)))
 (let ((?x25 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x24 (= ?x25 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x96 (and $x24 $x95)))
 (let (($x98 (=> $x96 $x68)))
 (not $x98))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x89 (= ?x5 ?x98)))
 (let (($x63 (= $x89 true)))
 (let (($x28 (= $x63 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x11 (concat ?x88 (concat ?x77 ?x79)))))
 (let (($x93 (= ?x92 input.dst.llvm-%x)))
 (let (($x94 (= $x93 true)))
 (let (($x13 (= $x94 true)))
 (let (($x70 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x82 (= $x70 true)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x75 (not $x74)))
 (let (($x66 (= $x75 true)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x50 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x15 $x57)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x12)))))))
 (let (($x59 (and $x10 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let (($x69 (and $x62 $x67)))
 (let (($x87 (and $x69 $x84)))
 (let (($x9 (and $x87 $x13)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x73 (and $x39 $x9)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x95 (and $x48 $x73)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x44 $x95)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x97 (and $x31 $x96)))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x35 (and $x47 $x97)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x7 (and $x25 $x35)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x68 (and $x34 $x7)))
 (let (($x85 (=> $x68 $x28)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let ((?x98 (bvadd (_ bv12 32) input.dst.llvm-%x)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x89 (= ?x5 ?x98)))
 (let (($x63 (= $x89 true)))
 (let (($x28 (= $x63 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x88 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x11 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x92 (concat ?x11 (concat ?x88 (concat ?x77 ?x79)))))
 (let (($x93 (= ?x92 input.dst.llvm-%x)))
 (let (($x94 (= $x93 true)))
 (let (($x13 (= $x94 true)))
 (let (($x70 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x82 (= $x70 true)))
 (let (($x83 (= $x82 true)))
 (let (($x84 (= $x83 true)))
 (let (($x74 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x75 (not $x74)))
 (let (($x66 (= $x75 true)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let ((?x55 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x56 (= (_ bv0 32) ?x55)))
 (let ((?x52 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x52)))
 (let (($x50 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x50 $x53)))
 (let (($x57 (and $x54 $x56)))
 (let (($x15 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x15 $x57)))
 (let (($x12 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x10 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x12)))))))
 (let (($x59 (and $x10 $x58)))
 (let (($x60 (= $x59 true)))
 (let (($x61 (= $x60 true)))
 (let (($x62 (= $x61 true)))
 (let (($x69 (and $x62 $x67)))
 (let (($x87 (and $x69 $x84)))
 (let (($x9 (and $x87 $x13)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x73 (and $x39 $x9)))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x95 (and $x48 $x73)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x44 $x95)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x97 (and $x31 $x96)))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x35 (and $x47 $x97)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x7 (and $x25 $x35)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x68 (and $x34 $x7)))
 (let (($x85 (=> $x68 $x28)))
 (not $x85)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x35 (not $x97)))
 (let (($x7 (or $x97 $x35)))
 (let (($x68 (= $x7 true)))
 (let (($x98 (= $x68 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x77 (concat ?x76 (concat ?x80 ?x84)))))
 (let (($x86 (= ?x79 input.dst.llvm-%x)))
 (let (($x90 (= $x86 true)))
 (let (($x92 (= $x90 true)))
 (let (($x66 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x59)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x8)))))))
 (let (($x61 (and $x51 $x60)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x70 (and $x74 $x69)))
 (let (($x93 (and $x70 $x92)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x94 (and $x48 $x93)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x13 (and $x44 $x94)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x9 (and $x31 $x13)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x73 (and $x47 $x9)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x95 (and $x25 $x73)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x96 (and $x34 $x95)))
 (let (($x89 (=> $x96 $x98)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry () (_ BitVec 32))
(assert
 (let (($x97 (bvslt input.dst.llvm-%x (_ bv0 32))))
 (let (($x35 (not $x97)))
 (let (($x7 (or $x97 $x35)))
 (let (($x68 (= $x7 true)))
 (let (($x98 (= $x68 true)))
 (let ((?x84 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x79 (concat ?x77 (concat ?x76 (concat ?x80 ?x84)))))
 (let (($x86 (= ?x79 input.dst.llvm-%x)))
 (let (($x90 (= $x86 true)))
 (let (($x92 (= $x90 true)))
 (let (($x66 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x64 (= $x66 true)))
 (let (($x67 (= $x64 true)))
 (let (($x69 (= $x67 true)))
 (let ((?x57 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x58 (= (_ bv0 32) ?x57)))
 (let ((?x54 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x54)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x52 $x55)))
 (let (($x59 (and $x56 $x58)))
 (let (($x33 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x33 $x59)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x51 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x30 $x8)))))))
 (let (($x61 (and $x51 $x60)))
 (let (($x62 (= $x61 true)))
 (let (($x72 (= $x62 true)))
 (let (($x74 (= $x72 true)))
 (let (($x70 (and $x74 $x69)))
 (let (($x93 (and $x70 $x92)))
 (let (($x39 (bvslt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x48 (= $x39 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x94 (and $x48 $x93)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x13 (and $x44 $x94)))
 (let (($x31 (= (_ bv5 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x9 (and $x31 $x13)))
 (let ((?x5 (bvadd input.spec-%var-x-0 (_ bv4294967291 32))))
 (let (($x47 (= ?x5 input.spec-%tmpvar-3.L2%10%bbentry)))
 (let (($x73 (and $x47 $x9)))
 (let (($x25 (= (_ bv12 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x95 (and $x25 $x73)))
 (let ((?x24 (bvadd input.spec-%var-x-0 (_ bv12 32))))
 (let (($x34 (= ?x24 input.spec-%tmpvar-5.L2%10%bbentry)))
 (let (($x96 (and $x34 $x95)))
 (let (($x89 (=> $x96 $x98)))
 (not $x89)))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1491224/query
