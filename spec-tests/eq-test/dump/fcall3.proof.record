==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv3763329252 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32) (_ bv3120919140 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32) (_ bv3120919143 32))
(define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv3763329255 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x253 (= true false)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var71X)))
 (let ((?x176 (input.spec-%var-m2-1.1.1 input.ind-%var71X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var71X)))
 (=> $x165 (= ?x176 ?x243))))))
 ))
 (let (($x238 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var70X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var70X)))
 (= $x165 $x234))))
 ))
 (let (($x250 (and $x238 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x227 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var63X)))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x112 (= ?x127 ?x221))))))
 ))
 (let (($x216 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var62X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x112 $x212))))
 ))
 (let (($x228 (and $x216 $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x205 (forall ((input.ind-%var55X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var55X (_ bv4 32))))
 (let ((?x192 (bvadd ?x145 input.dst.llvm-%m2)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x176 (input.spec-%var-m2-1.1.1 input.ind-%var55X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var55X)))
 (=> $x165 (= ?x176 ?x202)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var54X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var54X) (bvult input.ind-%var54X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var54X)))
 (= $x165 $x121))))
 ))
 (let (($x206 (and $x172 $x205)))
 (let (($x207 (= $x206 true)))
 (let (($x159 (forall ((input.ind-%var47X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var47X (_ bv4 32))))
 (let ((?x146 (bvadd ?x145 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x150))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var47X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var47X)))
 (=> $x112 (= ?x127 ?x156)))))))))
 ))
 (let (($x123 (forall ((input.ind-%var46X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var46X) (bvult input.ind-%var46X (_ bv100 32)))))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var46X)))
 (= $x112 $x121))))
 ))
 (let (($x160 (and $x123 $x159)))
 (let (($x161 (= $x160 true)))
 (let ((?x94 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x93 (= (_ bv0 32) ?x92)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x87 $x90)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x86 $x58)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x60 $x66)))
 (let (($x19 (not $x63)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x42 $x40)))
 (let (($x82 (and (not $x78) $x19)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x18 $x77)))
 (let (($x37 (not $x36)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x55 $x11)))
 (let (($x21 (and (not $x31) $x37)))
 (let (($x101 (and (and (and (and (and (and $x21 $x82) $x84) $x85) $x57) $x91) $x93)))
 (let (($x102 (and $x101 $x95)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x24 (or false (or false (and (and true (or $x67 $x22)) (or $x46 $x69))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x103 (and $x62 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x73 (concat ?x44 (concat ?x65 ?x49)))))
 (let (($x51 (= ?x64 input.dst.llvm-%m2)))
 (let (($x81 (= $x51 true)))
 (let (($x54 (= $x81 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x10 (concat ?x52 (concat ?x13 ?x15)))))
 (let (($x6 (= ?x26 input.dst.llvm-%m1)))
 (let (($x75 (= $x6 true)))
 (let (($x17 (= $x75 true)))
 (let (($x9 (and $x17 $x54)))
 (let (($x107 (and $x9 $x106)))
 (let (($x162 (and $x107 $x161)))
 (let (($x208 (and $x162 $x207)))
 (let (($x230 (and $x208 $x229)))
 (let (($x252 (and $x230 $x251)))
 (let (($x255 (=> $x252 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x253 (= true false)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var71X)))
 (let ((?x176 (input.spec-%var-m2-1.1.1 input.ind-%var71X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var71X)))
 (=> $x165 (= ?x176 ?x243))))))
 ))
 (let (($x238 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var70X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var70X)))
 (= $x165 $x234))))
 ))
 (let (($x250 (and $x238 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x227 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var63X)))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x112 (= ?x127 ?x221))))))
 ))
 (let (($x216 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var62X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x112 $x212))))
 ))
 (let (($x228 (and $x216 $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x205 (forall ((input.ind-%var55X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var55X (_ bv4 32))))
 (let ((?x192 (bvadd ?x145 input.dst.llvm-%m2)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x176 (input.spec-%var-m2-1.1.1 input.ind-%var55X)))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var55X)))
 (=> $x165 (= ?x176 ?x202)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var54X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var54X) (bvult input.ind-%var54X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m2-1.0.1 input.ind-%var54X)))
 (= $x165 $x121))))
 ))
 (let (($x206 (and $x172 $x205)))
 (let (($x207 (= $x206 true)))
 (let (($x159 (forall ((input.ind-%var47X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var47X (_ bv4 32))))
 (let ((?x146 (bvadd ?x145 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x150))))
 (let ((?x127 (input.spec-%var-m1-1.1.1 input.ind-%var47X)))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var47X)))
 (=> $x112 (= ?x127 ?x156)))))))))
 ))
 (let (($x123 (forall ((input.ind-%var46X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var46X) (bvult input.ind-%var46X (_ bv100 32)))))
 (let (($x112 (input.spec-%var-m1-1.0.1 input.ind-%var46X)))
 (= $x112 $x121))))
 ))
 (let (($x160 (and $x123 $x159)))
 (let (($x161 (= $x160 true)))
 (let ((?x94 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x95 (= (_ bv0 32) ?x94)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x93 (= (_ bv0 32) ?x92)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x58 (and $x87 $x90)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (and $x86 $x58)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x60 $x66)))
 (let (($x19 (not $x63)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (and $x42 $x40)))
 (let (($x82 (and (not $x78) $x19)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x18 $x77)))
 (let (($x37 (not $x36)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (and $x55 $x11)))
 (let (($x21 (and (not $x31) $x37)))
 (let (($x101 (and (and (and (and (and (and $x21 $x82) $x84) $x85) $x57) $x91) $x93)))
 (let (($x102 (and $x101 $x95)))
 (let (($x69 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x24 (or false (or false (and (and true (or $x67 $x22)) (or $x46 $x69))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x103 (and $x62 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x73 (concat ?x44 (concat ?x65 ?x49)))))
 (let (($x51 (= ?x64 input.dst.llvm-%m2)))
 (let (($x81 (= $x51 true)))
 (let (($x54 (= $x81 true)))
 (let ((?x15 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x26 (concat ?x10 (concat ?x52 (concat ?x13 ?x15)))))
 (let (($x6 (= ?x26 input.dst.llvm-%m1)))
 (let (($x75 (= $x6 true)))
 (let (($x17 (= $x75 true)))
 (let (($x9 (and $x17 $x54)))
 (let (($x107 (and $x9 $x106)))
 (let (($x162 (and $x107 $x161)))
 (let (($x208 (and $x162 $x207)))
 (let (($x230 (and $x208 $x229)))
 (let (($x252 (and $x230 $x251)))
 (let (($x255 (=> $x252 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3db941bc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc1bd84c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc1bd84c3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3db941bf)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xdfff7df7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3db941bc)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xba6ff07c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc1bd84c0)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc1bd84c3) #xba
    (ite (= x!0 #xc1bd84c0) #x7c
    (ite (= x!0 #x3db941bd) #x7d
    (ite (= x!0 #x3db941bf) #xdf
    (ite (= x!0 #xc1bd84c2) #x6f
    (ite (= x!0 #xc1bd84c1) #xf0
    (ite (= x!0 #x3db941be) #xff
    (ite (= x!0 #x3db941bc) #xf7
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x19 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x19 $x84)))
 (let (($x264 (=> $x97 true)))
 (let (($x265 (= $x264 true)))
 (let (($x266 (= $x265 true)))
 (let (($x260 (forall ((input.ind-%var127X (_ BitVec 32)) )(let ((?x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var127X)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 input.ind-%var127X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var127X)))
 (=> $x254 (= ?x108 ?x240))))))
 ))
 (let (($x223 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var126X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var126X)))
 (= $x254 $x190))))
 ))
 (let (($x261 (and $x223 $x260)))
 (let (($x262 (= $x261 true)))
 (let (($x242 (forall ((input.ind-%var121X (_ BitVec 32)) )(let ((?x235 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var121X)))
 (let ((?x192 (input.spec-%var-m1-1.1.1 input.ind-%var121X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var121X)))
 (=> $x149 (= ?x192 ?x235))))))
 ))
 (let (($x217 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var120X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var120X)))
 (= $x149 $x213))))
 ))
 (let (($x118 (and $x217 $x242)))
 (let (($x143 (= $x118 true)))
 (let (($x185 (forall ((input.ind-%var115X (_ BitVec 32)) )(let ((?x215 (bvmul input.ind-%var115X (_ bv4 32))))
 (let ((?x177 (bvadd ?x215 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x175))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 input.ind-%var115X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var115X)))
 (=> $x254 (= ?x108 ?x187)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var114X) (bvult input.ind-%var114X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var114X)))
 (= $x254 $x161))))
 ))
 (let (($x181 (and $x113 $x185)))
 (let (($x182 (= $x181 true)))
 (let (($x248 (forall ((input.ind-%var109X (_ BitVec 32)) )(let ((?x215 (bvmul input.ind-%var109X (_ bv4 32))))
 (let ((?x216 (bvadd ?x215 input.dst.llvm-%m1)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x227))))
 (let ((?x192 (input.spec-%var-m1-1.1.1 input.ind-%var109X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var109X)))
 (=> $x149 (= ?x192 ?x238)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var108X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var108X) (bvult input.ind-%var108X (_ bv100 32)))))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var108X)))
 (= $x149 $x161))))
 ))
 (let (($x249 (and $x165 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x127 (concat ?x121 (concat ?x120 ?x111)))))
 (let (($x145 (= ?x130 input.dst.llvm-%m1)))
 (let (($x146 (= $x145 true)))
 (let (($x154 (= $x146 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x95 (concat ?x93 (concat ?x59 ?x57)))))
 (let (($x103 (= ?x102 input.dst.llvm-%m2)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x85 (= $x97 true)))
 (let (($x98 (= $x85 true)))
 (let (($x86 (= $x98 true)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x55)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x24)))
 (let ((?x61 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x25 $x89)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x68 $x69)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x9 $x23)))
 (let (($x79 (not $x74)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x51 $x81)))
 (let (($x39 (and (not $x54) $x79)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x65 $x49)))
 (let (($x7 (not $x8)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x10 $x129)))
 (let (($x72 (and (not $x83) $x7)))
 (let (($x37 (and (and (and (and (and (and $x72 $x39) $x67) $x22) $x56) $x80) $x62)))
 (let (($x21 (and $x37 $x11)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x73 (or false (or false (and (and true (or $x13 $x15)) (or $x6 $x75))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x42 (and $x44 $x21)))
 (let (($x40 (= $x42 true)))
 (let (($x78 (= $x40 true)))
 (let (($x27 (= $x78 true)))
 (let (($x87 (and $x27 $x86)))
 (let (($x88 (and $x87 $x86)))
 (let (($x106 (and $x88 $x105)))
 (let (($x155 (and $x106 $x154)))
 (let (($x251 (and $x155 $x250)))
 (let (($x180 (and $x251 $x182)))
 (let (($x232 (and $x180 $x143)))
 (let (($x263 (and $x232 $x262)))
 (let (($x267 (=> $x263 $x266)))
 (not $x267)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x84 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x19 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x19 $x84)))
 (let (($x264 (=> $x97 true)))
 (let (($x265 (= $x264 true)))
 (let (($x266 (= $x265 true)))
 (let (($x260 (forall ((input.ind-%var127X (_ BitVec 32)) )(let ((?x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var127X)))
 (let ((?x108 (input.spec-%var-m2-1.1.1 input.ind-%var127X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var127X)))
 (=> $x254 (= ?x108 ?x240))))))
 ))
 (let (($x223 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x190 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var126X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var126X)))
 (= $x254 $x190))))
 ))
 (let (($x261 (and $x223 $x260)))
 (let (($x262 (= $x261 true)))
 (let (($x242 (forall ((input.ind-%var121X (_ BitVec 32)) )(let ((?x235 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var121X)))
 (let ((?x192 (input.spec-%var-m1-1.1.1 input.ind-%var121X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var121X)))
 (=> $x149 (= ?x192 ?x235))))))
 ))
 (let (($x217 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var120X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var120X)))
 (= $x149 $x213))))
 ))
 (let (($x118 (and $x217 $x242)))
 (let (($x143 (= $x118 true)))
 (let (($x185 (forall ((input.ind-%var115X (_ BitVec 32)) )(let ((?x215 (bvmul input.ind-%var115X (_ bv4 32))))
 (let ((?x177 (bvadd ?x215 input.dst.llvm-%m2)))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x187 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x175))))
 (let ((?x108 (input.spec-%var-m2-1.1.1 input.ind-%var115X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var115X)))
 (=> $x254 (= ?x108 ?x187)))))))))
 ))
 (let (($x113 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var114X) (bvult input.ind-%var114X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var114X)))
 (= $x254 $x161))))
 ))
 (let (($x181 (and $x113 $x185)))
 (let (($x182 (= $x181 true)))
 (let (($x248 (forall ((input.ind-%var109X (_ BitVec 32)) )(let ((?x215 (bvmul input.ind-%var109X (_ bv4 32))))
 (let ((?x216 (bvadd ?x215 input.dst.llvm-%m1)))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem ?x216))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x216 (_ bv2 32))) ?x227))))
 (let ((?x192 (input.spec-%var-m1-1.1.1 input.ind-%var109X)))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var109X)))
 (=> $x149 (= ?x192 ?x238)))))))))
 ))
 (let (($x165 (forall ((input.ind-%var108X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var108X) (bvult input.ind-%var108X (_ bv100 32)))))
 (let (($x149 (input.spec-%var-m1-1.0.1 input.ind-%var108X)))
 (= $x149 $x161))))
 ))
 (let (($x249 (and $x165 $x248)))
 (let (($x250 (= $x249 true)))
 (let ((?x111 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x120 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x127 (concat ?x121 (concat ?x120 ?x111)))))
 (let (($x145 (= ?x130 input.dst.llvm-%m1)))
 (let (($x146 (= $x145 true)))
 (let (($x154 (= $x146 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x95 (concat ?x93 (concat ?x59 ?x57)))))
 (let (($x103 (= ?x102 input.dst.llvm-%m2)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x85 (= $x97 true)))
 (let (($x98 (= $x85 true)))
 (let (($x86 (= $x98 true)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x55)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x62 (= (_ bv0 32) ?x24)))
 (let ((?x61 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x61)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x89 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x69 (and $x25 $x89)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (and $x68 $x69)))
 (let (($x22 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x74 (and $x9 $x23)))
 (let (($x79 (not $x74)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (and $x51 $x81)))
 (let (($x39 (and (not $x54) $x79)))
 (let (($x49 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x8 (and $x65 $x49)))
 (let (($x7 (not $x8)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (and $x10 $x129)))
 (let (($x72 (and (not $x83) $x7)))
 (let (($x37 (and (and (and (and (and (and $x72 $x39) $x67) $x22) $x56) $x80) $x62)))
 (let (($x21 (and $x37 $x11)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x13 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x73 (or false (or false (and (and true (or $x13 $x15)) (or $x6 $x75))))))
 (let (($x44 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x73)))
 (let (($x42 (and $x44 $x21)))
 (let (($x40 (= $x42 true)))
 (let (($x78 (= $x40 true)))
 (let (($x27 (= $x78 true)))
 (let (($x87 (and $x27 $x86)))
 (let (($x88 (and $x87 $x86)))
 (let (($x106 (and $x88 $x105)))
 (let (($x155 (and $x106 $x154)))
 (let (($x251 (and $x155 $x250)))
 (let (($x180 (and $x251 $x182)))
 (let (($x232 (and $x180 $x143)))
 (let (($x263 (and $x232 $x262)))
 (let (($x267 (=> $x263 $x266)))
 (not $x267)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x241 (= $x209 true)))
 (let (($x124 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var151X)))
 (let ((?x264 (input.spec-%var-m2-1.1.1 input.ind-%var151X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var151X)))
 (=> $x232 (= ?x264 ?x125))))))
 ))
 (let (($x144 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var150X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var150X)))
 (= $x232 $x224))))
 ))
 (let (($x166 (and $x144 $x124)))
 (let (($x244 (= $x166 true)))
 (let (($x137 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var145X)))
 (let ((?x230 (input.spec-%var-m1-1.1.1 input.ind-%var145X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var145X)))
 (=> $x161 (= ?x230 ?x136))))))
 ))
 (let (($x116 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var144X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var144X)))
 (= $x161 $x126))))
 ))
 (let (($x135 (and $x116 $x137)))
 (let (($x139 (= $x135 true)))
 (let (($x193 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x173 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x246 (bvadd ?x173 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x151))))
 (let ((?x264 (input.spec-%var-m2-1.1.1 input.ind-%var139X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var139X)))
 (=> $x232 (= ?x264 ?x206)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var138X)))
 (= $x232 $x228))))
 ))
 (let (($x196 (and $x260 $x193)))
 (let (($x195 (= $x196 true)))
 (let (($x235 (forall ((input.ind-%var133X (_ BitVec 32)) )(let ((?x173 (bvmul input.ind-%var133X (_ bv4 32))))
 (let ((?x110 (bvadd ?x173 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x188))))
 (let ((?x230 (input.spec-%var-m1-1.1.1 input.ind-%var133X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var133X)))
 (=> $x161 (= ?x230 ?x213)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var132X) (bvult input.ind-%var132X (_ bv100 32)))))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var132X)))
 (= $x161 $x228))))
 ))
 (let (($x231 (and $x225 $x235)))
 (let (($x233 (= $x231 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x145 (concat ?x115 (concat ?x112 ?x119)))))
 (let (($x154 (= ?x146 input.dst.llvm-%m2)))
 (let (($x155 (= $x154 true)))
 (let (($x148 (= $x155 true)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x57 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x57 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x96)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x19)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x42 $x78)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x21 $x27)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x77 $x61)))
 (let (($x36 (not $x80)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x89 $x69)))
 (let (($x62 (and (not $x56) $x36)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x22 $x18)))
 (let (($x25 (not $x68)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x129 $x83)))
 (let (($x46 (and (not $x28) $x25)))
 (let (($x88 (and (and (and (and (and (and $x46 $x62) $x55) $x11) $x60) $x63) $x82)))
 (let (($x90 (and $x88 $x84)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x70 (or false (or false (and (and true (or $x72 $x51)) (or $x23 $x74))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x94 (and $x33 $x90)))
 (let (($x95 (= $x94 true)))
 (let (($x100 (= $x95 true)))
 (let (($x92 (= $x100 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x76 (concat ?x34 (concat ?x48 ?x29)))))
 (let (($x41 (= ?x75 input.dst.llvm-%m1)))
 (let (($x45 (= $x41 true)))
 (let (($x73 (= $x45 true)))
 (let (($x93 (and $x73 $x92)))
 (let (($x123 (and $x93 $x106)))
 (let (($x149 (and $x123 $x148)))
 (let (($x242 (and $x149 $x233)))
 (let (($x199 (and $x242 $x195)))
 (let (($x211 (and $x199 $x139)))
 (let (($x174 (and $x211 $x244)))
 (let (($x109 (=> $x174 $x241)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x241 (= $x209 true)))
 (let (($x124 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var151X)))
 (let ((?x264 (input.spec-%var-m2-1.1.1 input.ind-%var151X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var151X)))
 (=> $x232 (= ?x264 ?x125))))))
 ))
 (let (($x144 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var150X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var150X)))
 (= $x232 $x224))))
 ))
 (let (($x166 (and $x144 $x124)))
 (let (($x244 (= $x166 true)))
 (let (($x137 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var145X)))
 (let ((?x230 (input.spec-%var-m1-1.1.1 input.ind-%var145X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var145X)))
 (=> $x161 (= ?x230 ?x136))))))
 ))
 (let (($x116 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var144X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var144X)))
 (= $x161 $x126))))
 ))
 (let (($x135 (and $x116 $x137)))
 (let (($x139 (= $x135 true)))
 (let (($x193 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x173 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x246 (bvadd ?x173 input.dst.llvm-%m2)))
 (let ((?x151 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem ?x246))))
 (let ((?x206 (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x246 (_ bv2 32))) ?x151))))
 (let ((?x264 (input.spec-%var-m2-1.1.1 input.ind-%var139X)))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var139X)))
 (=> $x232 (= ?x264 ?x206)))))))))
 ))
 (let (($x260 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x232 (input.spec-%var-m2-1.0.1 input.ind-%var138X)))
 (= $x232 $x228))))
 ))
 (let (($x196 (and $x260 $x193)))
 (let (($x195 (= $x196 true)))
 (let (($x235 (forall ((input.ind-%var133X (_ BitVec 32)) )(let ((?x173 (bvmul input.ind-%var133X (_ bv4 32))))
 (let ((?x110 (bvadd ?x173 input.dst.llvm-%m1)))
 (let ((?x188 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv1 32))) (select input.dst.llvm-mem ?x110))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x110 (_ bv2 32))) ?x188))))
 (let ((?x230 (input.spec-%var-m1-1.1.1 input.ind-%var133X)))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var133X)))
 (=> $x161 (= ?x230 ?x213)))))))))
 ))
 (let (($x225 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x228 (and (bvule (_ bv0 32) input.ind-%var132X) (bvult input.ind-%var132X (_ bv100 32)))))
 (let (($x161 (input.spec-%var-m1-1.0.1 input.ind-%var132X)))
 (= $x161 $x228))))
 ))
 (let (($x231 (and $x225 $x235)))
 (let (($x233 (= $x231 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x146 (concat ?x145 (concat ?x115 (concat ?x112 ?x119)))))
 (let (($x154 (= ?x146 input.dst.llvm-%m2)))
 (let (($x155 (= $x154 true)))
 (let (($x148 (= $x155 true)))
 (let (($x102 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x57 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x57 $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x96)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x19)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x66)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x42 $x78)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x21 $x27)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x77 $x61)))
 (let (($x36 (not $x80)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x89 $x69)))
 (let (($x62 (and (not $x56) $x36)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x22 $x18)))
 (let (($x25 (not $x68)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (and $x129 $x83)))
 (let (($x46 (and (not $x28) $x25)))
 (let (($x88 (and (and (and (and (and (and $x46 $x62) $x55) $x11) $x60) $x63) $x82)))
 (let (($x90 (and $x88 $x84)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x70 (or false (or false (and (and true (or $x72 $x51)) (or $x23 $x74))))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x94 (and $x33 $x90)))
 (let (($x95 (= $x94 true)))
 (let (($x100 (= $x95 true)))
 (let (($x92 (= $x100 true)))
 (let ((?x29 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x76 (concat ?x34 (concat ?x48 ?x29)))))
 (let (($x41 (= ?x75 input.dst.llvm-%m1)))
 (let (($x45 (= $x41 true)))
 (let (($x73 (= $x45 true)))
 (let (($x93 (and $x73 $x92)))
 (let (($x123 (and $x93 $x106)))
 (let (($x149 (and $x123 $x148)))
 (let (($x242 (and $x149 $x233)))
 (let (($x199 (and $x242 $x195)))
 (let (($x211 (and $x199 $x139)))
 (let (($x174 (and $x211 $x244)))
 (let (($x109 (=> $x174 $x241)))
 (not $x109)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00008000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40404040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00008003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x40404000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00008000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00008000) #x00
      #x40))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00008003)
                                   (k!0 #x00008002)
                                   (k!0 #x00008001)
                                   (k!0 #x00008000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00008003)
                                   (k!0 #x00008002)
                                   (k!0 #x00008001)
                                   (k!0 #x00008000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00008003)
                                   (k!0 #x00008002)
                                   (k!0 #x00008001)
                                   (k!0 #x00008000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00008003)
                                   (k!0 #x00008002)
                                   (k!0 #x00008001)
                                   (k!0 #x00008000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3e3e55f4)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdf9fa9f8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x80018008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdf9fa9fb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3e3e55f7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3e3e55f4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x3afeb700)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdf9fa9f8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3e3e55f5) #x80
    (ite (= x!0 #xdf9fa9fb) #x3a
    (ite (= x!0 #x3e3e55f7) #x80
    (ite (= x!0 #x3e3e55f4) #x08
    (ite (= x!0 #xdf9fa9fa) #xfe
    (ite (= x!0 #x3e3e55f6) #x01
    (ite (= x!0 #xdf9fa9f9) #xb7
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xdf9fa9fb)
                                      (k!11 #xdf9fa9fa)
                                      (k!11 #xdf9fa9f9)
                                      (k!11 #xdf9fa9f8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xdf9fa9fb)
                                      (k!11 #xdf9fa9fa)
                                      (k!11 #xdf9fa9f9)
                                      (k!11 #xdf9fa9f8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xdf9fa9fb)
                                      (k!11 #xdf9fa9fa)
                                      (k!11 #xdf9fa9f9)
                                      (k!11 #xdf9fa9f8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xdf9fa9fb)
                                      (k!11 #xdf9fa9fa)
                                      (k!11 #xdf9fa9f9)
                                      (k!11 #xdf9fa9f8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3e3e55f7)
                                      (k!11 #x3e3e55f6)
                                      (k!11 #x3e3e55f5)
                                      (k!11 #x3e3e55f4)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3e3e55f7)
                                      (k!11 #x3e3e55f6)
                                      (k!11 #x3e3e55f5)
                                      (k!11 #x3e3e55f4)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3e3e55f7)
                                      (k!11 #x3e3e55f6)
                                      (k!11 #x3e3e55f5)
                                      (k!11 #x3e3e55f4)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x3e3e55f7)
                                      (k!11 #x3e3e55f6)
                                      (k!11 #x3e3e55f5)
                                      (k!11 #x3e3e55f4))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x172 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x186 (= (_ bv0 8) ?x172)))
 (let (($x212 (= $x186 true)))
 (let (($x134 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var207X)))
 (let ((?x169 (input.spec-%var-m2-1.1.1 input.ind-%var207X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var207X)))
 (=> $x225 (= ?x169 ?x221))))))
 ))
 (let (($x207 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var206X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var206X)))
 (= $x225 $x240))))
 ))
 (let (($x50 (and $x207 $x134)))
 (let (($x157 (= $x50 true)))
 (let (($x222 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x147 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var201X)))
 (let ((?x109 (input.spec-%var-m1-1.1.1 input.ind-%var201X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var201X)))
 (=> $x170 (= ?x109 ?x147))))))
 ))
 (let (($x215 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var200X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var200X)))
 (= $x170 $x191))))
 ))
 (let (($x131 (and $x215 $x222)))
 (let (($x204 (= $x131 true)))
 (let (($x250 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x151 (bvmul input.ind-%var195X (_ bv4 32))))
 (let ((?x226 (bvadd ?x151 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x197))))
 (let ((?x109 (input.spec-%var-m1-1.1.1 input.ind-%var195X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var195X)))
 (=> $x170 (= ?x109 ?x108)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X (_ bv100 32)))))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var194X)))
 (= $x170 $x168))))
 ))
 (let (($x38 (and $x244 $x250)))
 (let (($x177 (= $x38 true)))
 (let (($x132 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x151 (bvmul input.ind-%var189X (_ bv4 32))))
 (let ((?x198 (bvadd ?x151 input.dst.llvm-%m2)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x193))))
 (let ((?x169 (input.spec-%var-m2-1.1.1 input.ind-%var189X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var189X)))
 (=> $x225 (= ?x169 ?x116)))))))))
 ))
 (let (($x175 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var188X) (bvult input.ind-%var188X (_ bv100 32)))))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var188X)))
 (= $x225 $x168))))
 ))
 (let (($x137 (and $x175 $x132)))
 (let (($x135 (= $x137 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x148 (concat ?x146 (concat ?x119 ?x121)))))
 (let (($x159 (= ?x149 input.dst.llvm-%m1)))
 (let (($x161 (= $x159 true)))
 (let (($x237 (= $x161 true)))
 (let (($x105 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x103 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x106 (and $x103 $x105)))
 (let (($x123 (= $x106 true)))
 (let (($x130 (= $x123 true)))
 (let (($x145 (= $x130 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x82 (= (_ bv0 32) ?x19)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x87 (= (_ bv0 32) ?x63)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x42 $x78)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x21 $x27)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x80 $x36)))
 (let (($x97 (not $x62)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x24 $x77)))
 (let (($x55 (and (not $x61) $x97)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x68 $x25)))
 (let (($x89 (not $x46)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x49 $x7)))
 (let (($x56 (and (not $x18) $x89)))
 (let (($x95 (and (and (and (and (and (and $x56 $x55) $x85) $x98) $x60) $x66) $x87)))
 (let (($x100 (and $x95 $x82)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x28 (or false (or false (and (and true (or $x71 $x23)) (or $x31 $x70))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x92 (and $x22 $x100)))
 (let (($x93 (= $x92 true)))
 (let (($x99 (= $x93 true)))
 (let (($x59 (= $x99 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x75 (concat ?x48 (concat ?x5 ?x26)))))
 (let (($x73 (= ?x41 input.dst.llvm-%m2)))
 (let (($x44 (= $x73 true)))
 (let (($x64 (= $x44 true)))
 (let (($x57 (and $x64 $x59)))
 (let (($x111 (and $x57 $x145)))
 (let (($x192 (and $x111 $x237)))
 (let (($x139 (and $x192 $x135)))
 (let (($x163 (and $x139 $x177)))
 (let (($x128 (and $x163 $x204)))
 (let (($x140 (and $x128 $x157)))
 (let (($x236 (=> $x140 $x212)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x172 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x186 (= (_ bv0 8) ?x172)))
 (let (($x212 (= $x186 true)))
 (let (($x134 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var207X)))
 (let ((?x169 (input.spec-%var-m2-1.1.1 input.ind-%var207X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var207X)))
 (=> $x225 (= ?x169 ?x221))))))
 ))
 (let (($x207 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var206X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var206X)))
 (= $x225 $x240))))
 ))
 (let (($x50 (and $x207 $x134)))
 (let (($x157 (= $x50 true)))
 (let (($x222 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x147 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var201X)))
 (let ((?x109 (input.spec-%var-m1-1.1.1 input.ind-%var201X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var201X)))
 (=> $x170 (= ?x109 ?x147))))))
 ))
 (let (($x215 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var200X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var200X)))
 (= $x170 $x191))))
 ))
 (let (($x131 (and $x215 $x222)))
 (let (($x204 (= $x131 true)))
 (let (($x250 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x151 (bvmul input.ind-%var195X (_ bv4 32))))
 (let ((?x226 (bvadd ?x151 input.dst.llvm-%m1)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv1 32))) (select input.dst.llvm-mem ?x226))))
 (let ((?x108 (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x226 (_ bv2 32))) ?x197))))
 (let ((?x109 (input.spec-%var-m1-1.1.1 input.ind-%var195X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var195X)))
 (=> $x170 (= ?x109 ?x108)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X (_ bv100 32)))))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var194X)))
 (= $x170 $x168))))
 ))
 (let (($x38 (and $x244 $x250)))
 (let (($x177 (= $x38 true)))
 (let (($x132 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x151 (bvmul input.ind-%var189X (_ bv4 32))))
 (let ((?x198 (bvadd ?x151 input.dst.llvm-%m2)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv1 32))) (select input.dst.llvm-mem ?x198))))
 (let ((?x116 (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x198 (_ bv2 32))) ?x193))))
 (let ((?x169 (input.spec-%var-m2-1.1.1 input.ind-%var189X)))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var189X)))
 (=> $x225 (= ?x169 ?x116)))))))))
 ))
 (let (($x175 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var188X) (bvult input.ind-%var188X (_ bv100 32)))))
 (let (($x225 (input.spec-%var-m2-1.0.1 input.ind-%var188X)))
 (= $x225 $x168))))
 ))
 (let (($x137 (and $x175 $x132)))
 (let (($x135 (= $x137 true)))
 (let ((?x121 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x146 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x148 (concat ?x146 (concat ?x119 ?x121)))))
 (let (($x159 (= ?x149 input.dst.llvm-%m1)))
 (let (($x161 (= $x159 true)))
 (let (($x237 (= $x161 true)))
 (let (($x105 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x103 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x106 (and $x103 $x105)))
 (let (($x123 (= $x106 true)))
 (let (($x130 (= $x123 true)))
 (let (($x145 (= $x130 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x82 (= (_ bv0 32) ?x19)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x87 (= (_ bv0 32) ?x63)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x78 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x42 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (and $x42 $x78)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x21 $x27)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x80 $x36)))
 (let (($x97 (not $x62)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x61 (and $x24 $x77)))
 (let (($x55 (and (not $x61) $x97)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x68 $x25)))
 (let (($x89 (not $x46)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x49 $x7)))
 (let (($x56 (and (not $x18) $x89)))
 (let (($x95 (and (and (and (and (and (and $x56 $x55) $x85) $x98) $x60) $x66) $x87)))
 (let (($x100 (and $x95 $x82)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x28 (or false (or false (and (and true (or $x71 $x23)) (or $x31 $x70))))))
 (let (($x22 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x28)))
 (let (($x92 (and $x22 $x100)))
 (let (($x93 (= $x92 true)))
 (let (($x99 (= $x93 true)))
 (let (($x59 (= $x99 true)))
 (let ((?x26 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x75 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x75 (concat ?x48 (concat ?x5 ?x26)))))
 (let (($x73 (= ?x41 input.dst.llvm-%m2)))
 (let (($x44 (= $x73 true)))
 (let (($x64 (= $x44 true)))
 (let (($x57 (and $x64 $x59)))
 (let (($x111 (and $x57 $x145)))
 (let (($x192 (and $x111 $x237)))
 (let (($x139 (and $x192 $x135)))
 (let (($x163 (and $x139 $x177)))
 (let (($x128 (and $x163 $x204)))
 (let (($x140 (and $x128 $x157)))
 (let (($x236 (=> $x140 $x212)))
 (not $x236))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9a5fae04)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x21e9cf50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdf7dfd10)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x21e9cf53)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9a5fae07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x21e9cf50)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xbffc3700)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9a5fae04)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x21e9cf50) #x10
    (ite (= x!0 #x9a5fae05) #x37
    (ite (= x!0 #x21e9cf53) #xdf
    (ite (= x!0 #x9a5fae07) #xbf
    (ite (= x!0 #x9a5fae06) #xfc
    (ite (= x!0 #x21e9cf52) #x7d
    (ite (= x!0 #x21e9cf51) #xfd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x167 (= (_ bv0 3) ?x210)))
 (let (($x256 (= $x167 true)))
 (let (($x152 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var263X)))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var263X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var263X)))
 (=> $x208 (= ?x186 ?x124))))))
 ))
 (let (($x258 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var262X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var262X)))
 (= $x208 $x224))))
 ))
 (let (($x30 (and $x258 $x152)))
 (let (($x220 (= $x30 true)))
 (let (($x265 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var257X)))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var257X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var257X)))
 (=> $x175 (= ?x136 ?x238))))))
 ))
 (let (($x228 (forall ((input.ind-%var256X (_ BitVec 32)) )(let (($x211 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var256X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var256X)))
 (= $x175 $x211))))
 ))
 (let (($x253 (and $x228 $x265)))
 (let (($x114 (= $x253 true)))
 (let (($x260 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x197 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x267 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x247))))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var251X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var251X)))
 (=> $x208 (= ?x186 ?x246)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var250X)))
 (= $x208 $x202))))
 ))
 (let (($x232 (and $x157 $x260)))
 (let (($x264 (= $x232 true)))
 (let (($x200 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x197 (bvmul input.ind-%var245X (_ bv4 32))))
 (let ((?x178 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x250))))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var245X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var245X)))
 (=> $x175 (= ?x136 ?x215)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var244X)))
 (= $x175 $x202))))
 ))
 (let (($x222 (and $x206 $x200)))
 (let (($x131 (= $x222 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x237 (concat ?x149 (concat ?x121 ?x112)))))
 (let (($x229 (= ?x192 input.dst.llvm-%m2)))
 (let (($x225 (= $x229 true)))
 (let (($x185 (= $x225 true)))
 (let (($x130 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x145 (and $x105 $x130)))
 (let (($x111 (= $x145 true)))
 (let (($x155 (= $x111 true)))
 (let (($x148 (= $x155 true)))
 (let ((?x94 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x63 (= (_ bv0 32) ?x94)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x66 (= (_ bv0 32) ?x86)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x21 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x84 $x78)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x36 $x62)))
 (let (($x55 (not $x97)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x61 $x37)))
 (let (($x85 (and (not $x80) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x25 $x46)))
 (let (($x56 (not $x89)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x47 $x51)))
 (let (($x77 (and (not $x68) $x56)))
 (let (($x92 (and (and (and (and (and (and $x77 $x85) $x11) $x98) $x27) $x90) $x66)))
 (let (($x93 (and $x92 $x63)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x7 (or false (or false (and (and true (or $x74 $x79)) (or $x129 $x83))))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x99 (and $x69 $x93)))
 (let (($x59 (= $x99 true)))
 (let (($x57 (= $x59 true)))
 (let (($x101 (= $x57 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x41 (concat ?x5 (concat ?x52 ?x75)))))
 (let (($x44 (= ?x45 input.dst.llvm-%m1)))
 (let (($x64 (= $x44 true)))
 (let (($x65 (= $x64 true)))
 (let (($x102 (and $x65 $x101)))
 (let (($x122 (and $x102 $x148)))
 (let (($x173 (and $x122 $x185)))
 (let (($x204 (and $x173 $x131)))
 (let (($x205 (and $x204 $x264)))
 (let (($x261 (and $x205 $x114)))
 (let (($x255 (and $x261 $x220)))
 (let (($x245 (=> $x255 $x256)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x210 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x167 (= (_ bv0 3) ?x210)))
 (let (($x256 (= $x167 true)))
 (let (($x152 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var263X)))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var263X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var263X)))
 (=> $x208 (= ?x186 ?x124))))))
 ))
 (let (($x258 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var262X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var262X)))
 (= $x208 $x224))))
 ))
 (let (($x30 (and $x258 $x152)))
 (let (($x220 (= $x30 true)))
 (let (($x265 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var257X)))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var257X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var257X)))
 (=> $x175 (= ?x136 ?x238))))))
 ))
 (let (($x228 (forall ((input.ind-%var256X (_ BitVec 32)) )(let (($x211 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var256X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var256X)))
 (= $x175 $x211))))
 ))
 (let (($x253 (and $x228 $x265)))
 (let (($x114 (= $x253 true)))
 (let (($x260 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x197 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x267 (bvadd ?x197 input.dst.llvm-%m2)))
 (let ((?x247 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x247))))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var251X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var251X)))
 (=> $x208 (= ?x186 ?x246)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var250X)))
 (= $x208 $x202))))
 ))
 (let (($x232 (and $x157 $x260)))
 (let (($x264 (= $x232 true)))
 (let (($x200 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x197 (bvmul input.ind-%var245X (_ bv4 32))))
 (let ((?x178 (bvadd ?x197 input.dst.llvm-%m1)))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem ?x178))))
 (let ((?x215 (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x178 (_ bv2 32))) ?x250))))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var245X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var245X)))
 (=> $x175 (= ?x136 ?x215)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x202 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var244X)))
 (= $x175 $x202))))
 ))
 (let (($x222 (and $x206 $x200)))
 (let (($x131 (= $x222 true)))
 (let ((?x112 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x237 (concat ?x149 (concat ?x121 ?x112)))))
 (let (($x229 (= ?x192 input.dst.llvm-%m2)))
 (let (($x225 (= $x229 true)))
 (let (($x185 (= $x225 true)))
 (let (($x130 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x145 (and $x105 $x130)))
 (let (($x111 (= $x145 true)))
 (let (($x155 (= $x111 true)))
 (let (($x148 (= $x155 true)))
 (let ((?x94 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x63 (= (_ bv0 32) ?x94)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x66 (= (_ bv0 32) ?x86)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x42)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x78 (and $x21 $x40)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x27 (and $x84 $x78)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x36 $x62)))
 (let (($x55 (not $x97)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x61 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x61 $x37)))
 (let (($x85 (and (not $x80) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x25 $x46)))
 (let (($x56 (not $x89)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (and $x47 $x51)))
 (let (($x77 (and (not $x68) $x56)))
 (let (($x92 (and (and (and (and (and (and $x77 $x85) $x11) $x98) $x27) $x90) $x66)))
 (let (($x93 (and $x92 $x63)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x79 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x7 (or false (or false (and (and true (or $x74 $x79)) (or $x129 $x83))))))
 (let (($x69 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x99 (and $x69 $x93)))
 (let (($x59 (= $x99 true)))
 (let (($x57 (= $x59 true)))
 (let (($x101 (= $x57 true)))
 (let ((?x75 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x45 (concat ?x41 (concat ?x5 (concat ?x52 ?x75)))))
 (let (($x44 (= ?x45 input.dst.llvm-%m1)))
 (let (($x64 (= $x44 true)))
 (let (($x65 (= $x64 true)))
 (let (($x102 (and $x65 $x101)))
 (let (($x122 (and $x102 $x148)))
 (let (($x173 (and $x122 $x185)))
 (let (($x204 (and $x173 $x131)))
 (let (($x205 (and $x204 $x264)))
 (let (($x261 (and $x205 $x114)))
 (let (($x255 (and $x261 $x220)))
 (let (($x245 (=> $x255 $x256)))
 (not $x245))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04040400)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000080) #x00
      #x04))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69215b54)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd6cddce8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xd7dd7904)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd6cddceb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69215b57)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69215b54)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xffdfbe00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd6cddce8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xd6cddceb) #xff
    (ite (= x!0 #x69215b55) #x79
    (ite (= x!0 #x69215b57) #xd7
    (ite (= x!0 #x69215b54) #x04
    (ite (= x!0 #xd6cddcea) #xdf
    (ite (= x!0 #xd6cddce9) #xbe
    (ite (= x!0 #x69215b56) #xdd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x219 (= (_ bv0 2) ?x201)))
 (let (($x180 (= $x219 true)))
 (let (($x235 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x107 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var319X)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 input.ind-%var319X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var319X)))
 (=> $x143 (= ?x167 ?x107))))))
 ))
 (let (($x189 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var318X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var318X)))
 (= $x143 $x176))))
 ))
 (let (($x117 (and $x189 $x235)))
 (let (($x127 (= $x117 true)))
 (let (($x115 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var313X)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 input.ind-%var313X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var313X)))
 (=> $x206 (= ?x147 ?x223))))))
 ))
 (let (($x236 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var312X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var312X)))
 (= $x206 $x172))))
 ))
 (let (($x230 (and $x236 $x115)))
 (let (($x20 (= $x230 true)))
 (let (($x166 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x247 (bvmul input.ind-%var307X (_ bv4 32))))
 (let ((?x181 (bvadd ?x247 input.dst.llvm-%m2)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x184))))
 (let ((?x167 (input.spec-%var-m2-1.1.1 input.ind-%var307X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var307X)))
 (=> $x143 (= ?x167 ?x249)))))))))
 ))
 (let (($x220 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var306X) (bvult input.ind-%var306X (_ bv100 32)))))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var306X)))
 (= $x143 $x251))))
 ))
 (let (($x244 (and $x220 $x166)))
 (let (($x170 (= $x244 true)))
 (let (($x162 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x247 (bvmul input.ind-%var301X (_ bv4 32))))
 (let ((?x242 (bvadd ?x247 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x260))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 input.ind-%var301X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var301X)))
 (=> $x206 (= ?x147 ?x228)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X (_ bv100 32)))))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var300X)))
 (= $x206 $x251))))
 ))
 (let (($x265 (and $x108 $x162)))
 (let (($x253 (= $x265 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x185 (concat ?x192 (concat ?x112 ?x119)))))
 (let (($x187 (= ?x173 input.dst.llvm-%m2)))
 (let (($x175 (= $x187 true)))
 (let (($x195 (= $x175 true)))
 (let (($x155 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x148 (and $x130 $x155)))
 (let (($x122 (= $x148 true)))
 (let (($x161 (= $x122 true)))
 (let (($x237 (= $x161 true)))
 (let ((?x100 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x86 (= (_ bv0 32) ?x100)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x90 (= (_ bv0 32) ?x60)))
 (let ((?x27 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x84 $x42)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x19 $x40)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x62 $x97)))
 (let (($x85 (not $x55)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x80 $x88)))
 (let (($x96 (and (not $x36) $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x46 $x89)))
 (let (($x77 (not $x56)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x18 $x81)))
 (let (($x37 (and (not $x25) $x77)))
 (let (($x99 (and (and (and (and (and (and $x37 $x96) $x95) $x98) $x78) $x82) $x90)))
 (let (($x59 (and $x99 $x86)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x51 (or false (or false (and (and true (or $x39 $x70)) (or $x22 $x49))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x57 (and $x24 $x59)))
 (let (($x101 (= $x57 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x45 (concat ?x52 (concat ?x34 ?x41)))))
 (let (($x64 (= ?x73 input.dst.llvm-%m1)))
 (let (($x65 (= $x64 true)))
 (let (($x72 (= $x65 true)))
 (let (($x104 (and $x72 $x103)))
 (let (($x154 (and $x104 $x237)))
 (let (($x151 (and $x154 $x195)))
 (let (($x114 (and $x151 $x253)))
 (let (($x109 (and $x114 $x170)))
 (let (($x252 (and $x109 $x20)))
 (let (($x133 (and $x252 $x127)))
 (let (($x32 (=> $x133 $x180)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x201 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x219 (= (_ bv0 2) ?x201)))
 (let (($x180 (= $x219 true)))
 (let (($x235 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x107 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var319X)))
 (let ((?x167 (input.spec-%var-m2-1.1.1 input.ind-%var319X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var319X)))
 (=> $x143 (= ?x167 ?x107))))))
 ))
 (let (($x189 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var318X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var318X)))
 (= $x143 $x176))))
 ))
 (let (($x117 (and $x189 $x235)))
 (let (($x127 (= $x117 true)))
 (let (($x115 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var313X)))
 (let ((?x147 (input.spec-%var-m1-1.1.1 input.ind-%var313X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var313X)))
 (=> $x206 (= ?x147 ?x223))))))
 ))
 (let (($x236 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var312X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var312X)))
 (= $x206 $x172))))
 ))
 (let (($x230 (and $x236 $x115)))
 (let (($x20 (= $x230 true)))
 (let (($x166 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x247 (bvmul input.ind-%var307X (_ bv4 32))))
 (let ((?x181 (bvadd ?x247 input.dst.llvm-%m2)))
 (let ((?x184 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv1 32))) (select input.dst.llvm-mem ?x181))))
 (let ((?x249 (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x181 (_ bv2 32))) ?x184))))
 (let ((?x167 (input.spec-%var-m2-1.1.1 input.ind-%var307X)))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var307X)))
 (=> $x143 (= ?x167 ?x249)))))))))
 ))
 (let (($x220 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var306X) (bvult input.ind-%var306X (_ bv100 32)))))
 (let (($x143 (input.spec-%var-m2-1.0.1 input.ind-%var306X)))
 (= $x143 $x251))))
 ))
 (let (($x244 (and $x220 $x166)))
 (let (($x170 (= $x244 true)))
 (let (($x162 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x247 (bvmul input.ind-%var301X (_ bv4 32))))
 (let ((?x242 (bvadd ?x247 input.dst.llvm-%m1)))
 (let ((?x260 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem ?x242))))
 (let ((?x228 (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x242 (_ bv2 32))) ?x260))))
 (let ((?x147 (input.spec-%var-m1-1.1.1 input.ind-%var301X)))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var301X)))
 (=> $x206 (= ?x147 ?x228)))))))))
 ))
 (let (($x108 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X (_ bv100 32)))))
 (let (($x206 (input.spec-%var-m1-1.0.1 input.ind-%var300X)))
 (= $x206 $x251))))
 ))
 (let (($x265 (and $x108 $x162)))
 (let (($x253 (= $x265 true)))
 (let ((?x119 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x185 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x173 (concat ?x185 (concat ?x192 (concat ?x112 ?x119)))))
 (let (($x187 (= ?x173 input.dst.llvm-%m2)))
 (let (($x175 (= $x187 true)))
 (let (($x195 (= $x175 true)))
 (let (($x155 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x130 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x148 (and $x130 $x155)))
 (let (($x122 (= $x148 true)))
 (let (($x161 (= $x122 true)))
 (let (($x237 (= $x161 true)))
 (let ((?x100 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x86 (= (_ bv0 32) ?x100)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x90 (= (_ bv0 32) ?x60)))
 (let ((?x27 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x27)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (and $x84 $x42)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x19 $x40)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x62 $x97)))
 (let (($x85 (not $x55)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x36 (and $x80 $x88)))
 (let (($x96 (and (not $x36) $x85)))
 (let (($x89 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x46 $x89)))
 (let (($x77 (not $x56)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x18 $x81)))
 (let (($x37 (and (not $x25) $x77)))
 (let (($x99 (and (and (and (and (and (and $x37 $x96) $x95) $x98) $x78) $x82) $x90)))
 (let (($x59 (and $x99 $x86)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x51 (or false (or false (and (and true (or $x39 $x70)) (or $x22 $x49))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x57 (and $x24 $x59)))
 (let (($x101 (= $x57 true)))
 (let (($x102 (= $x101 true)))
 (let (($x103 (= $x102 true)))
 (let ((?x41 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x52 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x45 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x73 (concat ?x45 (concat ?x52 (concat ?x34 ?x41)))))
 (let (($x64 (= ?x73 input.dst.llvm-%m1)))
 (let (($x65 (= $x64 true)))
 (let (($x72 (= $x65 true)))
 (let (($x104 (and $x72 $x103)))
 (let (($x154 (and $x104 $x237)))
 (let (($x151 (and $x154 $x195)))
 (let (($x114 (and $x151 $x253)))
 (let (($x109 (and $x114 $x170)))
 (let (($x252 (and $x109 $x20)))
 (let (($x133 (and $x252 $x127)))
 (let (($x32 (=> $x133 $x180)))
 (not $x32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x199 (= (_ bv0 2) ?x67)))
 (let (($x174 (= $x199 true)))
 (let (($x268 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var343X)))
 (let ((?x228 (input.spec-%var-m2-1.1.1 input.ind-%var343X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var343X)))
 (=> $x254 (= ?x228 ?x241))))))
 ))
 (let (($x138 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var342X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var342X)))
 (= $x254 $x12))))
 ))
 (let (($x164 (and $x138 $x268)))
 (let (($x218 (= $x164 true)))
 (let (($x146 (forall ((input.ind-%var337X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var337X)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 input.ind-%var337X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var337X)))
 (=> $x176 (= ?x201 ?x212))))))
 ))
 (let (($x245 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var336X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var336X)))
 (= $x176 $x210))))
 ))
 (let (($x141 (and $x245 $x146)))
 (let (($x125 (= $x141 true)))
 (let (($x50 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x182 (bvmul input.ind-%var331X (_ bv4 32))))
 (let ((?x134 (bvadd ?x182 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x196))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 input.ind-%var331X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var331X)))
 (=> $x176 (= ?x201 ?x233)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var330X)))
 (= $x176 $x264))))
 ))
 (let (($x157 (and $x117 $x50)))
 (let (($x208 (= $x157 true)))
 (let (($x16 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x182 (bvmul input.ind-%var325X (_ bv4 32))))
 (let ((?x184 (bvadd ?x182 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x179))))
 (let ((?x228 (input.spec-%var-m2-1.1.1 input.ind-%var325X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var325X)))
 (=> $x254 (= ?x228 ?x262)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var324X)))
 (= $x254 $x264))))
 ))
 (let (($x6 (and $x259 $x16)))
 (let (($x115 (= $x6 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x175 (concat ?x229 (concat ?x112 ?x192)))))
 (let (($x151 (= ?x195 input.dst.llvm-%m1)))
 (let (($x203 (= $x151 true)))
 (let (($x206 (= $x203 true)))
 (let (($x122 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x155 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x161 (and $x155 $x122)))
 (let (($x237 (= $x161 true)))
 (let (($x154 (= $x237 true)))
 (let (($x225 (= $x154 true)))
 (let ((?x93 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x60 (= (_ bv0 32) ?x93)))
 (let ((?x27 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x27)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x19 $x21)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x94 $x42)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x97 $x55)))
 (let (($x96 (not $x85)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x36 $x87)))
 (let (($x11 (and (not $x62) $x96)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x89 $x56)))
 (let (($x37 (not $x77)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x68 $x23)))
 (let (($x88 (and (not $x46) $x37)))
 (let (($x57 (and (and (and (and (and (and $x88 $x11) $x95) $x98) $x40) $x63) $x82)))
 (let (($x101 (and $x57 $x60)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x81 (or false (or false (and (and true (or $x33 $x83)) (or $x69 $x47))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x102 (and $x61 $x101)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x73 (concat ?x34 (concat ?x76 ?x45)))))
 (let (($x65 (= ?x44 input.dst.llvm-%m2)))
 (let (($x72 (= $x65 true)))
 (let (($x54 (= $x72 true)))
 (let (($x123 (and $x54 $x105)))
 (let (($x185 (and $x123 $x225)))
 (let (($x177 (and $x185 $x206)))
 (let (($x230 (and $x177 $x115)))
 (let (($x186 (and $x230 $x208)))
 (let (($x257 (and $x186 $x125)))
 (let (($x214 (and $x257 $x218)))
 (let (($x227 (=> $x214 $x174)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x67 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x199 (= (_ bv0 2) ?x67)))
 (let (($x174 (= $x199 true)))
 (let (($x268 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var343X)))
 (let ((?x228 (input.spec-%var-m2-1.1.1 input.ind-%var343X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var343X)))
 (=> $x254 (= ?x228 ?x241))))))
 ))
 (let (($x138 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var342X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var342X)))
 (= $x254 $x12))))
 ))
 (let (($x164 (and $x138 $x268)))
 (let (($x218 (= $x164 true)))
 (let (($x146 (forall ((input.ind-%var337X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var337X)))
 (let ((?x201 (input.spec-%var-m1-1.1.1 input.ind-%var337X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var337X)))
 (=> $x176 (= ?x201 ?x212))))))
 ))
 (let (($x245 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x210 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var336X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var336X)))
 (= $x176 $x210))))
 ))
 (let (($x141 (and $x245 $x146)))
 (let (($x125 (= $x141 true)))
 (let (($x50 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x182 (bvmul input.ind-%var331X (_ bv4 32))))
 (let ((?x134 (bvadd ?x182 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x196))))
 (let ((?x201 (input.spec-%var-m1-1.1.1 input.ind-%var331X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var331X)))
 (=> $x176 (= ?x201 ?x233)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var330X)))
 (= $x176 $x264))))
 ))
 (let (($x157 (and $x117 $x50)))
 (let (($x208 (= $x157 true)))
 (let (($x16 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x182 (bvmul input.ind-%var325X (_ bv4 32))))
 (let ((?x184 (bvadd ?x182 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv1 32))) (select input.dst.llvm-mem ?x184))))
 (let ((?x262 (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x184 (_ bv2 32))) ?x179))))
 (let ((?x228 (input.spec-%var-m2-1.1.1 input.ind-%var325X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var325X)))
 (=> $x254 (= ?x228 ?x262)))))))))
 ))
 (let (($x259 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x264 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var324X)))
 (= $x254 $x264))))
 ))
 (let (($x6 (and $x259 $x16)))
 (let (($x115 (= $x6 true)))
 (let ((?x192 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x195 (concat ?x175 (concat ?x229 (concat ?x112 ?x192)))))
 (let (($x151 (= ?x195 input.dst.llvm-%m1)))
 (let (($x203 (= $x151 true)))
 (let (($x206 (= $x203 true)))
 (let (($x122 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x155 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x161 (and $x155 $x122)))
 (let (($x237 (= $x161 true)))
 (let (($x154 (= $x237 true)))
 (let (($x225 (= $x154 true)))
 (let ((?x93 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x60 (= (_ bv0 32) ?x93)))
 (let ((?x27 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x27)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x84 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x84)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x19 $x21)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x94 $x42)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x97 $x55)))
 (let (($x96 (not $x85)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x36 $x87)))
 (let (($x11 (and (not $x62) $x96)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x89 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x89 $x56)))
 (let (($x37 (not $x77)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x68 $x23)))
 (let (($x88 (and (not $x46) $x37)))
 (let (($x57 (and (and (and (and (and (and $x88 $x11) $x95) $x98) $x40) $x63) $x82)))
 (let (($x101 (and $x57 $x60)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x83 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x81 (or false (or false (and (and true (or $x33 $x83)) (or $x69 $x47))))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x102 (and $x61 $x101)))
 (let (($x103 (= $x102 true)))
 (let (($x104 (= $x103 true)))
 (let (($x105 (= $x104 true)))
 (let ((?x45 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x34 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x73 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x44 (concat ?x73 (concat ?x34 (concat ?x76 ?x45)))))
 (let (($x65 (= ?x44 input.dst.llvm-%m2)))
 (let (($x72 (= $x65 true)))
 (let (($x54 (= $x72 true)))
 (let (($x123 (and $x54 $x105)))
 (let (($x185 (and $x123 $x225)))
 (let (($x177 (and $x185 $x206)))
 (let (($x230 (and $x177 $x115)))
 (let (($x186 (and $x230 $x208)))
 (let (($x257 (and $x186 $x125)))
 (let (($x214 (and $x257 $x218)))
 (let (($x227 (=> $x214 $x174)))
 (not $x227))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x290 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var373X (_ bv4 32))))
 (let ((?x196 (bvadd ?x168 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x150))))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var373X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var373X)))
 (=> $x12 (= ?x67 ?x266)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var372X) (bvult input.ind-%var372X (_ bv100 32)))))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var372X)))
 (= $x12 $x244))))
 ))
 (let (($x291 (and $x270 $x290)))
 (let (($x191 (= true true)))
 (let (($x292 (and $x191 $x291)))
 (let (($x293 (= $x292 true)))
 (let (($x133 (forall ((input.ind-%var367X (_ BitVec 32)) )(let ((?x140 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var367X)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var367X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var367X)))
 (=> $x12 (= ?x67 ?x140))))))
 ))
 (let (($x217 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var366X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var366X)))
 (= $x12 $x153))))
 ))
 (let (($x240 (and $x217 $x133)))
 (let (($x169 (= $x240 true)))
 (let (($x149 (forall ((input.ind-%var361X (_ BitVec 32)) )(let ((?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var361X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var361X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var361X)))
 (=> $x194 (= ?x262 ?x256))))))
 ))
 (let (($x180 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var360X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var360X)))
 (= $x194 $x35))))
 ))
 (let (($x58 (and $x180 $x149)))
 (let (($x128 (= $x58 true)))
 (let (($x143 (forall ((input.ind-%var355X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var355X (_ bv4 32))))
 (let ((?x152 (bvadd ?x168 input.dst.llvm-%m2)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x197))))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var355X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var355X)))
 (=> $x12 (= ?x67 ?x231)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var354X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var354X) (bvult input.ind-%var354X (_ bv100 32)))))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var354X)))
 (= $x12 $x244))))
 ))
 (let (($x30 (and $x164 $x143)))
 (let (($x114 (= $x30 true)))
 (let (($x8 (forall ((input.ind-%var349X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var349X (_ bv4 32))))
 (let ((?x196 (bvadd ?x168 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x150))))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var349X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var349X)))
 (=> $x194 (= ?x262 ?x266)))))))))
 ))
 (let (($x226 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var348X) (bvult input.ind-%var348X (_ bv100 32)))))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var348X)))
 (= $x194 $x244))))
 ))
 (let (($x132 (and $x226 $x8)))
 (let (($x146 (= $x132 true)))
 (let ((?x229 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x203 (concat ?x173 (concat ?x112 ?x229)))))
 (let (($x177 (= ?x206 input.dst.llvm-%m1)))
 (let (($x251 (= $x177 true)))
 (let (($x254 (= $x251 true)))
 (let (($x237 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x154 (and $x122 $x237)))
 (let (($x225 (= $x154 true)))
 (let (($x185 (= $x225 true)))
 (let (($x187 (= $x185 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x59)))
 (let ((?x78 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x63 (= (_ bv0 32) ?x78)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x94 $x84)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x100 $x21)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x55 $x85)))
 (let (($x11 (not $x96)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x62 $x66)))
 (let (($x95 (and (not $x97) $x11)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x56 $x77)))
 (let (($x88 (not $x37)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x25 $x79)))
 (let (($x87 (and (not $x89) $x88)))
 (let (($x102 (and (and (and (and (and (and $x87 $x95) $x99) $x98) $x42) $x86) $x63)))
 (let (($x103 (and $x102 $x27)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x23 (or false (or false (and (and true (or $x28 $x49)) (or $x24 $x18))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x104 (and $x80 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x123 (= $x105 true)))
 (let (($x130 (= $x123 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x44 (concat ?x76 (concat ?x43 ?x73)))))
 (let (($x72 (= ?x64 input.dst.llvm-%m2)))
 (let (($x54 (= $x72 true)))
 (let (($x9 (= $x54 true)))
 (let (($x145 (and $x9 $x130)))
 (let (($x175 (and $x145 $x187)))
 (let (($x232 (and $x175 $x254)))
 (let (($x141 (and $x232 $x146)))
 (let (($x220 (and $x141 $x114)))
 (let (($x239 (and $x220 $x128)))
 (let (($x209 (and $x239 $x169)))
 (let (($x294 (=> $x209 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x290 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var373X (_ bv4 32))))
 (let ((?x196 (bvadd ?x168 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x150))))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var373X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var373X)))
 (=> $x12 (= ?x67 ?x266)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var372X) (bvult input.ind-%var372X (_ bv100 32)))))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var372X)))
 (= $x12 $x244))))
 ))
 (let (($x291 (and $x270 $x290)))
 (let (($x191 (= true true)))
 (let (($x292 (and $x191 $x291)))
 (let (($x293 (= $x292 true)))
 (let (($x133 (forall ((input.ind-%var367X (_ BitVec 32)) )(let ((?x140 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var367X)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var367X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var367X)))
 (=> $x12 (= ?x67 ?x140))))))
 ))
 (let (($x217 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var366X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var366X)))
 (= $x12 $x153))))
 ))
 (let (($x240 (and $x217 $x133)))
 (let (($x169 (= $x240 true)))
 (let (($x149 (forall ((input.ind-%var361X (_ BitVec 32)) )(let ((?x256 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var361X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var361X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var361X)))
 (=> $x194 (= ?x262 ?x256))))))
 ))
 (let (($x180 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var360X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var360X)))
 (= $x194 $x35))))
 ))
 (let (($x58 (and $x180 $x149)))
 (let (($x128 (= $x58 true)))
 (let (($x143 (forall ((input.ind-%var355X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var355X (_ bv4 32))))
 (let ((?x152 (bvadd ?x168 input.dst.llvm-%m2)))
 (let ((?x197 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem ?x152))))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x152 (_ bv2 32))) ?x197))))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var355X)))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var355X)))
 (=> $x12 (= ?x67 ?x231)))))))))
 ))
 (let (($x164 (forall ((input.ind-%var354X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var354X) (bvult input.ind-%var354X (_ bv100 32)))))
 (let (($x12 (input.spec-%var-m2-1.0.1 input.ind-%var354X)))
 (= $x12 $x244))))
 ))
 (let (($x30 (and $x164 $x143)))
 (let (($x114 (= $x30 true)))
 (let (($x8 (forall ((input.ind-%var349X (_ BitVec 32)) )(let ((?x168 (bvmul input.ind-%var349X (_ bv4 32))))
 (let ((?x196 (bvadd ?x168 input.dst.llvm-%m1)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv1 32))) (select input.dst.llvm-mem ?x196))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x196 (_ bv2 32))) ?x150))))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var349X)))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var349X)))
 (=> $x194 (= ?x262 ?x266)))))))))
 ))
 (let (($x226 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x244 (and (bvule (_ bv0 32) input.ind-%var348X) (bvult input.ind-%var348X (_ bv100 32)))))
 (let (($x194 (input.spec-%var-m1-1.0.1 input.ind-%var348X)))
 (= $x194 $x244))))
 ))
 (let (($x132 (and $x226 $x8)))
 (let (($x146 (= $x132 true)))
 (let ((?x229 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x173 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x203 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x206 (concat ?x203 (concat ?x173 (concat ?x112 ?x229)))))
 (let (($x177 (= ?x206 input.dst.llvm-%m1)))
 (let (($x251 (= $x177 true)))
 (let (($x254 (= $x251 true)))
 (let (($x237 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x122 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x154 (and $x122 $x237)))
 (let (($x225 (= $x154 true)))
 (let (($x185 (= $x225 true)))
 (let (($x187 (= $x185 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x59)))
 (let ((?x78 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x63 (= (_ bv0 32) ?x78)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x40)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x94 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x94 $x84)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x100 $x21)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x55 $x85)))
 (let (($x11 (not $x96)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x62 $x66)))
 (let (($x95 (and (not $x97) $x11)))
 (let (($x77 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x37 (and $x56 $x77)))
 (let (($x88 (not $x37)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x25 $x79)))
 (let (($x87 (and (not $x89) $x88)))
 (let (($x102 (and (and (and (and (and (and $x87 $x95) $x99) $x98) $x42) $x86) $x63)))
 (let (($x103 (and $x102 $x27)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x23 (or false (or false (and (and true (or $x28 $x49)) (or $x24 $x18))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x104 (and $x80 $x103)))
 (let (($x105 (= $x104 true)))
 (let (($x123 (= $x105 true)))
 (let (($x130 (= $x123 true)))
 (let ((?x73 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x64 (concat ?x44 (concat ?x76 (concat ?x43 ?x73)))))
 (let (($x72 (= ?x64 input.dst.llvm-%m2)))
 (let (($x54 (= $x72 true)))
 (let (($x9 (= $x54 true)))
 (let (($x145 (and $x9 $x130)))
 (let (($x175 (and $x145 $x187)))
 (let (($x232 (and $x175 $x254)))
 (let (($x141 (and $x232 $x146)))
 (let (($x220 (and $x141 $x114)))
 (let (($x239 (and $x220 $x128)))
 (let (($x209 (and $x239 $x169)))
 (let (($x294 (=> $x209 $x293)))
 (not $x294)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.ind-%var372X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0d488e08)
  (define-fun input.ind-%var373X!1 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f232624)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x20010018)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f232627)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0d488e0b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f232624)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x68022100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0d488e08)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x6f232626) #x01
    (ite (= x!0 #x20010021) #x80
    (ite (= x!0 #x6f232624) #x18
    (ite (= x!0 #x0d488e09) #x21
    (ite (= x!0 #x0d488e0a) #x02
    (ite (= x!0 #x6f232627) #x20
    (ite (= x!0 #x0d488e0b) #x68
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00008000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var372X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x8c3bf804)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x3a33fc00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var373X!1 () (_ BitVec 32)
    #x00000023)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x617fef18)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x3a33fc03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8c3bf807)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x3a33fc00)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xcf9bbb00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x8c3bf804)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x3a33fc00) #x18
    (ite (= x!0 #x3a33fc03) #x61
    (ite (= x!0 #x617fefa7) #x20
    (ite (= x!0 #x8c3bf807) #xcf
    (ite (= x!0 #x8c3bf805) #xbb
    (ite (= x!0 #x3a33fc02) #x7f
    (ite (= x!0 #x3a33fc01) #xef
    (ite (= x!0 #x8c3bf806) #x9b
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000023) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x3a33fc03)
                                     (k!2 #x3a33fc02)
                                     (k!2 #x3a33fc01)
                                     (k!2 #x3a33fc00)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x3a33fc03)
                                     (k!2 #x3a33fc02)
                                     (k!2 #x3a33fc01)
                                     (k!2 #x3a33fc00)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x3a33fc03)
                                     (k!2 #x3a33fc02)
                                     (k!2 #x3a33fc01)
                                     (k!2 #x3a33fc00)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x3a33fc03)
                                     (k!2 #x3a33fc02)
                                     (k!2 #x3a33fc01)
                                     (k!2 #x3a33fc00))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000023) #x20000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000023) true
      false)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000023 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000023)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000023) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000023) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x8c3bf807)
                                     (k!2 #x8c3bf806)
                                     (k!2 #x8c3bf805)
                                     (k!2 #x8c3bf804)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x8c3bf807)
                                     (k!2 #x8c3bf806)
                                     (k!2 #x8c3bf805)
                                     (k!2 #x8c3bf804)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x8c3bf807)
                                     (k!2 #x8c3bf806)
                                     (k!2 #x8c3bf805)
                                     (k!2 #x8c3bf804)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x8c3bf807)
                                     (k!2 #x8c3bf806)
                                     (k!2 #x8c3bf805)
                                     (k!2 #x8c3bf804))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000023) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var435X (_ bv4 32))))
 (let ((?x199 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x142))))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var435X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var435X)))
 (=> $x249 (= ?x266 ?x182)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X (_ bv100 32)))))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var434X)))
 (= $x249 $x157))))
 ))
 (let (($x116 (and $x279 $x213)))
 (let (($x283 (= true true)))
 (let (($x286 (and $x283 $x116)))
 (let (($x272 (= $x286 true)))
 (let (($x188 (forall ((input.ind-%var429X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var429X)))
 (let ((?x270 (input.spec-%var-m2-1.1.1 input.ind-%var429X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var429X)))
 (=> $x153 (= ?x270 ?x207))))))
 ))
 (let (($x234 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x32 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var428X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var428X)))
 (= $x153 $x32))))
 ))
 (let (($x255 (and $x234 $x188)))
 (let (($x274 (= $x255 true)))
 (let (($x118 (forall ((input.ind-%var423X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var423X)))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var423X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var423X)))
 (=> $x249 (= ?x266 ?x243))))))
 ))
 (let (($x126 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x117 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var422X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var422X)))
 (= $x249 $x117))))
 ))
 (let (($x48 (and $x126 $x118)))
 (let (($x74 (= $x48 true)))
 (let (($x110 (forall ((input.ind-%var417X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var417X (_ bv4 32))))
 (let ((?x199 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x142))))
 (let ((?x270 (input.spec-%var-m2-1.1.1 input.ind-%var417X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var417X)))
 (=> $x153 (= ?x270 ?x182)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var416X) (bvult input.ind-%var416X (_ bv100 32)))))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var416X)))
 (= $x153 $x157))))
 ))
 (let (($x137 (and $x240 $x110)))
 (let (($x201 (= $x137 true)))
 (let (($x71 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var411X (_ bv4 32))))
 (let ((?x197 (bvadd ?x202 input.dst.llvm-%m1)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x181))))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var411X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var411X)))
 (=> $x249 (= ?x266 ?x107)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var410X) (bvult input.ind-%var410X (_ bv100 32)))))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var410X)))
 (= $x249 $x157))))
 ))
 (let (($x216 (and $x267 $x71)))
 (let (($x149 (= $x216 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x251 (concat ?x195 (concat ?x112 ?x173)))))
 (let (($x232 (= ?x254 input.dst.llvm-%m2)))
 (let (($x264 (= $x232 true)))
 (let (($x194 (= $x264 true)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x185 (and $x161 $x225)))
 (let (($x187 (= $x185 true)))
 (let (($x175 (= $x187 true)))
 (let (($x151 (= $x175 true)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x101)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x94 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x100 $x19)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x93 $x84)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x85 $x96)))
 (let (($x95 (not $x11)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x97 $x90)))
 (let (($x99 (and (not $x55) $x95)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x77 $x37)))
 (let (($x87 (not $x88)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x46 $x70)))
 (let (($x66 (and (not $x56) $x87)))
 (let (($x104 (and (and (and (and (and (and $x66 $x99) $x92) $x98) $x21) $x60) $x86)))
 (let (($x105 (and $x104 $x78)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x69)))
 (let (($x79 (or false (or false (and (and true (or $x7 $x47)) (or $x61 $x68))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x123 (and $x36 $x105)))
 (let (($x130 (= $x123 true)))
 (let (($x145 (= $x130 true)))
 (let (($x111 (= $x145 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x64 (concat ?x43 (concat ?x15 ?x44)))))
 (let (($x54 (= ?x65 input.dst.llvm-%m1)))
 (let (($x9 (= $x54 true)))
 (let (($x31 (= $x9 true)))
 (let (($x155 (and $x31 $x111)))
 (let (($x203 (and $x155 $x151)))
 (let (($x166 (and $x203 $x194)))
 (let (($x58 (and $x166 $x149)))
 (let (($x134 (and $x58 $x201)))
 (let (($x263 (and $x134 $x74)))
 (let (($x275 (and $x263 $x274)))
 (let (($x287 (=> $x275 $x272)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x213 (forall ((input.ind-%var435X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var435X (_ bv4 32))))
 (let ((?x199 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x142))))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var435X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var435X)))
 (=> $x249 (= ?x266 ?x182)))))))))
 ))
 (let (($x279 (forall ((input.ind-%var434X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var434X) (bvult input.ind-%var434X (_ bv100 32)))))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var434X)))
 (= $x249 $x157))))
 ))
 (let (($x116 (and $x279 $x213)))
 (let (($x283 (= true true)))
 (let (($x286 (and $x283 $x116)))
 (let (($x272 (= $x286 true)))
 (let (($x188 (forall ((input.ind-%var429X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var429X)))
 (let ((?x270 (input.spec-%var-m2-1.1.1 input.ind-%var429X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var429X)))
 (=> $x153 (= ?x270 ?x207))))))
 ))
 (let (($x234 (forall ((input.ind-%var428X (_ BitVec 32)) )(let (($x32 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var428X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var428X)))
 (= $x153 $x32))))
 ))
 (let (($x255 (and $x234 $x188)))
 (let (($x274 (= $x255 true)))
 (let (($x118 (forall ((input.ind-%var423X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var423X)))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var423X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var423X)))
 (=> $x249 (= ?x266 ?x243))))))
 ))
 (let (($x126 (forall ((input.ind-%var422X (_ BitVec 32)) )(let (($x117 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var422X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var422X)))
 (= $x249 $x117))))
 ))
 (let (($x48 (and $x126 $x118)))
 (let (($x74 (= $x48 true)))
 (let (($x110 (forall ((input.ind-%var417X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var417X (_ bv4 32))))
 (let ((?x199 (bvadd ?x202 input.dst.llvm-%m2)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv1 32))) (select input.dst.llvm-mem ?x199))))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x199 (_ bv2 32))) ?x142))))
 (let ((?x270 (input.spec-%var-m2-1.1.1 input.ind-%var417X)))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var417X)))
 (=> $x153 (= ?x270 ?x182)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var416X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var416X) (bvult input.ind-%var416X (_ bv100 32)))))
 (let (($x153 (input.spec-%var-m2-1.0.1 input.ind-%var416X)))
 (= $x153 $x157))))
 ))
 (let (($x137 (and $x240 $x110)))
 (let (($x201 (= $x137 true)))
 (let (($x71 (forall ((input.ind-%var411X (_ BitVec 32)) )(let ((?x202 (bvmul input.ind-%var411X (_ bv4 32))))
 (let ((?x197 (bvadd ?x202 input.dst.llvm-%m1)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem ?x197))))
 (let ((?x107 (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x197 (_ bv2 32))) ?x181))))
 (let ((?x266 (input.spec-%var-m1-1.1.1 input.ind-%var411X)))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var411X)))
 (=> $x249 (= ?x266 ?x107)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var410X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var410X) (bvult input.ind-%var410X (_ bv100 32)))))
 (let (($x249 (input.spec-%var-m1-1.0.1 input.ind-%var410X)))
 (= $x249 $x157))))
 ))
 (let (($x216 (and $x267 $x71)))
 (let (($x149 (= $x216 true)))
 (let ((?x173 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x254 (concat ?x251 (concat ?x195 (concat ?x112 ?x173)))))
 (let (($x232 (= ?x254 input.dst.llvm-%m2)))
 (let (($x264 (= $x232 true)))
 (let (($x194 (= $x264 true)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x185 (and $x161 $x225)))
 (let (($x187 (= $x185 true)))
 (let (($x175 (= $x187 true)))
 (let (($x151 (= $x175 true)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x78 (= (_ bv0 32) ?x101)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x86 (= (_ bv0 32) ?x40)))
 (let ((?x42 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x42)))
 (let ((?x94 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x94)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (and $x100 $x19)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x93 $x84)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x85 $x96)))
 (let (($x95 (not $x11)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x55 (and $x97 $x90)))
 (let (($x99 (and (not $x55) $x95)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x77 $x37)))
 (let (($x87 (not $x88)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x46 $x70)))
 (let (($x66 (and (not $x56) $x87)))
 (let (($x104 (and (and (and (and (and (and $x66 $x99) $x92) $x98) $x21) $x60) $x86)))
 (let (($x105 (and $x104 $x78)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x69 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x61 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x69)))
 (let (($x79 (or false (or false (and (and true (or $x7 $x47)) (or $x61 $x68))))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x123 (and $x36 $x105)))
 (let (($x130 (= $x123 true)))
 (let (($x145 (= $x130 true)))
 (let (($x111 (= $x145 true)))
 (let ((?x44 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x65 (concat ?x64 (concat ?x43 (concat ?x15 ?x44)))))
 (let (($x54 (= ?x65 input.dst.llvm-%m1)))
 (let (($x9 (= $x54 true)))
 (let (($x31 (= $x9 true)))
 (let (($x155 (and $x31 $x111)))
 (let (($x203 (and $x155 $x151)))
 (let (($x166 (and $x203 $x194)))
 (let (($x58 (and $x166 $x149)))
 (let (($x134 (and $x58 $x201)))
 (let (($x263 (and $x134 $x74)))
 (let (($x275 (and $x263 $x274)))
 (let (($x287 (=> $x275 $x272)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.ind-%var435X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var434X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x22489004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x48982400)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00c00028)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x48982403)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x22489007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x22489004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x13046000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x48982400)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x13046002) #x40
    (ite (= x!0 #x48982402) #x04
    (ite (= x!0 #x22489004) #x28
    (ite (= x!0 #x48982401) #x60
    (ite (= x!0 #x22489006) #xc0
    (ite (= x!0 #x48982403) #x13
      #x00)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00400000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00400000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var435X!1 () (_ BitVec 32)
    #x0000001c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x315bcb80)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x851f8a94)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var434X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xa73a3080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x851f8a97)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x315bcb83)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x315bcb80)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x77efbf00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x851f8a94)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x315bcb81) #x30
    (ite (= x!0 #x851f8a97) #x77
    (ite (= x!0 #x315bcb83) #xa7
    (ite (= x!0 #xa73a30f2) #x80
    (ite (= x!0 #x315bcb80) #x80
    (ite (= x!0 #x851f8a96) #xef
    (ite (= x!0 #x315bcb82) #x3a
    (ite (= x!0 #x851f8a95) #xbf
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000001c) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x851f8a97)
                                     (k!2 #x851f8a96)
                                     (k!2 #x851f8a95)
                                     (k!2 #x851f8a94)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x851f8a97)
                                     (k!2 #x851f8a96)
                                     (k!2 #x851f8a95)
                                     (k!2 #x851f8a94)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x851f8a97)
                                     (k!2 #x851f8a96)
                                     (k!2 #x851f8a95)
                                     (k!2 #x851f8a94)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x851f8a97)
                                     (k!2 #x851f8a96)
                                     (k!2 #x851f8a95)
                                     (k!2 #x851f8a94))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x0000001c) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0000001c) true
      false)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x0000001c x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x0000001c)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x0000001c) true
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000001c) #x00800000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x315bcb83)
                                     (k!2 #x315bcb82)
                                     (k!2 #x315bcb81)
                                     (k!2 #x315bcb80)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x315bcb83)
                                     (k!2 #x315bcb82)
                                     (k!2 #x315bcb81)
                                     (k!2 #x315bcb80)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x315bcb83)
                                     (k!2 #x315bcb82)
                                     (k!2 #x315bcb81)
                                     (k!2 #x315bcb80)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x315bcb83)
                                     (k!2 #x315bcb82)
                                     (k!2 #x315bcb81)
                                     (k!2 #x315bcb80))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x0000001c) #x00800000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x224 (= false true)))
 (let (($x136 (= $x224 true)))
 (let (($x277 (forall ((input.ind-%var491X (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var491X)))
 (let ((?x279 (input.spec-%var-m2-1.1.1 input.ind-%var491X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var491X)))
 (=> $x32 (= ?x279 ?x261))))))
 ))
 (let (($x211 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var490X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var490X)))
 (= $x32 $x241))))
 ))
 (let (($x219 (and $x211 $x277)))
 (let (($x250 (= $x219 true)))
 (let (($x5 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var485X)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 input.ind-%var485X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var485X)))
 (=> $x233 (= ?x107 ?x172))))))
 ))
 (let (($x191 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var484X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var484X)))
 (= $x233 $x164))))
 ))
 (let (($x292 (and $x191 $x5)))
 (let (($x293 (= $x292 true)))
 (let (($x248 (forall ((input.ind-%var479X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var479X (_ bv4 32))))
 (let ((?x288 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x193))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 input.ind-%var479X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var479X)))
 (=> $x32 (= ?x279 ?x168)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var478X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var478X) (bvult input.ind-%var478X (_ bv100 32)))))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var478X)))
 (= $x32 $x30))))
 ))
 (let (($x147 (and $x255 $x248)))
 (let (($x67 (= $x147 true)))
 (let (($x238 (forall ((input.ind-%var473X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var473X (_ bv4 32))))
 (let ((?x142 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x115))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 input.ind-%var473X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var473X)))
 (=> $x233 (= ?x107 ?x218)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var472X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var472X) (bvult input.ind-%var472X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var472X)))
 (= $x233 $x30))))
 ))
 (let (($x159 (and $x167 $x238)))
 (let (($x118 (= $x159 true)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x194 (and $x254 $x264)))
 (let (($x166 (= $x194 true)))
 (let (($x244 (= $x166 true)))
 (let (($x249 (= $x244 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x225 (= (_ bv0 32) ?x154)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x161)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x130)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x123 $x145)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x105 $x111)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x42 $x60)))
 (let (($x40 (not $x103)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x84 $x21)))
 (let (($x104 (and (not $x27) $x40)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x98 $x59)))
 (let (($x100 (not $x93)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x46 $x70)))
 (let (($x19 (and (not $x102) $x100)))
 (let (($x177 (and (and (and (and (and (and $x19 $x104) $x101) $x78) $x155) $x122) $x237)))
 (let (($x251 (and $x177 $x225)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x63 (or false (or false (and (and true (or $x87 $x66)) (or $x85 $x96))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x192 (and $x92 $x251)))
 (let (($x195 (= $x192 true)))
 (let (($x121 (= $x195 true)))
 (let (($x112 (= $x121 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x18 (concat ?x47 (concat ?x69 ?x89)))))
 (let (($x68 (= ?x61 input.dst.llvm-%m2)))
 (let (($x23 (= $x68 true)))
 (let (($x80 (= $x23 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x65 (concat ?x15 (concat ?x106 ?x64)))))
 (let (($x9 (= ?x72 input.dst.llvm-%m1)))
 (let (($x31 (= $x9 true)))
 (let (($x129 (= $x31 true)))
 (let (($x25 (and $x129 $x80)))
 (let (($x173 (and $x25 $x112)))
 (let (($x50 (and $x173 $x249)))
 (let (($x48 (and $x50 $x118)))
 (let (($x152 (and $x48 $x67)))
 (let (($x291 (and $x152 $x293)))
 (let (($x221 (and $x291 $x250)))
 (let (($x91 (=> $x221 $x136)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x224 (= false true)))
 (let (($x136 (= $x224 true)))
 (let (($x277 (forall ((input.ind-%var491X (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var491X)))
 (let ((?x279 (input.spec-%var-m2-1.1.1 input.ind-%var491X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var491X)))
 (=> $x32 (= ?x279 ?x261))))))
 ))
 (let (($x211 (forall ((input.ind-%var490X (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var490X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var490X)))
 (= $x32 $x241))))
 ))
 (let (($x219 (and $x211 $x277)))
 (let (($x250 (= $x219 true)))
 (let (($x5 (forall ((input.ind-%var485X (_ BitVec 32)) )(let ((?x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var485X)))
 (let ((?x107 (input.spec-%var-m1-1.1.1 input.ind-%var485X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var485X)))
 (=> $x233 (= ?x107 ?x172))))))
 ))
 (let (($x191 (forall ((input.ind-%var484X (_ BitVec 32)) )(let (($x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var484X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var484X)))
 (= $x233 $x164))))
 ))
 (let (($x292 (and $x191 $x5)))
 (let (($x293 (= $x292 true)))
 (let (($x248 (forall ((input.ind-%var479X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var479X (_ bv4 32))))
 (let ((?x288 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv1 32))) (select input.dst.llvm-mem ?x288))))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x288 (_ bv2 32))) ?x193))))
 (let ((?x279 (input.spec-%var-m2-1.1.1 input.ind-%var479X)))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var479X)))
 (=> $x32 (= ?x279 ?x168)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var478X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var478X) (bvult input.ind-%var478X (_ bv100 32)))))
 (let (($x32 (input.spec-%var-m2-1.0.1 input.ind-%var478X)))
 (= $x32 $x30))))
 ))
 (let (($x147 (and $x255 $x248)))
 (let (($x67 (= $x147 true)))
 (let (($x238 (forall ((input.ind-%var473X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var473X (_ bv4 32))))
 (let ((?x142 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x115 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x115))))
 (let ((?x107 (input.spec-%var-m1-1.1.1 input.ind-%var473X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var473X)))
 (=> $x233 (= ?x107 ?x218)))))))))
 ))
 (let (($x167 (forall ((input.ind-%var472X (_ BitVec 32)) )(let (($x30 (and (bvule (_ bv0 32) input.ind-%var472X) (bvult input.ind-%var472X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var472X)))
 (= $x233 $x30))))
 ))
 (let (($x159 (and $x167 $x238)))
 (let (($x118 (= $x159 true)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x254 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x194 (and $x254 $x264)))
 (let (($x166 (= $x194 true)))
 (let (($x244 (= $x166 true)))
 (let (($x249 (= $x244 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x225 (= (_ bv0 32) ?x154)))
 (let ((?x161 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x237 (= (_ bv0 32) ?x161)))
 (let ((?x148 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x122 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x148)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x130)))
 (let (($x123 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x111 (and $x123 $x145)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x155 (and $x105 $x111)))
 (let (($x78 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x42 $x60)))
 (let (($x40 (not $x103)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x84 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x84 $x21)))
 (let (($x104 (and (not $x27) $x40)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x98 $x59)))
 (let (($x100 (not $x93)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x46 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x102 (and $x46 $x70)))
 (let (($x19 (and (not $x102) $x100)))
 (let (($x177 (and (and (and (and (and (and $x19 $x104) $x101) $x78) $x155) $x122) $x237)))
 (let (($x251 (and $x177 $x225)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x63 (or false (or false (and (and true (or $x87 $x66)) (or $x85 $x96))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x63)))
 (let (($x192 (and $x92 $x251)))
 (let (($x195 (= $x192 true)))
 (let (($x121 (= $x195 true)))
 (let (($x112 (= $x121 true)))
 (let ((?x89 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x61 (concat ?x18 (concat ?x47 (concat ?x69 ?x89)))))
 (let (($x68 (= ?x61 input.dst.llvm-%m2)))
 (let (($x23 (= $x68 true)))
 (let (($x80 (= $x23 true)))
 (let ((?x64 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x72 (concat ?x65 (concat ?x15 (concat ?x106 ?x64)))))
 (let (($x9 (= ?x72 input.dst.llvm-%m1)))
 (let (($x31 (= $x9 true)))
 (let (($x129 (= $x31 true)))
 (let (($x25 (and $x129 $x80)))
 (let (($x173 (and $x25 $x112)))
 (let (($x50 (and $x173 $x249)))
 (let (($x48 (and $x50 $x118)))
 (let (($x152 (and $x48 $x67)))
 (let (($x291 (and $x152 $x293)))
 (let (($x221 (and $x291 $x250)))
 (let (($x91 (=> $x221 $x136)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x465a908c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcf33c3d8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcf33c3db)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x465a908f)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x3ffedf00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x465a908c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdce9ee00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcf33c3d8)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xcf33c3db) #xdc
    (ite (= x!0 #x465a908d) #xdf
    (ite (= x!0 #x465a908f) #x3f
    (ite (= x!0 #xcf33c3da) #xe9
    (ite (= x!0 #xcf33c3d9) #xee
    (ite (= x!0 #x465a908e) #xfe
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x116 (= true false)))
 (let (($x287 (= $x116 true)))
 (let (($x165 (forall ((input.ind-%var547X (_ BitVec 32)) )(let ((?x269 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var547X)))
 (let ((?x208 (input.spec-%var-m2-1.1.1 input.ind-%var547X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var547X)))
 (=> $x255 (= ?x208 ?x269))))))
 ))
 (let (($x274 (forall ((input.ind-%var546X (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var546X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var546X)))
 (= $x255 $x58))))
 ))
 (let (($x52 (and $x274 $x165)))
 (let (($x286 (= $x52 true)))
 (let (($x149 (forall ((input.ind-%var541X (_ BitVec 32)) )(let ((?x265 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var541X)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 input.ind-%var541X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var541X)))
 (=> $x151 (= ?x229 ?x265))))))
 ))
 (let (($x253 (forall ((input.ind-%var540X (_ BitVec 32)) )(let (($x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var540X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var540X)))
 (= $x151 $x267))))
 ))
 (let (($x228 (and $x253 $x149)))
 (let (($x38 (= $x228 true)))
 (let (($x136 (forall ((input.ind-%var535X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var535X (_ bv4 32))))
 (let ((?x293 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x211))))
 (let ((?x208 (input.spec-%var-m2-1.1.1 input.ind-%var535X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var535X)))
 (=> $x255 (= ?x208 ?x250)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var534X) (bvult input.ind-%var534X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var534X)))
 (= $x255 $x251))))
 ))
 (let (($x91 (and $x184 $x136)))
 (let (($x189 (= $x91 true)))
 (let (($x238 (forall ((input.ind-%var529X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var529X (_ bv4 32))))
 (let ((?x142 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x137))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 input.ind-%var529X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var529X)))
 (=> $x151 (= ?x229 ?x218)))))))))
 ))
 (let (($x195 (forall ((input.ind-%var528X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var528X) (bvult input.ind-%var528X (_ bv100 32)))))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var528X)))
 (= $x151 $x251))))
 ))
 (let (($x159 (and $x195 $x238)))
 (let (($x118 (= $x159 true)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x42 (= (_ bv0 32) ?x86)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x27 (= (_ bv0 32) ?x21)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x102 $x59)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x70 $x93)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x55 $x85)))
 (let (($x96 (not $x82)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x66 $x97)))
 (let (($x95 (and (not $x90) $x96)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x62 $x57)))
 (let (($x88 (not $x77)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x54 $x9)))
 (let (($x37 (and (not $x56) $x88)))
 (let (($x101 (and (and (and (and (and (and $x37 $x95) $x63) $x46) $x100) $x84) $x27)))
 (let (($x187 (and $x101 $x42)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x80 (or false (or false (and (and true (or $x49 $x47)) (or $x24 $x61))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x78 (and $x79 $x187)))
 (let (($x175 (= $x78 true)))
 (let (($x105 (= $x175 true)))
 (let (($x123 (= $x105 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x15 (= (_ bv0 2) ?x29)))
 (let (($x41 (= $x15 true)))
 (let (($x26 (= $x41 true)))
 (let ((?x256 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x73 (= (_ bv0 2) ?x256)))
 (let (($x65 (= $x73 true)))
 (let (($x45 (= $x65 true)))
 (let (($x106 (and $x45 $x26)))
 (let (($x130 (and $x106 $x123)))
 (let (($x48 (and $x130 $x118)))
 (let (($x34 (and $x48 $x189)))
 (let (($x270 (and $x34 $x38)))
 (let (($x272 (and $x270 $x286)))
 (let (($x33 (=> $x272 $x287)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x116 (= true false)))
 (let (($x287 (= $x116 true)))
 (let (($x165 (forall ((input.ind-%var547X (_ BitVec 32)) )(let ((?x269 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var547X)))
 (let ((?x208 (input.spec-%var-m2-1.1.1 input.ind-%var547X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var547X)))
 (=> $x255 (= ?x208 ?x269))))))
 ))
 (let (($x274 (forall ((input.ind-%var546X (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var546X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var546X)))
 (= $x255 $x58))))
 ))
 (let (($x52 (and $x274 $x165)))
 (let (($x286 (= $x52 true)))
 (let (($x149 (forall ((input.ind-%var541X (_ BitVec 32)) )(let ((?x265 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var541X)))
 (let ((?x229 (input.spec-%var-m1-1.1.1 input.ind-%var541X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var541X)))
 (=> $x151 (= ?x229 ?x265))))))
 ))
 (let (($x253 (forall ((input.ind-%var540X (_ BitVec 32)) )(let (($x267 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var540X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var540X)))
 (= $x151 $x267))))
 ))
 (let (($x228 (and $x253 $x149)))
 (let (($x38 (= $x228 true)))
 (let (($x136 (forall ((input.ind-%var535X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var535X (_ bv4 32))))
 (let ((?x293 (bvadd ?x20 input.dst.llvm-%m2)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x211))))
 (let ((?x208 (input.spec-%var-m2-1.1.1 input.ind-%var535X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var535X)))
 (=> $x255 (= ?x208 ?x250)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var534X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var534X) (bvult input.ind-%var534X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var534X)))
 (= $x255 $x251))))
 ))
 (let (($x91 (and $x184 $x136)))
 (let (($x189 (= $x91 true)))
 (let (($x238 (forall ((input.ind-%var529X (_ BitVec 32)) )(let ((?x20 (bvmul input.ind-%var529X (_ bv4 32))))
 (let ((?x142 (bvadd ?x20 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x218 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x137))))
 (let ((?x229 (input.spec-%var-m1-1.1.1 input.ind-%var529X)))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var529X)))
 (=> $x151 (= ?x229 ?x218)))))))))
 ))
 (let (($x195 (forall ((input.ind-%var528X (_ BitVec 32)) )(let (($x251 (and (bvule (_ bv0 32) input.ind-%var528X) (bvult input.ind-%var528X (_ bv100 32)))))
 (let (($x151 (input.spec-%var-m1-1.0.1 input.ind-%var528X)))
 (= $x151 $x251))))
 ))
 (let (($x159 (and $x195 $x238)))
 (let (($x118 (= $x159 true)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x42 (= (_ bv0 32) ?x86)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x27 (= (_ bv0 32) ?x21)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x102 $x59)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x70 $x93)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x55 $x85)))
 (let (($x96 (not $x82)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x66 $x97)))
 (let (($x95 (and (not $x90) $x96)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x62 $x57)))
 (let (($x88 (not $x77)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x56 (and $x54 $x9)))
 (let (($x37 (and (not $x56) $x88)))
 (let (($x101 (and (and (and (and (and (and $x37 $x95) $x63) $x46) $x100) $x84) $x27)))
 (let (($x187 (and $x101 $x42)))
 (let (($x61 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x80 (or false (or false (and (and true (or $x49 $x47)) (or $x24 $x61))))))
 (let (($x79 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x78 (and $x79 $x187)))
 (let (($x175 (= $x78 true)))
 (let (($x105 (= $x175 true)))
 (let (($x123 (= $x105 true)))
 (let ((?x29 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x15 (= (_ bv0 2) ?x29)))
 (let (($x41 (= $x15 true)))
 (let (($x26 (= $x41 true)))
 (let ((?x256 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x73 (= (_ bv0 2) ?x256)))
 (let (($x65 (= $x73 true)))
 (let (($x45 (= $x65 true)))
 (let (($x106 (and $x45 $x26)))
 (let (($x130 (and $x106 $x123)))
 (let (($x48 (and $x130 $x118)))
 (let (($x34 (and $x48 $x189)))
 (let (($x270 (and $x34 $x38)))
 (let (($x272 (and $x270 $x286)))
 (let (($x33 (=> $x272 $x287)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10e5871c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd5459e10)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd5459e13)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10e5871f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd5459e10)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10e5871c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x78 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x86 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x175 (and $x86 $x78)))
 (let (($x13 (=> $x175 true)))
 (let (($x294 (= $x13 true)))
 (let (($x259 (= $x294 true)))
 (let (($x141 (forall ((input.ind-%var643X (_ BitVec 32)) )(let ((?x197 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var643X)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var643X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var643X)))
 (=> $x272 (= ?x168 ?x197))))))
 ))
 (let (($x292 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x71 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var642X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var642X)))
 (= $x272 $x71))))
 ))
 (let (($x289 (and $x292 $x141)))
 (let (($x144 (= $x289 true)))
 (let (($x207 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x128 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var637X)))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var637X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var637X)))
 (=> $x233 (= ?x255 ?x128))))))
 ))
 (let (($x191 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x147 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var636X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var636X)))
 (= $x233 $x147))))
 ))
 (let (($x22 (and $x191 $x207)))
 (let (($x177 (= $x22 true)))
 (let (($x111 (forall ((input.ind-%var631X (_ BitVec 32)) )(let ((?x34 (bvmul input.ind-%var631X (_ bv4 32))))
 (let ((?x8 (bvadd ?x34 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x157))))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var631X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var631X)))
 (=> $x272 (= ?x168 ?x288)))))))))
 ))
 (let (($x72 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var630X) (bvult input.ind-%var630X (_ bv100 32)))))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var630X)))
 (= $x272 $x126))))
 ))
 (let (($x237 (and $x72 $x111)))
 (let (($x146 (= $x237 true)))
 (let (($x269 (forall ((input.ind-%var625X (_ BitVec 32)) )(let ((?x34 (bvmul input.ind-%var625X (_ bv4 32))))
 (let ((?x267 (bvadd ?x34 input.dst.llvm-%m1)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x202))))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var625X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var625X)))
 (=> $x233 (= ?x255 ?x58)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var624X) (bvult input.ind-%var624X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var624X)))
 (= $x233 $x126))))
 ))
 (let (($x119 (and $x238 $x269)))
 (let (($x223 (= $x119 true)))
 (let ((?x195 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x229 (= (_ bv0 2) ?x195)))
 (let (($x254 (= $x229 true)))
 (let (($x264 (= $x254 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x203 (= (_ bv0 2) ?x225)))
 (let (($x154 (= $x203 true)))
 (let (($x251 (= $x154 true)))
 (let (($x105 (= $x175 true)))
 (let (($x123 (= $x105 true)))
 (let (($x130 (= $x123 true)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x40 (= (_ bv0 32) ?x46)))
 (let ((?x103 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x92 (= (_ bv0 32) ?x103)))
 (let ((?x99 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x55 $x96)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x11 $x95)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x56 $x87)))
 (let (($x57 (not $x62)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x79 $x54)))
 (let (($x88 (and (not $x9) $x57)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x7 $x61)))
 (let (($x68 (not $x81)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x28 $x256)))
 (let (($x80 (and (not $x24) $x68)))
 (let (($x93 (and (and (and (and (and (and $x80 $x88) $x66) $x90) $x60) $x63) $x92)))
 (let (($x100 (and $x93 $x40)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x83 (or false (or false (and (and true (or $x43 $x75)) (or $x31 $x129))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x104 (and $x89 $x100)))
 (let (($x19 (= $x104 true)))
 (let (($x84 (= $x19 true)))
 (let (($x185 (= $x84 true)))
 (let (($x155 (and $x185 $x130)))
 (let (($x192 (and $x155 $x251)))
 (let (($x20 (and $x192 $x264)))
 (let (($x165 (and $x20 $x223)))
 (let (($x172 (and $x165 $x146)))
 (let (($x107 (and $x172 $x177)))
 (let (($x263 (and $x107 $x144)))
 (let (($x200 (=> $x263 $x259)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x78 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x86 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x175 (and $x86 $x78)))
 (let (($x13 (=> $x175 true)))
 (let (($x294 (= $x13 true)))
 (let (($x259 (= $x294 true)))
 (let (($x141 (forall ((input.ind-%var643X (_ BitVec 32)) )(let ((?x197 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var643X)))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var643X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var643X)))
 (=> $x272 (= ?x168 ?x197))))))
 ))
 (let (($x292 (forall ((input.ind-%var642X (_ BitVec 32)) )(let (($x71 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var642X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var642X)))
 (= $x272 $x71))))
 ))
 (let (($x289 (and $x292 $x141)))
 (let (($x144 (= $x289 true)))
 (let (($x207 (forall ((input.ind-%var637X (_ BitVec 32)) )(let ((?x128 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var637X)))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var637X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var637X)))
 (=> $x233 (= ?x255 ?x128))))))
 ))
 (let (($x191 (forall ((input.ind-%var636X (_ BitVec 32)) )(let (($x147 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var636X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var636X)))
 (= $x233 $x147))))
 ))
 (let (($x22 (and $x191 $x207)))
 (let (($x177 (= $x22 true)))
 (let (($x111 (forall ((input.ind-%var631X (_ BitVec 32)) )(let ((?x34 (bvmul input.ind-%var631X (_ bv4 32))))
 (let ((?x8 (bvadd ?x34 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv1 32))) (select input.dst.llvm-mem ?x8))))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x8 (_ bv2 32))) ?x157))))
 (let ((?x168 (input.spec-%var-m2-1.1.1 input.ind-%var631X)))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var631X)))
 (=> $x272 (= ?x168 ?x288)))))))))
 ))
 (let (($x72 (forall ((input.ind-%var630X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var630X) (bvult input.ind-%var630X (_ bv100 32)))))
 (let (($x272 (input.spec-%var-m2-1.0.1 input.ind-%var630X)))
 (= $x272 $x126))))
 ))
 (let (($x237 (and $x72 $x111)))
 (let (($x146 (= $x237 true)))
 (let (($x269 (forall ((input.ind-%var625X (_ BitVec 32)) )(let ((?x34 (bvmul input.ind-%var625X (_ bv4 32))))
 (let ((?x267 (bvadd ?x34 input.dst.llvm-%m1)))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem ?x267))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x267 (_ bv2 32))) ?x202))))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var625X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var625X)))
 (=> $x233 (= ?x255 ?x58)))))))))
 ))
 (let (($x238 (forall ((input.ind-%var624X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var624X) (bvult input.ind-%var624X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var624X)))
 (= $x233 $x126))))
 ))
 (let (($x119 (and $x238 $x269)))
 (let (($x223 (= $x119 true)))
 (let ((?x195 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x229 (= (_ bv0 2) ?x195)))
 (let (($x254 (= $x229 true)))
 (let (($x264 (= $x254 true)))
 (let ((?x225 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x203 (= (_ bv0 2) ?x225)))
 (let (($x154 (= $x203 true)))
 (let (($x251 (= $x154 true)))
 (let (($x105 (= $x175 true)))
 (let (($x123 (= $x105 true)))
 (let (($x130 (= $x123 true)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x40 (= (_ bv0 32) ?x46)))
 (let ((?x103 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x92 (= (_ bv0 32) ?x103)))
 (let ((?x99 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x99)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x82)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x55 $x96)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x11 $x95)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x56 $x87)))
 (let (($x57 (not $x62)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x79 $x54)))
 (let (($x88 (and (not $x9) $x57)))
 (let (($x61 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x7 $x61)))
 (let (($x68 (not $x81)))
 (let (($x256 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x24 (and $x28 $x256)))
 (let (($x80 (and (not $x24) $x68)))
 (let (($x93 (and (and (and (and (and (and $x80 $x88) $x66) $x90) $x60) $x63) $x92)))
 (let (($x100 (and $x93 $x40)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x43 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x83 (or false (or false (and (and true (or $x43 $x75)) (or $x31 $x129))))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x83)))
 (let (($x104 (and $x89 $x100)))
 (let (($x19 (= $x104 true)))
 (let (($x84 (= $x19 true)))
 (let (($x185 (= $x84 true)))
 (let (($x155 (and $x185 $x130)))
 (let (($x192 (and $x155 $x251)))
 (let (($x20 (and $x192 $x264)))
 (let (($x165 (and $x20 $x223)))
 (let (($x172 (and $x165 $x146)))
 (let (($x107 (and $x172 $x177)))
 (let (($x263 (and $x107 $x144)))
 (let (($x200 (=> $x263 $x259)))
 (not $x200))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x214 (forall ((input.ind-%var673X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var673X (_ bv4 32))))
 (let ((?x244 (bvadd ?x50 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x288))))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var673X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var673X)))
 (=> $x177 (= ?x263 ?x172)))))))))
 ))
 (let (($x39 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var672X) (bvult input.ind-%var672X (_ bv100 32)))))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var672X)))
 (= $x177 $x38))))
 ))
 (let (($x183 (and $x39 $x214)))
 (let (($x262 (= true true)))
 (let (($x186 (and $x262 $x183)))
 (let (($x246 (= $x186 true)))
 (let (($x143 (forall ((input.ind-%var667X (_ BitVec 32)) )(let ((?x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var667X)))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var667X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var667X)))
 (=> $x177 (= ?x263 ?x232))))))
 ))
 (let (($x266 (forall ((input.ind-%var666X (_ BitVec 32)) )(let (($x286 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var666X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var666X)))
 (= $x177 $x286))))
 ))
 (let (($x188 (and $x266 $x143)))
 (let (($x258 (= $x188 true)))
 (let (($x161 (forall ((input.ind-%var661X (_ BitVec 32)) )(let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var661X)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var661X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var661X)))
 (=> $x170 (= ?x265 ?x145))))))
 ))
 (let (($x115 (forall ((input.ind-%var660X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var660X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var660X)))
 (= $x170 $x52))))
 ))
 (let (($x30 (and $x115 $x161)))
 (let (($x36 (= $x30 true)))
 (let (($x241 (forall ((input.ind-%var655X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var655X (_ bv4 32))))
 (let ((?x295 (bvadd ?x50 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x6))))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var655X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var655X)))
 (=> $x177 (= ?x263 ?x211)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var654X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var654X) (bvult input.ind-%var654X (_ bv100 32)))))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var654X)))
 (= $x177 $x38))))
 ))
 (let (($x261 (and $x12 $x241)))
 (let (($x174 (= $x261 true)))
 (let (($x191 (forall ((input.ind-%var649X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var649X (_ bv4 32))))
 (let ((?x244 (bvadd ?x50 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x288))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var649X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var649X)))
 (=> $x170 (= ?x265 ?x172)))))))))
 ))
 (let (($x291 (forall ((input.ind-%var648X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var648X) (bvult input.ind-%var648X (_ bv100 32)))))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var648X)))
 (= $x170 $x38))))
 ))
 (let (($x128 (and $x291 $x191)))
 (let (($x199 (= $x128 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x254 (= (_ bv0 2) ?x229)))
 (let (($x264 (= $x254 true)))
 (let (($x20 (= $x264 true)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x155 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x203 (and $x155 $x225)))
 (let (($x154 (= $x203 true)))
 (let (($x251 (= $x154 true)))
 (let (($x192 (= $x251 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x40)))
 (let ((?x93 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x46 (= (_ bv0 32) ?x93)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x95 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x96 $x63)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x37 $x66)))
 (let (($x97 (not $x102)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x57 $x88)))
 (let (($x94 (and (not $x70) $x97)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x54 $x9)))
 (let (($x56 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x75 $x41)))
 (let (($x62 (and (not $x79) $x56)))
 (let (($x27 (and (and (and (and (and (and $x62 $x94) $x55) $x82) $x59) $x92) $x46)))
 (let (($x101 (and $x27 $x100)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x81 (or false (or false (and (and true (or $x25 $x51)) (or $x256 $x24))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x86 (and $x80 $x101)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x78 (= $x187 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x208 (= (_ bv0 2) ?x53)))
 (let (($x69 (= $x208 true)))
 (let (($x76 (= $x69 true)))
 (let (($x175 (and $x76 $x78)))
 (let (($x195 (and $x175 $x192)))
 (let (($x201 (and $x195 $x20)))
 (let (($x133 (and $x201 $x199)))
 (let (($x250 (and $x133 $x174)))
 (let (($x120 (and $x250 $x36)))
 (let (($x156 (and $x120 $x258)))
 (let (($x124 (=> $x156 $x246)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x214 (forall ((input.ind-%var673X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var673X (_ bv4 32))))
 (let ((?x244 (bvadd ?x50 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x288))))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var673X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var673X)))
 (=> $x177 (= ?x263 ?x172)))))))))
 ))
 (let (($x39 (forall ((input.ind-%var672X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var672X) (bvult input.ind-%var672X (_ bv100 32)))))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var672X)))
 (= $x177 $x38))))
 ))
 (let (($x183 (and $x39 $x214)))
 (let (($x262 (= true true)))
 (let (($x186 (and $x262 $x183)))
 (let (($x246 (= $x186 true)))
 (let (($x143 (forall ((input.ind-%var667X (_ BitVec 32)) )(let ((?x232 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var667X)))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var667X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var667X)))
 (=> $x177 (= ?x263 ?x232))))))
 ))
 (let (($x266 (forall ((input.ind-%var666X (_ BitVec 32)) )(let (($x286 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var666X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var666X)))
 (= $x177 $x286))))
 ))
 (let (($x188 (and $x266 $x143)))
 (let (($x258 (= $x188 true)))
 (let (($x161 (forall ((input.ind-%var661X (_ BitVec 32)) )(let ((?x145 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var661X)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var661X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var661X)))
 (=> $x170 (= ?x265 ?x145))))))
 ))
 (let (($x115 (forall ((input.ind-%var660X (_ BitVec 32)) )(let (($x52 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var660X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var660X)))
 (= $x170 $x52))))
 ))
 (let (($x30 (and $x115 $x161)))
 (let (($x36 (= $x30 true)))
 (let (($x241 (forall ((input.ind-%var655X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var655X (_ bv4 32))))
 (let ((?x295 (bvadd ?x50 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem ?x295))))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x295 (_ bv2 32))) ?x6))))
 (let ((?x263 (input.spec-%var-m2-1.1.1 input.ind-%var655X)))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var655X)))
 (=> $x177 (= ?x263 ?x211)))))))))
 ))
 (let (($x12 (forall ((input.ind-%var654X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var654X) (bvult input.ind-%var654X (_ bv100 32)))))
 (let (($x177 (input.spec-%var-m2-1.0.1 input.ind-%var654X)))
 (= $x177 $x38))))
 ))
 (let (($x261 (and $x12 $x241)))
 (let (($x174 (= $x261 true)))
 (let (($x191 (forall ((input.ind-%var649X (_ BitVec 32)) )(let ((?x50 (bvmul input.ind-%var649X (_ bv4 32))))
 (let ((?x244 (bvadd ?x50 input.dst.llvm-%m1)))
 (let ((?x288 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x288))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var649X)))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var649X)))
 (=> $x170 (= ?x265 ?x172)))))))))
 ))
 (let (($x291 (forall ((input.ind-%var648X (_ BitVec 32)) )(let (($x38 (and (bvule (_ bv0 32) input.ind-%var648X) (bvult input.ind-%var648X (_ bv100 32)))))
 (let (($x170 (input.spec-%var-m1-1.0.1 input.ind-%var648X)))
 (= $x170 $x38))))
 ))
 (let (($x128 (and $x291 $x191)))
 (let (($x199 (= $x128 true)))
 (let ((?x229 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x254 (= (_ bv0 2) ?x229)))
 (let (($x264 (= $x254 true)))
 (let (($x20 (= $x264 true)))
 (let (($x225 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x155 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x203 (and $x155 $x225)))
 (let (($x154 (= $x203 true)))
 (let (($x251 (= $x154 true)))
 (let (($x192 (= $x251 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x40)))
 (let ((?x93 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x46 (= (_ bv0 32) ?x93)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (and $x95 $x99)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x96 $x63)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (and $x37 $x66)))
 (let (($x97 (not $x102)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x70 (and $x57 $x88)))
 (let (($x94 (and (not $x70) $x97)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x54 $x9)))
 (let (($x56 (not $x77)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x79 (and $x75 $x41)))
 (let (($x62 (and (not $x79) $x56)))
 (let (($x27 (and (and (and (and (and (and $x62 $x94) $x55) $x82) $x59) $x92) $x46)))
 (let (($x101 (and $x27 $x100)))
 (let (($x24 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x129 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x256 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x129)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x129)))
 (let (($x81 (or false (or false (and (and true (or $x25 $x51)) (or $x256 $x24))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x81)))
 (let (($x86 (and $x80 $x101)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x78 (= $x187 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x208 (= (_ bv0 2) ?x53)))
 (let (($x69 (= $x208 true)))
 (let (($x76 (= $x69 true)))
 (let (($x175 (and $x76 $x78)))
 (let (($x195 (and $x175 $x192)))
 (let (($x201 (and $x195 $x20)))
 (let (($x133 (and $x201 $x199)))
 (let (($x250 (and $x133 $x174)))
 (let (($x120 (and $x250 $x36)))
 (let (($x156 (and $x120 $x258)))
 (let (($x124 (=> $x156 $x246)))
 (not $x124)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x51000040)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xbfffff00)
  (define-fun input.ind-%var672X!0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd0000804)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var673X!1 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd0000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x51000043)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd0000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x51000040)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000100) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #xbfffff03 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff02 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff01 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff00 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x04000000 x!0) #x04000000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x04000000) false
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000040) true
      false))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x04000000 x!0) #x04000000 #x00000065)
              #x00000064)
         #x00000040))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000010
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000010
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x04000000) false
    (ite (= x!0 #x00000040) true
      (input.spec-%var-m2-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10840404)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x82108040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x08e07080)
  (define-fun input.ind-%var673X!1 () (_ BitVec 32)
    #x00000050)
  (define-fun input.ind-%var672X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x82108043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10840407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x82108040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10840404)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08e071c0) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000050) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000050) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000050) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000080
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x08e07083 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07082 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07081 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07080 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000080
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x239 (= false true)))
 (let (($x109 (= $x239 true)))
 (let (($x283 (forall ((input.ind-%var737X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var737X)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var737X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var737X)))
 (=> $x36 (= ?x156 ?x176))))))
 ))
 (let (($x164 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var736X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var736X)))
 (= $x36 $x194))))
 ))
 (let (($x212 (and $x164 $x283)))
 (let (($x245 (= $x212 true)))
 (let (($x131 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var731X)))
 (let ((?x139 (input.spec-%var-m1-1.1.1 input.ind-%var731X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var731X)))
 (=> $x34 (= ?x139 ?x218))))))
 ))
 (let (($x144 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var730X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var730X)))
 (= $x34 $x165))))
 ))
 (let (($x268 (and $x144 $x131)))
 (let (($x45 (= $x268 true)))
 (let (($x8 (forall ((input.ind-%var725X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var725X (_ bv4 32))))
 (let ((?x13 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x118))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var725X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var725X)))
 (=> $x36 (= ?x156 ?x255)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var724X) (bvult input.ind-%var724X (_ bv100 32)))))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var724X)))
 (= $x36 $x237))))
 ))
 (let (($x193 (and $x206 $x8)))
 (let (($x64 (= $x193 true)))
 (let (($x115 (forall ((input.ind-%var719X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var719X (_ bv4 32))))
 (let ((?x142 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x211))))
 (let ((?x139 (input.spec-%var-m1-1.1.1 input.ind-%var719X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var719X)))
 (=> $x34 (= ?x139 ?x250)))))))))
 ))
 (let (($x272 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var718X) (bvult input.ind-%var718X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var718X)))
 (= $x34 $x237))))
 ))
 (let (($x145 (and $x272 $x115)))
 (let (($x210 (= $x145 true)))
 (let ((?x155 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x151 (= (_ bv0 32) ?x155)))
 (let ((?x123 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x130 (= (_ bv0 32) ?x123)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x100 $x42)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x40 $x187)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x99 $x63)))
 (let (($x185 (not $x59)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x95 $x60)))
 (let (($x92 (and (not $x98) $x185)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x55 $x19)))
 (let (($x82 (not $x85)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x81 $x80)))
 (let (($x96 (and (not $x11) $x82)))
 (let (($x195 (and (and (and (and (and (and $x96 $x92) $x93) $x27) $x78) $x105) $x130)))
 (let (($x229 (and $x195 $x151)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x97 (or false (or false (and (and true (or $x9 $x77)) (or $x70 $x90))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x254 (and $x104 $x229)))
 (let (($x264 (= $x254 true)))
 (let (($x20 (= $x264 true)))
 (let (($x201 (= $x20 true)))
 (let (($x51 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x25 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x47 (and $x25 $x51)))
 (let (($x83 (= $x47 true)))
 (let (($x89 (= $x83 true)))
 (let (($x256 (= $x89 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x43 (= (_ bv0 2) ?x26)))
 (let (($x44 (= $x43 true)))
 (let (($x73 (= $x44 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x53)))
 (let (($x69 (= $x228 true)))
 (let (($x65 (= $x69 true)))
 (let (($x68 (and $x65 $x73)))
 (let (($x28 (and $x68 $x256)))
 (let (($x117 (and $x28 $x201)))
 (let (($x173 (and $x117 $x210)))
 (let (($x72 (and $x173 $x64)))
 (let (($x200 (and $x72 $x45)))
 (let (($x247 (and $x200 $x245)))
 (let (($x217 (=> $x247 $x109)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x239 (= false true)))
 (let (($x109 (= $x239 true)))
 (let (($x283 (forall ((input.ind-%var737X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var737X)))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var737X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var737X)))
 (=> $x36 (= ?x156 ?x176))))))
 ))
 (let (($x164 (forall ((input.ind-%var736X (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var736X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var736X)))
 (= $x36 $x194))))
 ))
 (let (($x212 (and $x164 $x283)))
 (let (($x245 (= $x212 true)))
 (let (($x131 (forall ((input.ind-%var731X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var731X)))
 (let ((?x139 (input.spec-%var-m1-1.1.1 input.ind-%var731X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var731X)))
 (=> $x34 (= ?x139 ?x218))))))
 ))
 (let (($x144 (forall ((input.ind-%var730X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var730X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var730X)))
 (= $x34 $x165))))
 ))
 (let (($x268 (and $x144 $x131)))
 (let (($x45 (= $x268 true)))
 (let (($x8 (forall ((input.ind-%var725X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var725X (_ bv4 32))))
 (let ((?x13 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x255 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x118))))
 (let ((?x156 (input.spec-%var-m2-1.1.1 input.ind-%var725X)))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var725X)))
 (=> $x36 (= ?x156 ?x255)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var724X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var724X) (bvult input.ind-%var724X (_ bv100 32)))))
 (let (($x36 (input.spec-%var-m2-1.0.1 input.ind-%var724X)))
 (= $x36 $x237))))
 ))
 (let (($x193 (and $x206 $x8)))
 (let (($x64 (= $x193 true)))
 (let (($x115 (forall ((input.ind-%var719X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var719X (_ bv4 32))))
 (let ((?x142 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x211))))
 (let ((?x139 (input.spec-%var-m1-1.1.1 input.ind-%var719X)))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var719X)))
 (=> $x34 (= ?x139 ?x250)))))))))
 ))
 (let (($x272 (forall ((input.ind-%var718X (_ BitVec 32)) )(let (($x237 (and (bvule (_ bv0 32) input.ind-%var718X) (bvult input.ind-%var718X (_ bv100 32)))))
 (let (($x34 (input.spec-%var-m1-1.0.1 input.ind-%var718X)))
 (= $x34 $x237))))
 ))
 (let (($x145 (and $x272 $x115)))
 (let (($x210 (= $x145 true)))
 (let ((?x155 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x151 (= (_ bv0 32) ?x155)))
 (let ((?x123 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x130 (= (_ bv0 32) ?x123)))
 (let ((?x175 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x175)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x42 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (and $x100 $x42)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x78 (and $x40 $x187)))
 (let (($x27 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x99 $x63)))
 (let (($x185 (not $x59)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x95 $x60)))
 (let (($x92 (and (not $x98) $x185)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (and $x55 $x19)))
 (let (($x82 (not $x85)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x81 $x80)))
 (let (($x96 (and (not $x11) $x82)))
 (let (($x195 (and (and (and (and (and (and $x96 $x92) $x93) $x27) $x78) $x105) $x130)))
 (let (($x229 (and $x195 $x151)))
 (let (($x90 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x54 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x54)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x54)))
 (let (($x97 (or false (or false (and (and true (or $x9 $x77)) (or $x70 $x90))))))
 (let (($x104 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x97)))
 (let (($x254 (and $x104 $x229)))
 (let (($x264 (= $x254 true)))
 (let (($x20 (= $x264 true)))
 (let (($x201 (= $x20 true)))
 (let (($x51 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x25 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x47 (and $x25 $x51)))
 (let (($x83 (= $x47 true)))
 (let (($x89 (= $x83 true)))
 (let (($x256 (= $x89 true)))
 (let ((?x26 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x43 (= (_ bv0 2) ?x26)))
 (let (($x44 (= $x43 true)))
 (let (($x73 (= $x44 true)))
 (let ((?x53 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x228 (= (_ bv0 2) ?x53)))
 (let (($x69 (= $x228 true)))
 (let (($x65 (= $x69 true)))
 (let (($x68 (and $x65 $x73)))
 (let (($x28 (and $x68 $x256)))
 (let (($x117 (and $x28 $x201)))
 (let (($x173 (and $x117 $x210)))
 (let (($x72 (and $x173 $x64)))
 (let (($x200 (and $x72 $x45)))
 (let (($x247 (and $x200 $x245)))
 (let (($x217 (=> $x247 $x109)))
 (not $x217)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000008)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x92325d8c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xac325fa8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xac325fab)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x92325d8f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xac325fa8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x92325d8c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x167 (= true false)))
 (let (($x5 (= $x167 true)))
 (let (($x197 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var807X)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 input.ind-%var807X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var807X)))
 (=> $x192 (= ?x291 ?x275))))))
 ))
 (let (($x22 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var806X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var806X)))
 (= $x192 $x279))))
 ))
 (let (($x222 (and $x22 $x197)))
 (let (($x220 (= $x222 true)))
 (let (($x132 (forall ((input.ind-%var801X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var801X)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var801X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var801X)))
 (=> $x265 (= ?x263 ?x218))))))
 ))
 (let (($x266 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var800X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var800X)))
 (= $x265 $x253))))
 ))
 (let (($x277 (and $x266 $x132)))
 (let (($x260 (= $x277 true)))
 (let (($x186 (forall ((input.ind-%var795X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var795X (_ bv4 32))))
 (let ((?x239 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x24)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x249)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var795X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var795X)))
 (=> $x265 (= ?x263 ?x168))))))))))
 ))
 (let (($x128 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var794X) (bvult input.ind-%var794X (_ bv100 32)))))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var794X)))
 (= $x265 $x20))))
 ))
 (let (($x280 (and $x128 $x186)))
 (let (($x126 (= $x280 true)))
 (let (($x125 (forall ((input.ind-%var789X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var789X (_ bv4 32))))
 (let ((?x239 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x24)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x249)))
 (let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var789X)))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var789X)))
 (=> $x253 (= ?x218 ?x168))))))))))
 ))
 (let (($x72 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var788X) (bvult input.ind-%var788X (_ bv100 32)))))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var788X)))
 (= $x253 $x20))))
 ))
 (let (($x207 (and $x72 $x125)))
 (let (($x162 (= $x207 true)))
 (let (($x134 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var783X (_ bv4 32))))
 (let ((?x52 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x52))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv2 32))) ?x210)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv3 32))) ?x248)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 input.ind-%var783X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var783X)))
 (=> $x192 (= ?x291 ?x13))))))))))
 ))
 (let (($x117 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var782X)))
 (= $x192 $x20))))
 ))
 (let (($x216 (and $x117 $x134)))
 (let (($x122 (= $x216 true)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x225)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x92 (= (_ bv0 32) ?x185)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x96 $x98)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x82 $x103)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x102 $x97)))
 (let (($x81 (not $x104)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x90 $x37)))
 (let (($x11 (and (not $x66) $x81)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x77 $x56)))
 (let (($x57 (not $x62)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x44 $x73)))
 (let (($x88 (and (not $x87) $x57)))
 (let (($x40 (and (and (and (and (and (and $x88 $x11) $x55) $x85) $x99) $x59) $x92)))
 (let (($x100 (and $x40 $x21)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x79 (or false (or false (and (and true (or $x51 $x47)) (or $x23 $x7))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x101 (and $x9 $x100)))
 (let (($x86 (= $x101 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let ((?x228 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x228)))
 (let (($x208 (= $x69 true)))
 (let (($x53 (= $x208 true)))
 (let (($x78 (and $x53 $x187)))
 (let (($x226 (and $x78 $x122)))
 (let (($x157 (and $x226 $x162)))
 (let (($x204 (and $x157 $x126)))
 (let (($x32 (and $x204 $x260)))
 (let (($x149 (and $x32 $x220)))
 (let (($x33 (=> $x149 $x5)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x167 (= true false)))
 (let (($x5 (= $x167 true)))
 (let (($x197 (forall ((input.ind-%var807X (_ BitVec 32)) )(let ((?x275 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var807X)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 input.ind-%var807X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var807X)))
 (=> $x192 (= ?x291 ?x275))))))
 ))
 (let (($x22 (forall ((input.ind-%var806X (_ BitVec 32)) )(let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var806X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var806X)))
 (= $x192 $x279))))
 ))
 (let (($x222 (and $x22 $x197)))
 (let (($x220 (= $x222 true)))
 (let (($x132 (forall ((input.ind-%var801X (_ BitVec 32)) )(let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var801X)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var801X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var801X)))
 (=> $x265 (= ?x263 ?x218))))))
 ))
 (let (($x266 (forall ((input.ind-%var800X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var800X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var800X)))
 (= $x265 $x253))))
 ))
 (let (($x277 (and $x266 $x132)))
 (let (($x260 (= $x277 true)))
 (let (($x186 (forall ((input.ind-%var795X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var795X (_ bv4 32))))
 (let ((?x239 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x24)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x249)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var795X)))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var795X)))
 (=> $x265 (= ?x263 ?x168))))))))))
 ))
 (let (($x128 (forall ((input.ind-%var794X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var794X) (bvult input.ind-%var794X (_ bv100 32)))))
 (let (($x265 (input.spec-%var-m1-1.0.1 input.ind-%var794X)))
 (= $x265 $x20))))
 ))
 (let (($x280 (and $x128 $x186)))
 (let (($x126 (= $x280 true)))
 (let (($x125 (forall ((input.ind-%var789X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var789X (_ bv4 32))))
 (let ((?x239 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x24 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x249 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x24)))
 (let ((?x168 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x249)))
 (let ((?x218 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var789X)))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var789X)))
 (=> $x253 (= ?x218 ?x168))))))))))
 ))
 (let (($x72 (forall ((input.ind-%var788X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var788X) (bvult input.ind-%var788X (_ bv100 32)))))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var788X)))
 (= $x253 $x20))))
 ))
 (let (($x207 (and $x72 $x125)))
 (let (($x162 (= $x207 true)))
 (let (($x134 (forall ((input.ind-%var783X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var783X (_ bv4 32))))
 (let ((?x52 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x52))))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv2 32))) ?x210)))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x52 (_ bv3 32))) ?x248)))
 (let ((?x291 (input.spec-%var-m2-1.1.1 input.ind-%var783X)))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var783X)))
 (=> $x192 (= ?x291 ?x13))))))))))
 ))
 (let (($x117 (forall ((input.ind-%var782X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var782X) (bvult input.ind-%var782X (_ bv100 32)))))
 (let (($x192 (input.spec-%var-m2-1.0.1 input.ind-%var782X)))
 (= $x192 $x20))))
 ))
 (let (($x216 (and $x117 $x134)))
 (let (($x122 (= $x216 true)))
 (let ((?x225 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x225)))
 (let ((?x185 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x92 (= (_ bv0 32) ?x185)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x96 $x98)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x82 $x103)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x104 (and $x102 $x97)))
 (let (($x81 (not $x104)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x66 (and $x90 $x37)))
 (let (($x11 (and (not $x66) $x81)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x77 $x56)))
 (let (($x57 (not $x62)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x44 $x73)))
 (let (($x88 (and (not $x87) $x57)))
 (let (($x40 (and (and (and (and (and (and $x88 $x11) $x55) $x85) $x99) $x59) $x92)))
 (let (($x100 (and $x40 $x21)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x15 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x15)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x15)))
 (let (($x79 (or false (or false (and (and true (or $x51 $x47)) (or $x23 $x7))))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x79)))
 (let (($x101 (and $x9 $x100)))
 (let (($x86 (= $x101 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let ((?x228 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x228)))
 (let (($x208 (= $x69 true)))
 (let (($x53 (= $x208 true)))
 (let (($x78 (and $x53 $x187)))
 (let (($x226 (and $x78 $x122)))
 (let (($x157 (and $x226 $x162)))
 (let (($x204 (and $x157 $x126)))
 (let (($x32 (and $x204 $x260)))
 (let (($x149 (and $x32 $x220)))
 (let (($x33 (=> $x149 $x5)))
 (not $x33))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x430fbb79)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc135ce73)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb60c3a17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb60c3a14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x291 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x42 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x192 (and $x42 $x105)))
 (let (($x150 (and $x192 $x291)))
 (let (($x205 (=> $x150 true)))
 (let (($x236 (= $x205 true)))
 (let (($x178 (= $x236 true)))
 (let (($x181 (forall ((input.ind-%var869X (_ BitVec 32)) )(let ((?x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var869X)))
 (let ((?x61 (input.spec-%var-m2-1.1.1 input.ind-%var869X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var869X)))
 (=> $x13 (= ?x61 ?x121))))))
 ))
 (let (($x91 (forall ((input.ind-%var868X (_ BitVec 32)) )(let (($x110 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var868X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var868X)))
 (= $x13 $x110))))
 ))
 (let (($x179 (and $x91 $x181)))
 (let (($x16 (= $x179 true)))
 (let (($x124 (forall ((input.ind-%var863X (_ BitVec 32)) )(let ((?x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var863X)))
 (let ((?x295 (input.spec-%var-m1-1.1.1 input.ind-%var863X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var863X)))
 (=> $x176 (= ?x295 ?x50))))))
 ))
 (let (($x211 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var862X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var862X)))
 (= $x176 $x220))))
 ))
 (let (($x292 (and $x211 $x124)))
 (let (($x191 (= $x292 true)))
 (let (($x223 (forall ((input.ind-%var857X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var857X (_ bv4 32))))
 (let ((?x281 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x261)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x165)))
 (let ((?x295 (input.spec-%var-m1-1.1.1 input.ind-%var857X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var857X)))
 (=> $x176 (= ?x295 ?x135))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var856X) (bvult input.ind-%var856X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var856X)))
 (= $x176 $x72))))
 ))
 (let (($x113 (and $x199 $x223)))
 (let (($x270 (= $x113 true)))
 (let (($x175 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var851X (_ bv4 32))))
 (let ((?x281 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x261)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x165)))
 (let ((?x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var851X)))
 (let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var851X)))
 (=> $x220 (= ?x50 ?x135))))))))))
 ))
 (let (($x43 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var850X) (bvult input.ind-%var850X (_ bv100 32)))))
 (let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var850X)))
 (= $x220 $x72))))
 ))
 (let (($x151 (and $x43 $x175)))
 (let (($x268 (= $x151 true)))
 (let (($x22 (forall ((input.ind-%var845X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var845X (_ bv4 32))))
 (let ((?x280 (bvadd ?x186 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x280))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv2 32))) ?x266)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv3 32))) ?x132)))
 (let ((?x61 (input.spec-%var-m2-1.1.1 input.ind-%var845X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var845X)))
 (=> $x13 (= ?x61 ?x32))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var844X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var844X) (bvult input.ind-%var844X (_ bv100 32)))))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var844X)))
 (= $x13 $x72))))
 ))
 (let (($x275 (and $x131 $x22)))
 (let (($x293 (= $x275 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x173 (= (_ bv0 2) ?x174)))
 (let (($x36 (= $x173 true)))
 (let (($x115 (= $x36 true)))
 (let (($x237 (= $x291 true)))
 (let (($x272 (= $x237 true)))
 (let (($x250 (= $x272 true)))
 (let (($x264 (= $x192 true)))
 (let (($x195 (= $x264 true)))
 (let (($x254 (= $x195 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x60)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x95 (= (_ bv0 32) ?x96)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x93 $x203)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x11 $x19)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x57 $x88)))
 (let (($x37 (not $x90)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x77 $x56)))
 (let (($x80 (and (not $x62) $x37)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x79 $x9)))
 (let (($x73 (not $x44)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x106 $x146)))
 (let (($x70 (and (not $x94) $x73)))
 (let (($x154 (and (and (and (and (and (and $x70 $x80) $x97) $x81) $x85) $x82) $x95)))
 (let (($x185 (and $x154 $x98)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x7 (or false (or false (and (and true (or $x54 $x129)) (or $x83 $x89))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x92 (and $x41 $x185)))
 (let (($x40 (= $x92 true)))
 (let (($x225 (= $x40 true)))
 (let (($x21 (= $x225 true)))
 (let (($x20 (and $x21 $x254)))
 (let (($x52 (and $x20 $x250)))
 (let (($x206 (and $x52 $x250)))
 (let (($x145 (and $x206 $x115)))
 (let (($x35 (and $x145 $x293)))
 (let (($x190 (and $x35 $x268)))
 (let (($x221 (and $x190 $x270)))
 (let (($x214 (and $x221 $x191)))
 (let (($x278 (and $x214 $x16)))
 (let (($x209 (=> $x278 $x178)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x291 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x105 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x42 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x192 (and $x42 $x105)))
 (let (($x150 (and $x192 $x291)))
 (let (($x205 (=> $x150 true)))
 (let (($x236 (= $x205 true)))
 (let (($x178 (= $x236 true)))
 (let (($x181 (forall ((input.ind-%var869X (_ BitVec 32)) )(let ((?x121 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var869X)))
 (let ((?x61 (input.spec-%var-m2-1.1.1 input.ind-%var869X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var869X)))
 (=> $x13 (= ?x61 ?x121))))))
 ))
 (let (($x91 (forall ((input.ind-%var868X (_ BitVec 32)) )(let (($x110 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var868X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var868X)))
 (= $x13 $x110))))
 ))
 (let (($x179 (and $x91 $x181)))
 (let (($x16 (= $x179 true)))
 (let (($x124 (forall ((input.ind-%var863X (_ BitVec 32)) )(let ((?x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var863X)))
 (let ((?x295 (input.spec-%var-m1-1.1.1 input.ind-%var863X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var863X)))
 (=> $x176 (= ?x295 ?x50))))))
 ))
 (let (($x211 (forall ((input.ind-%var862X (_ BitVec 32)) )(let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var862X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var862X)))
 (= $x176 $x220))))
 ))
 (let (($x292 (and $x211 $x124)))
 (let (($x191 (= $x292 true)))
 (let (($x223 (forall ((input.ind-%var857X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var857X (_ bv4 32))))
 (let ((?x281 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x261)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x165)))
 (let ((?x295 (input.spec-%var-m1-1.1.1 input.ind-%var857X)))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var857X)))
 (=> $x176 (= ?x295 ?x135))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var856X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var856X) (bvult input.ind-%var856X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m1-1.0.1 input.ind-%var856X)))
 (= $x176 $x72))))
 ))
 (let (($x113 (and $x199 $x223)))
 (let (($x270 (= $x113 true)))
 (let (($x175 (forall ((input.ind-%var851X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var851X (_ bv4 32))))
 (let ((?x281 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x261 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x281))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv2 32))) ?x261)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x281 (_ bv3 32))) ?x165)))
 (let ((?x50 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var851X)))
 (let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var851X)))
 (=> $x220 (= ?x50 ?x135))))))))))
 ))
 (let (($x43 (forall ((input.ind-%var850X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var850X) (bvult input.ind-%var850X (_ bv100 32)))))
 (let (($x220 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var850X)))
 (= $x220 $x72))))
 ))
 (let (($x151 (and $x43 $x175)))
 (let (($x268 (= $x151 true)))
 (let (($x22 (forall ((input.ind-%var845X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var845X (_ bv4 32))))
 (let ((?x280 (bvadd ?x186 input.dst.llvm-%m2)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x280))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv2 32))) ?x266)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x280 (_ bv3 32))) ?x132)))
 (let ((?x61 (input.spec-%var-m2-1.1.1 input.ind-%var845X)))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var845X)))
 (=> $x13 (= ?x61 ?x32))))))))))
 ))
 (let (($x131 (forall ((input.ind-%var844X (_ BitVec 32)) )(let (($x72 (and (bvule (_ bv0 32) input.ind-%var844X) (bvult input.ind-%var844X (_ bv100 32)))))
 (let (($x13 (input.spec-%var-m2-1.0.1 input.ind-%var844X)))
 (= $x13 $x72))))
 ))
 (let (($x275 (and $x131 $x22)))
 (let (($x293 (= $x275 true)))
 (let ((?x174 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x173 (= (_ bv0 2) ?x174)))
 (let (($x36 (= $x173 true)))
 (let (($x115 (= $x36 true)))
 (let (($x237 (= $x291 true)))
 (let (($x272 (= $x237 true)))
 (let (($x250 (= $x272 true)))
 (let (($x264 (= $x192 true)))
 (let (($x195 (= $x264 true)))
 (let (($x254 (= $x195 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x98 (= (_ bv0 32) ?x60)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x95 (= (_ bv0 32) ?x96)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x93 $x203)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (and $x11 $x19)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x57 $x88)))
 (let (($x37 (not $x90)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x62 (and $x77 $x56)))
 (let (($x80 (and (not $x62) $x37)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x79 $x9)))
 (let (($x73 (not $x44)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x106 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (and $x106 $x146)))
 (let (($x70 (and (not $x94) $x73)))
 (let (($x154 (and (and (and (and (and (and $x70 $x80) $x97) $x81) $x85) $x82) $x95)))
 (let (($x185 (and $x154 $x98)))
 (let (($x89 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x31)))
 (let (($x7 (or false (or false (and (and true (or $x54 $x129)) (or $x83 $x89))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x7)))
 (let (($x92 (and $x41 $x185)))
 (let (($x40 (= $x92 true)))
 (let (($x225 (= $x40 true)))
 (let (($x21 (= $x225 true)))
 (let (($x20 (and $x21 $x254)))
 (let (($x52 (and $x20 $x250)))
 (let (($x206 (and $x52 $x250)))
 (let (($x145 (and $x206 $x115)))
 (let (($x35 (and $x145 $x293)))
 (let (($x190 (and $x35 $x268)))
 (let (($x221 (and $x190 $x270)))
 (let (($x214 (and $x221 $x191)))
 (let (($x278 (and $x214 $x16)))
 (let (($x209 (=> $x278 $x178)))
 (not $x209)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x170 (= false true)))
 (let (($x169 (= $x170 true)))
 (let (($x224 (forall ((input.ind-%var899X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var899X)))
 (let ((?x207 (input.spec-%var-m2-1.1.1 input.ind-%var899X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var899X)))
 (=> $x248 (= ?x207 ?x180))))))
 ))
 (let (($x234 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var898X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var898X)))
 (= $x248 $x153))))
 ))
 (let (($x177 (and $x234 $x224)))
 (let (($x246 (= $x177 true)))
 (let (($x267 (forall ((input.ind-%var893X (_ BitVec 32)) )(let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var893X)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var893X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var893X)))
 (=> $x24 (= ?x263 ?x292))))))
 ))
 (let (($x33 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var892X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var892X)))
 (= $x24 $x119))))
 ))
 (let (($x112 (and $x33 $x267)))
 (let (($x163 (= $x112 true)))
 (let (($x155 (forall ((input.ind-%var887X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var887X (_ bv4 32))))
 (let ((?x178 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x228)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x233)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var887X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var887X)))
 (=> $x24 (= ?x263 ?x255))))))))))
 ))
 (let (($x136 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var886X) (bvult input.ind-%var886X (_ bv100 32)))))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var886X)))
 (= $x24 $x217))))
 ))
 (let (($x6 (and $x136 $x155)))
 (let (($x133 (= $x6 true)))
 (let (($x107 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x178 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x228)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x233)))
 (let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var881X)))
 (let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var881X)))
 (=> $x119 (= ?x292 ?x255))))))))))
 ))
 (let (($x211 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var880X)))
 (= $x119 $x217))))
 ))
 (let (($x239 (and $x211 $x107)))
 (let (($x262 (= $x239 true)))
 (let (($x268 (forall ((input.ind-%var875X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var875X (_ bv4 32))))
 (let ((?x287 (bvadd ?x144 input.dst.llvm-%m2)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x287))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv2 32))) ?x172)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv3 32))) ?x165)))
 (let ((?x207 (input.spec-%var-m2-1.1.1 input.ind-%var875X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var875X)))
 (=> $x248 (= ?x207 ?x182))))))))))
 ))
 (let (($x186 (forall ((input.ind-%var874X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var874X) (bvult input.ind-%var874X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var874X)))
 (= $x248 $x217))))
 ))
 (let (($x190 (and $x186 $x268)))
 (let (($x176 (= $x190 true)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x264 (= (_ bv0 32) ?x192)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x21 $x86)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x225 $x42)))
 (let (($x40 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x59)))
 (let (($x95 (not $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x85 $x63)))
 (let (($x60 (and (not $x46) $x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x11 $x93)))
 (let (($x55 (not $x84)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x87 $x79)))
 (let (($x19 (and (not $x27) $x55)))
 (let (($x272 (and (and (and (and (and (and $x19 $x60) $x185) $x40) $x187) $x105) $x264)))
 (let (($x250 (and $x272 $x254)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x99 (or false (or false (and (and true (or $x56 $x62)) (or $x37 $x80))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x99)))
 (let (($x52 (and $x81 $x250)))
 (let (($x206 (= $x52 true)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x256 (= (_ bv0 2) ?x89)))
 (let (($x23 (= $x256 true)))
 (let (($x28 (= $x23 true)))
 (let (($x129 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x54 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x208 (and $x54 $x68)))
 (let (($x15 (and $x208 $x129)))
 (let (($x51 (= $x15 true)))
 (let (($x25 (= $x51 true)))
 (let (($x83 (= $x25 true)))
 (let (($x7 (and $x83 $x28)))
 (let (($x173 (and $x7 $x174)))
 (let (($x212 (and $x173 $x176)))
 (let (($x114 (and $x212 $x262)))
 (let (($x152 (and $x114 $x133)))
 (let (($x34 (and $x152 $x163)))
 (let (($x269 (and $x34 $x246)))
 (let (($x245 (=> $x269 $x169)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x170 (= false true)))
 (let (($x169 (= $x170 true)))
 (let (($x224 (forall ((input.ind-%var899X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var899X)))
 (let ((?x207 (input.spec-%var-m2-1.1.1 input.ind-%var899X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var899X)))
 (=> $x248 (= ?x207 ?x180))))))
 ))
 (let (($x234 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x153 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var898X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var898X)))
 (= $x248 $x153))))
 ))
 (let (($x177 (and $x234 $x224)))
 (let (($x246 (= $x177 true)))
 (let (($x267 (forall ((input.ind-%var893X (_ BitVec 32)) )(let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var893X)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var893X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var893X)))
 (=> $x24 (= ?x263 ?x292))))))
 ))
 (let (($x33 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var892X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var892X)))
 (= $x24 $x119))))
 ))
 (let (($x112 (and $x33 $x267)))
 (let (($x163 (= $x112 true)))
 (let (($x155 (forall ((input.ind-%var887X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var887X (_ bv4 32))))
 (let ((?x178 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x228)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x233)))
 (let ((?x263 (input.spec-%var-m1-1.1.1 input.ind-%var887X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var887X)))
 (=> $x24 (= ?x263 ?x255))))))))))
 ))
 (let (($x136 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var886X) (bvult input.ind-%var886X (_ bv100 32)))))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var886X)))
 (= $x24 $x217))))
 ))
 (let (($x6 (and $x136 $x155)))
 (let (($x133 (= $x6 true)))
 (let (($x107 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x178 (bvadd ?x144 input.dst.llvm-%m1)))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x178))))
 (let ((?x233 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv2 32))) ?x228)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x178 (_ bv3 32))) ?x233)))
 (let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var881X)))
 (let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var881X)))
 (=> $x119 (= ?x292 ?x255))))))))))
 ))
 (let (($x211 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x119 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var880X)))
 (= $x119 $x217))))
 ))
 (let (($x239 (and $x211 $x107)))
 (let (($x262 (= $x239 true)))
 (let (($x268 (forall ((input.ind-%var875X (_ BitVec 32)) )(let ((?x144 (bvmul input.ind-%var875X (_ bv4 32))))
 (let ((?x287 (bvadd ?x144 input.dst.llvm-%m2)))
 (let ((?x172 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x287))))
 (let ((?x165 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv2 32))) ?x172)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x287 (_ bv3 32))) ?x165)))
 (let ((?x207 (input.spec-%var-m2-1.1.1 input.ind-%var875X)))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var875X)))
 (=> $x248 (= ?x207 ?x182))))))))))
 ))
 (let (($x186 (forall ((input.ind-%var874X (_ BitVec 32)) )(let (($x217 (and (bvule (_ bv0 32) input.ind-%var874X) (bvult input.ind-%var874X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m2-1.0.1 input.ind-%var874X)))
 (= $x248 $x217))))
 ))
 (let (($x190 (and $x186 $x268)))
 (let (($x176 (= $x190 true)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x195)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x264 (= (_ bv0 32) ?x192)))
 (let ((?x78 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x78)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (and $x21 $x86)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x225 $x42)))
 (let (($x40 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x82 $x59)))
 (let (($x95 (not $x96)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x85 $x63)))
 (let (($x60 (and (not $x46) $x95)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (and $x11 $x93)))
 (let (($x55 (not $x84)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x27 (and $x87 $x79)))
 (let (($x19 (and (not $x27) $x55)))
 (let (($x272 (and (and (and (and (and (and $x19 $x60) $x185) $x40) $x187) $x105) $x264)))
 (let (($x250 (and $x272 $x254)))
 (let (($x80 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x77 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x77)))
 (let (($x62 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x77)))
 (let (($x99 (or false (or false (and (and true (or $x56 $x62)) (or $x37 $x80))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x99)))
 (let (($x52 (and $x81 $x250)))
 (let (($x206 (= $x52 true)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let ((?x89 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x256 (= (_ bv0 2) ?x89)))
 (let (($x23 (= $x256 true)))
 (let (($x28 (= $x23 true)))
 (let (($x129 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x68 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x54 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x208 (and $x54 $x68)))
 (let (($x15 (and $x208 $x129)))
 (let (($x51 (= $x15 true)))
 (let (($x25 (= $x51 true)))
 (let (($x83 (= $x25 true)))
 (let (($x7 (and $x83 $x28)))
 (let (($x173 (and $x7 $x174)))
 (let (($x212 (and $x173 $x176)))
 (let (($x114 (and $x212 $x262)))
 (let (($x152 (and $x114 $x133)))
 (let (($x34 (and $x152 $x163)))
 (let (($x269 (and $x34 $x246)))
 (let (($x245 (=> $x269 $x169)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdffe4d03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x64d6c787)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0230db03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80017a13)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x259 (= $x120 true)))
 (let (($x286 (forall ((input.ind-%var961X (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var961X)))
 (let ((?x142 (input.spec-%var-m2-1.1.1 input.ind-%var961X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var961X)))
 (=> $x131 (= ?x142 ?x247))))))
 ))
 (let (($x221 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var960X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var960X)))
 (= $x131 $x194))))
 ))
 (let (($x166 (and $x221 $x286)))
 (let (($x161 (= $x166 true)))
 (let (($x202 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var955X)))
 (let ((?x214 (input.spec-%var-m1-1.1.1 input.ind-%var955X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var955X)))
 (=> $x32 (= ?x214 ?x58))))))
 ))
 (let (($x5 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var954X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var954X)))
 (= $x32 $x133))))
 ))
 (let (($x226 (and $x5 $x202)))
 (let (($x216 (= $x226 true)))
 (let (($x128 (forall ((input.ind-%var949X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var949X (_ bv4 32))))
 (let ((?x147 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x191)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x8)))
 (let ((?x214 (input.spec-%var-m1-1.1.1 input.ind-%var949X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var949X)))
 (=> $x32 (= ?x214 ?x36))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var948X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var948X) (bvult input.ind-%var948X (_ bv100 32)))))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var948X)))
 (= $x32 $x135))))
 ))
 (let (($x123 (and $x124 $x128)))
 (let (($x295 (= $x123 true)))
 (let (($x126 (forall ((input.ind-%var943X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var943X (_ bv4 32))))
 (let ((?x147 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x191)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x8)))
 (let ((?x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var943X)))
 (let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var943X)))
 (=> $x133 (= ?x58 ?x36))))))))))
 ))
 (let (($x112 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var942X) (bvult input.ind-%var942X (_ bv100 32)))))
 (let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var942X)))
 (= $x133 $x135))))
 ))
 (let (($x266 (and $x112 $x126)))
 (let (($x220 (= $x266 true)))
 (let (($x136 (forall ((input.ind-%var937X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var937X (_ bv4 32))))
 (let ((?x111 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x111))))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv2 32))) ?x255)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv3 32))) ?x107)))
 (let ((?x142 (input.spec-%var-m2-1.1.1 input.ind-%var937X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var937X)))
 (=> $x131 (= ?x142 ?x114))))))))))
 ))
 (let (($x22 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var936X) (bvult input.ind-%var936X (_ bv100 32)))))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var936X)))
 (= $x131 $x135))))
 ))
 (let (($x263 (and $x22 $x136)))
 (let (($x230 (= $x263 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x272 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x195 (and $x192 $x272)))
 (let (($x206 (and $x195 $x52)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let (($x173 (= $x174 true)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x98)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x60)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (and $x85 $x154)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x19 $x82)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x103 $x102)))
 (let (($x203 (and (not $x97) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x31 $x129)))
 (let (($x80 (and (not $x62) $x37)))
 (let (($x21 (and (and (and (and (and (and $x80 $x203) $x93) $x55) $x59) $x95) $x20)))
 (let (($x100 (and $x21 $x185)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x77 (or false (or false (and (and true (or $x89 $x256)) (or $x146 $x9))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x101 (and $x70 $x100)))
 (let (($x86 (= $x101 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x54)))
 (let (($x76 (= $x69 true)))
 (let (($x75 (= $x76 true)))
 (let (($x291 (and $x75 $x187)))
 (let (($x145 (and $x291 $x173)))
 (let (($x244 (and $x145 $x230)))
 (let (($x65 (and $x244 $x220)))
 (let (($x270 (and $x65 $x295)))
 (let (($x162 (and $x270 $x216)))
 (let (($x49 (and $x162 $x161)))
 (let (($x215 (=> $x49 $x259)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x120 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x259 (= $x120 true)))
 (let (($x286 (forall ((input.ind-%var961X (_ BitVec 32)) )(let ((?x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var961X)))
 (let ((?x142 (input.spec-%var-m2-1.1.1 input.ind-%var961X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var961X)))
 (=> $x131 (= ?x142 ?x247))))))
 ))
 (let (($x221 (forall ((input.ind-%var960X (_ BitVec 32)) )(let (($x194 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var960X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var960X)))
 (= $x131 $x194))))
 ))
 (let (($x166 (and $x221 $x286)))
 (let (($x161 (= $x166 true)))
 (let (($x202 (forall ((input.ind-%var955X (_ BitVec 32)) )(let ((?x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var955X)))
 (let ((?x214 (input.spec-%var-m1-1.1.1 input.ind-%var955X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var955X)))
 (=> $x32 (= ?x214 ?x58))))))
 ))
 (let (($x5 (forall ((input.ind-%var954X (_ BitVec 32)) )(let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var954X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var954X)))
 (= $x32 $x133))))
 ))
 (let (($x226 (and $x5 $x202)))
 (let (($x216 (= $x226 true)))
 (let (($x128 (forall ((input.ind-%var949X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var949X (_ bv4 32))))
 (let ((?x147 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x191)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x8)))
 (let ((?x214 (input.spec-%var-m1-1.1.1 input.ind-%var949X)))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var949X)))
 (=> $x32 (= ?x214 ?x36))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var948X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var948X) (bvult input.ind-%var948X (_ bv100 32)))))
 (let (($x32 (input.spec-%var-m1-1.0.1 input.ind-%var948X)))
 (= $x32 $x135))))
 ))
 (let (($x123 (and $x124 $x128)))
 (let (($x295 (= $x123 true)))
 (let (($x126 (forall ((input.ind-%var943X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var943X (_ bv4 32))))
 (let ((?x147 (bvadd ?x171 input.dst.llvm-%m1)))
 (let ((?x191 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x147))))
 (let ((?x8 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv2 32))) ?x191)))
 (let ((?x36 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x147 (_ bv3 32))) ?x8)))
 (let ((?x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var943X)))
 (let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var943X)))
 (=> $x133 (= ?x58 ?x36))))))))))
 ))
 (let (($x112 (forall ((input.ind-%var942X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var942X) (bvult input.ind-%var942X (_ bv100 32)))))
 (let (($x133 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var942X)))
 (= $x133 $x135))))
 ))
 (let (($x266 (and $x112 $x126)))
 (let (($x220 (= $x266 true)))
 (let (($x136 (forall ((input.ind-%var937X (_ BitVec 32)) )(let ((?x171 (bvmul input.ind-%var937X (_ bv4 32))))
 (let ((?x111 (bvadd ?x171 input.dst.llvm-%m2)))
 (let ((?x255 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x111))))
 (let ((?x107 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv2 32))) ?x255)))
 (let ((?x114 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x111 (_ bv3 32))) ?x107)))
 (let ((?x142 (input.spec-%var-m2-1.1.1 input.ind-%var937X)))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var937X)))
 (=> $x131 (= ?x142 ?x114))))))))))
 ))
 (let (($x22 (forall ((input.ind-%var936X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var936X) (bvult input.ind-%var936X (_ bv100 32)))))
 (let (($x131 (input.spec-%var-m2-1.0.1 input.ind-%var936X)))
 (= $x131 $x135))))
 ))
 (let (($x263 (and $x22 $x136)))
 (let (($x230 (= $x263 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x272 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x195 (and $x192 $x272)))
 (let (($x206 (and $x195 $x52)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let (($x173 (= $x174 true)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x98)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x60)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x96)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x46)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x82 (and $x85 $x154)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (and $x19 $x82)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x103 $x102)))
 (let (($x203 (and (not $x97) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x31 $x129)))
 (let (($x80 (and (not $x62) $x37)))
 (let (($x21 (and (and (and (and (and (and $x80 $x203) $x93) $x55) $x59) $x95) $x20)))
 (let (($x100 (and $x21 $x185)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x89 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x77 (or false (or false (and (and true (or $x89 $x256)) (or $x146 $x9))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x101 (and $x70 $x100)))
 (let (($x86 (= $x101 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x54)))
 (let (($x76 (= $x69 true)))
 (let (($x75 (= $x76 true)))
 (let (($x291 (and $x75 $x187)))
 (let (($x145 (and $x291 $x173)))
 (let (($x244 (and $x145 $x230)))
 (let (($x65 (and $x244 $x220)))
 (let (($x270 (and $x65 $x295)))
 (let (($x162 (and $x270 $x216)))
 (let (($x49 (and $x162 $x161)))
 (let (($x215 (=> $x49 $x259)))
 (not $x215)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01080004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01080007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01080004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!14 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!14 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!14 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xda7ffff8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7a7ffffc)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7a7fffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xda7ffffb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7a7ffffc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xda7ffff8)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!20 (k!17 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!15 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 (k!17 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x281 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x118 (bvneg ?x281)))
 (let (($x240 (= ?x118 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x193 (= $x240 true)))
 (let (($x130 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1023X)))
 (let ((?x209 (input.spec-%var-m2-1.1.1 input.ind-%var1023X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var1023X)))
 (=> $x135 (= ?x209 ?x34))))))
 ))
 (let (($x258 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1022X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var1022X)))
 (= $x135 $x288))))
 ))
 (let (($x50 (and $x258 $x130)))
 (let (($x167 (= $x50 true)))
 (let (($x139 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1017X)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1017X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1017X)))
 (=> $x190 (= ?x180 ?x221))))))
 ))
 (let (($x278 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1016X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1016X)))
 (= $x190 $x270))))
 ))
 (let (($x205 (and $x278 $x139)))
 (let (($x293 (= $x205 true)))
 (let (($x148 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var1011X (_ bv4 32))))
 (let ((?x115 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x115))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv2 32))) ?x234)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv3 32))) ?x67)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1011X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1011X)))
 (=> $x190 (= ?x180 ?x248))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1010X) (bvult input.ind-%var1010X (_ bv100 32)))))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1010X)))
 (= $x190 $x262))))
 ))
 (let (($x72 (and $x153 $x148)))
 (let (($x6 (= $x72 true)))
 (let (($x175 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var1005X (_ bv4 32))))
 (let ((?x115 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x115))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv2 32))) ?x234)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv3 32))) ?x67)))
 (let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1005X)))
 (let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1005X)))
 (=> $x270 (= ?x221 ?x248))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1004X) (bvult input.ind-%var1004X (_ bv100 32)))))
 (let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1004X)))
 (= $x270 $x262))))
 ))
 (let (($x151 (and $x216 $x175)))
 (let (($x178 (= $x151 true)))
 (let (($x214 (forall ((input.ind-%var999X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var999X (_ bv4 32))))
 (let ((?x13 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x13))))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv2 32))) ?x64)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv3 32))) ?x266)))
 (let ((?x209 (input.spec-%var-m2-1.1.1 input.ind-%var999X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var999X)))
 (=> $x135 (= ?x209 ?x32))))))))))
 ))
 (let (($x235 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var998X) (bvult input.ind-%var998X (_ bv100 32)))))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var998X)))
 (= $x135 $x262))))
 ))
 (let (($x243 (and $x235 $x214)))
 (let (($x12 (= $x243 true)))
 (let (($x156 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x264 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x250 (and $x264 $x195)))
 (let (($x174 (and $x250 $x156)))
 (let (($x173 (= $x174 true)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let ((?x95 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x225 (= (_ bv0 32) ?x95)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x96 (= (_ bv0 32) ?x117)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x40 $x63)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x55 $x46)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x102 $x97)))
 (let (($x201 (and (not $x27) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x51 $x56)))
 (let (($x103 (and (not $x90) $x37)))
 (let (($x100 (and (and (and (and (and (and $x103 $x201) $x93) $x84) $x154) $x59) $x96)))
 (let (($x101 (and $x100 $x225)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x31 (or false (or false (and (and true (or $x23 $x28)) (or $x44 $x104))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x86 (and $x62 $x101)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x54)))
 (let (($x10 (= $x69 true)))
 (let (($x254 (= $x10 true)))
 (let (($x78 (and $x254 $x291)))
 (let (($x131 (and $x78 $x134)))
 (let (($x128 (and $x131 $x12)))
 (let (($x38 (and $x128 $x178)))
 (let (($x18 (and $x38 $x6)))
 (let (($x35 (and $x18 $x293)))
 (let (($x39 (and $x35 $x167)))
 (let (($x140 (=> $x39 $x193)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x281 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x118 (bvneg ?x281)))
 (let (($x240 (= ?x118 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x193 (= $x240 true)))
 (let (($x130 (forall ((input.ind-%var1023X (_ BitVec 32)) )(let ((?x34 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1023X)))
 (let ((?x209 (input.spec-%var-m2-1.1.1 input.ind-%var1023X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var1023X)))
 (=> $x135 (= ?x209 ?x34))))))
 ))
 (let (($x258 (forall ((input.ind-%var1022X (_ BitVec 32)) )(let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1022X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var1022X)))
 (= $x135 $x288))))
 ))
 (let (($x50 (and $x258 $x130)))
 (let (($x167 (= $x50 true)))
 (let (($x139 (forall ((input.ind-%var1017X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1017X)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1017X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1017X)))
 (=> $x190 (= ?x180 ?x221))))))
 ))
 (let (($x278 (forall ((input.ind-%var1016X (_ BitVec 32)) )(let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1016X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1016X)))
 (= $x190 $x270))))
 ))
 (let (($x205 (and $x278 $x139)))
 (let (($x293 (= $x205 true)))
 (let (($x148 (forall ((input.ind-%var1011X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var1011X (_ bv4 32))))
 (let ((?x115 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x115))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv2 32))) ?x234)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv3 32))) ?x67)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1011X)))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1011X)))
 (=> $x190 (= ?x180 ?x248))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1010X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1010X) (bvult input.ind-%var1010X (_ bv100 32)))))
 (let (($x190 (input.spec-%var-m1-1.0.1 input.ind-%var1010X)))
 (= $x190 $x262))))
 ))
 (let (($x72 (and $x153 $x148)))
 (let (($x6 (= $x72 true)))
 (let (($x175 (forall ((input.ind-%var1005X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var1005X (_ bv4 32))))
 (let ((?x115 (bvadd ?x294 input.dst.llvm-%m1)))
 (let ((?x234 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x115))))
 (let ((?x67 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv2 32))) ?x234)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x115 (_ bv3 32))) ?x67)))
 (let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1005X)))
 (let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1005X)))
 (=> $x270 (= ?x221 ?x248))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1004X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var1004X) (bvult input.ind-%var1004X (_ bv100 32)))))
 (let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1004X)))
 (= $x270 $x262))))
 ))
 (let (($x151 (and $x216 $x175)))
 (let (($x178 (= $x151 true)))
 (let (($x214 (forall ((input.ind-%var999X (_ BitVec 32)) )(let ((?x294 (bvmul input.ind-%var999X (_ bv4 32))))
 (let ((?x13 (bvadd ?x294 input.dst.llvm-%m2)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x13))))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv2 32))) ?x64)))
 (let ((?x32 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv3 32))) ?x266)))
 (let ((?x209 (input.spec-%var-m2-1.1.1 input.ind-%var999X)))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var999X)))
 (=> $x135 (= ?x209 ?x32))))))))))
 ))
 (let (($x235 (forall ((input.ind-%var998X (_ BitVec 32)) )(let (($x262 (and (bvule (_ bv0 32) input.ind-%var998X) (bvult input.ind-%var998X (_ bv100 32)))))
 (let (($x135 (input.spec-%var-m2-1.0.1 input.ind-%var998X)))
 (= $x135 $x262))))
 ))
 (let (($x243 (and $x235 $x214)))
 (let (($x12 (= $x243 true)))
 (let (($x156 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x264 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x250 (and $x264 $x195)))
 (let (($x174 (and $x250 $x156)))
 (let (($x173 (= $x174 true)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let ((?x95 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x225 (= (_ bv0 32) ?x95)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x96 (= (_ bv0 32) ?x117)))
 (let ((?x82 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x82)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x85)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x40 $x63)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x55 $x46)))
 (let (($x84 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x27 (and $x102 $x97)))
 (let (($x201 (and (not $x27) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x51 $x56)))
 (let (($x103 (and (not $x90) $x37)))
 (let (($x100 (and (and (and (and (and (and $x103 $x201) $x93) $x84) $x154) $x59) $x96)))
 (let (($x101 (and $x100 $x225)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x28 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x31 (or false (or false (and (and true (or $x23 $x28)) (or $x44 $x104))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x31)))
 (let (($x86 (and $x62 $x101)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let ((?x54 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 2) ?x54)))
 (let (($x10 (= $x69 true)))
 (let (($x254 (= $x10 true)))
 (let (($x78 (and $x254 $x291)))
 (let (($x131 (and $x78 $x134)))
 (let (($x128 (and $x131 $x12)))
 (let (($x38 (and $x128 $x178)))
 (let (($x18 (and $x38 $x6)))
 (let (($x35 (and $x18 $x293)))
 (let (($x39 (and $x35 $x167)))
 (let (($x140 (=> $x39 $x193)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x16 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x210 (bvneg ?x16)))
 (let (($x168 (= ?x210 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x143 (= $x168 true)))
 (let (($x91 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1053X)))
 (let ((?x36 (input.spec-%var-m2-1.1.1 input.ind-%var1053X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1053X)))
 (=> $x111 (= ?x36 ?x116))))))
 ))
 (let (($x171 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x188 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1052X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1052X)))
 (= $x111 $x188))))
 ))
 (let (($x222 (and $x171 $x91)))
 (let (($x113 (= $x222 true)))
 (let (($x181 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1047X)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1047X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1047X)))
 (=> $x260 (= ?x123 ?x241))))))
 ))
 (let (($x169 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1046X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1046X)))
 (= $x260 $x6))))
 ))
 (let (($x110 (and $x169 $x181)))
 (let (($x179 (= $x110 true)))
 (let (($x33 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x75 (bvadd ?x284 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x274)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x247)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1041X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1041X)))
 (=> $x260 (= ?x123 ?x158))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1040X)))
 (= $x260 $x220))))
 ))
 (let (($x229 (and $x147 $x33)))
 (let (($x268 (= $x229 true)))
 (let (($x287 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1035X (_ bv4 32))))
 (let ((?x75 (bvadd ?x284 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x274)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x247)))
 (let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1035X)))
 (let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1035X)))
 (=> $x6 (= ?x241 ?x158))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X (_ bv100 32)))))
 (let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1034X)))
 (= $x6 $x220))))
 ))
 (let (($x22 (and $x205 $x287)))
 (let (($x172 (= $x22 true)))
 (let (($x153 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1029X (_ bv4 32))))
 (let ((?x152 (bvadd ?x284 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x152))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv2 32))) ?x248)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv3 32))) ?x175)))
 (let ((?x36 (input.spec-%var-m2-1.1.1 input.ind-%var1029X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1029X)))
 (=> $x111 (= ?x36 ?x38))))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1028X) (bvult input.ind-%var1028X (_ bv100 32)))))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1028X)))
 (= $x111 $x220))))
 ))
 (let (($x180 (and $x267 $x153)))
 (let (($x275 (= $x180 true)))
 (let (($x174 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x250 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x272 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x52 (and $x272 $x250)))
 (let (($x173 (and $x52 $x174)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let (($x131 (= $x134 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x59)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x98)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x21 $x19)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x84 $x85)))
 (let (($x92 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x97 $x27)))
 (let (($x60 (and (not $x203) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x47 $x129)))
 (let (($x102 (and (not $x80) $x37)))
 (let (($x101 (and (and (and (and (and (and $x102 $x60) $x93) $x92) $x63) $x154) $x82)))
 (let (($x86 (and $x101 $x185)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x51 (or false (or false (and (and true (or $x7 $x146)) (or $x73 $x77))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x42 (and $x90 $x86)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let (($x78 (= $x291 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x10 (= (_ bv0 2) ?x69)))
 (let (($x76 (= $x10 true)))
 (let (($x54 (= $x76 true)))
 (let (($x105 (and $x54 $x78)))
 (let (($x144 (and $x105 $x131)))
 (let (($x132 (and $x144 $x275)))
 (let (($x184 (and $x132 $x172)))
 (let (($x212 (and $x184 $x268)))
 (let (($x282 (and $x212 $x179)))
 (let (($x150 (and $x282 $x113)))
 (let (($x122 (=> $x150 $x143)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x16 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x210 (bvneg ?x16)))
 (let (($x168 (= ?x210 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x143 (= $x168 true)))
 (let (($x91 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1053X)))
 (let ((?x36 (input.spec-%var-m2-1.1.1 input.ind-%var1053X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1053X)))
 (=> $x111 (= ?x36 ?x116))))))
 ))
 (let (($x171 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x188 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1052X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1052X)))
 (= $x111 $x188))))
 ))
 (let (($x222 (and $x171 $x91)))
 (let (($x113 (= $x222 true)))
 (let (($x181 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1047X)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1047X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1047X)))
 (=> $x260 (= ?x123 ?x241))))))
 ))
 (let (($x169 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1046X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1046X)))
 (= $x260 $x6))))
 ))
 (let (($x110 (and $x169 $x181)))
 (let (($x179 (= $x110 true)))
 (let (($x33 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x75 (bvadd ?x284 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x274)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x247)))
 (let ((?x123 (input.spec-%var-m1-1.1.1 input.ind-%var1041X)))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1041X)))
 (=> $x260 (= ?x123 ?x158))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x260 (input.spec-%var-m1-1.0.1 input.ind-%var1040X)))
 (= $x260 $x220))))
 ))
 (let (($x229 (and $x147 $x33)))
 (let (($x268 (= $x229 true)))
 (let (($x287 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1035X (_ bv4 32))))
 (let ((?x75 (bvadd ?x284 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x274)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x247)))
 (let ((?x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1035X)))
 (let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1035X)))
 (=> $x6 (= ?x241 ?x158))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X (_ bv100 32)))))
 (let (($x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1034X)))
 (= $x6 $x220))))
 ))
 (let (($x22 (and $x205 $x287)))
 (let (($x172 (= $x22 true)))
 (let (($x153 (forall ((input.ind-%var1029X (_ BitVec 32)) )(let ((?x284 (bvmul input.ind-%var1029X (_ bv4 32))))
 (let ((?x152 (bvadd ?x284 input.dst.llvm-%m2)))
 (let ((?x248 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x152))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv2 32))) ?x248)))
 (let ((?x38 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x152 (_ bv3 32))) ?x175)))
 (let ((?x36 (input.spec-%var-m2-1.1.1 input.ind-%var1029X)))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1029X)))
 (=> $x111 (= ?x36 ?x38))))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1028X (_ BitVec 32)) )(let (($x220 (and (bvule (_ bv0 32) input.ind-%var1028X) (bvult input.ind-%var1028X (_ bv100 32)))))
 (let (($x111 (input.spec-%var-m2-1.0.1 input.ind-%var1028X)))
 (= $x111 $x220))))
 ))
 (let (($x180 (and $x267 $x153)))
 (let (($x275 (= $x180 true)))
 (let (($x174 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x250 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x272 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x52 (and $x272 $x250)))
 (let (($x173 (and $x52 $x174)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let (($x131 (= $x134 true)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x59)))
 (let ((?x98 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x82 (= (_ bv0 32) ?x98)))
 (let ((?x46 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x46)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x40)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (and $x21 $x19)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x63 (and $x84 $x85)))
 (let (($x92 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x99 $x81)))
 (let (($x79 (not $x87)))
 (let (($x27 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x97 $x27)))
 (let (($x60 (and (not $x203) $x79)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x37 (not $x88)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x47 $x129)))
 (let (($x102 (and (not $x80) $x37)))
 (let (($x101 (and (and (and (and (and (and $x102 $x60) $x93) $x92) $x63) $x154) $x82)))
 (let (($x86 (and $x101 $x185)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x28 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x28)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x28)))
 (let (($x51 (or false (or false (and (and true (or $x7 $x146)) (or $x73 $x77))))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x51)))
 (let (($x42 (and $x90 $x86)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let (($x78 (= $x291 true)))
 (let ((?x69 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x10 (= (_ bv0 2) ?x69)))
 (let (($x76 (= $x10 true)))
 (let (($x54 (= $x76 true)))
 (let (($x105 (and $x54 $x78)))
 (let (($x144 (and $x105 $x131)))
 (let (($x132 (and $x144 $x275)))
 (let (($x184 (and $x132 $x172)))
 (let (($x212 (and $x184 $x268)))
 (let (($x282 (and $x212 $x179)))
 (let (($x150 (and $x282 $x113)))
 (let (($x122 (=> $x150 $x143)))
 (not $x122)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x177 (= $x43 true)))
 (let (($x219 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1083X)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 input.ind-%var1083X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1083X)))
 (=> $x157 (= ?x48 ?x236))))))
 ))
 (let (($x24 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1082X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1082X)))
 (= $x157 $x94))))
 ))
 (let (($x162 (and $x24 $x219)))
 (let (($x215 (= $x162 true)))
 (let (($x160 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1077X)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1077X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1077X)))
 (=> $x268 (= ?x231 ?x67))))))
 ))
 (let (($x161 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1076X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1076X)))
 (= $x268 $x294))))
 ))
 (let (($x232 (and $x161 $x160)))
 (let (($x45 (= $x232 true)))
 (let (($x290 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1071X (_ bv4 32))))
 (let ((?x107 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x107))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv2 32))) ?x39)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv3 32))) ?x50)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 input.ind-%var1071X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1071X)))
 (=> $x157 (= ?x48 ?x281))))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1070X) (bvult input.ind-%var1070X (_ bv100 32)))))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1070X)))
 (= $x157 $x151))))
 ))
 (let (($x136 (and $x209 $x290)))
 (let (($x58 (= $x136 true)))
 (let (($x112 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1065X (_ bv4 32))))
 (let ((?x61 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x61))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv2 32))) ?x158)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv3 32))) ?x287)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1065X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1065X)))
 (=> $x268 (= ?x231 ?x184))))))))))
 ))
 (let (($x110 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1064X) (bvult input.ind-%var1064X (_ bv100 32)))))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1064X)))
 (= $x268 $x151))))
 ))
 (let (($x5 (and $x110 $x112)))
 (let (($x262 (= $x5 true)))
 (let (($x147 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1059X (_ bv4 32))))
 (let ((?x61 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x61))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv2 32))) ?x158)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv3 32))) ?x287)))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1059X)))
 (let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1059X)))
 (=> $x294 (= ?x67 ?x184))))))))))
 ))
 (let (($x270 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1058X) (bvult input.ind-%var1058X (_ bv100 32)))))
 (let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1058X)))
 (= $x294 $x151))))
 ))
 (let (($x123 (and $x270 $x147)))
 (let (($x53 (= $x123 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x134 (= (_ bv0 2) ?x145)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let (($x195 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x237 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x291 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x192 (and $x291 $x237)))
 (let (($x250 (and $x192 $x195)))
 (let (($x52 (= $x250 true)))
 (let (($x206 (= $x52 true)))
 (let (($x156 (= $x206 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x40)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x55 (= (_ bv0 32) ?x21)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x93 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (and $x117 $x96)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x60 $x20)))
 (let (($x79 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x201 (and (not $x88) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x114 $x69)))
 (let (($x103 (and (not $x62) $x129)))
 (let (($x225 (and (and (and (and (and (and $x103 $x201) $x81) $x79) $x92) $x84) $x55)))
 (let (($x98 (and $x225 $x19)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x77 (or false (or false (and (and true (or $x56 $x23)) (or $x106 $x44))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x82 (and $x31 $x98)))
 (let (($x101 (= $x82 true)))
 (let (($x59 (= $x101 true)))
 (let (($x185 (= $x59 true)))
 (let (($x174 (and $x185 $x156)))
 (let (($x142 (and $x174 $x144)))
 (let (($x155 (and $x142 $x53)))
 (let (($x191 (and $x155 $x262)))
 (let (($x230 (and $x191 $x58)))
 (let (($x269 (and $x230 $x45)))
 (let (($x245 (and $x269 $x215)))
 (let (($x170 (=> $x245 $x177)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x43 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x177 (= $x43 true)))
 (let (($x219 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1083X)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 input.ind-%var1083X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1083X)))
 (=> $x157 (= ?x48 ?x236))))))
 ))
 (let (($x24 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1082X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1082X)))
 (= $x157 $x94))))
 ))
 (let (($x162 (and $x24 $x219)))
 (let (($x215 (= $x162 true)))
 (let (($x160 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1077X)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1077X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1077X)))
 (=> $x268 (= ?x231 ?x67))))))
 ))
 (let (($x161 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1076X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1076X)))
 (= $x268 $x294))))
 ))
 (let (($x232 (and $x161 $x160)))
 (let (($x45 (= $x232 true)))
 (let (($x290 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1071X (_ bv4 32))))
 (let ((?x107 (bvadd ?x176 input.dst.llvm-%m2)))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x107))))
 (let ((?x50 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv2 32))) ?x39)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x107 (_ bv3 32))) ?x50)))
 (let ((?x48 (input.spec-%var-m2-1.1.1 input.ind-%var1071X)))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1071X)))
 (=> $x157 (= ?x48 ?x281))))))))))
 ))
 (let (($x209 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1070X) (bvult input.ind-%var1070X (_ bv100 32)))))
 (let (($x157 (input.spec-%var-m2-1.0.1 input.ind-%var1070X)))
 (= $x157 $x151))))
 ))
 (let (($x136 (and $x209 $x290)))
 (let (($x58 (= $x136 true)))
 (let (($x112 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1065X (_ bv4 32))))
 (let ((?x61 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x61))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv2 32))) ?x158)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv3 32))) ?x287)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1065X)))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1065X)))
 (=> $x268 (= ?x231 ?x184))))))))))
 ))
 (let (($x110 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1064X) (bvult input.ind-%var1064X (_ bv100 32)))))
 (let (($x268 (input.spec-%var-m1-1.0.1 input.ind-%var1064X)))
 (= $x268 $x151))))
 ))
 (let (($x5 (and $x110 $x112)))
 (let (($x262 (= $x5 true)))
 (let (($x147 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x176 (bvmul input.ind-%var1059X (_ bv4 32))))
 (let ((?x61 (bvadd ?x176 input.dst.llvm-%m1)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x61))))
 (let ((?x287 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv2 32))) ?x158)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x61 (_ bv3 32))) ?x287)))
 (let ((?x67 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1059X)))
 (let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1059X)))
 (=> $x294 (= ?x67 ?x184))))))))))
 ))
 (let (($x270 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x151 (and (bvule (_ bv0 32) input.ind-%var1058X) (bvult input.ind-%var1058X (_ bv100 32)))))
 (let (($x294 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1058X)))
 (= $x294 $x151))))
 ))
 (let (($x123 (and $x270 $x147)))
 (let (($x53 (= $x123 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x134 (= (_ bv0 2) ?x145)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let (($x195 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x237 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x291 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x192 (and $x291 $x237)))
 (let (($x250 (and $x192 $x195)))
 (let (($x52 (= $x250 true)))
 (let (($x206 (= $x52 true)))
 (let (($x156 (= $x206 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x40)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x55 (= (_ bv0 32) ?x21)))
 (let ((?x100 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x84 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x100)))
 (let ((?x93 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x93)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (and $x117 $x96)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (and $x60 $x20)))
 (let (($x79 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x57 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x66 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (and $x66 $x57)))
 (let (($x201 (and (not $x88) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x69 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x62 (and $x114 $x69)))
 (let (($x103 (and (not $x62) $x129)))
 (let (($x225 (and (and (and (and (and (and $x103 $x201) $x81) $x79) $x92) $x84) $x55)))
 (let (($x98 (and $x225 $x19)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x256 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x256)))
 (let (($x77 (or false (or false (and (and true (or $x56 $x23)) (or $x106 $x44))))))
 (let (($x31 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x77)))
 (let (($x82 (and $x31 $x98)))
 (let (($x101 (= $x82 true)))
 (let (($x59 (= $x101 true)))
 (let (($x185 (= $x59 true)))
 (let (($x174 (and $x185 $x156)))
 (let (($x142 (and $x174 $x144)))
 (let (($x155 (and $x142 $x53)))
 (let (($x191 (and $x155 $x262)))
 (let (($x230 (and $x191 $x58)))
 (let (($x269 (and $x230 $x45)))
 (let (($x245 (and $x269 $x215)))
 (let (($x170 (=> $x245 $x177)))
 (not $x170)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd0001440)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0003404)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0003407)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd0001443)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0003404)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd0001440)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x80000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001a80)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001a83)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001a80)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x40000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000001 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x211 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x35 (= (_ bv0 30) ?x211)))
 (let (($x289 (= $x35 true)))
 (let (($x186 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let ((?x282 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1145X)))
 (let ((?x180 (input.spec-%var-m2-1.1.1 input.ind-%var1145X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1145X)))
 (=> $x109 (= ?x180 ?x282))))))
 ))
 (let (($x41 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x72 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1144X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1144X)))
 (= $x109 $x72))))
 ))
 (let (($x228 (and $x41 $x186)))
 (let (($x120 (= $x228 true)))
 (let (($x238 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1139X)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 input.ind-%var1139X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1139X)))
 (=> $x230 (= ?x24 ?x15))))))
 ))
 (let (($x214 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1138X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1138X)))
 (= $x230 $x151))))
 ))
 (let (($x251 (and $x214 $x238)))
 (let (($x258 (= $x251 true)))
 (let (($x253 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1133X (_ bv4 32))))
 (let ((?x168 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x222)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x16)))
 (let ((?x180 (input.spec-%var-m2-1.1.1 input.ind-%var1133X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1133X)))
 (=> $x109 (= ?x180 ?x115))))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1132X) (bvult input.ind-%var1132X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1132X)))
 (= $x109 $x172))))
 ))
 (let (($x216 (and $x75 $x253)))
 (let (($x229 (= $x216 true)))
 (let (($x226 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1127X (_ bv4 32))))
 (let ((?x119 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x265)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x130)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 input.ind-%var1127X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1127X)))
 (=> $x230 (= ?x24 ?x223))))))))))
 ))
 (let (($x45 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1126X) (bvult input.ind-%var1126X (_ bv100 32)))))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1126X)))
 (= $x230 $x172))))
 ))
 (let (($x220 (and $x45 $x226)))
 (let (($x217 (= $x220 true)))
 (let (($x281 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1121X (_ bv4 32))))
 (let ((?x119 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x265)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x130)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1121X)))
 (let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1121X)))
 (=> $x151 (= ?x15 ?x223))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1120X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1120X) (bvult input.ind-%var1120X (_ bv100 32)))))
 (let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1120X)))
 (= $x151 $x172))))
 ))
 (let (($x193 (and $x189 $x281)))
 (let (($x164 (= $x193 true)))
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x144 (= (_ bv0 2) ?x131)))
 (let (($x142 (= $x144 true)))
 (let (($x235 (= $x142 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x272 (and $x105 $x264)))
 (let (($x206 (and $x272 $x52)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let (($x173 (= $x174 true)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x84)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x46)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x95 $x11)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x79 $x93)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x57 $x88)))
 (let (($x85 (and (not $x203) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x10 $x54)))
 (let (($x66 (and (not $x80) $x129)))
 (let (($x98 (and (and (and (and (and (and $x66 $x85) $x81) $x87) $x96) $x92) $x100)))
 (let (($x82 (and $x98 $x154)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x114 (or false (or false (and (and true (or $x28 $x7)) (or $x9 $x73))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x101 (and $x62 $x82)))
 (let (($x59 (= $x101 true)))
 (let (($x185 (= $x59 true)))
 (let (($x86 (= $x185 true)))
 (let (($x145 (and $x86 $x173)))
 (let (($x294 (and $x145 $x235)))
 (let (($x290 (and $x294 $x164)))
 (let (($x292 (and $x290 $x217)))
 (let (($x213 (and $x292 $x229)))
 (let (($x8 (and $x213 $x258)))
 (let (($x74 (and $x8 $x120)))
 (let (($x183 (=> $x74 $x289)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x211 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x35 (= (_ bv0 30) ?x211)))
 (let (($x289 (= $x35 true)))
 (let (($x186 (forall ((input.ind-%var1145X (_ BitVec 32)) )(let ((?x282 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1145X)))
 (let ((?x180 (input.spec-%var-m2-1.1.1 input.ind-%var1145X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1145X)))
 (=> $x109 (= ?x180 ?x282))))))
 ))
 (let (($x41 (forall ((input.ind-%var1144X (_ BitVec 32)) )(let (($x72 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1144X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1144X)))
 (= $x109 $x72))))
 ))
 (let (($x228 (and $x41 $x186)))
 (let (($x120 (= $x228 true)))
 (let (($x238 (forall ((input.ind-%var1139X (_ BitVec 32)) )(let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1139X)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 input.ind-%var1139X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1139X)))
 (=> $x230 (= ?x24 ?x15))))))
 ))
 (let (($x214 (forall ((input.ind-%var1138X (_ BitVec 32)) )(let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1138X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1138X)))
 (= $x230 $x151))))
 ))
 (let (($x251 (and $x214 $x238)))
 (let (($x258 (= $x251 true)))
 (let (($x253 (forall ((input.ind-%var1133X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1133X (_ bv4 32))))
 (let ((?x168 (bvadd ?x157 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x168))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv2 32))) ?x222)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x168 (_ bv3 32))) ?x16)))
 (let ((?x180 (input.spec-%var-m2-1.1.1 input.ind-%var1133X)))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1133X)))
 (=> $x109 (= ?x180 ?x115))))))))))
 ))
 (let (($x75 (forall ((input.ind-%var1132X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1132X) (bvult input.ind-%var1132X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m2-1.0.1 input.ind-%var1132X)))
 (= $x109 $x172))))
 ))
 (let (($x216 (and $x75 $x253)))
 (let (($x229 (= $x216 true)))
 (let (($x226 (forall ((input.ind-%var1127X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1127X (_ bv4 32))))
 (let ((?x119 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x265)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x130)))
 (let ((?x24 (input.spec-%var-m1-1.1.1 input.ind-%var1127X)))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1127X)))
 (=> $x230 (= ?x24 ?x223))))))))))
 ))
 (let (($x45 (forall ((input.ind-%var1126X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1126X) (bvult input.ind-%var1126X (_ bv100 32)))))
 (let (($x230 (input.spec-%var-m1-1.0.1 input.ind-%var1126X)))
 (= $x230 $x172))))
 ))
 (let (($x220 (and $x45 $x226)))
 (let (($x217 (= $x220 true)))
 (let (($x281 (forall ((input.ind-%var1121X (_ BitVec 32)) )(let ((?x157 (bvmul input.ind-%var1121X (_ bv4 32))))
 (let ((?x119 (bvadd ?x157 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x119))))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv2 32))) ?x265)))
 (let ((?x223 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x119 (_ bv3 32))) ?x130)))
 (let ((?x15 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1121X)))
 (let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1121X)))
 (=> $x151 (= ?x15 ?x223))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var1120X (_ BitVec 32)) )(let (($x172 (and (bvule (_ bv0 32) input.ind-%var1120X) (bvult input.ind-%var1120X (_ bv100 32)))))
 (let (($x151 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1120X)))
 (= $x151 $x172))))
 ))
 (let (($x193 (and $x189 $x281)))
 (let (($x164 (= $x193 true)))
 (let ((?x131 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x144 (= (_ bv0 2) ?x131)))
 (let (($x142 (= $x144 true)))
 (let (($x235 (= $x142 true)))
 (let (($x52 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x264 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x105 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x272 (and $x105 $x264)))
 (let (($x206 (and $x272 $x52)))
 (let (($x156 (= $x206 true)))
 (let (($x174 (= $x156 true)))
 (let (($x173 (= $x174 true)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x84)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x46)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x20)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x93 (and $x95 $x11)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x79 $x93)))
 (let (($x87 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x203 (and $x57 $x88)))
 (let (($x85 (and (not $x203) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x80 (and $x10 $x54)))
 (let (($x66 (and (not $x80) $x129)))
 (let (($x98 (and (and (and (and (and (and $x66 $x85) $x81) $x87) $x96) $x92) $x100)))
 (let (($x82 (and $x98 $x154)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x114 (or false (or false (and (and true (or $x28 $x7)) (or $x9 $x73))))))
 (let (($x62 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x101 (and $x62 $x82)))
 (let (($x59 (= $x101 true)))
 (let (($x185 (= $x59 true)))
 (let (($x86 (= $x185 true)))
 (let (($x145 (and $x86 $x173)))
 (let (($x294 (and $x145 $x235)))
 (let (($x290 (and $x294 $x164)))
 (let (($x292 (and $x290 $x217)))
 (let (($x213 (and $x292 $x229)))
 (let (($x8 (and $x213 $x258)))
 (let (($x74 (and $x8 $x120)))
 (let (($x183 (=> $x74 $x289)))
 (not $x183))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc4000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc4000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc4000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x20000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000001 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00020003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x182 ((_ extract 16 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 17) ?x182)))
 (let (($x71 (= $x34 true)))
 (let (($x139 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x204 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1207X)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var1207X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1207X)))
 (=> $x277 (= ?x110 ?x204))))))
 ))
 (let (($x262 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1206X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1206X)))
 (= $x277 $x126))))
 ))
 (let (($x210 (and $x262 $x139)))
 (let (($x278 (= $x210 true)))
 (let (($x243 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1201X)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1201X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1201X)))
 (=> $x213 (= ?x41 ?x209))))))
 ))
 (let (($x33 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1200X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1200X)))
 (= $x213 $x172))))
 ))
 (let (($x121 (and $x33 $x243)))
 (let (($x288 (= $x121 true)))
 (let (($x140 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1195X (_ bv4 32))))
 (let ((?x49 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x177)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x219)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var1195X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1195X)))
 (=> $x277 (= ?x110 ?x266))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1194X)))
 (= $x277 $x240))))
 ))
 (let (($x111 (and $x133 $x140)))
 (let (($x65 (= $x111 true)))
 (let (($x236 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1189X (_ bv4 32))))
 (let ((?x163 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x143)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x113)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1189X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1189X)))
 (=> $x213 (= ?x41 ?x150))))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1188X) (bvult input.ind-%var1188X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1188X)))
 (= $x213 $x240))))
 ))
 (let (($x234 (and $x258 $x236)))
 (let (($x275 (= $x234 true)))
 (let (($x115 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1183X (_ bv4 32))))
 (let ((?x163 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x143)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x113)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1183X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1183X)))
 (=> $x172 (= ?x209 ?x150))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1182X)))
 (= $x172 $x240))))
 ))
 (let (($x18 (and $x167 $x115)))
 (let (($x224 (= $x18 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x235 (= (_ bv0 2) ?x142)))
 (let (($x294 (= $x235 true)))
 (let (($x284 (= $x294 true)))
 (let (($x156 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x250 (and $x192 $x195)))
 (let (($x174 (and $x250 $x156)))
 (let (($x173 (= $x174 true)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x92)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x40)))
 (let ((?x93 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x225 $x60)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x87 $x117)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x88 $x203)))
 (let (($x21 (and (not $x201) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x68 $x208)))
 (let (($x57 (and (not $x103) $x129)))
 (let (($x82 (and (and (and (and (and (and $x57 $x21) $x81) $x63) $x11) $x96) $x20)))
 (let (($x101 (and $x82 $x19)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x10 (or false (or false (and (and true (or $x83 $x106)) (or $x104 $x77))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x59 (and $x80 $x101)))
 (let (($x185 (= $x59 true)))
 (let (($x86 (= $x185 true)))
 (let (($x42 (= $x86 true)))
 (let (($x131 (and $x42 $x134)))
 (let (($x151 (and $x131 $x284)))
 (let (($x253 (and $x151 $x224)))
 (let (($x178 (and $x253 $x275)))
 (let (($x153 (and $x178 $x65)))
 (let (($x122 (and $x153 $x288)))
 (let (($x255 (and $x122 $x278)))
 (let (($x125 (=> $x255 $x71)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x182 ((_ extract 16 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 17) ?x182)))
 (let (($x71 (= $x34 true)))
 (let (($x139 (forall ((input.ind-%var1207X (_ BitVec 32)) )(let ((?x204 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1207X)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var1207X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1207X)))
 (=> $x277 (= ?x110 ?x204))))))
 ))
 (let (($x262 (forall ((input.ind-%var1206X (_ BitVec 32)) )(let (($x126 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1206X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1206X)))
 (= $x277 $x126))))
 ))
 (let (($x210 (and $x262 $x139)))
 (let (($x278 (= $x210 true)))
 (let (($x243 (forall ((input.ind-%var1201X (_ BitVec 32)) )(let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1201X)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1201X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1201X)))
 (=> $x213 (= ?x41 ?x209))))))
 ))
 (let (($x33 (forall ((input.ind-%var1200X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1200X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1200X)))
 (= $x213 $x172))))
 ))
 (let (($x121 (and $x33 $x243)))
 (let (($x288 (= $x121 true)))
 (let (($x140 (forall ((input.ind-%var1195X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1195X (_ bv4 32))))
 (let ((?x49 (bvadd ?x109 input.dst.llvm-%m2)))
 (let ((?x177 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x49))))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv2 32))) ?x177)))
 (let ((?x266 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x49 (_ bv3 32))) ?x219)))
 (let ((?x110 (input.spec-%var-m2-1.1.1 input.ind-%var1195X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1195X)))
 (=> $x277 (= ?x110 ?x266))))))))))
 ))
 (let (($x133 (forall ((input.ind-%var1194X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1194X) (bvult input.ind-%var1194X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1194X)))
 (= $x277 $x240))))
 ))
 (let (($x111 (and $x133 $x140)))
 (let (($x65 (= $x111 true)))
 (let (($x236 (forall ((input.ind-%var1189X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1189X (_ bv4 32))))
 (let ((?x163 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x143)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x113)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1189X)))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1189X)))
 (=> $x213 (= ?x41 ?x150))))))))))
 ))
 (let (($x258 (forall ((input.ind-%var1188X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1188X) (bvult input.ind-%var1188X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m1-1.0.1 input.ind-%var1188X)))
 (= $x213 $x240))))
 ))
 (let (($x234 (and $x258 $x236)))
 (let (($x275 (= $x234 true)))
 (let (($x115 (forall ((input.ind-%var1183X (_ BitVec 32)) )(let ((?x109 (bvmul input.ind-%var1183X (_ bv4 32))))
 (let ((?x163 (bvadd ?x109 input.dst.llvm-%m1)))
 (let ((?x143 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x163))))
 (let ((?x113 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv2 32))) ?x143)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x163 (_ bv3 32))) ?x113)))
 (let ((?x209 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1183X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1183X)))
 (=> $x172 (= ?x209 ?x150))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1182X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var1182X) (bvult input.ind-%var1182X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1182X)))
 (= $x172 $x240))))
 ))
 (let (($x18 (and $x167 $x115)))
 (let (($x224 (= $x18 true)))
 (let ((?x142 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x235 (= (_ bv0 2) ?x142)))
 (let (($x294 (= $x235 true)))
 (let (($x284 (= $x294 true)))
 (let (($x156 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x195 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x192 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x250 (and $x192 $x195)))
 (let (($x174 (and $x250 $x156)))
 (let (($x173 (= $x174 true)))
 (let (($x145 (= $x173 true)))
 (let (($x134 (= $x145 true)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x92)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x20 (= (_ bv0 32) ?x40)))
 (let ((?x93 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x93)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (and $x225 $x60)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x11 (and $x87 $x117)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x88 $x203)))
 (let (($x21 (and (not $x201) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (and $x68 $x208)))
 (let (($x57 (and (not $x103) $x129)))
 (let (($x82 (and (and (and (and (and (and $x57 $x21) $x81) $x63) $x11) $x96) $x20)))
 (let (($x101 (and $x82 $x19)))
 (let (($x77 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x106 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x7)))
 (let (($x10 (or false (or false (and (and true (or $x83 $x106)) (or $x104 $x77))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x10)))
 (let (($x59 (and $x80 $x101)))
 (let (($x185 (= $x59 true)))
 (let (($x86 (= $x185 true)))
 (let (($x42 (= $x86 true)))
 (let (($x131 (and $x42 $x134)))
 (let (($x151 (and $x131 $x284)))
 (let (($x253 (and $x151 $x224)))
 (let (($x178 (and $x253 $x275)))
 (let (($x153 (and $x178 $x65)))
 (let (($x122 (and $x153 $x288)))
 (let (($x255 (and $x122 $x278)))
 (let (($x125 (=> $x255 $x71)))
 (not $x125))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000a03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000083 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000082 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000081 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000080 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00004003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 6 0) input.dst.llvm-%m2)))
 (let (($x94 (= (_ bv0 7) ?x169)))
 (let (($x160 (= $x94 true)))
 (let (($x25 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1269X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1269X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1269X)))
 (=> $x190 (= ?x45 ?x184))))))
 ))
 (let (($x217 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x202 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1268X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1268X)))
 (= $x190 $x202))))
 ))
 (let (($x38 (and $x217 $x25)))
 (let (($x188 (= $x38 true)))
 (let (($x58 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1263X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1263X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1263X)))
 (=> $x153 (= ?x262 ?x75))))))
 ))
 (let (($x269 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1262X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1262X)))
 (= $x153 $x240))))
 ))
 (let (($x132 (and $x269 $x58)))
 (let (($x241 (= $x132 true)))
 (let (($x158 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1257X (_ bv4 32))))
 (let ((?x239 (bvadd ?x277 input.dst.llvm-%m2)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x211)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x186)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1257X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1257X)))
 (=> $x190 (= ?x45 ?x194))))))))))
 ))
 (let (($x50 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1256X) (bvult input.ind-%var1256X (_ bv100 32)))))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1256X)))
 (= $x190 $x91))))
 ))
 (let (($x233 (and $x50 $x158)))
 (let (($x247 (= $x233 true)))
 (let (($x282 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1251X (_ bv4 32))))
 (let ((?x248 (bvadd ?x277 input.dst.llvm-%m1)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x248))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv2 32))) ?x245)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv3 32))) ?x215)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1251X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1251X)))
 (=> $x153 (= ?x262 ?x149))))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1250X) (bvult input.ind-%var1250X (_ bv100 32)))))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1250X)))
 (= $x153 $x91))))
 ))
 (let (($x128 (and $x288 $x282)))
 (let (($x231 (= $x128 true)))
 (let (($x266 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1245X (_ bv4 32))))
 (let ((?x248 (bvadd ?x277 input.dst.llvm-%m1)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x248))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv2 32))) ?x245)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv3 32))) ?x215)))
 (let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1245X)))
 (let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1245X)))
 (=> $x240 (= ?x75 ?x149))))))))))
 ))
 (let (($x141 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X (_ bv100 32)))))
 (let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1244X)))
 (= $x240 $x91))))
 ))
 (let (($x30 (and $x141 $x266)))
 (let (($x205 (= $x30 true)))
 (let ((?x294 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x284 (= (_ bv0 2) ?x294)))
 (let (($x151 (= $x284 true)))
 (let (($x61 (= $x151 true)))
 (let (($x173 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x52 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x272 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x206 (and $x272 $x52)))
 (let (($x145 (and $x206 $x173)))
 (let (($x134 (= $x145 true)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x96)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x93 (= (_ bv0 32) ?x84)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x98 $x79)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x63 $x95)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x203 $x201)))
 (let (($x46 (and (not $x85) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x256 $x56)))
 (let (($x88 (and (not $x66) $x129)))
 (let (($x101 (and (and (and (and (and (and $x88 $x46) $x81) $x55) $x60) $x11) $x93)))
 (let (($x59 (and $x101 $x154)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x68 (or false (or false (and (and true (or $x146 $x9)) (or $x31 $x114))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x68)))
 (let (($x185 (and $x103 $x59)))
 (let (($x86 (= $x185 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x142 (and $x187 $x144)))
 (let (($x172 (and $x142 $x61)))
 (let (($x140 (and $x172 $x205)))
 (let (($x6 (and $x140 $x231)))
 (let (($x53 (and $x6 $x247)))
 (let (($x274 (and $x53 $x241)))
 (let (($x148 (and $x274 $x188)))
 (let (($x212 (=> $x148 $x160)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x169 ((_ extract 6 0) input.dst.llvm-%m2)))
 (let (($x94 (= (_ bv0 7) ?x169)))
 (let (($x160 (= $x94 true)))
 (let (($x25 (forall ((input.ind-%var1269X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1269X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1269X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1269X)))
 (=> $x190 (= ?x45 ?x184))))))
 ))
 (let (($x217 (forall ((input.ind-%var1268X (_ BitVec 32)) )(let (($x202 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1268X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1268X)))
 (= $x190 $x202))))
 ))
 (let (($x38 (and $x217 $x25)))
 (let (($x188 (= $x38 true)))
 (let (($x58 (forall ((input.ind-%var1263X (_ BitVec 32)) )(let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1263X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1263X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1263X)))
 (=> $x153 (= ?x262 ?x75))))))
 ))
 (let (($x269 (forall ((input.ind-%var1262X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1262X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1262X)))
 (= $x153 $x240))))
 ))
 (let (($x132 (and $x269 $x58)))
 (let (($x241 (= $x132 true)))
 (let (($x158 (forall ((input.ind-%var1257X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1257X (_ bv4 32))))
 (let ((?x239 (bvadd ?x277 input.dst.llvm-%m2)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x211)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x186)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1257X)))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1257X)))
 (=> $x190 (= ?x45 ?x194))))))))))
 ))
 (let (($x50 (forall ((input.ind-%var1256X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1256X) (bvult input.ind-%var1256X (_ bv100 32)))))
 (let (($x190 (input.spec-%var-m2-1.0.1 input.ind-%var1256X)))
 (= $x190 $x91))))
 ))
 (let (($x233 (and $x50 $x158)))
 (let (($x247 (= $x233 true)))
 (let (($x282 (forall ((input.ind-%var1251X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1251X (_ bv4 32))))
 (let ((?x248 (bvadd ?x277 input.dst.llvm-%m1)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x248))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv2 32))) ?x245)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv3 32))) ?x215)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1251X)))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1251X)))
 (=> $x153 (= ?x262 ?x149))))))))))
 ))
 (let (($x288 (forall ((input.ind-%var1250X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1250X) (bvult input.ind-%var1250X (_ bv100 32)))))
 (let (($x153 (input.spec-%var-m1-1.0.1 input.ind-%var1250X)))
 (= $x153 $x91))))
 ))
 (let (($x128 (and $x288 $x282)))
 (let (($x231 (= $x128 true)))
 (let (($x266 (forall ((input.ind-%var1245X (_ BitVec 32)) )(let ((?x277 (bvmul input.ind-%var1245X (_ bv4 32))))
 (let ((?x248 (bvadd ?x277 input.dst.llvm-%m1)))
 (let ((?x245 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x248))))
 (let ((?x215 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv2 32))) ?x245)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x248 (_ bv3 32))) ?x215)))
 (let ((?x75 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1245X)))
 (let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1245X)))
 (=> $x240 (= ?x75 ?x149))))))))))
 ))
 (let (($x141 (forall ((input.ind-%var1244X (_ BitVec 32)) )(let (($x91 (and (bvule (_ bv0 32) input.ind-%var1244X) (bvult input.ind-%var1244X (_ bv100 32)))))
 (let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1244X)))
 (= $x240 $x91))))
 ))
 (let (($x30 (and $x141 $x266)))
 (let (($x205 (= $x30 true)))
 (let ((?x294 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x284 (= (_ bv0 2) ?x294)))
 (let (($x151 (= $x284 true)))
 (let (($x61 (= $x151 true)))
 (let (($x173 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x52 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x272 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x206 (and $x272 $x52)))
 (let (($x145 (and $x206 $x173)))
 (let (($x134 (= $x145 true)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x154 (= (_ bv0 32) ?x96)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x93 (= (_ bv0 32) ?x84)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (and $x98 $x79)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x63 $x95)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x203 $x201)))
 (let (($x46 (and (not $x85) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x66 (and $x256 $x56)))
 (let (($x88 (and (not $x66) $x129)))
 (let (($x101 (and (and (and (and (and (and $x88 $x46) $x81) $x55) $x60) $x11) $x93)))
 (let (($x59 (and $x101 $x154)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x106)))
 (let (($x68 (or false (or false (and (and true (or $x146 $x9)) (or $x31 $x114))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x68)))
 (let (($x185 (and $x103 $x59)))
 (let (($x86 (= $x185 true)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x142 (and $x187 $x144)))
 (let (($x172 (and $x142 $x61)))
 (let (($x140 (and $x172 $x205)))
 (let (($x6 (and $x140 $x231)))
 (let (($x53 (and $x6 $x247)))
 (let (($x274 (and $x53 $x241)))
 (let (($x148 (and $x274 $x188)))
 (let (($x212 (=> $x148 $x160)))
 (not $x212))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000a03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000013 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000012 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000011 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000010 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x0000000b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x0000000a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000009 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x136 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x72 (= (_ bv0 3) ?x136)))
 (let (($x238 (= $x72 true)))
 (let (($x26 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1331X)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1331X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1331X)))
 (=> $x270 (= ?x258 ?x223))))))
 ))
 (let (($x275 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1330X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1330X)))
 (= $x270 $x165))))
 ))
 (let (($x260 (and $x275 $x26)))
 (let (($x5 (= $x260 true)))
 (let (($x229 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x49 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1325X)))
 (let ((?x157 (input.spec-%var-m1-1.1.1 input.ind-%var1325X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1325X)))
 (=> $x247 (= ?x157 ?x49))))))
 ))
 (let (($x8 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1324X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1324X)))
 (= $x247 $x163))))
 ))
 (let (($x155 (and $x8 $x229)))
 (let (($x123 (= $x155 true)))
 (let (($x265 (forall ((input.ind-%var1319X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1319X (_ bv4 32))))
 (let ((?x159 (bvadd ?x6 input.dst.llvm-%m2)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x159))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv2 32))) ?x182)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv3 32))) ?x139)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1319X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1319X)))
 (=> $x270 (= ?x258 ?x218))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var1318X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1318X) (bvult input.ind-%var1318X (_ bv100 32)))))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1318X)))
 (= $x270 $x175))))
 ))
 (let (($x29 (and $x16 $x265)))
 (let (($x107 (= $x29 true)))
 (let (($x204 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1313X (_ bv4 32))))
 (let ((?x190 (bvadd ?x6 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x190))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv2 32))) ?x239)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv3 32))) ?x228)))
 (let ((?x157 (input.spec-%var-m1-1.1.1 input.ind-%var1313X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1313X)))
 (=> $x247 (= ?x157 ?x263))))))))))
 ))
 (let (($x132 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1312X) (bvult input.ind-%var1312X (_ bv100 32)))))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1312X)))
 (= $x247 $x175))))
 ))
 (let (($x246 (and $x132 $x204)))
 (let (($x24 (= $x246 true)))
 (let (($x186 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1307X (_ bv4 32))))
 (let ((?x190 (bvadd ?x6 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x190))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv2 32))) ?x239)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv3 32))) ?x228)))
 (let ((?x49 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1307X)))
 (let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1307X)))
 (=> $x163 (= ?x49 ?x263))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1306X) (bvult input.ind-%var1306X (_ bv100 32)))))
 (let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1306X)))
 (= $x163 $x175))))
 ))
 (let (($x194 (and $x251 $x186)))
 (let (($x147 (= $x194 true)))
 (let ((?x284 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x151 (= (_ bv0 2) ?x284)))
 (let (($x61 (= $x151 true)))
 (let (($x172 (= $x61 true)))
 (let (($x145 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x206 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x195 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x156 (and $x195 $x206)))
 (let (($x134 (and $x156 $x145)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let (($x142 (= $x144 true)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x11)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x117 (= (_ bv0 32) ?x92)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x82 $x87)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x55 $x225)))
 (let (($x100 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x201 $x85)))
 (let (($x40 (and (not $x21) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x54 $x28)))
 (let (($x203 (and (not $x57) $x129)))
 (let (($x59 (and (and (and (and (and (and $x203 $x40) $x81) $x100) $x79) $x60) $x117)))
 (let (($x185 (and $x59 $x19)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x256 (or false (or false (and (and true (or $x44 $x104)) (or $x62 $x10))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x86 (and $x66 $x185)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let (($x235 (and $x291 $x142)))
 (let (($x119 (and $x235 $x172)))
 (let (($x112 (and $x119 $x147)))
 (let (($x181 (and $x112 $x24)))
 (let (($x164 (and $x181 $x107)))
 (let (($x48 (and $x164 $x123)))
 (let (($x286 (and $x48 $x5)))
 (let (($x76 (=> $x286 $x238)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x136 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x72 (= (_ bv0 3) ?x136)))
 (let (($x238 (= $x72 true)))
 (let (($x26 (forall ((input.ind-%var1331X (_ BitVec 32)) )(let ((?x223 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1331X)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1331X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1331X)))
 (=> $x270 (= ?x258 ?x223))))))
 ))
 (let (($x275 (forall ((input.ind-%var1330X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1330X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1330X)))
 (= $x270 $x165))))
 ))
 (let (($x260 (and $x275 $x26)))
 (let (($x5 (= $x260 true)))
 (let (($x229 (forall ((input.ind-%var1325X (_ BitVec 32)) )(let ((?x49 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1325X)))
 (let ((?x157 (input.spec-%var-m1-1.1.1 input.ind-%var1325X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1325X)))
 (=> $x247 (= ?x157 ?x49))))))
 ))
 (let (($x8 (forall ((input.ind-%var1324X (_ BitVec 32)) )(let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1324X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1324X)))
 (= $x247 $x163))))
 ))
 (let (($x155 (and $x8 $x229)))
 (let (($x123 (= $x155 true)))
 (let (($x265 (forall ((input.ind-%var1319X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1319X (_ bv4 32))))
 (let ((?x159 (bvadd ?x6 input.dst.llvm-%m2)))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x159))))
 (let ((?x139 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv2 32))) ?x182)))
 (let ((?x218 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x159 (_ bv3 32))) ?x139)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1319X)))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1319X)))
 (=> $x270 (= ?x258 ?x218))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var1318X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1318X) (bvult input.ind-%var1318X (_ bv100 32)))))
 (let (($x270 (input.spec-%var-m2-1.0.1 input.ind-%var1318X)))
 (= $x270 $x175))))
 ))
 (let (($x29 (and $x16 $x265)))
 (let (($x107 (= $x29 true)))
 (let (($x204 (forall ((input.ind-%var1313X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1313X (_ bv4 32))))
 (let ((?x190 (bvadd ?x6 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x190))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv2 32))) ?x239)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv3 32))) ?x228)))
 (let ((?x157 (input.spec-%var-m1-1.1.1 input.ind-%var1313X)))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1313X)))
 (=> $x247 (= ?x157 ?x263))))))))))
 ))
 (let (($x132 (forall ((input.ind-%var1312X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1312X) (bvult input.ind-%var1312X (_ bv100 32)))))
 (let (($x247 (input.spec-%var-m1-1.0.1 input.ind-%var1312X)))
 (= $x247 $x175))))
 ))
 (let (($x246 (and $x132 $x204)))
 (let (($x24 (= $x246 true)))
 (let (($x186 (forall ((input.ind-%var1307X (_ BitVec 32)) )(let ((?x6 (bvmul input.ind-%var1307X (_ bv4 32))))
 (let ((?x190 (bvadd ?x6 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x190))))
 (let ((?x228 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv2 32))) ?x239)))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x190 (_ bv3 32))) ?x228)))
 (let ((?x49 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1307X)))
 (let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1307X)))
 (=> $x163 (= ?x49 ?x263))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1306X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var1306X) (bvult input.ind-%var1306X (_ bv100 32)))))
 (let (($x163 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1306X)))
 (= $x163 $x175))))
 ))
 (let (($x194 (and $x251 $x186)))
 (let (($x147 (= $x194 true)))
 (let ((?x284 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x151 (= (_ bv0 2) ?x284)))
 (let (($x61 (= $x151 true)))
 (let (($x172 (= $x61 true)))
 (let (($x145 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x206 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x195 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x156 (and $x195 $x206)))
 (let (($x134 (and $x156 $x145)))
 (let (($x131 (= $x134 true)))
 (let (($x144 (= $x131 true)))
 (let (($x142 (= $x144 true)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x11)))
 (let ((?x92 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x117 (= (_ bv0 32) ?x92)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x95)))
 (let ((?x98 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x98)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (and $x82 $x87)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x55 $x225)))
 (let (($x100 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x102 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (and $x37 $x102)))
 (let (($x27 (not $x97)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x201 $x85)))
 (let (($x40 (and (not $x21) $x27)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x47 (and $x51 $x90)))
 (let (($x129 (not $x47)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x54 $x28)))
 (let (($x203 (and (not $x57) $x129)))
 (let (($x59 (and (and (and (and (and (and $x203 $x40) $x81) $x100) $x79) $x60) $x117)))
 (let (($x185 (and $x59 $x19)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x256 (or false (or false (and (and true (or $x44 $x104)) (or $x62 $x10))))))
 (let (($x66 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x256)))
 (let (($x86 (and $x66 $x185)))
 (let (($x42 (= $x86 true)))
 (let (($x187 (= $x42 true)))
 (let (($x291 (= $x187 true)))
 (let (($x235 (and $x291 $x142)))
 (let (($x119 (and $x235 $x172)))
 (let (($x112 (and $x119 $x147)))
 (let (($x181 (and $x112 $x24)))
 (let (($x164 (and $x181 $x107)))
 (let (($x48 (and $x164 $x123)))
 (let (($x286 (and $x48 $x5)))
 (let (($x76 (=> $x286 $x238)))
 (not $x76))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000a000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000a003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000a000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000007 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000006 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000005 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4c448598)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfc8521cc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfc8521cf)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4c44859b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfc8521cc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4c448598)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00400007 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400006 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400005 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400004 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1399X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1399X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1399X)))
 (=> $x277 (= ?x45 ?x170))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1398X) (bvult input.ind-%var1398X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1398X)))
 (= $x277 $x120))))
 ))
 (let (($x302 (and $x196 $x301)))
 (let (($x230 (= true true)))
 (let (($x303 (and $x230 $x302)))
 (let (($x304 (= $x303 true)))
 (let (($x166 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1393X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1393X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1393X)))
 (=> $x277 (= ?x45 ?x207))))))
 ))
 (let (($x128 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x32 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1392X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1392X)))
 (= $x277 $x32))))
 ))
 (let (($x39 (and $x128 $x166)))
 (let (($x220 (= $x39 true)))
 (let (($x65 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1387X)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var1387X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1387X)))
 (=> $x121 (= ?x259 ?x109))))))
 ))
 (let (($x122 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1386X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1386X)))
 (= $x121 $x107))))
 ))
 (let (($x290 (and $x122 $x65)))
 (let (($x193 (= $x290 true)))
 (let (($x143 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1381X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var1381X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1381X)))
 (=> $x121 (= ?x259 ?x170))))))))))
 ))
 (let (($x282 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1380X) (bvult input.ind-%var1380X (_ bv100 32)))))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1380X)))
 (= $x121 $x120))))
 ))
 (let (($x199 (and $x282 $x143)))
 (let (($x168 (= $x199 true)))
 (let (($x232 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1375X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1375X)))
 (let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1375X)))
 (=> $x107 (= ?x109 ?x170))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1374X) (bvult input.ind-%var1374X (_ bv100 32)))))
 (let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1374X)))
 (= $x107 $x120))))
 ))
 (let (($x75 (and $x155 $x232)))
 (let (($x177 (= $x75 true)))
 (let (($x139 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1369X (_ bv4 32))))
 (let ((?x270 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x270))))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv2 32))) ?x159)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv3 32))) ?x210)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1369X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1369X)))
 (=> $x277 (= ?x45 ?x12))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1368X)))
 (= $x277 $x120))))
 ))
 (let (($x218 (and $x153 $x139)))
 (let (($x281 (= $x218 true)))
 (let (($x284 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x142 (and $x134 $x144)))
 (let (($x151 (and $x142 $x284)))
 (let (($x61 (= $x151 true)))
 (let (($x172 (= $x61 true)))
 (let (($x119 (= $x172 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x19)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x11 (= (_ bv0 32) ?x59)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x225 $x95)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x87 $x60)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x99 $x81)))
 (let (($x20 (not $x93)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x27 $x40)))
 (let (($x101 (and (not $x84) $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x85 $x21)))
 (let (($x37 (not $x46)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x104 $x73)))
 (let (($x97 (and (not $x201) $x37)))
 (let (($x192 (and (and (and (and (and (and $x97 $x101) $x82) $x98) $x154) $x117) $x11)))
 (let (($x272 (and $x192 $x185)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x47 (or false (or false (and (and true (or $x80 $x68)) (or $x28 $x57))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x195 (and $x203 $x272)))
 (let (($x250 (= $x195 true)))
 (let (($x52 (= $x250 true)))
 (let (($x206 (= $x52 true)))
 (let ((?x106 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x56 (= (_ bv0 2) ?x106)))
 (let (($x208 (= $x56 true)))
 (let (($x83 (= $x208 true)))
 (let (($x156 (and $x83 $x206)))
 (let (($x209 (and $x156 $x119)))
 (let (($x226 (and $x209 $x281)))
 (let (($x219 (and $x226 $x177)))
 (let (($x224 (and $x219 $x168)))
 (let (($x180 (and $x224 $x193)))
 (let (($x197 (and $x180 $x220)))
 (let (($x305 (=> $x197 $x304)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1399X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1399X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1399X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1399X)))
 (=> $x277 (= ?x45 ?x170))))))))))
 ))
 (let (($x196 (forall ((input.ind-%var1398X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1398X) (bvult input.ind-%var1398X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1398X)))
 (= $x277 $x120))))
 ))
 (let (($x302 (and $x196 $x301)))
 (let (($x230 (= true true)))
 (let (($x303 (and $x230 $x302)))
 (let (($x304 (= $x303 true)))
 (let (($x166 (forall ((input.ind-%var1393X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1393X)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1393X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1393X)))
 (=> $x277 (= ?x45 ?x207))))))
 ))
 (let (($x128 (forall ((input.ind-%var1392X (_ BitVec 32)) )(let (($x32 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1392X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1392X)))
 (= $x277 $x32))))
 ))
 (let (($x39 (and $x128 $x166)))
 (let (($x220 (= $x39 true)))
 (let (($x65 (forall ((input.ind-%var1387X (_ BitVec 32)) )(let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1387X)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var1387X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1387X)))
 (=> $x121 (= ?x259 ?x109))))))
 ))
 (let (($x122 (forall ((input.ind-%var1386X (_ BitVec 32)) )(let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1386X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1386X)))
 (= $x121 $x107))))
 ))
 (let (($x290 (and $x122 $x65)))
 (let (($x193 (= $x290 true)))
 (let (($x143 (forall ((input.ind-%var1381X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1381X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var1381X)))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1381X)))
 (=> $x121 (= ?x259 ?x170))))))))))
 ))
 (let (($x282 (forall ((input.ind-%var1380X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1380X) (bvult input.ind-%var1380X (_ bv100 32)))))
 (let (($x121 (input.spec-%var-m1-1.0.1 input.ind-%var1380X)))
 (= $x121 $x120))))
 ))
 (let (($x199 (and $x282 $x143)))
 (let (($x168 (= $x199 true)))
 (let (($x232 (forall ((input.ind-%var1375X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1375X (_ bv4 32))))
 (let ((?x23 (bvadd ?x181 input.dst.llvm-%m1)))
 (let ((?x41 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x23))))
 (let ((?x292 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv2 32))) ?x41)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x23 (_ bv3 32))) ?x292)))
 (let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1375X)))
 (let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1375X)))
 (=> $x107 (= ?x109 ?x170))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1374X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1374X) (bvult input.ind-%var1374X (_ bv100 32)))))
 (let (($x107 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1374X)))
 (= $x107 $x120))))
 ))
 (let (($x75 (and $x155 $x232)))
 (let (($x177 (= $x75 true)))
 (let (($x139 (forall ((input.ind-%var1369X (_ BitVec 32)) )(let ((?x181 (bvmul input.ind-%var1369X (_ bv4 32))))
 (let ((?x270 (bvadd ?x181 input.dst.llvm-%m2)))
 (let ((?x159 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x270))))
 (let ((?x210 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv2 32))) ?x159)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x270 (_ bv3 32))) ?x210)))
 (let ((?x45 (input.spec-%var-m2-1.1.1 input.ind-%var1369X)))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1369X)))
 (=> $x277 (= ?x45 ?x12))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1368X (_ BitVec 32)) )(let (($x120 (and (bvule (_ bv0 32) input.ind-%var1368X) (bvult input.ind-%var1368X (_ bv100 32)))))
 (let (($x277 (input.spec-%var-m2-1.0.1 input.ind-%var1368X)))
 (= $x277 $x120))))
 ))
 (let (($x218 (and $x153 $x139)))
 (let (($x281 (= $x218 true)))
 (let (($x284 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x144 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x134 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x142 (and $x134 $x144)))
 (let (($x151 (and $x142 $x284)))
 (let (($x61 (= $x151 true)))
 (let (($x172 (= $x61 true)))
 (let (($x119 (= $x172 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x185 (= (_ bv0 32) ?x19)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x11 (= (_ bv0 32) ?x59)))
 (let ((?x92 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x92)))
 (let ((?x96 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x96)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x225 $x95)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x87 $x60)))
 (let (($x98 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x82 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x99 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (and $x99 $x81)))
 (let (($x20 (not $x93)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x27 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x84 (and $x27 $x40)))
 (let (($x101 (and (not $x84) $x20)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x85 $x21)))
 (let (($x37 (not $x46)))
 (let (($x73 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (and $x104 $x73)))
 (let (($x97 (and (not $x201) $x37)))
 (let (($x192 (and (and (and (and (and (and $x97 $x101) $x82) $x98) $x154) $x117) $x11)))
 (let (($x272 (and $x192 $x185)))
 (let (($x57 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x28 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x68 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x47 (or false (or false (and (and true (or $x80 $x68)) (or $x28 $x57))))))
 (let (($x203 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x47)))
 (let (($x195 (and $x203 $x272)))
 (let (($x250 (= $x195 true)))
 (let (($x52 (= $x250 true)))
 (let (($x206 (= $x52 true)))
 (let ((?x106 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x56 (= (_ bv0 2) ?x106)))
 (let (($x208 (= $x56 true)))
 (let (($x83 (= $x208 true)))
 (let (($x156 (and $x83 $x206)))
 (let (($x209 (and $x156 $x119)))
 (let (($x226 (and $x209 $x281)))
 (let (($x219 (and $x226 $x177)))
 (let (($x224 (and $x219 $x168)))
 (let (($x180 (and $x224 $x193)))
 (let (($x197 (and $x180 $x220)))
 (let (($x305 (=> $x197 $x304)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb7a00600)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x661bddb8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!16))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbff00004)
  (define-fun input.ind-%var1398X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1399X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbff00007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb7a00603)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbff00004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb7a00600)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (concat (k!16 (bvadd #x661bddbb (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddba (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddb9 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddb8 (bvmul #x00000004 x!0))))))
  (define-fun k!18 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!21 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!21 (k!18 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x661bddb9) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (let ((a!1 (concat (k!16 (bvadd #x661bddbb (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddba (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddb9 (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddb8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-m2-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!20 (k!17 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!16 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!16 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 (k!18 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x390d0010)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x26240024)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1398X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1399X!1 () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x61a29144)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x26240027)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x390d0013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x26240024)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x390d0010)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x61a29152) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00020000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x61a29147 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29146 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29145 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29144 (bvmul #x00000004 x!0)))))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000003))
  (define-fun input.spec-%var-m1-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!4 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000003) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000003) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00020000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x61a29147 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29146 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29145 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29144 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x198 (= false true)))
 (let (($x276 (= $x198 true)))
 (let (($x14 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x216 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1461X)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1461X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1461X)))
 (=> $x6 (= ?x258 ?x216))))))
 ))
 (let (($x191 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1460X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1460X)))
 (= $x6 $x22))))
 ))
 (let (($x271 (and $x191 $x14)))
 (let (($x273 (= $x271 true)))
 (let (($x160 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1455X)))
 (let ((?x204 (input.spec-%var-m1-1.1.1 input.ind-%var1455X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1455X)))
 (=> $x289 (= ?x204 ?x222))))))
 ))
 (let (($x124 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1454X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1454X)))
 (= $x289 $x168))))
 ))
 (let (($x25 (and $x124 $x160)))
 (let (($x188 (= $x25 true)))
 (let (($x136 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1449X (_ bv4 32))))
 (let ((?x304 (bvadd ?x217 input.dst.llvm-%m1)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x89)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x175)))
 (let ((?x204 (input.spec-%var-m1-1.1.1 input.ind-%var1449X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1449X)))
 (=> $x289 (= ?x204 ?x275))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X (_ bv100 32)))))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1448X)))
 (= $x289 $x278))))
 ))
 (let (($x76 (and $x147 $x136)))
 (let (($x241 (= $x76 true)))
 (let (($x176 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1443X (_ bv4 32))))
 (let ((?x304 (bvadd ?x217 input.dst.llvm-%m1)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x89)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x175)))
 (let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1443X)))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1443X)))
 (=> $x168 (= ?x222 ?x275))))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1442X) (bvult input.ind-%var1442X (_ bv100 32)))))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1442X)))
 (= $x168 $x278))))
 ))
 (let (($x74 (and $x290 $x176)))
 (let (($x50 (= $x74 true)))
 (let (($x282 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1437X (_ bv4 32))))
 (let ((?x295 (bvadd ?x217 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x295))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv2 32))) ?x170)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv3 32))) ?x232)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1437X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1437X)))
 (=> $x6 (= ?x258 ?x219))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1436X) (bvult input.ind-%var1436X (_ bv100 32)))))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1436X)))
 (= $x6 $x278))))
 ))
 (let (($x259 (and $x247 $x282)))
 (let (($x115 (= $x259 true)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x134 (= (_ bv0 32) ?x145)))
 (let ((?x174 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x173 (= (_ bv0 32) ?x174)))
 (let ((?x206 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x272 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x272)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x19 $x195)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x192 $x250)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x96 $x95)))
 (let (($x154 (not $x60)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x87 $x225)))
 (let (($x92 (and (not $x79) $x154)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x55 $x82)))
 (let (($x63 (not $x42)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x90 $x47)))
 (let (($x187 (and (not $x86) $x63)))
 (let (($x284 (and (and (and (and (and (and $x187 $x92) $x105) $x11) $x52) $x156) $x173)))
 (let (($x151 (and $x284 $x134)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x93 (or false (or false (and (and true (or $x85 $x21)) (or $x40 $x84))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x61 (and $x101 $x151)))
 (let (($x172 (= $x61 true)))
 (let (($x119 (= $x172 true)))
 (let (($x209 (= $x119 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x103 (= (_ bv0 2) ?x68)))
 (let (($x256 (= $x103 true)))
 (let (($x66 (= $x256 true)))
 (let (($x77 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x208 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and $x208 $x83)))
 (let (($x129 (and $x9 $x77)))
 (let (($x62 (= $x129 true)))
 (let (($x10 (= $x62 true)))
 (let (($x80 (= $x10 true)))
 (let (($x28 (and $x80 $x66)))
 (let (($x141 (and $x28 $x209)))
 (let (($x236 (and $x141 $x115)))
 (let (($x163 (and $x236 $x50)))
 (let (($x158 (and $x163 $x241)))
 (let (($x78 (and $x158 $x188)))
 (let (($x242 (and $x78 $x273)))
 (let (($x108 (=> $x242 $x276)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x198 (= false true)))
 (let (($x276 (= $x198 true)))
 (let (($x14 (forall ((input.ind-%var1461X (_ BitVec 32)) )(let ((?x216 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1461X)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1461X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1461X)))
 (=> $x6 (= ?x258 ?x216))))))
 ))
 (let (($x191 (forall ((input.ind-%var1460X (_ BitVec 32)) )(let (($x22 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1460X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1460X)))
 (= $x6 $x22))))
 ))
 (let (($x271 (and $x191 $x14)))
 (let (($x273 (= $x271 true)))
 (let (($x160 (forall ((input.ind-%var1455X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1455X)))
 (let ((?x204 (input.spec-%var-m1-1.1.1 input.ind-%var1455X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1455X)))
 (=> $x289 (= ?x204 ?x222))))))
 ))
 (let (($x124 (forall ((input.ind-%var1454X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1454X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1454X)))
 (= $x289 $x168))))
 ))
 (let (($x25 (and $x124 $x160)))
 (let (($x188 (= $x25 true)))
 (let (($x136 (forall ((input.ind-%var1449X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1449X (_ bv4 32))))
 (let ((?x304 (bvadd ?x217 input.dst.llvm-%m1)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x89)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x175)))
 (let ((?x204 (input.spec-%var-m1-1.1.1 input.ind-%var1449X)))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1449X)))
 (=> $x289 (= ?x204 ?x275))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1448X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1448X) (bvult input.ind-%var1448X (_ bv100 32)))))
 (let (($x289 (input.spec-%var-m1-1.0.1 input.ind-%var1448X)))
 (= $x289 $x278))))
 ))
 (let (($x76 (and $x147 $x136)))
 (let (($x241 (= $x76 true)))
 (let (($x176 (forall ((input.ind-%var1443X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1443X (_ bv4 32))))
 (let ((?x304 (bvadd ?x217 input.dst.llvm-%m1)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x175 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x89)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x175)))
 (let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1443X)))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1443X)))
 (=> $x168 (= ?x222 ?x275))))))))))
 ))
 (let (($x290 (forall ((input.ind-%var1442X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1442X) (bvult input.ind-%var1442X (_ bv100 32)))))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1442X)))
 (= $x168 $x278))))
 ))
 (let (($x74 (and $x290 $x176)))
 (let (($x50 (= $x74 true)))
 (let (($x282 (forall ((input.ind-%var1437X (_ BitVec 32)) )(let ((?x217 (bvmul input.ind-%var1437X (_ bv4 32))))
 (let ((?x295 (bvadd ?x217 input.dst.llvm-%m2)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x295))))
 (let ((?x232 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv2 32))) ?x170)))
 (let ((?x219 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x295 (_ bv3 32))) ?x232)))
 (let ((?x258 (input.spec-%var-m2-1.1.1 input.ind-%var1437X)))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1437X)))
 (=> $x6 (= ?x258 ?x219))))))))))
 ))
 (let (($x247 (forall ((input.ind-%var1436X (_ BitVec 32)) )(let (($x278 (and (bvule (_ bv0 32) input.ind-%var1436X) (bvult input.ind-%var1436X (_ bv100 32)))))
 (let (($x6 (input.spec-%var-m2-1.0.1 input.ind-%var1436X)))
 (= $x6 $x278))))
 ))
 (let (($x259 (and $x247 $x282)))
 (let (($x115 (= $x259 true)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x134 (= (_ bv0 32) ?x145)))
 (let ((?x174 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x173 (= (_ bv0 32) ?x174)))
 (let ((?x206 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x206)))
 (let ((?x272 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x272)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x250 (and $x19 $x195)))
 (let (($x192 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x52 (and $x192 $x250)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x96 $x95)))
 (let (($x154 (not $x60)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x79 (and $x87 $x225)))
 (let (($x92 (and (not $x79) $x154)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x55 $x82)))
 (let (($x63 (not $x42)))
 (let (($x47 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x90 $x47)))
 (let (($x187 (and (not $x86) $x63)))
 (let (($x284 (and (and (and (and (and (and $x187 $x92) $x105) $x11) $x52) $x156) $x173)))
 (let (($x151 (and $x284 $x134)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x93 (or false (or false (and (and true (or $x85 $x21)) (or $x40 $x84))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x93)))
 (let (($x61 (and $x101 $x151)))
 (let (($x172 (= $x61 true)))
 (let (($x119 (= $x172 true)))
 (let (($x209 (= $x119 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x103 (= (_ bv0 2) ?x68)))
 (let (($x256 (= $x103 true)))
 (let (($x66 (= $x256 true)))
 (let (($x77 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x208 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and $x208 $x83)))
 (let (($x129 (and $x9 $x77)))
 (let (($x62 (= $x129 true)))
 (let (($x10 (= $x62 true)))
 (let (($x80 (= $x10 true)))
 (let (($x28 (and $x80 $x66)))
 (let (($x141 (and $x28 $x209)))
 (let (($x236 (and $x141 $x115)))
 (let (($x163 (and $x236 $x50)))
 (let (($x158 (and $x163 $x241)))
 (let (($x78 (and $x158 $x188)))
 (let (($x242 (and $x78 $x273)))
 (let (($x108 (=> $x242 $x276)))
 (not $x108)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0230db03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80017a13)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdffe4d03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x64d6c787)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x231 (= $x70 true)))
 (let (($x249 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1523X)))
 (let ((?x292 (input.spec-%var-m2-1.1.1 input.ind-%var1523X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1523X)))
 (=> $x181 (= ?x292 ?x180))))))
 ))
 (let (($x171 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1522X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1522X)))
 (= $x181 $x30))))
 ))
 (let (($x293 (and $x171 $x249)))
 (let (($x38 (= $x293 true)))
 (let (($x148 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1517X)))
 (let ((?x207 (input.spec-%var-m1-1.1.1 input.ind-%var1517X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1517X)))
 (=> $x218 (= ?x207 ?x266))))))
 ))
 (let (($x8 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1516X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1516X)))
 (= $x218 $x241))))
 ))
 (let (($x17 (and $x8 $x148)))
 (let (($x49 (= $x17 true)))
 (let (($x13 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1511X (_ bv4 32))))
 (let ((?x123 (bvadd ?x306 input.dst.llvm-%m1)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x123))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv2 32))) ?x128)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv3 32))) ?x200)))
 (let ((?x207 (input.spec-%var-m1-1.1.1 input.ind-%var1511X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1511X)))
 (=> $x218 (= ?x207 ?x277))))))))))
 ))
 (let (($x32 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1510X) (bvult input.ind-%var1510X (_ bv100 32)))))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1510X)))
 (= $x218 $x75))))
 ))
 (let (($x165 (and $x32 $x13)))
 (let (($x199 (= $x165 true)))
 (let (($x71 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1505X (_ bv4 32))))
 (let ((?x123 (bvadd ?x306 input.dst.llvm-%m1)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x123))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv2 32))) ?x128)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv3 32))) ?x200)))
 (let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1505X)))
 (let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1505X)))
 (=> $x241 (= ?x266 ?x277))))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1504X) (bvult input.ind-%var1504X (_ bv100 32)))))
 (let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1504X)))
 (= $x241 $x75))))
 ))
 (let (($x182 (and $x25 $x71)))
 (let (($x23 (= $x182 true)))
 (let (($x147 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1499X (_ bv4 32))))
 (let ((?x146 (bvadd ?x306 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x146))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv2 32))) ?x275)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv3 32))) ?x176)))
 (let ((?x292 (input.spec-%var-m2-1.1.1 input.ind-%var1499X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1499X)))
 (=> $x181 (= ?x292 ?x163))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1498X) (bvult input.ind-%var1498X (_ bv100 32)))))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1498X)))
 (= $x181 $x75))))
 ))
 (let (($x204 (and $x107 $x147)))
 (let (($x161 (= $x204 true)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x294 (= (_ bv0 32) ?x156)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x206 (= (_ bv0 32) ?x235)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x250)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x142 $x185)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x11 $x272)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x96 $x95)))
 (let (($x154 (not $x60)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x225 $x79)))
 (let (($x131 (and (not $x291) $x154)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x55 $x82)))
 (let (($x63 (not $x42)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x20)))
 (let (($x87 (and (not $x98) $x63)))
 (let (($x151 (and (and (and (and (and (and $x87 $x131) $x105) $x59) $x195) $x52) $x206)))
 (let (($x61 (and $x151 $x294)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x90 (or false (or false (and (and true (or $x46 $x37)) (or $x100 $x99))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x172 (and $x86 $x61)))
 (let (($x119 (= $x172 true)))
 (let (($x209 (= $x119 true)))
 (let (($x141 (= $x209 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x114)))
 (let (($x103 (= $x68 true)))
 (let (($x256 (= $x103 true)))
 (let ((?x31 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x9 (bvneg ?x31)))
 (let (($x44 (= ?x9 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x77 (= $x44 true)))
 (let (($x129 (= $x77 true)))
 (let (($x106 (= ?x9 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x7 (= $x106 true)))
 (let (($x56 (= $x7 true)))
 (let (($x62 (and $x56 $x129)))
 (let (($x66 (and $x62 $x256)))
 (let (($x251 (and $x66 $x141)))
 (let (($x5 (and $x251 $x161)))
 (let (($x189 (and $x5 $x23)))
 (let (($x279 (and $x189 $x199)))
 (let (($x58 (and $x279 $x49)))
 (let (($x267 (and $x58 $x38)))
 (let (($x118 (=> $x267 $x231)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x70 (= true false)))
 (let (($x231 (= $x70 true)))
 (let (($x249 (forall ((input.ind-%var1523X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1523X)))
 (let ((?x292 (input.spec-%var-m2-1.1.1 input.ind-%var1523X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1523X)))
 (=> $x181 (= ?x292 ?x180))))))
 ))
 (let (($x171 (forall ((input.ind-%var1522X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1522X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1522X)))
 (= $x181 $x30))))
 ))
 (let (($x293 (and $x171 $x249)))
 (let (($x38 (= $x293 true)))
 (let (($x148 (forall ((input.ind-%var1517X (_ BitVec 32)) )(let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1517X)))
 (let ((?x207 (input.spec-%var-m1-1.1.1 input.ind-%var1517X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1517X)))
 (=> $x218 (= ?x207 ?x266))))))
 ))
 (let (($x8 (forall ((input.ind-%var1516X (_ BitVec 32)) )(let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1516X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1516X)))
 (= $x218 $x241))))
 ))
 (let (($x17 (and $x8 $x148)))
 (let (($x49 (= $x17 true)))
 (let (($x13 (forall ((input.ind-%var1511X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1511X (_ bv4 32))))
 (let ((?x123 (bvadd ?x306 input.dst.llvm-%m1)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x123))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv2 32))) ?x128)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv3 32))) ?x200)))
 (let ((?x207 (input.spec-%var-m1-1.1.1 input.ind-%var1511X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1511X)))
 (=> $x218 (= ?x207 ?x277))))))))))
 ))
 (let (($x32 (forall ((input.ind-%var1510X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1510X) (bvult input.ind-%var1510X (_ bv100 32)))))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1510X)))
 (= $x218 $x75))))
 ))
 (let (($x165 (and $x32 $x13)))
 (let (($x199 (= $x165 true)))
 (let (($x71 (forall ((input.ind-%var1505X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1505X (_ bv4 32))))
 (let ((?x123 (bvadd ?x306 input.dst.llvm-%m1)))
 (let ((?x128 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x123))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv2 32))) ?x128)))
 (let ((?x277 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x123 (_ bv3 32))) ?x200)))
 (let ((?x266 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1505X)))
 (let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1505X)))
 (=> $x241 (= ?x266 ?x277))))))))))
 ))
 (let (($x25 (forall ((input.ind-%var1504X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1504X) (bvult input.ind-%var1504X (_ bv100 32)))))
 (let (($x241 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1504X)))
 (= $x241 $x75))))
 ))
 (let (($x182 (and $x25 $x71)))
 (let (($x23 (= $x182 true)))
 (let (($x147 (forall ((input.ind-%var1499X (_ BitVec 32)) )(let ((?x306 (bvmul input.ind-%var1499X (_ bv4 32))))
 (let ((?x146 (bvadd ?x306 input.dst.llvm-%m2)))
 (let ((?x275 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x146))))
 (let ((?x176 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv2 32))) ?x275)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x146 (_ bv3 32))) ?x176)))
 (let ((?x292 (input.spec-%var-m2-1.1.1 input.ind-%var1499X)))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1499X)))
 (=> $x181 (= ?x292 ?x163))))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1498X (_ BitVec 32)) )(let (($x75 (and (bvule (_ bv0 32) input.ind-%var1498X) (bvult input.ind-%var1498X (_ bv100 32)))))
 (let (($x181 (input.spec-%var-m2-1.0.1 input.ind-%var1498X)))
 (= $x181 $x75))))
 ))
 (let (($x204 (and $x107 $x147)))
 (let (($x161 (= $x204 true)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x294 (= (_ bv0 32) ?x156)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x206 (= (_ bv0 32) ?x235)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x250)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x185 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x142 $x185)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x11 $x272)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x105 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x96 $x95)))
 (let (($x154 (not $x60)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x225 $x79)))
 (let (($x131 (and (not $x291) $x154)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x55 $x82)))
 (let (($x63 (not $x42)))
 (let (($x20 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x20)))
 (let (($x87 (and (not $x98) $x63)))
 (let (($x151 (and (and (and (and (and (and $x87 $x131) $x105) $x59) $x195) $x52) $x206)))
 (let (($x61 (and $x151 $x294)))
 (let (($x99 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x21 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x21)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x21)))
 (let (($x90 (or false (or false (and (and true (or $x46 $x37)) (or $x100 $x99))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x172 (and $x86 $x61)))
 (let (($x119 (= $x172 true)))
 (let (($x209 (= $x119 true)))
 (let (($x141 (= $x209 true)))
 (let ((?x114 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x114)))
 (let (($x103 (= $x68 true)))
 (let (($x256 (= $x103 true)))
 (let ((?x31 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x9 (bvneg ?x31)))
 (let (($x44 (= ?x9 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x77 (= $x44 true)))
 (let (($x129 (= $x77 true)))
 (let (($x106 (= ?x9 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x7 (= $x106 true)))
 (let (($x56 (= $x7 true)))
 (let (($x62 (and $x56 $x129)))
 (let (($x66 (and $x62 $x256)))
 (let (($x251 (and $x66 $x141)))
 (let (($x5 (and $x251 $x161)))
 (let (($x189 (and $x5 $x23)))
 (let (($x279 (and $x189 $x199)))
 (let (($x58 (and $x279 $x49)))
 (let (($x267 (and $x58 $x38)))
 (let (($x118 (=> $x267 $x231)))
 (not $x118))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x430fbb79)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc135ce73)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb60c3a17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x153 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x209 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x181 (and $x209 $x153)))
 (let (($x36 (=> $x181 true)))
 (let (($x35 (= $x36 true)))
 (let (($x24 (= $x35 true)))
 (let (($x149 (forall ((input.ind-%var1633X (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1633X)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var1633X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1633X)))
 (=> $x168 (= ?x241 ?x26))))))
 ))
 (let (($x157 (forall ((input.ind-%var1632X (_ BitVec 32)) )(let (($x211 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1632X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1632X)))
 (= $x168 $x211))))
 ))
 (let (($x246 (and $x157 $x149)))
 (let (($x254 (= $x246 true)))
 (let (($x18 (forall ((input.ind-%var1627X (_ BitVec 32)) )(let ((?x231 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1627X)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var1627X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1627X)))
 (=> $x124 (= ?x14 ?x231))))))
 ))
 (let (($x302 (forall ((input.ind-%var1626X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1626X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1626X)))
 (= $x124 $x30))))
 ))
 (let (($x113 (and $x302 $x18)))
 (let (($x240 (= $x113 true)))
 (let (($x197 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1621X (_ bv4 32))))
 (let ((?x6 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x262)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x65)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var1621X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1621X)))
 (=> $x124 (= ?x14 ?x115))))))))))
 ))
 (let (($x198 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1620X) (bvult input.ind-%var1620X (_ bv100 32)))))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1620X)))
 (= $x124 $x289))))
 ))
 (let (($x299 (and $x198 $x197)))
 (let (($x230 (= $x299 true)))
 (let (($x222 (forall ((input.ind-%var1615X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1615X (_ bv4 32))))
 (let ((?x6 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x262)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x65)))
 (let ((?x231 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1615X)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1615X)))
 (=> $x30 (= ?x231 ?x115))))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1614X) (bvult input.ind-%var1614X (_ bv100 32)))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1614X)))
 (= $x30 $x289))))
 ))
 (let (($x164 (and $x293 $x222)))
 (let (($x188 (= $x164 true)))
 (let (($x237 (forall ((input.ind-%var1609X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1609X (_ bv4 32))))
 (let ((?x189 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x189))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv2 32))) ?x207)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv3 32))) ?x13)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var1609X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1609X)))
 (=> $x168 (= ?x241 ?x279))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1608X) (bvult input.ind-%var1608X (_ bv100 32)))))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1608X)))
 (= $x168 $x289))))
 ))
 (let (($x205 (and $x147 $x237)))
 (let (($x148 (= $x205 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x292 (= (_ bv0 2) ?x107)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x295 (= $x181 true)))
 (let (($x247 (= $x295 true)))
 (let (($x217 (= $x247 true)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x192)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x11)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x131 $x105)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x154 $x173)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x42 $x63)))
 (let (($x225 (not $x87)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x187 $x55)))
 (let (($x291 (and (not $x82) $x225)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x101 $x90)))
 (let (($x104 (not $x86)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x208 $x83)))
 (let (($x98 (and (not $x93) $x104)))
 (let (($x52 (and (and (and (and (and (and $x98 $x291) $x96) $x60) $x144) $x284) $x142)))
 (let (($x134 (and $x52 $x19)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x84 (or false (or false (and (and true (or $x102 $x47)) (or $x37 $x97))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x235 (and $x81 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let ((?x129 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x103 (bvneg ?x129)))
 (let (($x10 (= ?x103 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x7 (= $x10 true)))
 (let (($x31 (= $x7 true)))
 (let (($x228 (= ?x103 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (= $x228 true)))
 (let (($x256 (= $x56 true)))
 (let (($x62 (and $x256 $x31)))
 (let (($x294 (and $x62 $x156)))
 (let (($x75 (and $x294 $x217)))
 (let (($x306 (and $x75 $x219)))
 (let (($x17 (and $x306 $x148)))
 (let (($x22 (and $x17 $x188)))
 (let (($x214 (and $x22 $x230)))
 (let (($x269 (and $x214 $x240)))
 (let (($x126 (and $x269 $x254)))
 (let (($x244 (=> $x126 $x24)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x153 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x209 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x181 (and $x209 $x153)))
 (let (($x36 (=> $x181 true)))
 (let (($x35 (= $x36 true)))
 (let (($x24 (= $x35 true)))
 (let (($x149 (forall ((input.ind-%var1633X (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1633X)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var1633X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1633X)))
 (=> $x168 (= ?x241 ?x26))))))
 ))
 (let (($x157 (forall ((input.ind-%var1632X (_ BitVec 32)) )(let (($x211 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1632X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1632X)))
 (= $x168 $x211))))
 ))
 (let (($x246 (and $x157 $x149)))
 (let (($x254 (= $x246 true)))
 (let (($x18 (forall ((input.ind-%var1627X (_ BitVec 32)) )(let ((?x231 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1627X)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var1627X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1627X)))
 (=> $x124 (= ?x14 ?x231))))))
 ))
 (let (($x302 (forall ((input.ind-%var1626X (_ BitVec 32)) )(let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1626X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1626X)))
 (= $x124 $x30))))
 ))
 (let (($x113 (and $x302 $x18)))
 (let (($x240 (= $x113 true)))
 (let (($x197 (forall ((input.ind-%var1621X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1621X (_ bv4 32))))
 (let ((?x6 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x262)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x65)))
 (let ((?x14 (input.spec-%var-m1-1.1.1 input.ind-%var1621X)))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1621X)))
 (=> $x124 (= ?x14 ?x115))))))))))
 ))
 (let (($x198 (forall ((input.ind-%var1620X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1620X) (bvult input.ind-%var1620X (_ bv100 32)))))
 (let (($x124 (input.spec-%var-m1-1.0.1 input.ind-%var1620X)))
 (= $x124 $x289))))
 ))
 (let (($x299 (and $x198 $x197)))
 (let (($x230 (= $x299 true)))
 (let (($x222 (forall ((input.ind-%var1615X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1615X (_ bv4 32))))
 (let ((?x6 (bvadd ?x23 input.dst.llvm-%m1)))
 (let ((?x262 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x6))))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x262)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x65)))
 (let ((?x231 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1615X)))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1615X)))
 (=> $x30 (= ?x231 ?x115))))))))))
 ))
 (let (($x293 (forall ((input.ind-%var1614X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1614X) (bvult input.ind-%var1614X (_ bv100 32)))))
 (let (($x30 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1614X)))
 (= $x30 $x289))))
 ))
 (let (($x164 (and $x293 $x222)))
 (let (($x188 (= $x164 true)))
 (let (($x237 (forall ((input.ind-%var1609X (_ BitVec 32)) )(let ((?x23 (bvmul input.ind-%var1609X (_ bv4 32))))
 (let ((?x189 (bvadd ?x23 input.dst.llvm-%m2)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x189))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv2 32))) ?x207)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv3 32))) ?x13)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var1609X)))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1609X)))
 (=> $x168 (= ?x241 ?x279))))))))))
 ))
 (let (($x147 (forall ((input.ind-%var1608X (_ BitVec 32)) )(let (($x289 (and (bvule (_ bv0 32) input.ind-%var1608X) (bvult input.ind-%var1608X (_ bv100 32)))))
 (let (($x168 (input.spec-%var-m2-1.0.1 input.ind-%var1608X)))
 (= $x168 $x289))))
 ))
 (let (($x205 (and $x147 $x237)))
 (let (($x148 (= $x205 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x292 (= (_ bv0 2) ?x107)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x295 (= $x181 true)))
 (let (($x247 (= $x295 true)))
 (let (($x217 (= $x247 true)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x192)))
 (let ((?x11 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x11)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x105 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x117)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (and $x131 $x105)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x154 $x173)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (and $x42 $x63)))
 (let (($x225 (not $x87)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x187 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x82 (and $x187 $x55)))
 (let (($x291 (and (not $x82) $x225)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x101 $x90)))
 (let (($x104 (not $x86)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x208 $x83)))
 (let (($x98 (and (not $x93) $x104)))
 (let (($x52 (and (and (and (and (and (and $x98 $x291) $x96) $x60) $x144) $x284) $x142)))
 (let (($x134 (and $x52 $x19)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x102 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x84 (or false (or false (and (and true (or $x102 $x47)) (or $x37 $x97))))))
 (let (($x81 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x84)))
 (let (($x235 (and $x81 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let ((?x129 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x103 (bvneg ?x129)))
 (let (($x10 (= ?x103 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x7 (= $x10 true)))
 (let (($x31 (= $x7 true)))
 (let (($x228 (= ?x103 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x56 (= $x228 true)))
 (let (($x256 (= $x56 true)))
 (let (($x62 (and $x256 $x31)))
 (let (($x294 (and $x62 $x156)))
 (let (($x75 (and $x294 $x217)))
 (let (($x306 (and $x75 $x219)))
 (let (($x17 (and $x306 $x148)))
 (let (($x22 (and $x17 $x188)))
 (let (($x214 (and $x22 $x230)))
 (let (($x269 (and $x214 $x240)))
 (let (($x126 (and $x269 $x254)))
 (let (($x244 (=> $x126 $x24)))
 (not $x244))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x238 (= false true)))
 (let (($x184 (= $x238 true)))
 (let (($x166 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1663X)))
 (let ((?x32 (input.spec-%var-m2-1.1.1 input.ind-%var1663X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1663X)))
 (=> $x176 (= ?x32 ?x257))))))
 ))
 (let (($x280 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1662X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1662X)))
 (= $x176 $x116))))
 ))
 (let (($x132 (and $x280 $x166)))
 (let (($x245 (= $x132 true)))
 (let (($x265 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1657X)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1657X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1657X)))
 (=> $x128 (= ?x180 ?x64))))))
 ))
 (let (($x239 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1656X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1656X)))
 (= $x128 $x230))))
 ))
 (let (($x227 (and $x239 $x265)))
 (let (($x283 (= $x227 true)))
 (let (($x270 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1651X (_ bv4 32))))
 (let ((?x216 (bvadd ?x258 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x253)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x133)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1651X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1651X)))
 (=> $x128 (= ?x180 ?x5))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1650X) (bvult input.ind-%var1650X (_ bv100 32)))))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1650X)))
 (= $x128 $x165))))
 ))
 (let (($x159 (and $x38 $x270)))
 (let (($x108 (= $x159 true)))
 (let (($x175 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x216 (bvadd ?x258 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x253)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x133)))
 (let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1645X)))
 (let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1645X)))
 (=> $x230 (= ?x64 ?x5))))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1644X)))
 (= $x230 $x165))))
 ))
 (let (($x123 (and $x113 $x175)))
 (let (($x255 (= $x123 true)))
 (let (($x198 (forall ((input.ind-%var1639X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1639X (_ bv4 32))))
 (let ((?x121 (bvadd ?x258 input.dst.llvm-%m2)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x121))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv2 32))) ?x115)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv3 32))) ?x222)))
 (let ((?x32 (input.spec-%var-m2-1.1.1 input.ind-%var1639X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1639X)))
 (=> $x176 (= ?x32 ?x22))))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1638X) (bvult input.ind-%var1638X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1638X)))
 (= $x176 $x165))))
 ))
 (let (($x14 (and $x224 $x198)))
 (let (($x39 (= $x14 true)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x251)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x141 (= (_ bv0 32) ?x209)))
 (let ((?x172 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (and $x235 $x156)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x134 $x294)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x144 $x145)))
 (let (($x284 (not $x59)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x117 $x105)))
 (let (($x11 (and (not $x173) $x284)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x95 $x60)))
 (let (($x154 (not $x195)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x208 $x83)))
 (let (($x174 (and (not $x272) $x154)))
 (let (($x177 (and (and (and (and (and (and $x174 $x11) $x52) $x19) $x61) $x119) $x141)))
 (let (($x107 (and $x177 $x153)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x185 (or false (or false (and (and true (or $x104 $x98)) (or $x42 $x63))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x292 (and $x96 $x107)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x306 (= $x219 true)))
 (let (($x21 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x46 (and $x47 $x21)))
 (let (($x37 (= $x46 true)))
 (let (($x201 (= $x37 true)))
 (let (($x97 (= $x201 true)))
 (let ((?x80 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 2) ?x80)))
 (let (($x68 (= $x114 true)))
 (let (($x99 (= $x68 true)))
 (let ((?x103 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x215 (bvneg ?x103)))
 (let (($x66 (= ?x215 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x10 (= $x66 true)))
 (let (($x7 (= $x10 true)))
 (let (($x129 (= ?x215 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x228 (= $x129 true)))
 (let (($x56 (= $x228 true)))
 (let (($x31 (and $x56 $x7)))
 (let (($x57 (and $x31 $x99)))
 (let (($x40 (and $x57 $x97)))
 (let (($x50 (and $x40 $x306)))
 (let (($x300 (and $x50 $x39)))
 (let (($x277 (and $x300 $x255)))
 (let (($x58 (and $x277 $x108)))
 (let (($x29 (and $x58 $x283)))
 (let (($x109 (and $x29 $x245)))
 (let (($x91 (=> $x109 $x184)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x238 (= false true)))
 (let (($x184 (= $x238 true)))
 (let (($x166 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x257 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1663X)))
 (let ((?x32 (input.spec-%var-m2-1.1.1 input.ind-%var1663X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1663X)))
 (=> $x176 (= ?x32 ?x257))))))
 ))
 (let (($x280 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1662X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1662X)))
 (= $x176 $x116))))
 ))
 (let (($x132 (and $x280 $x166)))
 (let (($x245 (= $x132 true)))
 (let (($x265 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1657X)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1657X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1657X)))
 (=> $x128 (= ?x180 ?x64))))))
 ))
 (let (($x239 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1656X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1656X)))
 (= $x128 $x230))))
 ))
 (let (($x227 (and $x239 $x265)))
 (let (($x283 (= $x227 true)))
 (let (($x270 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1651X (_ bv4 32))))
 (let ((?x216 (bvadd ?x258 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x253)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x133)))
 (let ((?x180 (input.spec-%var-m1-1.1.1 input.ind-%var1651X)))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1651X)))
 (=> $x128 (= ?x180 ?x5))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1650X) (bvult input.ind-%var1650X (_ bv100 32)))))
 (let (($x128 (input.spec-%var-m1-1.0.1 input.ind-%var1650X)))
 (= $x128 $x165))))
 ))
 (let (($x159 (and $x38 $x270)))
 (let (($x108 (= $x159 true)))
 (let (($x175 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x216 (bvadd ?x258 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x216))))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv2 32))) ?x253)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x216 (_ bv3 32))) ?x133)))
 (let ((?x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1645X)))
 (let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1645X)))
 (=> $x230 (= ?x64 ?x5))))))))))
 ))
 (let (($x113 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1644X)))
 (= $x230 $x165))))
 ))
 (let (($x123 (and $x113 $x175)))
 (let (($x255 (= $x123 true)))
 (let (($x198 (forall ((input.ind-%var1639X (_ BitVec 32)) )(let ((?x258 (bvmul input.ind-%var1639X (_ bv4 32))))
 (let ((?x121 (bvadd ?x258 input.dst.llvm-%m2)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x121))))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv2 32))) ?x115)))
 (let ((?x22 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x121 (_ bv3 32))) ?x222)))
 (let ((?x32 (input.spec-%var-m2-1.1.1 input.ind-%var1639X)))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1639X)))
 (=> $x176 (= ?x32 ?x22))))))))))
 ))
 (let (($x224 (forall ((input.ind-%var1638X (_ BitVec 32)) )(let (($x165 (and (bvule (_ bv0 32) input.ind-%var1638X) (bvult input.ind-%var1638X (_ bv100 32)))))
 (let (($x176 (input.spec-%var-m2-1.0.1 input.ind-%var1638X)))
 (= $x176 $x165))))
 ))
 (let (($x14 (and $x224 $x198)))
 (let (($x39 (= $x14 true)))
 (let ((?x251 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x251)))
 (let ((?x209 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x141 (= (_ bv0 32) ?x209)))
 (let ((?x172 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x119 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x172)))
 (let ((?x151 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x151)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x294 (and $x235 $x156)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x61 (and $x134 $x294)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x144 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x144 $x145)))
 (let (($x284 (not $x59)))
 (let (($x105 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x117 $x105)))
 (let (($x11 (and (not $x173) $x284)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (and $x95 $x60)))
 (let (($x154 (not $x195)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x208 $x83)))
 (let (($x174 (and (not $x272) $x154)))
 (let (($x177 (and (and (and (and (and (and $x174 $x11) $x52) $x19) $x61) $x119) $x141)))
 (let (($x107 (and $x177 $x153)))
 (let (($x63 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x185 (or false (or false (and (and true (or $x104 $x98)) (or $x42 $x63))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x185)))
 (let (($x292 (and $x96 $x107)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x306 (= $x219 true)))
 (let (($x21 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x46 (and $x47 $x21)))
 (let (($x37 (= $x46 true)))
 (let (($x201 (= $x37 true)))
 (let (($x97 (= $x201 true)))
 (let ((?x80 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x114 (= (_ bv0 2) ?x80)))
 (let (($x68 (= $x114 true)))
 (let (($x99 (= $x68 true)))
 (let ((?x103 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x215 (bvneg ?x103)))
 (let (($x66 (= ?x215 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x10 (= $x66 true)))
 (let (($x7 (= $x10 true)))
 (let (($x129 (= ?x215 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x228 (= $x129 true)))
 (let (($x56 (= $x228 true)))
 (let (($x31 (and $x56 $x7)))
 (let (($x57 (and $x31 $x99)))
 (let (($x40 (and $x57 $x97)))
 (let (($x50 (and $x40 $x306)))
 (let (($x300 (and $x50 $x39)))
 (let (($x277 (and $x300 $x255)))
 (let (($x58 (and $x277 $x108)))
 (let (($x29 (and $x58 $x283)))
 (let (($x109 (and $x29 $x245)))
 (let (($x91 (=> $x109 $x184)))
 (not $x91)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000124)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000127)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000124)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd6117448)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xccde805c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xccde805f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd611744b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xccde805c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd6117448)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x274 (= true false)))
 (let (($x261 (= $x274 true)))
 (let (($x234 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1739X)))
 (let ((?x218 (input.spec-%var-m2-1.1.1 input.ind-%var1739X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1739X)))
 (=> $x245 (= ?x218 ?x74))))))
 ))
 (let (($x196 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1738X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1738X)))
 (= $x245 $x149))))
 ))
 (let (($x221 (and $x196 $x234)))
 (let (($x213 (= $x221 true)))
 (let (($x15 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1733X)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var1733X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1733X)))
 (=> $x253 (= ?x38 ?x176))))))
 ))
 (let (($x51 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1732X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1732X)))
 (= $x253 $x172))))
 ))
 (let (($x49 (and $x51 $x15)))
 (let (($x276 (= $x49 true)))
 (let (($x182 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1727X (_ bv4 32))))
 (let ((?x205 (bvadd ?x222 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x231)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x211)))
 (let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1727X)))
 (let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1727X)))
 (=> $x149 (= ?x74 ?x302))))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1726X) (bvult input.ind-%var1726X (_ bv100 32)))))
 (let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1726X)))
 (= $x149 $x292))))
 ))
 (let (($x120 (and $x171 $x182)))
 (let (($x130 (= $x120 true)))
 (let (($x25 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1721X (_ bv4 32))))
 (let ((?x205 (bvadd ?x222 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x231)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x211)))
 (let ((?x218 (input.spec-%var-m2-1.1.1 input.ind-%var1721X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1721X)))
 (=> $x245 (= ?x218 ?x302))))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1720X) (bvult input.ind-%var1720X (_ bv100 32)))))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1720X)))
 (= $x245 $x292))))
 ))
 (let (($x285 (and $x81 $x25)))
 (let (($x24 (= $x285 true)))
 (let (($x280 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1715X (_ bv4 32))))
 (let ((?x22 (bvadd ?x222 input.dst.llvm-%m1)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x22))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv2 32))) ?x14)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv3 32))) ?x230)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var1715X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1715X)))
 (=> $x253 (= ?x38 ?x64))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1714X) (bvult input.ind-%var1714X (_ bv100 32)))))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1714X)))
 (= $x253 $x292))))
 ))
 (let (($x257 (and $x255 $x280)))
 (let (($x286 (= $x257 true)))
 (let (($x204 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1709X (_ bv4 32))))
 (let ((?x22 (bvadd ?x222 input.dst.llvm-%m1)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x22))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv2 32))) ?x14)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv3 32))) ?x230)))
 (let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1709X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1709X)))
 (=> $x172 (= ?x176 ?x64))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1708X) (bvult input.ind-%var1708X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1708X)))
 (= $x172 $x292))))
 ))
 (let (($x118 (and $x219 $x204)))
 (let (($x186 (= $x118 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x284)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x59 (= (_ bv0 32) ?x145)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x250)))
 (let ((?x174 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x195 $x117)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x60 $x105)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x87 $x225)))
 (let (($x185 (not $x291)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x42 $x79)))
 (let (($x208 (and (not $x63) $x185)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x90)))
 (let (($x187 (not $x98)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x114 $x68)))
 (let (($x82 (and (not $x86) $x187)))
 (let (($x19 (and (and (and (and (and (and $x82 $x208) $x272) $x95) $x173) $x144) $x59)))
 (let (($x247 (and $x19 $x11)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x20 (or false (or false (and (and true (or $x47 $x85)) (or $x97 $x40))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x134 (and $x101 $x247)))
 (let (($x235 (= $x134 true)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x266 (bvneg ?x13)))
 (let (($x256 (= ?x266 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x66 (= $x256 true)))
 (let (($x10 (= $x66 true)))
 (let (($x215 (= ?x266 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (= $x215 true)))
 (let (($x228 (= $x129 true)))
 (let (($x7 (and $x228 $x10)))
 (let (($x156 (and $x7 $x151)))
 (let (($x178 (and $x156 $x186)))
 (let (($x271 (and $x178 $x286)))
 (let (($x244 (and $x271 $x24)))
 (let (($x138 (and $x244 $x130)))
 (let (($x76 (and $x138 $x276)))
 (let (($x111 (and $x76 $x213)))
 (let (($x179 (=> $x111 $x261)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x274 (= true false)))
 (let (($x261 (= $x274 true)))
 (let (($x234 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1739X)))
 (let ((?x218 (input.spec-%var-m2-1.1.1 input.ind-%var1739X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1739X)))
 (=> $x245 (= ?x218 ?x74))))))
 ))
 (let (($x196 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1738X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1738X)))
 (= $x245 $x149))))
 ))
 (let (($x221 (and $x196 $x234)))
 (let (($x213 (= $x221 true)))
 (let (($x15 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1733X)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var1733X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1733X)))
 (=> $x253 (= ?x38 ?x176))))))
 ))
 (let (($x51 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1732X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1732X)))
 (= $x253 $x172))))
 ))
 (let (($x49 (and $x51 $x15)))
 (let (($x276 (= $x49 true)))
 (let (($x182 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1727X (_ bv4 32))))
 (let ((?x205 (bvadd ?x222 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x231)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x211)))
 (let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1727X)))
 (let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1727X)))
 (=> $x149 (= ?x74 ?x302))))))))))
 ))
 (let (($x171 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1726X) (bvult input.ind-%var1726X (_ bv100 32)))))
 (let (($x149 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1726X)))
 (= $x149 $x292))))
 ))
 (let (($x120 (and $x171 $x182)))
 (let (($x130 (= $x120 true)))
 (let (($x25 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1721X (_ bv4 32))))
 (let ((?x205 (bvadd ?x222 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x231)))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x211)))
 (let ((?x218 (input.spec-%var-m2-1.1.1 input.ind-%var1721X)))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1721X)))
 (=> $x245 (= ?x218 ?x302))))))))))
 ))
 (let (($x81 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1720X) (bvult input.ind-%var1720X (_ bv100 32)))))
 (let (($x245 (input.spec-%var-m2-1.0.1 input.ind-%var1720X)))
 (= $x245 $x292))))
 ))
 (let (($x285 (and $x81 $x25)))
 (let (($x24 (= $x285 true)))
 (let (($x280 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1715X (_ bv4 32))))
 (let ((?x22 (bvadd ?x222 input.dst.llvm-%m1)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x22))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv2 32))) ?x14)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv3 32))) ?x230)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var1715X)))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1715X)))
 (=> $x253 (= ?x38 ?x64))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1714X) (bvult input.ind-%var1714X (_ bv100 32)))))
 (let (($x253 (input.spec-%var-m1-1.0.1 input.ind-%var1714X)))
 (= $x253 $x292))))
 ))
 (let (($x257 (and $x255 $x280)))
 (let (($x286 (= $x257 true)))
 (let (($x204 (forall ((input.ind-%var1709X (_ BitVec 32)) )(let ((?x222 (bvmul input.ind-%var1709X (_ bv4 32))))
 (let ((?x22 (bvadd ?x222 input.dst.llvm-%m1)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x22))))
 (let ((?x230 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv2 32))) ?x14)))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x22 (_ bv3 32))) ?x230)))
 (let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1709X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1709X)))
 (=> $x172 (= ?x176 ?x64))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1708X (_ BitVec 32)) )(let (($x292 (and (bvule (_ bv0 32) input.ind-%var1708X) (bvult input.ind-%var1708X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1708X)))
 (= $x172 $x292))))
 ))
 (let (($x118 (and $x219 $x204)))
 (let (($x186 (= $x118 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x11 (= (_ bv0 32) ?x284)))
 (let ((?x145 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x59 (= (_ bv0 32) ?x145)))
 (let ((?x250 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x250)))
 (let ((?x174 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x174)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (and $x195 $x117)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x173 (and $x60 $x105)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x87 $x225)))
 (let (($x185 (not $x291)))
 (let (($x79 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x42 $x79)))
 (let (($x208 (and (not $x63) $x185)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x90)))
 (let (($x187 (not $x98)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x114 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x86 (and $x114 $x68)))
 (let (($x82 (and (not $x86) $x187)))
 (let (($x19 (and (and (and (and (and (and $x82 $x208) $x272) $x95) $x173) $x144) $x59)))
 (let (($x247 (and $x19 $x11)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x88 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x97 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x88)))
 (let (($x85 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x47 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x88)))
 (let (($x20 (or false (or false (and (and true (or $x47 $x85)) (or $x97 $x40))))))
 (let (($x101 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x134 (and $x101 $x247)))
 (let (($x235 (= $x134 true)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let ((?x13 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x266 (bvneg ?x13)))
 (let (($x256 (= ?x266 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x66 (= $x256 true)))
 (let (($x10 (= $x66 true)))
 (let (($x215 (= ?x266 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (= $x215 true)))
 (let (($x228 (= $x129 true)))
 (let (($x7 (and $x228 $x10)))
 (let (($x156 (and $x7 $x151)))
 (let (($x178 (and $x156 $x186)))
 (let (($x271 (and $x178 $x286)))
 (let (($x244 (and $x271 $x24)))
 (let (($x138 (and $x244 $x130)))
 (let (($x76 (and $x138 $x276)))
 (let (($x111 (and $x76 $x213)))
 (let (($x179 (=> $x111 $x261)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x930ff6fa)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdc44c5e4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xafb80000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x09bdabe8)
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x09bdabeb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdc44c5e7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x09bdabe8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdc44c5e4)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #xafb80003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80001 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!20 (k!16 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #xafb80003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80001 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-m2-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!19 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x930ff6fd (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x930ff6fc (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x930ff6fb (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x930ff6fa (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!21 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!21 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 (k!16 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x930ff6fd (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x930ff6fc (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x930ff6fb (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x930ff6fa (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 x!0)
             a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!20 (k!17 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!15 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m2-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!21 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!21 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!18 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!18 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!15 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x219 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x153 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x176 (and $x153 $x219)))
 (let (($x317 (and $x176 $x113)))
 (let (($x318 (=> $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x313 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x303 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1807X)))
 (let ((?x146 (input.spec-%var-m2-1.1.1 input.ind-%var1807X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1807X)))
 (=> $x30 (= ?x146 ?x303))))))
 ))
 (let (($x252 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1806X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1806X)))
 (= $x30 $x16))))
 ))
 (let (($x314 (and $x252 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x200 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x286 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1801X)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 input.ind-%var1801X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1801X)))
 (=> $x276 (= ?x261 ?x286))))))
 ))
 (let (($x29 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1800X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1800X)))
 (= $x276 $x64))))
 ))
 (let (($x41 (and $x29 $x200)))
 (let (($x264 (= $x41 true)))
 (let (($x251 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1795X (_ bv4 32))))
 (let ((?x289 (bvadd ?x25 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x289))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x157)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x267)))
 (let ((?x303 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1795X)))
 (let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1795X)))
 (=> $x16 (= ?x303 ?x194))))))))))
 ))
 (let (($x305 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1794X) (bvult input.ind-%var1794X (_ bv100 32)))))
 (let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1794X)))
 (= $x16 $x255))))
 ))
 (let (($x125 (and $x305 $x251)))
 (let (($x229 (= $x125 true)))
 (let (($x193 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1789X (_ bv4 32))))
 (let ((?x289 (bvadd ?x25 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x289))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x157)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x267)))
 (let ((?x146 (input.spec-%var-m2-1.1.1 input.ind-%var1789X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1789X)))
 (=> $x30 (= ?x146 ?x194))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X (_ bv100 32)))))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1788X)))
 (= $x30 $x255))))
 ))
 (let (($x122 (and $x277 $x193)))
 (let (($x168 (= $x122 true)))
 (let (($x141 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1783X (_ bv4 32))))
 (let ((?x285 (bvadd ?x25 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x285))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv2 32))) ?x70)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv3 32))) ?x94)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 input.ind-%var1783X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1783X)))
 (=> $x276 (= ?x261 ?x120))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X (_ bv100 32)))))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1782X)))
 (= $x276 $x255))))
 ))
 (let (($x199 (and $x221 $x141)))
 (let (($x32 (= $x199 true)))
 (let (($x304 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1777X (_ bv4 32))))
 (let ((?x285 (bvadd ?x25 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x285))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv2 32))) ?x70)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv3 32))) ?x94)))
 (let ((?x286 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1777X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1777X)))
 (=> $x64 (= ?x286 ?x120))))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1776X)))
 (= $x64 $x255))))
 ))
 (let (($x51 (and $x116 $x304)))
 (let (($x77 (= $x51 true)))
 (let (($x164 (= $x113 true)))
 (let (($x39 (= $x164 true)))
 (let (($x300 (= $x39 true)))
 (let (($x147 (= $x176 true)))
 (let (($x165 (= $x147 true)))
 (let (($x222 (= $x165 true)))
 (let ((?x144 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x144)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x295)))
 (let ((?x105 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x195 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x52 $x154)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x95 $x174)))
 (let (($x131 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x87 $x225)))
 (let (($x185 (not $x291)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x79 $x63)))
 (let (($x181 (and (not $x96) $x185)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x90)))
 (let (($x187 (not $x98)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x57 $x92)))
 (let (($x42 (and (not $x55) $x187)))
 (let (($x247 (and (and (and (and (and (and $x42 $x181) $x272) $x131) $x117) $x173) $x250)))
 (let (($x134 (and $x247 $x192)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x114 (or false (or false (and (and true (or $x21 $x46)) (or $x100 $x84))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x235 (and $x86 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let ((?x44 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x103 (bvneg ?x44)))
 (let (($x56 (= ?x103 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x256 (= $x56 true)))
 (let (($x66 (= $x256 true)))
 (let (($x266 (= ?x103 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (= $x266 true)))
 (let (($x215 (= $x129 true)))
 (let (($x10 (and $x215 $x66)))
 (let (($x217 (and $x10 $x156)))
 (let (($x224 (and $x217 $x222)))
 (let (($x210 (and $x224 $x300)))
 (let (($x198 (and $x210 $x300)))
 (let (($x223 (and $x198 $x77)))
 (let (($x236 (and $x223 $x32)))
 (let (($x67 (and $x236 $x168)))
 (let (($x175 (and $x67 $x229)))
 (let (($x269 (and $x175 $x264)))
 (let (($x316 (and $x269 $x315)))
 (let (($x321 (=> $x316 $x320)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x219 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x153 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x176 (and $x153 $x219)))
 (let (($x317 (and $x176 $x113)))
 (let (($x318 (=> $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x320 (= $x319 true)))
 (let (($x313 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x303 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1807X)))
 (let ((?x146 (input.spec-%var-m2-1.1.1 input.ind-%var1807X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1807X)))
 (=> $x30 (= ?x146 ?x303))))))
 ))
 (let (($x252 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1806X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1806X)))
 (= $x30 $x16))))
 ))
 (let (($x314 (and $x252 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x200 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x286 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1801X)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 input.ind-%var1801X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1801X)))
 (=> $x276 (= ?x261 ?x286))))))
 ))
 (let (($x29 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1800X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1800X)))
 (= $x276 $x64))))
 ))
 (let (($x41 (and $x29 $x200)))
 (let (($x264 (= $x41 true)))
 (let (($x251 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1795X (_ bv4 32))))
 (let ((?x289 (bvadd ?x25 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x289))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x157)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x267)))
 (let ((?x303 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1795X)))
 (let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1795X)))
 (=> $x16 (= ?x303 ?x194))))))))))
 ))
 (let (($x305 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1794X) (bvult input.ind-%var1794X (_ bv100 32)))))
 (let (($x16 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1794X)))
 (= $x16 $x255))))
 ))
 (let (($x125 (and $x305 $x251)))
 (let (($x229 (= $x125 true)))
 (let (($x193 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1789X (_ bv4 32))))
 (let ((?x289 (bvadd ?x25 input.dst.llvm-%m2)))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x289))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv2 32))) ?x157)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x289 (_ bv3 32))) ?x267)))
 (let ((?x146 (input.spec-%var-m2-1.1.1 input.ind-%var1789X)))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1789X)))
 (=> $x30 (= ?x146 ?x194))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X (_ bv100 32)))))
 (let (($x30 (input.spec-%var-m2-1.0.1 input.ind-%var1788X)))
 (= $x30 $x255))))
 ))
 (let (($x122 (and $x277 $x193)))
 (let (($x168 (= $x122 true)))
 (let (($x141 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1783X (_ bv4 32))))
 (let ((?x285 (bvadd ?x25 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x285))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv2 32))) ?x70)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv3 32))) ?x94)))
 (let ((?x261 (input.spec-%var-m1-1.1.1 input.ind-%var1783X)))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1783X)))
 (=> $x276 (= ?x261 ?x120))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X (_ bv100 32)))))
 (let (($x276 (input.spec-%var-m1-1.0.1 input.ind-%var1782X)))
 (= $x276 $x255))))
 ))
 (let (($x199 (and $x221 $x141)))
 (let (($x32 (= $x199 true)))
 (let (($x304 (forall ((input.ind-%var1777X (_ BitVec 32)) )(let ((?x25 (bvmul input.ind-%var1777X (_ bv4 32))))
 (let ((?x285 (bvadd ?x25 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x285))))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv2 32))) ?x70)))
 (let ((?x120 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x285 (_ bv3 32))) ?x94)))
 (let ((?x286 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1777X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1777X)))
 (=> $x64 (= ?x286 ?x120))))))))))
 ))
 (let (($x116 (forall ((input.ind-%var1776X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1776X) (bvult input.ind-%var1776X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1776X)))
 (= $x64 $x255))))
 ))
 (let (($x51 (and $x116 $x304)))
 (let (($x77 (= $x51 true)))
 (let (($x164 (= $x113 true)))
 (let (($x39 (= $x164 true)))
 (let (($x300 (= $x39 true)))
 (let (($x147 (= $x176 true)))
 (let (($x165 (= $x147 true)))
 (let (($x222 (= $x165 true)))
 (let ((?x144 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x144)))
 (let ((?x295 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x295)))
 (let ((?x105 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x173 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x105)))
 (let ((?x195 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x52 $x154)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x95 $x174)))
 (let (($x131 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x87 $x225)))
 (let (($x185 (not $x291)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x79 $x63)))
 (let (($x181 (and (not $x96) $x185)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x104 $x90)))
 (let (($x187 (not $x98)))
 (let (($x92 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x57 $x92)))
 (let (($x42 (and (not $x55) $x187)))
 (let (($x247 (and (and (and (and (and (and $x42 $x181) $x272) $x131) $x117) $x173) $x250)))
 (let (($x134 (and $x247 $x192)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x46 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x85)))
 (let (($x114 (or false (or false (and (and true (or $x21 $x46)) (or $x100 $x84))))))
 (let (($x86 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x235 (and $x86 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let ((?x44 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x103 (bvneg ?x44)))
 (let (($x56 (= ?x103 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x256 (= $x56 true)))
 (let (($x66 (= $x256 true)))
 (let (($x266 (= ?x103 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x129 (= $x266 true)))
 (let (($x215 (= $x129 true)))
 (let (($x10 (and $x215 $x66)))
 (let (($x217 (and $x10 $x156)))
 (let (($x224 (and $x217 $x222)))
 (let (($x210 (and $x224 $x300)))
 (let (($x198 (and $x210 $x300)))
 (let (($x223 (and $x198 $x77)))
 (let (($x236 (and $x223 $x32)))
 (let (($x67 (and $x236 $x168)))
 (let (($x175 (and $x67 $x229)))
 (let (($x269 (and $x175 $x264)))
 (let (($x316 (and $x269 $x315)))
 (let (($x321 (=> $x316 $x320)))
 (not $x321)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x324 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x325 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x324)))
 (let ((?x268 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x323 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x268)))
 (let (($x326 (= ?x323 ?x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x127 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1843X)))
 (let ((?x248 (input.spec-%var-m2-1.1.1 input.ind-%var1843X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1843X)))
 (=> $x216 (= ?x248 ?x226))))))
 ))
 (let (($x160 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1842X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1842X)))
 (= $x216 $x61))))
 ))
 (let (($x309 (and $x160 $x127)))
 (let (($x152 (= $x309 true)))
 (let (($x212 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1837X)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1837X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1837X)))
 (=> $x150 (= ?x41 ?x138))))))
 ))
 (let (($x183 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1836X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1836X)))
 (= $x150 $x81))))
 ))
 (let (($x280 (and $x183 $x212)))
 (let (($x163 (= $x280 true)))
 (let (($x281 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1831X (_ bv4 32))))
 (let ((?x69 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x69))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv2 32))) ?x246)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv3 32))) ?x119)))
 (let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1831X)))
 (let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1831X)))
 (=> $x61 (= ?x226 ?x80))))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X (_ bv100 32)))))
 (let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1830X)))
 (= $x61 $x149))))
 ))
 (let (($x287 (and $x159 $x281)))
 (let (($x232 (= $x287 true)))
 (let (($x288 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1825X (_ bv4 32))))
 (let ((?x69 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x69))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv2 32))) ?x246)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv3 32))) ?x119)))
 (let ((?x248 (input.spec-%var-m2-1.1.1 input.ind-%var1825X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1825X)))
 (=> $x216 (= ?x248 ?x80))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1824X) (bvult input.ind-%var1824X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1824X)))
 (= $x216 $x149))))
 ))
 (let (($x45 (and $x124 $x288)))
 (let (($x5 (= $x45 true)))
 (let (($x7 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1819X (_ bv4 32))))
 (let ((?x6 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x6))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x184)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x267)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1819X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1819X)))
 (=> $x150 (= ?x41 ?x43))))))))))
 ))
 (let (($x29 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1818X)))
 (= $x150 $x149))))
 ))
 (let (($x99 (and $x29 $x7)))
 (let (($x76 (= $x99 true)))
 (let (($x168 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1813X (_ bv4 32))))
 (let ((?x6 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x6))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x184)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x267)))
 (let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1813X)))
 (let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1813X)))
 (=> $x81 (= ?x138 ?x43))))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X (_ bv100 32)))))
 (let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1812X)))
 (= $x81 $x149))))
 ))
 (let (($x67 (and $x70 $x168)))
 (let (($x16 (= $x67 true)))
 (let ((?x164 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x39 (bvneg ?x164)))
 (let (($x204 (= ?x39 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x253 (= $x204 true)))
 (let (($x255 (= $x253 true)))
 (let (($x210 (= ?x39 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x198 (= $x210 true)))
 (let (($x230 (= $x198 true)))
 (let (($x209 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x153 (= $x209 true)))
 (let (($x292 (= $x153 true)))
 (let (($x170 (= $x292 true)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x23 (and $x228 $x215)))
 (let (($x176 (and $x23 $x209)))
 (let (($x147 (= $x176 true)))
 (let (($x165 (= $x147 true)))
 (let (($x222 (= $x165 true)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x173 (= (_ bv0 32) ?x105)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x284 (= (_ bv0 32) ?x117)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x131 $x52)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x142 $x60)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x208 $x87)))
 (let (($x291 (not $x225)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x79 $x63)))
 (let (($x181 (and (not $x96) $x291)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x82 $x104)))
 (let (($x98 (not $x90)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x73 $x88)))
 (let (($x42 (and (not $x55) $x98)))
 (let (($x192 (and (and (and (and (and (and $x42 $x181) $x83) $x59) $x195) $x174) $x284)))
 (let (($x134 (and $x192 $x173)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x86 (or false (or false (and (and true (or $x46 $x37)) (or $x84 $x93))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x235 (and $x92 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let (($x13 (= $x23 true)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x217 (and $x56 $x156)))
 (let (($x219 (and $x217 $x170)))
 (let (($x224 (and $x219 $x222)))
 (let (($x22 (and $x224 $x170)))
 (let (($x64 (and $x22 $x230)))
 (let (($x38 (and $x64 $x255)))
 (let (($x91 (and $x38 $x16)))
 (let (($x179 (and $x91 $x76)))
 (let (($x262 (and $x179 $x5)))
 (let (($x35 (and $x262 $x232)))
 (let (($x306 (and $x35 $x163)))
 (let (($x310 (and $x306 $x152)))
 (let (($x329 (=> $x310 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x324 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x325 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x324)))
 (let ((?x268 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x323 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x268)))
 (let (($x326 (= ?x323 ?x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x127 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1843X)))
 (let ((?x248 (input.spec-%var-m2-1.1.1 input.ind-%var1843X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1843X)))
 (=> $x216 (= ?x248 ?x226))))))
 ))
 (let (($x160 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1842X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1842X)))
 (= $x216 $x61))))
 ))
 (let (($x309 (and $x160 $x127)))
 (let (($x152 (= $x309 true)))
 (let (($x212 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1837X)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1837X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1837X)))
 (=> $x150 (= ?x41 ?x138))))))
 ))
 (let (($x183 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1836X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1836X)))
 (= $x150 $x81))))
 ))
 (let (($x280 (and $x183 $x212)))
 (let (($x163 (= $x280 true)))
 (let (($x281 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1831X (_ bv4 32))))
 (let ((?x69 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x69))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv2 32))) ?x246)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv3 32))) ?x119)))
 (let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1831X)))
 (let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1831X)))
 (=> $x61 (= ?x226 ?x80))))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X (_ bv100 32)))))
 (let (($x61 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1830X)))
 (= $x61 $x149))))
 ))
 (let (($x287 (and $x159 $x281)))
 (let (($x232 (= $x287 true)))
 (let (($x288 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1825X (_ bv4 32))))
 (let ((?x69 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x69))))
 (let ((?x119 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv2 32))) ?x246)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x69 (_ bv3 32))) ?x119)))
 (let ((?x248 (input.spec-%var-m2-1.1.1 input.ind-%var1825X)))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1825X)))
 (=> $x216 (= ?x248 ?x80))))))))))
 ))
 (let (($x124 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1824X) (bvult input.ind-%var1824X (_ bv100 32)))))
 (let (($x216 (input.spec-%var-m2-1.0.1 input.ind-%var1824X)))
 (= $x216 $x149))))
 ))
 (let (($x45 (and $x124 $x288)))
 (let (($x5 (= $x45 true)))
 (let (($x7 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1819X (_ bv4 32))))
 (let ((?x6 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x6))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x184)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x267)))
 (let ((?x41 (input.spec-%var-m1-1.1.1 input.ind-%var1819X)))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1819X)))
 (=> $x150 (= ?x41 ?x43))))))))))
 ))
 (let (($x29 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X (_ bv100 32)))))
 (let (($x150 (input.spec-%var-m1-1.0.1 input.ind-%var1818X)))
 (= $x150 $x149))))
 ))
 (let (($x99 (and $x29 $x7)))
 (let (($x76 (= $x99 true)))
 (let (($x168 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1813X (_ bv4 32))))
 (let ((?x6 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x6))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv2 32))) ?x184)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x6 (_ bv3 32))) ?x267)))
 (let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1813X)))
 (let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1813X)))
 (=> $x81 (= ?x138 ?x43))))))))))
 ))
 (let (($x70 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x149 (and (bvule (_ bv0 32) input.ind-%var1812X) (bvult input.ind-%var1812X (_ bv100 32)))))
 (let (($x81 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1812X)))
 (= $x81 $x149))))
 ))
 (let (($x67 (and $x70 $x168)))
 (let (($x16 (= $x67 true)))
 (let ((?x164 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x39 (bvneg ?x164)))
 (let (($x204 (= ?x39 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x253 (= $x204 true)))
 (let (($x255 (= $x253 true)))
 (let (($x210 (= ?x39 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x198 (= $x210 true)))
 (let (($x230 (= $x198 true)))
 (let (($x209 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x153 (= $x209 true)))
 (let (($x292 (= $x153 true)))
 (let (($x170 (= $x292 true)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x23 (and $x228 $x215)))
 (let (($x176 (and $x23 $x209)))
 (let (($x147 (= $x176 true)))
 (let (($x165 (= $x147 true)))
 (let (($x222 (= $x165 true)))
 (let ((?x105 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x173 (= (_ bv0 32) ?x105)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x284 (= (_ bv0 32) ?x117)))
 (let ((?x154 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x174 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x154)))
 (let ((?x95 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x52 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x95)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (and $x131 $x52)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x142 $x60)))
 (let (($x59 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x208 $x87)))
 (let (($x291 (not $x225)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x79 $x63)))
 (let (($x181 (and (not $x96) $x291)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x82 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x82 $x104)))
 (let (($x98 (not $x90)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x73 $x88)))
 (let (($x42 (and (not $x55) $x98)))
 (let (($x192 (and (and (and (and (and (and $x42 $x181) $x83) $x59) $x195) $x174) $x284)))
 (let (($x134 (and $x192 $x173)))
 (let (($x93 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x102 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x102)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x102)))
 (let (($x86 (or false (or false (and (and true (or $x46 $x37)) (or $x84 $x93))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x86)))
 (let (($x235 (and $x92 $x134)))
 (let (($x206 (= $x235 true)))
 (let (($x151 (= $x206 true)))
 (let (($x156 (= $x151 true)))
 (let (($x13 (= $x23 true)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x217 (and $x56 $x156)))
 (let (($x219 (and $x217 $x170)))
 (let (($x224 (and $x219 $x222)))
 (let (($x22 (and $x224 $x170)))
 (let (($x64 (and $x22 $x230)))
 (let (($x38 (and $x64 $x255)))
 (let (($x91 (and $x38 $x16)))
 (let (($x179 (and $x91 $x76)))
 (let (($x262 (and $x179 $x5)))
 (let (($x35 (and $x262 $x232)))
 (let (($x306 (and $x35 $x163)))
 (let (($x310 (and $x306 $x152)))
 (let (($x329 (=> $x310 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x274 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x259 (= (_ bv0 2) ?x274)))
 (let (($x148 (= $x259 true)))
 (let (($x211 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let ((?x319 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1867X)))
 (let ((?x34 (input.spec-%var-m2-1.1.1 input.ind-%var1867X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1867X)))
 (=> $x159 (= ?x34 ?x319))))))
 ))
 (let (($x311 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x317 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1866X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1866X)))
 (= $x159 $x317))))
 ))
 (let (($x303 (and $x311 $x211)))
 (let (($x229 (= $x303 true)))
 (let (($x305 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1861X)))
 (let ((?x122 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x223 (= ?x122 ?x221))))))
 ))
 (let (($x65 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x182 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1860X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x223 $x182))))
 ))
 (let (($x251 (and $x65 $x305)))
 (let (($x125 (= $x251 true)))
 (let (($x304 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x248 (bvmul input.ind-%var1855X (_ bv4 32))))
 (let ((?x325 (bvadd ?x248 input.dst.llvm-%m2)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x329))))
 (let ((?x34 (input.spec-%var-m2-1.1.1 input.ind-%var1855X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1855X)))
 (=> $x159 (= ?x34 ?x271)))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv100 32)))))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1854X)))
 (= $x159 $x238))))
 ))
 (let (($x49 (and $x35 $x304)))
 (let (($x108 (= $x49 true)))
 (let (($x288 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x248 (bvmul input.ind-%var1849X (_ bv4 32))))
 (let ((?x69 (bvadd ?x248 input.dst.llvm-%m1)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x214))))
 (let ((?x122 (input.spec-%var-m1-1.1.1 input.ind-%var1849X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1849X)))
 (=> $x223 (= ?x122 ?x80)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X (_ bv100 32)))))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1848X)))
 (= $x223 $x238))))
 ))
 (let (($x45 (and $x184 $x288)))
 (let (($x5 (= $x45 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x244 (concat ?x81 (concat ?x255 (concat ?x123 ?x230)))))
 (let (($x139 (= ?x244 input.dst.llvm-%m2)))
 (let (($x74 (= $x139 true)))
 (let (($x149 (= $x74 true)))
 (let (($x22 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x165 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x18 (and $x165 $x22)))
 (let (($x113 (= $x18 true)))
 (let (($x164 (= $x113 true)))
 (let (($x39 (= $x164 true)))
 (let ((?x173 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x134 (= (_ bv0 32) ?x173)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x105 (= (_ bv0 32) ?x192)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x195 $x154)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x60 $x174)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x295 $x272)))
 (let (($x250 (not $x59)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x11 $x145)))
 (let (($x131 (and (not $x83) $x250)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x185 $x208)))
 (let (($x225 (not $x87)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x201 $x100)))
 (let (($x181 (and (not $x96) $x225)))
 (let (($x172 (and (and (and (and (and (and $x181 $x131) $x95) $x52) $x144) $x284) $x105)))
 (let (($x107 (and $x172 $x134)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x42 (or false (or false (and (and true (or $x114 $x86)) (or $x187 $x82))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x209 (and $x63 $x107)))
 (let (($x153 (= $x209 true)))
 (let (($x292 (= $x153 true)))
 (let (($x170 (= $x292 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x47 (concat ?x56 (concat ?x215 ?x256)))))
 (let (($x102 (= ?x57 input.dst.llvm-%m1)))
 (let (($x46 (= $x102 true)))
 (let (($x21 (= $x46 true)))
 (let (($x219 (and $x21 $x170)))
 (let (($x300 (and $x219 $x39)))
 (let (($x210 (and $x300 $x39)))
 (let (($x24 (and $x210 $x149)))
 (let (($x262 (and $x24 $x5)))
 (let (($x94 (and $x262 $x108)))
 (let (($x269 (and $x94 $x125)))
 (let (($x237 (and $x269 $x229)))
 (let (($x197 (=> $x237 $x148)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x274 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x259 (= (_ bv0 2) ?x274)))
 (let (($x148 (= $x259 true)))
 (let (($x211 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let ((?x319 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1867X)))
 (let ((?x34 (input.spec-%var-m2-1.1.1 input.ind-%var1867X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1867X)))
 (=> $x159 (= ?x34 ?x319))))))
 ))
 (let (($x311 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x317 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1866X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1866X)))
 (= $x159 $x317))))
 ))
 (let (($x303 (and $x311 $x211)))
 (let (($x229 (= $x303 true)))
 (let (($x305 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1861X)))
 (let ((?x122 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x223 (= ?x122 ?x221))))))
 ))
 (let (($x65 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x182 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1860X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x223 $x182))))
 ))
 (let (($x251 (and $x65 $x305)))
 (let (($x125 (= $x251 true)))
 (let (($x304 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x248 (bvmul input.ind-%var1855X (_ bv4 32))))
 (let ((?x325 (bvadd ?x248 input.dst.llvm-%m2)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv1 32))) (select input.dst.llvm-mem ?x325))))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x325 (_ bv2 32))) ?x329))))
 (let ((?x34 (input.spec-%var-m2-1.1.1 input.ind-%var1855X)))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1855X)))
 (=> $x159 (= ?x34 ?x271)))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv100 32)))))
 (let (($x159 (input.spec-%var-m2-1.0.1 input.ind-%var1854X)))
 (= $x159 $x238))))
 ))
 (let (($x49 (and $x35 $x304)))
 (let (($x108 (= $x49 true)))
 (let (($x288 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x248 (bvmul input.ind-%var1849X (_ bv4 32))))
 (let ((?x69 (bvadd ?x248 input.dst.llvm-%m1)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv1 32))) (select input.dst.llvm-mem ?x69))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x69 (_ bv2 32))) ?x214))))
 (let ((?x122 (input.spec-%var-m1-1.1.1 input.ind-%var1849X)))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1849X)))
 (=> $x223 (= ?x122 ?x80)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x238 (and (bvule (_ bv0 32) input.ind-%var1848X) (bvult input.ind-%var1848X (_ bv100 32)))))
 (let (($x223 (input.spec-%var-m1-1.0.1 input.ind-%var1848X)))
 (= $x223 $x238))))
 ))
 (let (($x45 (and $x184 $x288)))
 (let (($x5 (= $x45 true)))
 (let ((?x230 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x244 (concat ?x81 (concat ?x255 (concat ?x123 ?x230)))))
 (let (($x139 (= ?x244 input.dst.llvm-%m2)))
 (let (($x74 (= $x139 true)))
 (let (($x149 (= $x74 true)))
 (let (($x22 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x165 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x18 (and $x165 $x22)))
 (let (($x113 (= $x18 true)))
 (let (($x164 (= $x113 true)))
 (let (($x39 (= $x164 true)))
 (let ((?x173 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x134 (= (_ bv0 32) ?x173)))
 (let ((?x192 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x105 (= (_ bv0 32) ?x192)))
 (let ((?x117 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x284 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x117)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x195 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x195 $x154)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x60 $x174)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (and $x295 $x272)))
 (let (($x250 (not $x59)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x11 $x145)))
 (let (($x131 (and (not $x83) $x250)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x185 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x185 $x208)))
 (let (($x225 (not $x87)))
 (let (($x100 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x201 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x201 $x100)))
 (let (($x181 (and (not $x96) $x225)))
 (let (($x172 (and (and (and (and (and (and $x181 $x131) $x95) $x52) $x144) $x284) $x105)))
 (let (($x107 (and $x172 $x134)))
 (let (($x82 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x101 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x101)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x114 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x101)))
 (let (($x42 (or false (or false (and (and true (or $x114 $x86)) (or $x187 $x82))))))
 (let (($x63 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x42)))
 (let (($x209 (and $x63 $x107)))
 (let (($x153 (= $x209 true)))
 (let (($x292 (= $x153 true)))
 (let (($x170 (= $x292 true)))
 (let ((?x256 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x56 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x47 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x57 (concat ?x47 (concat ?x56 (concat ?x215 ?x256)))))
 (let (($x102 (= ?x57 input.dst.llvm-%m1)))
 (let (($x46 (= $x102 true)))
 (let (($x21 (= $x46 true)))
 (let (($x219 (and $x21 $x170)))
 (let (($x300 (and $x219 $x39)))
 (let (($x210 (and $x300 $x39)))
 (let (($x24 (and $x210 $x149)))
 (let (($x262 (and $x24 $x5)))
 (let (($x94 (and $x262 $x108)))
 (let (($x269 (and $x94 $x125)))
 (let (($x237 (and $x269 $x229)))
 (let (($x197 (=> $x237 $x148)))
 (not $x197)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x218 (= (_ bv0 2) ?x277)))
 (let (($x252 (= $x218 true)))
 (let (($x183 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1891X)))
 (let ((?x80 (input.spec-%var-m2-1.1.1 input.ind-%var1891X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1891X)))
 (=> $x242 (= ?x80 ?x240))))))
 ))
 (let (($x297 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x313 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1890X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1890X)))
 (= $x242 $x313))))
 ))
 (let (($x324 (and $x297 $x183)))
 (let (($x236 (= $x324 true)))
 (let (($x260 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1885X)))
 (let ((?x274 (input.spec-%var-m1-1.1.1 input.ind-%var1885X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1885X)))
 (=> $x317 (= ?x274 ?x310))))))
 ))
 (let (($x280 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1884X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1884X)))
 (= $x317 $x26))))
 ))
 (let (($x309 (and $x280 $x260)))
 (let (($x268 (= $x309 true)))
 (let (($x29 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x326 (bvmul input.ind-%var1879X (_ bv4 32))))
 (let ((?x155 (bvadd ?x326 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x70))))
 (let ((?x274 (input.spec-%var-m1-1.1.1 input.ind-%var1879X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1879X)))
 (=> $x317 (= ?x274 ?x179)))))))))
 ))
 (let (($x303 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X (_ bv100 32)))))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1878X)))
 (= $x317 $x31))))
 ))
 (let (($x41 (and $x303 $x29)))
 (let (($x128 (= $x41 true)))
 (let (($x243 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x326 (bvmul input.ind-%var1873X (_ bv4 32))))
 (let ((?x329 (bvadd ?x326 input.dst.llvm-%m2)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem ?x329))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv2 32))) ?x25))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 input.ind-%var1873X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1873X)))
 (=> $x242 (= ?x80 ?x30)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X (_ bv100 32)))))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1872X)))
 (= $x242 $x31))))
 ))
 (let (($x200 (and $x299 $x243)))
 (let (($x305 (= $x200 true)))
 (let ((?x255 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x74 (concat ?x38 (concat ?x123 ?x255)))))
 (let (($x24 (= ?x149 input.dst.llvm-%m1)))
 (let (($x51 (= $x24 true)))
 (let (($x223 (= $x51 true)))
 (let (($x113 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x22 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x22 $x113)))
 (let (($x39 (= $x164 true)))
 (let (($x300 (= $x39 true)))
 (let (($x210 (= $x300 true)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x217)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x284 (= (_ bv0 32) ?x117)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x195 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x60 $x247)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x151 $x154)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x272 $x59)))
 (let (($x131 (not $x250)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x83 $x142)))
 (let (($x19 (and (not $x295) $x131)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x208 $x87)))
 (let (($x181 (not $x225)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x79 $x93)))
 (let (($x145 (and (not $x185) $x181)))
 (let (($x209 (and (and (and (and (and (and $x145 $x19) $x95) $x52) $x174) $x156) $x284)))
 (let (($x153 (and $x209 $x192)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x100 (or false (or false (and (and true (or $x73 $x88)) (or $x90 $x98))))))
 (let (($x291 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x292 (and $x291 $x153)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x176 (= $x219 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x57 (concat ?x215 (concat ?x266 ?x47)))))
 (let (($x46 (= ?x85 input.dst.llvm-%m2)))
 (let (($x21 (= $x46 true)))
 (let (($x37 (= $x21 true)))
 (let (($x147 (and $x37 $x176)))
 (let (($x245 (and $x147 $x210)))
 (let (($x81 (and $x245 $x210)))
 (let (($x167 (and $x81 $x223)))
 (let (($x251 (and $x167 $x305)))
 (let (($x322 (and $x251 $x128)))
 (let (($x261 (and $x322 $x268)))
 (let (($x314 (and $x261 $x236)))
 (let (($x279 (=> $x314 $x252)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x277 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x218 (= (_ bv0 2) ?x277)))
 (let (($x252 (= $x218 true)))
 (let (($x183 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1891X)))
 (let ((?x80 (input.spec-%var-m2-1.1.1 input.ind-%var1891X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1891X)))
 (=> $x242 (= ?x80 ?x240))))))
 ))
 (let (($x297 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x313 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1890X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1890X)))
 (= $x242 $x313))))
 ))
 (let (($x324 (and $x297 $x183)))
 (let (($x236 (= $x324 true)))
 (let (($x260 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x310 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1885X)))
 (let ((?x274 (input.spec-%var-m1-1.1.1 input.ind-%var1885X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1885X)))
 (=> $x317 (= ?x274 ?x310))))))
 ))
 (let (($x280 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1884X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1884X)))
 (= $x317 $x26))))
 ))
 (let (($x309 (and $x280 $x260)))
 (let (($x268 (= $x309 true)))
 (let (($x29 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x326 (bvmul input.ind-%var1879X (_ bv4 32))))
 (let ((?x155 (bvadd ?x326 input.dst.llvm-%m1)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv1 32))) (select input.dst.llvm-mem ?x155))))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x155 (_ bv2 32))) ?x70))))
 (let ((?x274 (input.spec-%var-m1-1.1.1 input.ind-%var1879X)))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1879X)))
 (=> $x317 (= ?x274 ?x179)))))))))
 ))
 (let (($x303 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X (_ bv100 32)))))
 (let (($x317 (input.spec-%var-m1-1.0.1 input.ind-%var1878X)))
 (= $x317 $x31))))
 ))
 (let (($x41 (and $x303 $x29)))
 (let (($x128 (= $x41 true)))
 (let (($x243 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x326 (bvmul input.ind-%var1873X (_ bv4 32))))
 (let ((?x329 (bvadd ?x326 input.dst.llvm-%m2)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv1 32))) (select input.dst.llvm-mem ?x329))))
 (let ((?x30 (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x329 (_ bv2 32))) ?x25))))
 (let ((?x80 (input.spec-%var-m2-1.1.1 input.ind-%var1873X)))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1873X)))
 (=> $x242 (= ?x80 ?x30)))))))))
 ))
 (let (($x299 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x31 (and (bvule (_ bv0 32) input.ind-%var1872X) (bvult input.ind-%var1872X (_ bv100 32)))))
 (let (($x242 (input.spec-%var-m2-1.0.1 input.ind-%var1872X)))
 (= $x242 $x31))))
 ))
 (let (($x200 (and $x299 $x243)))
 (let (($x305 (= $x200 true)))
 (let ((?x255 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x149 (concat ?x74 (concat ?x38 (concat ?x123 ?x255)))))
 (let (($x24 (= ?x149 input.dst.llvm-%m1)))
 (let (($x51 (= $x24 true)))
 (let (($x223 (= $x51 true)))
 (let (($x113 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x22 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x164 (and $x22 $x113)))
 (let (($x39 (= $x164 true)))
 (let (($x300 (= $x39 true)))
 (let (($x210 (= $x300 true)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x192 (= (_ bv0 32) ?x217)))
 (let ((?x117 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x284 (= (_ bv0 32) ?x117)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x195 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x247 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x195)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x154 (and $x60 $x247)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x174 (and $x151 $x154)))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x250 (and $x272 $x59)))
 (let (($x131 (not $x250)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x83 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x83 $x142)))
 (let (($x19 (and (not $x295) $x131)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x225 (and $x208 $x87)))
 (let (($x181 (not $x225)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x79 $x93)))
 (let (($x145 (and (not $x185) $x181)))
 (let (($x209 (and (and (and (and (and (and $x145 $x19) $x95) $x52) $x174) $x156) $x284)))
 (let (($x153 (and $x209 $x192)))
 (let (($x98 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x92 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x92)))
 (let (($x88 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x92)))
 (let (($x100 (or false (or false (and (and true (or $x73 $x88)) (or $x90 $x98))))))
 (let (($x291 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x292 (and $x291 $x153)))
 (let (($x170 (= $x292 true)))
 (let (($x219 (= $x170 true)))
 (let (($x176 (= $x219 true)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x85 (concat ?x57 (concat ?x215 (concat ?x266 ?x47)))))
 (let (($x46 (= ?x85 input.dst.llvm-%m2)))
 (let (($x21 (= $x46 true)))
 (let (($x37 (= $x21 true)))
 (let (($x147 (and $x37 $x176)))
 (let (($x245 (and $x147 $x210)))
 (let (($x81 (and $x245 $x210)))
 (let (($x167 (and $x81 $x223)))
 (let (($x251 (and $x167 $x305)))
 (let (($x322 (and $x251 $x128)))
 (let (($x261 (and $x322 $x268)))
 (let (($x314 (and $x261 $x236)))
 (let (($x279 (=> $x314 $x252)))
 (not $x279)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x284 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x156 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x209 (and $x156 $x284)))
 (let (($x141 (=> $x209 true)))
 (let (($x132 (= $x141 true)))
 (let (($x43 (= $x132 true)))
 (let (($x237 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1915X)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 input.ind-%var1915X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1915X)))
 (=> $x313 (= ?x277 ?x285))))))
 ))
 (let (($x294 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x166 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1914X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1914X)))
 (= $x313 $x166))))
 ))
 (let (($x318 (and $x294 $x237)))
 (let (($x127 (= $x318 true)))
 (let (($x198 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1909X)))
 (let ((?x30 (input.spec-%var-m1-1.1.1 input.ind-%var1909X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1909X)))
 (=> $x180 (= ?x30 ?x212))))))
 ))
 (let (($x148 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1908X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1908X)))
 (= $x180 $x213))))
 ))
 (let (($x168 (and $x148 $x198)))
 (let (($x276 (= $x168 true)))
 (let (($x159 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let ((?x199 (bvmul input.ind-%var1903X (_ bv4 32))))
 (let ((?x287 (bvadd ?x199 input.dst.llvm-%m2)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x194))))
 (let ((?x277 (input.spec-%var-m2-1.1.1 input.ind-%var1903X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1903X)))
 (=> $x313 (= ?x277 ?x330)))))))))
 ))
 (let (($x324 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1902X) (bvult input.ind-%var1902X (_ bv100 32)))))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1902X)))
 (= $x313 $x49))))
 ))
 (let (($x232 (and $x324 $x159)))
 (let (($x262 (= $x232 true)))
 (let (($x160 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let ((?x199 (bvmul input.ind-%var1897X (_ bv4 32))))
 (let ((?x70 (bvadd ?x199 input.dst.llvm-%m1)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x7))))
 (let ((?x30 (input.spec-%var-m1-1.1.1 input.ind-%var1897X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1897X)))
 (=> $x180 (= ?x30 ?x191)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1896X) (bvult input.ind-%var1896X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1896X)))
 (= $x180 $x49))))
 ))
 (let (($x306 (and $x231 $x160)))
 (let (($x260 (= $x306 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x51 (concat ?x244 (concat ?x123 ?x38)))))
 (let (($x167 (= ?x223 input.dst.llvm-%m1)))
 (let (($x238 (= $x167 true)))
 (let (($x242 (= $x238 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x300 (concat ?x113 (concat ?x222 ?x147)))))
 (let (($x245 (= ?x210 input.dst.llvm-%m2)))
 (let (($x81 (= $x245 true)))
 (let (($x139 (= $x81 true)))
 (let (($x217 (= $x209 true)))
 (let (($x192 (= $x217 true)))
 (let (($x153 (= $x192 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x131)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x59)))
 (let ((?x235 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x225 $x83)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x295 (and $x87 $x142)))
 (let (($x208 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x42 $x63)))
 (let (($x100 (not $x201)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x90 $x104)))
 (let (($x79 (and (not $x98) $x100)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x73 $x86)))
 (let (($x187 (not $x88)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x57 $x68)))
 (let (($x82 (and (not $x92) $x187)))
 (let (($x173 (and (and (and (and (and (and $x82 $x79) $x185) $x208) $x295) $x272) $x250)))
 (let (($x151 (and $x173 $x19)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x114 (or false (or false (and (and true (or $x266 $x47)) (or $x46 $x21))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x60 (and $x20 $x151)))
 (let (($x195 (= $x60 true)))
 (let (($x247 (= $x195 true)))
 (let (($x154 (= $x247 true)))
 (let (($x292 (and $x154 $x153)))
 (let (($x170 (and $x292 $x153)))
 (let (($x74 (and $x170 $x139)))
 (let (($x186 (and $x74 $x242)))
 (let (($x309 (and $x186 $x260)))
 (let (($x35 (and $x309 $x262)))
 (let (($x163 (and $x35 $x276)))
 (let (($x281 (and $x163 $x127)))
 (let (($x116 (=> $x281 $x43)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x284 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x156 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x209 (and $x156 $x284)))
 (let (($x141 (=> $x209 true)))
 (let (($x132 (= $x141 true)))
 (let (($x43 (= $x132 true)))
 (let (($x237 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1915X)))
 (let ((?x277 (input.spec-%var-m2-1.1.1 input.ind-%var1915X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1915X)))
 (=> $x313 (= ?x277 ?x285))))))
 ))
 (let (($x294 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x166 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1914X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1914X)))
 (= $x313 $x166))))
 ))
 (let (($x318 (and $x294 $x237)))
 (let (($x127 (= $x318 true)))
 (let (($x198 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1909X)))
 (let ((?x30 (input.spec-%var-m1-1.1.1 input.ind-%var1909X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1909X)))
 (=> $x180 (= ?x30 ?x212))))))
 ))
 (let (($x148 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x213 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1908X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1908X)))
 (= $x180 $x213))))
 ))
 (let (($x168 (and $x148 $x198)))
 (let (($x276 (= $x168 true)))
 (let (($x159 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let ((?x199 (bvmul input.ind-%var1903X (_ bv4 32))))
 (let ((?x287 (bvadd ?x199 input.dst.llvm-%m2)))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv1 32))) (select input.dst.llvm-mem ?x287))))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x287 (_ bv2 32))) ?x194))))
 (let ((?x277 (input.spec-%var-m2-1.1.1 input.ind-%var1903X)))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1903X)))
 (=> $x313 (= ?x277 ?x330)))))))))
 ))
 (let (($x324 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1902X) (bvult input.ind-%var1902X (_ bv100 32)))))
 (let (($x313 (input.spec-%var-m2-1.0.1 input.ind-%var1902X)))
 (= $x313 $x49))))
 ))
 (let (($x232 (and $x324 $x159)))
 (let (($x262 (= $x232 true)))
 (let (($x160 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let ((?x199 (bvmul input.ind-%var1897X (_ bv4 32))))
 (let ((?x70 (bvadd ?x199 input.dst.llvm-%m1)))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv1 32))) (select input.dst.llvm-mem ?x70))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x70 (_ bv2 32))) ?x7))))
 (let ((?x30 (input.spec-%var-m1-1.1.1 input.ind-%var1897X)))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1897X)))
 (=> $x180 (= ?x30 ?x191)))))))))
 ))
 (let (($x231 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x49 (and (bvule (_ bv0 32) input.ind-%var1896X) (bvult input.ind-%var1896X (_ bv100 32)))))
 (let (($x180 (input.spec-%var-m1-1.0.1 input.ind-%var1896X)))
 (= $x180 $x49))))
 ))
 (let (($x306 (and $x231 $x160)))
 (let (($x260 (= $x306 true)))
 (let ((?x38 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x244 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x51 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x223 (concat ?x51 (concat ?x244 (concat ?x123 ?x38)))))
 (let (($x167 (= ?x223 input.dst.llvm-%m1)))
 (let (($x238 (= $x167 true)))
 (let (($x242 (= $x238 true)))
 (let ((?x147 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x210 (concat ?x300 (concat ?x113 (concat ?x222 ?x147)))))
 (let (($x245 (= ?x210 input.dst.llvm-%m2)))
 (let (($x81 (= $x245 true)))
 (let (($x139 (= $x81 true)))
 (let (($x217 (= $x209 true)))
 (let (($x192 (= $x217 true)))
 (let (($x153 (= $x192 true)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x131)))
 (let ((?x59 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x250 (= (_ bv0 32) ?x59)))
 (let ((?x235 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x145)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x142 (and $x225 $x83)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x295 (and $x87 $x142)))
 (let (($x208 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x42 $x63)))
 (let (($x100 (not $x201)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x98 (and $x90 $x104)))
 (let (($x79 (and (not $x98) $x100)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x73 $x86)))
 (let (($x187 (not $x88)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x92 (and $x57 $x68)))
 (let (($x82 (and (not $x92) $x187)))
 (let (($x173 (and (and (and (and (and (and $x82 $x79) $x185) $x208) $x295) $x272) $x250)))
 (let (($x151 (and $x173 $x19)))
 (let (($x21 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x46 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x47 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x13)))
 (let (($x114 (or false (or false (and (and true (or $x266 $x47)) (or $x46 $x21))))))
 (let (($x20 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x114)))
 (let (($x60 (and $x20 $x151)))
 (let (($x195 (= $x60 true)))
 (let (($x247 (= $x195 true)))
 (let (($x154 (= $x247 true)))
 (let (($x292 (and $x154 $x153)))
 (let (($x170 (and $x292 $x153)))
 (let (($x74 (and $x170 $x139)))
 (let (($x186 (and $x74 $x242)))
 (let (($x309 (and $x186 $x260)))
 (let (($x35 (and $x309 $x262)))
 (let (($x163 (and $x35 $x276)))
 (let (($x281 (and $x163 $x127)))
 (let (($x116 (=> $x281 $x43)))
 (not $x116)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x107 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x217 (and $x107 $x209)))
 (let (($x246 (=> $x217 true)))
 (let (($x261 (= $x246 true)))
 (let (($x323 (= $x261 true)))
 (let (($x197 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x62 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1939X)))
 (let ((?x319 (input.spec-%var-m2-1.1.1 input.ind-%var1939X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1939X)))
 (=> $x138 (= ?x319 ?x62))))))
 ))
 (let (($x279 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1938X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1938X)))
 (= $x138 $x240))))
 ))
 (let (($x110 (and $x279 $x197)))
 (let (($x229 (= $x110 true)))
 (let (($x303 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1933X)))
 (let ((?x186 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x139 (= ?x186 ?x6))))))
 ))
 (let (($x80 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x157 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1932X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x139 $x157))))
 ))
 (let (($x150 (and $x80 $x303)))
 (let (($x241 (= $x150 true)))
 (let (($x65 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1927X (_ bv4 32))))
 (let ((?x318 (bvadd ?x7 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x132))))
 (let ((?x319 (input.spec-%var-m2-1.1.1 input.ind-%var1927X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1927X)))
 (=> $x138 (= ?x319 ?x176)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1926X) (bvult input.ind-%var1926X (_ bv100 32)))))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1926X)))
 (= $x138 $x255))))
 ))
 (let (($x286 (and $x232 $x65)))
 (let (($x218 (= $x286 true)))
 (let (($x5 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1921X (_ bv4 32))))
 (let ((?x128 (bvadd ?x7 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x160))))
 (let ((?x186 (input.spec-%var-m1-1.1.1 input.ind-%var1921X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1921X)))
 (=> $x139 (= ?x186 ?x324)))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1920X) (bvult input.ind-%var1920X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1920X)))
 (= $x139 $x255))))
 ))
 (let (($x264 (and $x223 $x5)))
 (let (($x122 (= $x264 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x222 (= (_ bv0 2) ?x165)))
 (let (($x147 (= $x222 true)))
 (let (($x224 (= $x147 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x300 (= (_ bv0 2) ?x39)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x192 (= $x217 true)))
 (let (($x153 (= $x192 true)))
 (let (($x292 (= $x153 true)))
 (let ((?x272 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x52 (= (_ bv0 32) ?x272)))
 (let ((?x206 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x235 (= (_ bv0 32) ?x206)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x172 $x181)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x208 $x145)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x42 $x63)))
 (let (($x100 (not $x201)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x104 $x98)))
 (let (($x105 (and (not $x291) $x100)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x73 $x86)))
 (let (($x187 (not $x88)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x96 $x23)))
 (let (($x90 (and (not $x55) $x187)))
 (let (($x151 (and (and (and (and (and (and $x90 $x105) $x185) $x11) $x83) $x295) $x235)))
 (let (($x60 (and $x151 $x52)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x57 (or false (or false (and (and true (or $x56 $x256)) (or $x37 $x84))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x195 (and $x92 $x60)))
 (let (($x247 (= $x195 true)))
 (let (($x154 (= $x247 true)))
 (let (($x174 (= $x154 true)))
 (let (($x170 (and $x174 $x292)))
 (let (($x113 (and $x170 $x18)))
 (let (($x164 (and $x113 $x224)))
 (let (($x248 (and $x164 $x122)))
 (let (($x125 (and $x248 $x218)))
 (let (($x236 (and $x125 $x241)))
 (let (($x226 (and $x236 $x229)))
 (let (($x99 (=> $x226 $x323)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x107 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x217 (and $x107 $x209)))
 (let (($x246 (=> $x217 true)))
 (let (($x261 (= $x246 true)))
 (let (($x323 (= $x261 true)))
 (let (($x197 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x62 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1939X)))
 (let ((?x319 (input.spec-%var-m2-1.1.1 input.ind-%var1939X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1939X)))
 (=> $x138 (= ?x319 ?x62))))))
 ))
 (let (($x279 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1938X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1938X)))
 (= $x138 $x240))))
 ))
 (let (($x110 (and $x279 $x197)))
 (let (($x229 (= $x110 true)))
 (let (($x303 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1933X)))
 (let ((?x186 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x139 (= ?x186 ?x6))))))
 ))
 (let (($x80 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x157 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1932X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x139 $x157))))
 ))
 (let (($x150 (and $x80 $x303)))
 (let (($x241 (= $x150 true)))
 (let (($x65 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1927X (_ bv4 32))))
 (let ((?x318 (bvadd ?x7 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv1 32))) (select input.dst.llvm-mem ?x318))))
 (let ((?x176 (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x318 (_ bv2 32))) ?x132))))
 (let ((?x319 (input.spec-%var-m2-1.1.1 input.ind-%var1927X)))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1927X)))
 (=> $x138 (= ?x319 ?x176)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1926X) (bvult input.ind-%var1926X (_ bv100 32)))))
 (let (($x138 (input.spec-%var-m2-1.0.1 input.ind-%var1926X)))
 (= $x138 $x255))))
 ))
 (let (($x286 (and $x232 $x65)))
 (let (($x218 (= $x286 true)))
 (let (($x5 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x7 (bvmul input.ind-%var1921X (_ bv4 32))))
 (let ((?x128 (bvadd ?x7 input.dst.llvm-%m1)))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv1 32))) (select input.dst.llvm-mem ?x128))))
 (let ((?x324 (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x128 (_ bv2 32))) ?x160))))
 (let ((?x186 (input.spec-%var-m1-1.1.1 input.ind-%var1921X)))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1921X)))
 (=> $x139 (= ?x186 ?x324)))))))))
 ))
 (let (($x223 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x255 (and (bvule (_ bv0 32) input.ind-%var1920X) (bvult input.ind-%var1920X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m1-1.0.1 input.ind-%var1920X)))
 (= $x139 $x255))))
 ))
 (let (($x264 (and $x223 $x5)))
 (let (($x122 (= $x264 true)))
 (let ((?x165 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x222 (= (_ bv0 2) ?x165)))
 (let (($x147 (= $x222 true)))
 (let (($x224 (= $x147 true)))
 (let ((?x39 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x300 (= (_ bv0 2) ?x39)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x192 (= $x217 true)))
 (let (($x153 (= $x192 true)))
 (let (($x292 (= $x153 true)))
 (let ((?x272 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x52 (= (_ bv0 32) ?x272)))
 (let ((?x206 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x235 (= (_ bv0 32) ?x206)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x295 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x172 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (and $x172 $x181)))
 (let (($x208 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x208 $x145)))
 (let (($x11 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x201 (and $x42 $x63)))
 (let (($x100 (not $x201)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x104 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x291 (and $x104 $x98)))
 (let (($x105 (and (not $x291) $x100)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (and $x73 $x86)))
 (let (($x187 (not $x88)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (and $x96 $x23)))
 (let (($x90 (and (not $x55) $x187)))
 (let (($x151 (and (and (and (and (and (and $x90 $x105) $x185) $x11) $x83) $x295) $x235)))
 (let (($x60 (and $x151 $x52)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x47 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x47)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x47)))
 (let (($x57 (or false (or false (and (and true (or $x56 $x256)) (or $x37 $x84))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x57)))
 (let (($x195 (and $x92 $x60)))
 (let (($x247 (= $x195 true)))
 (let (($x154 (= $x247 true)))
 (let (($x174 (= $x154 true)))
 (let (($x170 (and $x174 $x292)))
 (let (($x113 (and $x170 $x18)))
 (let (($x164 (and $x113 $x224)))
 (let (($x248 (and $x164 $x122)))
 (let (($x125 (and $x248 $x218)))
 (let (($x236 (and $x125 $x241)))
 (let (($x226 (and $x236 $x229)))
 (let (($x99 (=> $x226 $x323)))
 (not $x99))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x233 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x273 (bvneg ?x233)))
 (let (($x249 (= ?x273 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x53 (= $x249 true)))
 (let (($x301 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x316 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1969X)))
 (let ((?x309 (input.spec-%var-m2-1.1.1 input.ind-%var1969X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1969X)))
 (=> $x223 (= ?x309 ?x316))))))
 ))
 (let (($x69 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1968X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1968X)))
 (= $x223 $x314))))
 ))
 (let (($x136 (and $x69 $x301)))
 (let (($x258 (= $x136 true)))
 (let (($x267 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1963X)))
 (let ((?x72 (input.spec-%var-m1-1.1.1 input.ind-%var1963X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1963X)))
 (=> $x330 (= ?x72 ?x323))))))
 ))
 (let (($x200 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1962X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1962X)))
 (= $x330 $x329))))
 ))
 (let (($x307 (and $x200 $x267)))
 (let (($x234 (= $x307 true)))
 (let (($x325 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1957X (_ bv4 32))))
 (let ((?x210 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x210))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv2 32))) ?x49)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv3 32))) ?x70)))
 (let ((?x72 (input.spec-%var-m1-1.1.1 input.ind-%var1957X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1957X)))
 (=> $x330 (= ?x72 ?x30))))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X (_ bv100 32)))))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1956X)))
 (= $x330 $x306))))
 ))
 (let (($x238 (and $x163 $x325)))
 (let (($x91 (= $x238 true)))
 (let (($x26 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1951X (_ bv4 32))))
 (let ((?x210 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x210))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv2 32))) ?x49)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv3 32))) ?x70)))
 (let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1951X)))
 (let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1951X)))
 (=> $x329 (= ?x323 ?x30))))))))))
 ))
 (let (($x229 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1950X) (bvult input.ind-%var1950X (_ bv100 32)))))
 (let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1950X)))
 (= $x329 $x306))))
 ))
 (let (($x179 (and $x229 $x26)))
 (let (($x262 (= $x179 true)))
 (let (($x251 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1945X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x65)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x125)))
 (let ((?x309 (input.spec-%var-m2-1.1.1 input.ind-%var1945X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1945X)))
 (=> $x223 (= ?x309 ?x80))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1944X) (bvult input.ind-%var1944X (_ bv100 32)))))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1944X)))
 (= $x223 $x306))))
 ))
 (let (($x303 (and $x280 $x251)))
 (let (($x150 (= $x303 true)))
 (let (($x224 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x46 (and $x228 $x85)))
 (let (($x164 (and $x46 $x224)))
 (let (($x81 (= $x164 true)))
 (let (($x139 (= $x81 true)))
 (let (($x38 (= $x139 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x209 (= (_ bv0 32) ?x284)))
 (let ((?x107 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x117 (= (_ bv0 32) ?x107)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x60 $x154)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x52 $x174)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x145 $x83)))
 (let (($x142 (not $x131)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x87 $x225)))
 (let (($x19 (and (not $x181) $x142)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x250 $x95)))
 (let (($x173 (not $x11)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x92 $x96)))
 (let (($x172 (and (not $x185) $x173)))
 (let (($x219 (and (and (and (and (and (and $x172 $x19) $x235) $x272) $x134) $x156) $x117)))
 (let (($x39 (and $x219 $x209)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x105 (or false (or false (and (and true (or $x88 $x187)) (or $x79 $x42))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x300 (and $x93 $x39)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x102 (= $x46 true)))
 (let (($x37 (= $x102 true)))
 (let (($x21 (= $x37 true)))
 (let ((?x13 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x13)))
 (let (($x221 (= $x68 true)))
 (let (($x215 (= $x221 true)))
 (let (($x84 (and $x215 $x21)))
 (let (($x165 (and $x84 $x113)))
 (let (($x51 (and $x165 $x38)))
 (let (($x241 (and $x51 $x150)))
 (let (($x213 (and $x241 $x262)))
 (let (($x28 (and $x213 $x91)))
 (let (($x25 (and $x28 $x234)))
 (let (($x202 (and $x25 $x258)))
 (let (($x203 (=> $x202 $x53)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x233 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x273 (bvneg ?x233)))
 (let (($x249 (= ?x273 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x53 (= $x249 true)))
 (let (($x301 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x316 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1969X)))
 (let ((?x309 (input.spec-%var-m2-1.1.1 input.ind-%var1969X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1969X)))
 (=> $x223 (= ?x309 ?x316))))))
 ))
 (let (($x69 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x314 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1968X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1968X)))
 (= $x223 $x314))))
 ))
 (let (($x136 (and $x69 $x301)))
 (let (($x258 (= $x136 true)))
 (let (($x267 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1963X)))
 (let ((?x72 (input.spec-%var-m1-1.1.1 input.ind-%var1963X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1963X)))
 (=> $x330 (= ?x72 ?x323))))))
 ))
 (let (($x200 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1962X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1962X)))
 (= $x330 $x329))))
 ))
 (let (($x307 (and $x200 $x267)))
 (let (($x234 (= $x307 true)))
 (let (($x325 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1957X (_ bv4 32))))
 (let ((?x210 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x210))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv2 32))) ?x49)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv3 32))) ?x70)))
 (let ((?x72 (input.spec-%var-m1-1.1.1 input.ind-%var1957X)))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1957X)))
 (=> $x330 (= ?x72 ?x30))))))))))
 ))
 (let (($x163 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X (_ bv100 32)))))
 (let (($x330 (input.spec-%var-m1-1.0.1 input.ind-%var1956X)))
 (= $x330 $x306))))
 ))
 (let (($x238 (and $x163 $x325)))
 (let (($x91 (= $x238 true)))
 (let (($x26 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1951X (_ bv4 32))))
 (let ((?x210 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x49 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x210))))
 (let ((?x70 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv2 32))) ?x49)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x210 (_ bv3 32))) ?x70)))
 (let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1951X)))
 (let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1951X)))
 (=> $x329 (= ?x323 ?x30))))))))))
 ))
 (let (($x229 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1950X) (bvult input.ind-%var1950X (_ bv100 32)))))
 (let (($x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1950X)))
 (= $x329 $x306))))
 ))
 (let (($x179 (and $x229 $x26)))
 (let (($x262 (= $x179 true)))
 (let (($x251 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var1945X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m2)))
 (let ((?x65 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x65)))
 (let ((?x80 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x125)))
 (let ((?x309 (input.spec-%var-m2-1.1.1 input.ind-%var1945X)))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1945X)))
 (=> $x223 (= ?x309 ?x80))))))))))
 ))
 (let (($x280 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x306 (and (bvule (_ bv0 32) input.ind-%var1944X) (bvult input.ind-%var1944X (_ bv100 32)))))
 (let (($x223 (input.spec-%var-m2-1.0.1 input.ind-%var1944X)))
 (= $x223 $x306))))
 ))
 (let (($x303 (and $x280 $x251)))
 (let (($x150 (= $x303 true)))
 (let (($x224 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x85 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x228 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x46 (and $x228 $x85)))
 (let (($x164 (and $x46 $x224)))
 (let (($x81 (= $x164 true)))
 (let (($x139 (= $x81 true)))
 (let (($x38 (= $x139 true)))
 (let ((?x284 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x209 (= (_ bv0 32) ?x284)))
 (let ((?x107 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x117 (= (_ bv0 32) ?x107)))
 (let ((?x144 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x156 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x144)))
 (let ((?x247 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x154 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x247)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x174 (and $x60 $x154)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x134 (and $x52 $x174)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x145 $x83)))
 (let (($x142 (not $x131)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (and $x87 $x225)))
 (let (($x19 (and (not $x181) $x142)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x250 $x95)))
 (let (($x173 (not $x11)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x92 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x92 $x96)))
 (let (($x172 (and (not $x185) $x173)))
 (let (($x219 (and (and (and (and (and (and $x172 $x19) $x235) $x272) $x134) $x156) $x117)))
 (let (($x39 (and $x219 $x209)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x187 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x105 (or false (or false (and (and true (or $x88 $x187)) (or $x79 $x42))))))
 (let (($x93 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x300 (and $x93 $x39)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x102 (= $x46 true)))
 (let (($x37 (= $x102 true)))
 (let (($x21 (= $x37 true)))
 (let ((?x13 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x13)))
 (let (($x221 (= $x68 true)))
 (let (($x215 (= $x221 true)))
 (let (($x84 (and $x215 $x21)))
 (let (($x165 (and $x84 $x113)))
 (let (($x51 (and $x165 $x38)))
 (let (($x241 (and $x51 $x150)))
 (let (($x213 (and $x241 $x262)))
 (let (($x28 (and $x213 $x91)))
 (let (($x25 (and $x28 $x234)))
 (let (($x202 (and $x25 $x258)))
 (let (($x203 (=> $x202 $x53)))
 (not $x203)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x162 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x327 (bvneg ?x162)))
 (let (($x17 (= ?x327 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= $x17 true)))
 (let (($x155 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1999X)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 input.ind-%var1999X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1999X)))
 (=> $x183 (= ?x299 ?x127))))))
 ))
 (let (($x313 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1998X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1998X)))
 (= $x183 $x193))))
 ))
 (let (($x198 (and $x313 $x155)))
 (let (($x64 (= $x198 true)))
 (let (($x109 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1993X)))
 (let ((?x236 (input.spec-%var-m1-1.1.1 input.ind-%var1993X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1993X)))
 (=> $x116 (= ?x236 ?x126))))))
 ))
 (let (($x297 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1992X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1992X)))
 (= $x116 $x91))))
 ))
 (let (($x108 (and $x297 $x109)))
 (let (($x237 (= $x108 true)))
 (let (($x168 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1987X (_ bv4 32))))
 (let ((?x101 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x101))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv2 32))) ?x186)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv3 32))) ?x99)))
 (let ((?x236 (input.spec-%var-m1-1.1.1 input.ind-%var1987X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1987X)))
 (=> $x116 (= ?x236 ?x317))))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1986X)))
 (= $x116 $x157))))
 ))
 (let (($x133 (and $x129 $x168)))
 (let (($x245 (= $x133 true)))
 (let (($x123 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1981X (_ bv4 32))))
 (let ((?x101 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x101))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv2 32))) ?x186)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv3 32))) ?x99)))
 (let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1981X)))
 (let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1981X)))
 (=> $x91 (= ?x126 ?x317))))))))))
 ))
 (let (($x307 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1980X) (bvult input.ind-%var1980X (_ bv100 32)))))
 (let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1980X)))
 (= $x91 $x157))))
 ))
 (let (($x180 (and $x307 $x123)))
 (let (($x7 (= $x180 true)))
 (let (($x163 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1975X (_ bv4 32))))
 (let ((?x182 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x30)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x26)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 input.ind-%var1975X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1975X)))
 (=> $x183 (= ?x299 ?x213))))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1974X) (bvult input.ind-%var1974X (_ bv100 32)))))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1974X)))
 (= $x183 $x157))))
 ))
 (let (($x72 (and $x319 $x163)))
 (let (($x27 (= $x72 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x256 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x85 (and $x56 $x256)))
 (let (($x81 (and $x85 $x164)))
 (let (($x139 (= $x81 true)))
 (let (($x38 (= $x139 true)))
 (let (($x51 (= $x38 true)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x170 (= (_ bv0 32) ?x156)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x144 (= (_ bv0 32) ?x292)))
 (let ((?x174 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x153 $x195)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x272 $x247)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x145 $x83)))
 (let (($x142 (not $x131)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x225 $x181)))
 (let (($x217 (and (not $x295) $x142)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x250 $x95)))
 (let (($x173 (not $x11)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x55 $x59)))
 (let (($x87 (and (not $x208) $x173)))
 (let (($x39 (and (and (and (and (and (and $x87 $x217) $x235) $x151) $x154) $x134) $x144)))
 (let (($x300 (and $x39 $x170)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x92 (or false (or false (and (and true (or $x90 $x104)) (or $x63 $x201))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x22 (and $x185 $x300)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x165 (= $x113 true)))
 (let (($x46 (= $x85 true)))
 (let (($x102 (= $x46 true)))
 (let (($x37 (= $x102 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x221 (= (_ bv0 2) ?x68)))
 (let (($x304 (= $x221 true)))
 (let (($x13 (= $x304 true)))
 (let (($x21 (and $x13 $x37)))
 (let (($x222 (and $x21 $x165)))
 (let (($x149 (and $x222 $x51)))
 (let (($x268 (and $x149 $x27)))
 (let (($x264 (and $x268 $x7)))
 (let (($x244 (and $x264 $x245)))
 (let (($x67 (and $x244 $x237)))
 (let (($x257 (and $x67 $x64)))
 (let (($x205 (=> $x257 $x214)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x162 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x327 (bvneg ?x162)))
 (let (($x17 (= ?x327 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x214 (= $x17 true)))
 (let (($x155 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1999X)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 input.ind-%var1999X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1999X)))
 (=> $x183 (= ?x299 ?x127))))))
 ))
 (let (($x313 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x193 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1998X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1998X)))
 (= $x183 $x193))))
 ))
 (let (($x198 (and $x313 $x155)))
 (let (($x64 (= $x198 true)))
 (let (($x109 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1993X)))
 (let ((?x236 (input.spec-%var-m1-1.1.1 input.ind-%var1993X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1993X)))
 (=> $x116 (= ?x236 ?x126))))))
 ))
 (let (($x297 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1992X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1992X)))
 (= $x116 $x91))))
 ))
 (let (($x108 (and $x297 $x109)))
 (let (($x237 (= $x108 true)))
 (let (($x168 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1987X (_ bv4 32))))
 (let ((?x101 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x101))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv2 32))) ?x186)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv3 32))) ?x99)))
 (let ((?x236 (input.spec-%var-m1-1.1.1 input.ind-%var1987X)))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1987X)))
 (=> $x116 (= ?x236 ?x317))))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m1-1.0.1 input.ind-%var1986X)))
 (= $x116 $x157))))
 ))
 (let (($x133 (and $x129 $x168)))
 (let (($x245 (= $x133 true)))
 (let (($x123 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1981X (_ bv4 32))))
 (let ((?x101 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x186 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x101))))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv2 32))) ?x186)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x101 (_ bv3 32))) ?x99)))
 (let ((?x126 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1981X)))
 (let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1981X)))
 (=> $x91 (= ?x126 ?x317))))))))))
 ))
 (let (($x307 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1980X) (bvult input.ind-%var1980X (_ bv100 32)))))
 (let (($x91 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1980X)))
 (= $x91 $x157))))
 ))
 (let (($x180 (and $x307 $x123)))
 (let (($x7 (= $x180 true)))
 (let (($x163 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var1975X (_ bv4 32))))
 (let ((?x182 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x30 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x26 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x30)))
 (let ((?x213 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x26)))
 (let ((?x299 (input.spec-%var-m2-1.1.1 input.ind-%var1975X)))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1975X)))
 (=> $x183 (= ?x299 ?x213))))))))))
 ))
 (let (($x319 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x157 (and (bvule (_ bv0 32) input.ind-%var1974X) (bvult input.ind-%var1974X (_ bv100 32)))))
 (let (($x183 (input.spec-%var-m2-1.0.1 input.ind-%var1974X)))
 (= $x183 $x157))))
 ))
 (let (($x72 (and $x319 $x163)))
 (let (($x27 (= $x72 true)))
 (let (($x164 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x256 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x85 (and $x56 $x256)))
 (let (($x81 (and $x85 $x164)))
 (let (($x139 (= $x81 true)))
 (let (($x38 (= $x139 true)))
 (let (($x51 (= $x38 true)))
 (let ((?x156 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x170 (= (_ bv0 32) ?x156)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x144 (= (_ bv0 32) ?x292)))
 (let ((?x174 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x134 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x174)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x195 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x247 (and $x153 $x195)))
 (let (($x272 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x272 $x247)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x131 (and $x145 $x83)))
 (let (($x142 (not $x131)))
 (let (($x181 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x225 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x225 $x181)))
 (let (($x217 (and (not $x295) $x142)))
 (let (($x95 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x250 $x95)))
 (let (($x173 (not $x11)))
 (let (($x59 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x55 $x59)))
 (let (($x87 (and (not $x208) $x173)))
 (let (($x39 (and (and (and (and (and (and $x87 $x217) $x235) $x151) $x154) $x134) $x144)))
 (let (($x300 (and $x39 $x170)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x187)))
 (let (($x92 (or false (or false (and (and true (or $x90 $x104)) (or $x63 $x201))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x92)))
 (let (($x22 (and $x185 $x300)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x165 (= $x113 true)))
 (let (($x46 (= $x85 true)))
 (let (($x102 (= $x46 true)))
 (let (($x37 (= $x102 true)))
 (let ((?x68 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x221 (= (_ bv0 2) ?x68)))
 (let (($x304 (= $x221 true)))
 (let (($x13 (= $x304 true)))
 (let (($x21 (and $x13 $x37)))
 (let (($x222 (and $x21 $x165)))
 (let (($x149 (and $x222 $x51)))
 (let (($x268 (and $x149 $x27)))
 (let (($x264 (and $x268 $x7)))
 (let (($x244 (and $x264 $x245)))
 (let (($x67 (and $x244 $x237)))
 (let (($x257 (and $x67 $x64)))
 (let (($x205 (=> $x257 $x214)))
 (not $x205)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x292 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x144 (and $x174 $x292)))
 (let (($x328 (and $x144 $x113)))
 (let (($x14 (=> $x328 true)))
 (let (($x76 (= $x14 true)))
 (let (($x294 (= $x76 true)))
 (let (($x75 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2029X)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 input.ind-%var2029X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2029X)))
 (=> $x132 (= ?x70 ?x41))))))
 ))
 (let (($x5 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x216 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2028X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2028X)))
 (= $x132 $x216))))
 ))
 (let (($x226 (and $x5 $x75)))
 (let (($x274 (= $x226 true)))
 (let (($x77 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2023X)))
 (let ((?x325 (input.spec-%var-m1-1.1.1 input.ind-%var2023X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2023X)))
 (=> $x322 (= ?x325 ?x35))))))
 ))
 (let (($x31 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2022X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2022X)))
 (= $x322 $x245))))
 ))
 (let (($x130 (and $x31 $x77)))
 (let (($x61 (= $x130 true)))
 (let (($x261 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2017X (_ bv4 32))))
 (let ((?x84 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x84))))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv2 32))) ?x306)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv3 32))) ?x69)))
 (let ((?x325 (input.spec-%var-m1-1.1.1 input.ind-%var2017X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2017X)))
 (=> $x322 (= ?x325 ?x253))))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2016X) (bvult input.ind-%var2016X (_ bv100 32)))))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2016X)))
 (= $x322 $x179))))
 ))
 (let (($x122 (and $x323 $x261)))
 (let (($x10 (= $x122 true)))
 (let (($x223 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2011X (_ bv4 32))))
 (let ((?x84 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x84))))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv2 32))) ?x306)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv3 32))) ?x69)))
 (let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2011X)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2011X)))
 (=> $x245 (= ?x35 ?x253))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2010X) (bvult input.ind-%var2010X (_ bv100 32)))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2010X)))
 (= $x245 $x179))))
 ))
 (let (($x260 (and $x108 $x223)))
 (let (($x309 (= $x260 true)))
 (let (($x129 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2005X (_ bv4 32))))
 (let ((?x276 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x276))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv2 32))) ?x317)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv3 32))) ?x123)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 input.ind-%var2005X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2005X)))
 (=> $x132 (= ?x70 ?x264))))))))))
 ))
 (let (($x329 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2004X) (bvult input.ind-%var2004X (_ bv100 32)))))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2004X)))
 (= $x132 $x179))))
 ))
 (let (($x236 (and $x329 $x129)))
 (let (($x326 (= $x236 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x38 (= (_ bv0 2) ?x139)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x165 (= $x113 true)))
 (let (($x222 (= $x165 true)))
 (let (($x147 (= $x222 true)))
 (let (($x39 (= $x144 true)))
 (let (($x156 (= $x39 true)))
 (let (($x170 (= $x156 true)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x217)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x131)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x173 $x181)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x11 $x295)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x105 $x93)))
 (let (($x185 (not $x92)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x42 $x201)))
 (let (($x59 (and (not $x100) $x185)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x73 $x104)))
 (let (($x79 (not $x98)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x287 $x68)))
 (let (($x63 (and (not $x90) $x79)))
 (let (($x219 (and (and (and (and (and (and $x63 $x59) $x172) $x95) $x19) $x83) $x142)))
 (let (($x272 (and $x219 $x107)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x96 (or false (or false (and (and true (or $x228 $x256)) (or $x21 $x114))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x153 (and $x187 $x272)))
 (let (($x52 (= $x153 true)))
 (let (($x60 (= $x52 true)))
 (let (($x195 (= $x60 true)))
 (let (($x300 (and $x195 $x170)))
 (let (($x224 (and $x300 $x147)))
 (let (($x164 (and $x224 $x147)))
 (let (($x288 (and $x164 $x149)))
 (let (($x166 (and $x288 $x326)))
 (let (($x6 (and $x166 $x309)))
 (let (($x138 (and $x6 $x10)))
 (let (($x278 (and $x138 $x61)))
 (let (($x305 (and $x278 $x274)))
 (let (($x140 (=> $x305 $x294)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x113 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x292 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x174 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x144 (and $x174 $x292)))
 (let (($x328 (and $x144 $x113)))
 (let (($x14 (=> $x328 true)))
 (let (($x76 (= $x14 true)))
 (let (($x294 (= $x76 true)))
 (let (($x75 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x41 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2029X)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 input.ind-%var2029X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2029X)))
 (=> $x132 (= ?x70 ?x41))))))
 ))
 (let (($x5 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x216 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2028X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2028X)))
 (= $x132 $x216))))
 ))
 (let (($x226 (and $x5 $x75)))
 (let (($x274 (= $x226 true)))
 (let (($x77 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2023X)))
 (let ((?x325 (input.spec-%var-m1-1.1.1 input.ind-%var2023X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2023X)))
 (=> $x322 (= ?x325 ?x35))))))
 ))
 (let (($x31 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2022X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2022X)))
 (= $x322 $x245))))
 ))
 (let (($x130 (and $x31 $x77)))
 (let (($x61 (= $x130 true)))
 (let (($x261 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2017X (_ bv4 32))))
 (let ((?x84 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x84))))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv2 32))) ?x306)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv3 32))) ?x69)))
 (let ((?x325 (input.spec-%var-m1-1.1.1 input.ind-%var2017X)))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2017X)))
 (=> $x322 (= ?x325 ?x253))))))))))
 ))
 (let (($x323 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2016X) (bvult input.ind-%var2016X (_ bv100 32)))))
 (let (($x322 (input.spec-%var-m1-1.0.1 input.ind-%var2016X)))
 (= $x322 $x179))))
 ))
 (let (($x122 (and $x323 $x261)))
 (let (($x10 (= $x122 true)))
 (let (($x223 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2011X (_ bv4 32))))
 (let ((?x84 (bvadd ?x212 input.dst.llvm-%m1)))
 (let ((?x306 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x84))))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv2 32))) ?x306)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x84 (_ bv3 32))) ?x69)))
 (let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2011X)))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2011X)))
 (=> $x245 (= ?x35 ?x253))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2010X) (bvult input.ind-%var2010X (_ bv100 32)))))
 (let (($x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2010X)))
 (= $x245 $x179))))
 ))
 (let (($x260 (and $x108 $x223)))
 (let (($x309 (= $x260 true)))
 (let (($x129 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let ((?x212 (bvmul input.ind-%var2005X (_ bv4 32))))
 (let ((?x276 (bvadd ?x212 input.dst.llvm-%m2)))
 (let ((?x317 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x276))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv2 32))) ?x317)))
 (let ((?x264 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x276 (_ bv3 32))) ?x123)))
 (let ((?x70 (input.spec-%var-m2-1.1.1 input.ind-%var2005X)))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2005X)))
 (=> $x132 (= ?x70 ?x264))))))))))
 ))
 (let (($x329 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x179 (and (bvule (_ bv0 32) input.ind-%var2004X) (bvult input.ind-%var2004X (_ bv100 32)))))
 (let (($x132 (input.spec-%var-m2-1.0.1 input.ind-%var2004X)))
 (= $x132 $x179))))
 ))
 (let (($x236 (and $x329 $x129)))
 (let (($x326 (= $x236 true)))
 (let ((?x139 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x38 (= (_ bv0 2) ?x139)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x165 (= $x113 true)))
 (let (($x222 (= $x165 true)))
 (let (($x147 (= $x222 true)))
 (let (($x39 (= $x144 true)))
 (let (($x156 (= $x39 true)))
 (let (($x170 (= $x156 true)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x107 (= (_ bv0 32) ?x217)))
 (let ((?x131 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x142 (= (_ bv0 32) ?x131)))
 (let ((?x145 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x145)))
 (let ((?x225 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x181 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x225)))
 (let (($x173 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (and $x173 $x181)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x11 $x295)))
 (let (($x95 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x172 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x105 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x92 (and $x105 $x93)))
 (let (($x185 (not $x92)))
 (let (($x201 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x42 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x42 $x201)))
 (let (($x59 (and (not $x100) $x185)))
 (let (($x104 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x73 $x104)))
 (let (($x79 (not $x98)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x287 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x287 $x68)))
 (let (($x63 (and (not $x90) $x79)))
 (let (($x219 (and (and (and (and (and (and $x63 $x59) $x172) $x95) $x19) $x83) $x142)))
 (let (($x272 (and $x219 $x107)))
 (let (($x114 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x256 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x56)))
 (let (($x96 (or false (or false (and (and true (or $x228 $x256)) (or $x21 $x114))))))
 (let (($x187 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x96)))
 (let (($x153 (and $x187 $x272)))
 (let (($x52 (= $x153 true)))
 (let (($x60 (= $x52 true)))
 (let (($x195 (= $x60 true)))
 (let (($x300 (and $x195 $x170)))
 (let (($x224 (and $x300 $x147)))
 (let (($x164 (and $x224 $x147)))
 (let (($x288 (and $x164 $x149)))
 (let (($x166 (and $x288 $x326)))
 (let (($x6 (and $x166 $x309)))
 (let (($x138 (and $x6 $x10)))
 (let (($x278 (and $x138 $x61)))
 (let (($x305 (and $x278 $x274)))
 (let (($x140 (=> $x305 $x294)))
 (not $x140)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x139 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x224 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x38 (and $x224 $x139)))
 (let (($x9 (=> $x38 true)))
 (let (($x158 (= $x9 true)))
 (let (($x188 (= $x158 true)))
 (let (($x248 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2059X)))
 (let ((?x232 (input.spec-%var-m2-1.1.1 input.ind-%var2059X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2059X)))
 (=> $x213 (= ?x232 ?x234))))))
 ))
 (let (($x251 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x315 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2058X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2058X)))
 (= $x213 $x315))))
 ))
 (let (($x45 (and $x251 $x248)))
 (let (($x25 (= $x45 true)))
 (let (($x197 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let ((?x327 (input.spec-%var-m1-1.1.1 input.ind-%var2053X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2053X)))
 (=> $x126 (= ?x327 ?x226))))))
 ))
 (let (($x177 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2052X)))
 (= $x126 $x77))))
 ))
 (let (($x159 (and $x177 $x197)))
 (let (($x218 (= $x159 true)))
 (let (($x316 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2047X (_ bv4 32))))
 (let ((?x313 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x313))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x271)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x16)))
 (let ((?x327 (input.spec-%var-m1-1.1.1 input.ind-%var2047X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2047X)))
 (=> $x126 (= ?x327 ?x285))))))))))
 ))
 (let (($x127 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X (_ bv100 32)))))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2046X)))
 (= $x126 $x99))))
 ))
 (let (($x301 (and $x127 $x316)))
 (let (($x136 (= $x301 true)))
 (let (($x267 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2041X (_ bv4 32))))
 (let ((?x313 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x313))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x271)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x16)))
 (let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2041X)))
 (let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2041X)))
 (=> $x77 (= ?x226 ?x285))))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X (_ bv100 32)))))
 (let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2040X)))
 (= $x77 $x99))))
 ))
 (let (($x307 (and $x41 $x267)))
 (let (($x72 (= $x307 true)))
 (let (($x10 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2035X (_ bv4 32))))
 (let ((?x204 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x204))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv2 32))) ?x6)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv3 32))) ?x323)))
 (let ((?x232 (input.spec-%var-m2-1.1.1 input.ind-%var2035X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2035X)))
 (=> $x213 (= ?x232 ?x281))))))))))
 ))
 (let (($x317 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2034X) (bvult input.ind-%var2034X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2034X)))
 (= $x213 $x99))))
 ))
 (let (($x138 (and $x317 $x10)))
 (let (($x74 (= $x138 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x319 (= (_ bv0 2) ?x182)))
 (let (($x230 (= $x319 true)))
 (let (($x179 (= $x230 true)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x154)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x247 (= (_ bv0 32) ?x195)))
 (let ((?x52 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x217 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x142 $x107)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x131 $x272)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x173 $x87)))
 (let (($x181 (not $x225)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x95 $x117)))
 (let (($x19 (and (not $x11) $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x59 $x206)))
 (let (($x172 (not $x208)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x20 $x82)))
 (let (($x250 (and (not $x185) $x172)))
 (let (($x39 (and (and (and (and (and (and $x250 $x19) $x145) $x151) $x153) $x60) $x247)))
 (let (($x156 (and $x39 $x284)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x105 (or false (or false (and (and true (or $x90 $x291)) (or $x63 $x42))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x170 (and $x92 $x156)))
 (let (($x300 (= $x170 true)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let ((?x215 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x88 (bvneg ?x215)))
 (let (($x47 (= ?x88 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x256 (= $x47 true)))
 (let (($x85 (= $x256 true)))
 (let (($x13 (= ?x88 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x46 (and $x56 $x85)))
 (let (($x113 (and $x46 $x18)))
 (let (($x280 (and $x113 $x288)))
 (let (($x262 (and $x280 $x179)))
 (let (($x31 (and $x262 $x74)))
 (let (($x27 (and $x31 $x72)))
 (let (($x249 (and $x27 $x136)))
 (let (($x238 (and $x249 $x218)))
 (let (($x141 (and $x238 $x25)))
 (let (($x290 (=> $x141 $x188)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x139 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x224 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x38 (and $x224 $x139)))
 (let (($x9 (=> $x38 true)))
 (let (($x158 (= $x9 true)))
 (let (($x188 (= $x158 true)))
 (let (($x248 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2059X)))
 (let ((?x232 (input.spec-%var-m2-1.1.1 input.ind-%var2059X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2059X)))
 (=> $x213 (= ?x232 ?x234))))))
 ))
 (let (($x251 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x315 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2058X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2058X)))
 (= $x213 $x315))))
 ))
 (let (($x45 (and $x251 $x248)))
 (let (($x25 (= $x45 true)))
 (let (($x197 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let ((?x327 (input.spec-%var-m1-1.1.1 input.ind-%var2053X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2053X)))
 (=> $x126 (= ?x327 ?x226))))))
 ))
 (let (($x177 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2052X)))
 (= $x126 $x77))))
 ))
 (let (($x159 (and $x177 $x197)))
 (let (($x218 (= $x159 true)))
 (let (($x316 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2047X (_ bv4 32))))
 (let ((?x313 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x313))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x271)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x16)))
 (let ((?x327 (input.spec-%var-m1-1.1.1 input.ind-%var2047X)))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2047X)))
 (=> $x126 (= ?x327 ?x285))))))))))
 ))
 (let (($x127 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X (_ bv100 32)))))
 (let (($x126 (input.spec-%var-m1-1.0.1 input.ind-%var2046X)))
 (= $x126 $x99))))
 ))
 (let (($x301 (and $x127 $x316)))
 (let (($x136 (= $x301 true)))
 (let (($x267 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2041X (_ bv4 32))))
 (let ((?x313 (bvadd ?x286 input.dst.llvm-%m1)))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x313))))
 (let ((?x16 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x271)))
 (let ((?x285 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x16)))
 (let ((?x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2041X)))
 (let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2041X)))
 (=> $x77 (= ?x226 ?x285))))))))))
 ))
 (let (($x41 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2040X) (bvult input.ind-%var2040X (_ bv100 32)))))
 (let (($x77 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2040X)))
 (= $x77 $x99))))
 ))
 (let (($x307 (and $x41 $x267)))
 (let (($x72 (= $x307 true)))
 (let (($x10 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let ((?x286 (bvmul input.ind-%var2035X (_ bv4 32))))
 (let ((?x204 (bvadd ?x286 input.dst.llvm-%m2)))
 (let ((?x6 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x204))))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv2 32))) ?x6)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x204 (_ bv3 32))) ?x323)))
 (let ((?x232 (input.spec-%var-m2-1.1.1 input.ind-%var2035X)))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2035X)))
 (=> $x213 (= ?x232 ?x281))))))))))
 ))
 (let (($x317 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x99 (and (bvule (_ bv0 32) input.ind-%var2034X) (bvult input.ind-%var2034X (_ bv100 32)))))
 (let (($x213 (input.spec-%var-m2-1.0.1 input.ind-%var2034X)))
 (= $x213 $x99))))
 ))
 (let (($x138 (and $x317 $x10)))
 (let (($x74 (= $x138 true)))
 (let ((?x182 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x319 (= (_ bv0 2) ?x182)))
 (let (($x230 (= $x319 true)))
 (let (($x179 (= $x230 true)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x284 (= (_ bv0 32) ?x154)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x247 (= (_ bv0 32) ?x195)))
 (let ((?x52 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x52)))
 (let ((?x217 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x107 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x217)))
 (let (($x142 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (and $x142 $x107)))
 (let (($x131 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x153 (and $x131 $x272)))
 (let (($x151 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x173 $x87)))
 (let (($x181 (not $x225)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x95 $x117)))
 (let (($x19 (and (not $x11) $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x59 $x206)))
 (let (($x172 (not $x208)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x20 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x185 (and $x20 $x82)))
 (let (($x250 (and (not $x185) $x172)))
 (let (($x39 (and (and (and (and (and (and $x250 $x19) $x145) $x151) $x153) $x60) $x247)))
 (let (($x156 (and $x39 $x284)))
 (let (($x42 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x63 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x291 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x68)))
 (let (($x105 (or false (or false (and (and true (or $x90 $x291)) (or $x63 $x42))))))
 (let (($x92 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x105)))
 (let (($x170 (and $x92 $x156)))
 (let (($x300 (= $x170 true)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let ((?x215 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x88 (bvneg ?x215)))
 (let (($x47 (= ?x88 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x256 (= $x47 true)))
 (let (($x85 (= $x256 true)))
 (let (($x13 (= ?x88 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x46 (and $x56 $x85)))
 (let (($x113 (and $x46 $x18)))
 (let (($x280 (and $x113 $x288)))
 (let (($x262 (and $x280 $x179)))
 (let (($x31 (and $x262 $x74)))
 (let (($x27 (and $x31 $x72)))
 (let (($x249 (and $x27 $x136)))
 (let (($x238 (and $x249 $x218)))
 (let (($x141 (and $x238 $x25)))
 (let (($x290 (=> $x141 $x188)))
 (not $x290))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x230 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x38 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x164 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x51 (and $x164 $x38)))
 (let (($x118 (and $x51 $x230)))
 (let (($x196 (=> $x118 true)))
 (let (($x78 (= $x196 true)))
 (let (($x293 (= $x78 true)))
 (let (($x112 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let ((?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2095X)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 input.ind-%var2095X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2095X)))
 (=> $x116 (= ?x84 ?x66))))))
 ))
 (let (($x50 (forall ((input.ind-%var2094X (_ BitVec 32)) )(let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2094X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2094X)))
 (= $x116 $x162))))
 ))
 (let (($x321 (and $x50 $x112)))
 (let (($x161 (= $x321 true)))
 (let (($x137 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2089X)))
 (let ((?x234 (input.spec-%var-m1-1.1.1 input.ind-%var2089X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2089X)))
 (=> $x273 (= ?x234 ?x6))))))
 ))
 (let (($x184 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2088X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2088X)))
 (= $x273 $x57))))
 ))
 (let (($x283 (and $x184 $x137)))
 (let (($x308 (= $x283 true)))
 (let (($x303 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x246 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x246))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv2 32))) ?x14)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv3 32))) ?x157)))
 (let ((?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2083X)))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2083X)))
 (=> $x162 (= ?x66 ?x163))))))))))
 ))
 (let (($x229 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2082X)))
 (= $x162 $x167))))
 ))
 (let (($x199 (and $x229 $x303)))
 (let (($x65 (= $x199 true)))
 (let (($x257 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2077X (_ bv4 32))))
 (let ((?x246 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x246))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv2 32))) ?x14)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv3 32))) ?x157)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 input.ind-%var2077X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2077X)))
 (=> $x116 (= ?x84 ?x163))))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2076X) (bvult input.ind-%var2076X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2076X)))
 (= $x116 $x167))))
 ))
 (let (($x189 (and $x23 $x257)))
 (let (($x216 (= $x189 true)))
 (let (($x130 (forall ((input.ind-%var2071X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2071X (_ bv4 32))))
 (let ((?x271 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x271))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x239)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x72)))
 (let ((?x234 (input.spec-%var-m1-1.1.1 input.ind-%var2071X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2071X)))
 (=> $x273 (= ?x234 ?x297))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2070X) (bvult input.ind-%var2070X (_ bv100 32)))))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2070X)))
 (= $x273 $x167))))
 ))
 (let (($x274 (and $x238 $x130)))
 (let (($x243 (= $x274 true)))
 (let (($x133 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2065X (_ bv4 32))))
 (let ((?x271 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x271))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x239)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x72)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2065X)))
 (let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2065X)))
 (=> $x57 (= ?x6 ?x297))))))))))
 ))
 (let (($x241 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2064X) (bvult input.ind-%var2064X (_ bv100 32)))))
 (let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2064X)))
 (= $x57 $x167))))
 ))
 (let (($x34 (and $x241 $x133)))
 (let (($x316 (= $x34 true)))
 (let (($x179 (= $x230 true)))
 (let (($x262 (= $x179 true)))
 (let (($x30 (= $x262 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let (($x280 (= $x288 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x144 (= (_ bv0 32) ?x60)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x52 (= (_ bv0 32) ?x292)))
 (let ((?x272 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x272)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (and $x209 $x219)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x151 $x217)))
 (let (($x83 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x173 $x87)))
 (let (($x181 (not $x225)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x117 $x11)))
 (let (($x174 (and (not $x295) $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x59 $x206)))
 (let (($x172 (not $x208)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x96 $x93)))
 (let (($x95 (and (not $x235) $x172)))
 (let (($x156 (and (and (and (and (and (and $x95 $x174) $x145) $x83) $x107) $x153) $x52)))
 (let (($x170 (and $x156 $x144)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x20 (or false (or false (and (and true (or $x73 $x104)) (or $x201 $x100))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x300 (and $x185 $x170)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let ((?x326 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x26 (bvneg ?x326)))
 (let (($x228 (= ?x26 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x47 (= $x228 true)))
 (let (($x256 (= $x47 true)))
 (let (($x88 (= ?x26 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (= $x88 true)))
 (let (($x266 (= $x13 true)))
 (let (($x85 (and $x266 $x256)))
 (let (($x165 (and $x85 $x113)))
 (let (($x132 (and $x165 $x280)))
 (let (($x213 (and $x132 $x30)))
 (let (($x186 (and $x213 $x30)))
 (let (($x301 (and $x186 $x316)))
 (let (($x233 (and $x301 $x243)))
 (let (($x8 (and $x233 $x216)))
 (let (($x200 (and $x8 $x65)))
 (let (($x207 (and $x200 $x308)))
 (let (($x58 (and $x207 $x161)))
 (let (($x265 (=> $x58 $x293)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x230 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x38 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x164 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x51 (and $x164 $x38)))
 (let (($x118 (and $x51 $x230)))
 (let (($x196 (=> $x118 true)))
 (let (($x78 (= $x196 true)))
 (let (($x293 (= $x78 true)))
 (let (($x112 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let ((?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2095X)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 input.ind-%var2095X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2095X)))
 (=> $x116 (= ?x84 ?x66))))))
 ))
 (let (($x50 (forall ((input.ind-%var2094X (_ BitVec 32)) )(let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2094X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2094X)))
 (= $x116 $x162))))
 ))
 (let (($x321 (and $x50 $x112)))
 (let (($x161 (= $x321 true)))
 (let (($x137 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2089X)))
 (let ((?x234 (input.spec-%var-m1-1.1.1 input.ind-%var2089X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2089X)))
 (=> $x273 (= ?x234 ?x6))))))
 ))
 (let (($x184 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2088X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2088X)))
 (= $x273 $x57))))
 ))
 (let (($x283 (and $x184 $x137)))
 (let (($x308 (= $x283 true)))
 (let (($x303 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x246 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x246))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv2 32))) ?x14)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv3 32))) ?x157)))
 (let ((?x66 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2083X)))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2083X)))
 (=> $x162 (= ?x66 ?x163))))))))))
 ))
 (let (($x229 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2082X)))
 (= $x162 $x167))))
 ))
 (let (($x199 (and $x229 $x303)))
 (let (($x65 (= $x199 true)))
 (let (($x257 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2077X (_ bv4 32))))
 (let ((?x246 (bvadd ?x97 input.dst.llvm-%m2)))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x246))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv2 32))) ?x14)))
 (let ((?x163 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x246 (_ bv3 32))) ?x157)))
 (let ((?x84 (input.spec-%var-m2-1.1.1 input.ind-%var2077X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2077X)))
 (=> $x116 (= ?x84 ?x163))))))))))
 ))
 (let (($x23 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2076X) (bvult input.ind-%var2076X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var2076X)))
 (= $x116 $x167))))
 ))
 (let (($x189 (and $x23 $x257)))
 (let (($x216 (= $x189 true)))
 (let (($x130 (forall ((input.ind-%var2071X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2071X (_ bv4 32))))
 (let ((?x271 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x271))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x239)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x72)))
 (let ((?x234 (input.spec-%var-m1-1.1.1 input.ind-%var2071X)))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2071X)))
 (=> $x273 (= ?x234 ?x297))))))))))
 ))
 (let (($x238 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2070X) (bvult input.ind-%var2070X (_ bv100 32)))))
 (let (($x273 (input.spec-%var-m1-1.0.1 input.ind-%var2070X)))
 (= $x273 $x167))))
 ))
 (let (($x274 (and $x238 $x130)))
 (let (($x243 (= $x274 true)))
 (let (($x133 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let ((?x97 (bvmul input.ind-%var2065X (_ bv4 32))))
 (let ((?x271 (bvadd ?x97 input.dst.llvm-%m1)))
 (let ((?x239 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x271))))
 (let ((?x72 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv2 32))) ?x239)))
 (let ((?x297 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x271 (_ bv3 32))) ?x72)))
 (let ((?x6 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2065X)))
 (let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2065X)))
 (=> $x57 (= ?x6 ?x297))))))))))
 ))
 (let (($x241 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x167 (and (bvule (_ bv0 32) input.ind-%var2064X) (bvult input.ind-%var2064X (_ bv100 32)))))
 (let (($x57 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2064X)))
 (= $x57 $x167))))
 ))
 (let (($x34 (and $x241 $x133)))
 (let (($x316 (= $x34 true)))
 (let (($x179 (= $x230 true)))
 (let (($x262 (= $x179 true)))
 (let (($x30 (= $x262 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let (($x280 (= $x288 true)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x144 (= (_ bv0 32) ?x60)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x52 (= (_ bv0 32) ?x292)))
 (let ((?x272 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x272)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x142)))
 (let (($x209 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x217 (and $x209 $x219)))
 (let (($x151 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x107 (and $x151 $x217)))
 (let (($x83 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x173 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x225 (and $x173 $x87)))
 (let (($x181 (not $x225)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x117 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x295 (and $x117 $x11)))
 (let (($x174 (and (not $x295) $x181)))
 (let (($x206 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (and $x59 $x206)))
 (let (($x172 (not $x208)))
 (let (($x93 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x96 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (and $x96 $x93)))
 (let (($x95 (and (not $x235) $x172)))
 (let (($x156 (and (and (and (and (and (and $x95 $x174) $x145) $x83) $x107) $x153) $x52)))
 (let (($x170 (and $x156 $x144)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x291 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x201 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x291)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x291)))
 (let (($x20 (or false (or false (and (and true (or $x73 $x104)) (or $x201 $x100))))))
 (let (($x185 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x300 (and $x185 $x170)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let ((?x326 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x26 (bvneg ?x326)))
 (let (($x228 (= ?x26 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x47 (= $x228 true)))
 (let (($x256 (= $x47 true)))
 (let (($x88 (= ?x26 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x13 (= $x88 true)))
 (let (($x266 (= $x13 true)))
 (let (($x85 (and $x266 $x256)))
 (let (($x165 (and $x85 $x113)))
 (let (($x132 (and $x165 $x280)))
 (let (($x213 (and $x132 $x30)))
 (let (($x186 (and $x213 $x30)))
 (let (($x301 (and $x186 $x316)))
 (let (($x233 (and $x301 $x243)))
 (let (($x8 (and $x233 $x216)))
 (let (($x200 (and $x8 $x65)))
 (let (($x207 (and $x200 $x308)))
 (let (($x58 (and $x207 $x161)))
 (let (($x265 (=> $x58 $x293)))
 (not $x265)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x227 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x227)))
 (let ((?x67 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x115 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x67)))
 (let (($x178 (= ?x115 ?x169)))
 (let (($x220 (= $x178 true)))
 (let (($x275 (= $x220 true)))
 (let (($x36 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2131X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var2131X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2131X)))
 (=> $x317 (= ?x138 ?x106))))))
 ))
 (let (($x28 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2130X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2130X)))
 (= $x317 $x311))))
 ))
 (let (($x120 (and $x28 $x36)))
 (let (($x146 (= $x120 true)))
 (let (($x159 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2125X)))
 (let ((?x137 (input.spec-%var-m1-1.1.1 input.ind-%var2125X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2125X)))
 (=> $x66 (= ?x137 ?x127))))))
 ))
 (let (($x211 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2124X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2124X)))
 (= $x66 $x281))))
 ))
 (let (($x309 (and $x211 $x159)))
 (let (($x40 (= $x309 true)))
 (let (($x80 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2119X (_ bv4 32))))
 (let ((?x252 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x252))))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x296)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x188)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2119X)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2119X)))
 (=> $x311 (= ?x106 ?x45))))))))))
 ))
 (let (($x278 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X (_ bv100 32)))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2118X)))
 (= $x311 $x285))))
 ))
 (let (($x277 (and $x278 $x80)))
 (let (($x324 (= $x277 true)))
 (let (($x114 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x252 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x252))))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x296)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x188)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var2113X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2113X)))
 (=> $x317 (= ?x138 ?x45))))))))))
 ))
 (let (($x180 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2112X)))
 (= $x317 $x285))))
 ))
 (let (($x176 (and $x180 $x114)))
 (let (($x35 (= $x176 true)))
 (let (($x46 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2107X (_ bv4 32))))
 (let ((?x124 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x124))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x76)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x14)))
 (let ((?x137 (input.spec-%var-m1-1.1.1 input.ind-%var2107X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2107X)))
 (=> $x66 (= ?x137 ?x237))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2106X) (bvult input.ind-%var2106X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2106X)))
 (= $x66 $x285))))
 ))
 (let (($x86 (and $x255 $x46)))
 (let (($x177 (= $x86 true)))
 (let (($x189 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2101X (_ bv4 32))))
 (let ((?x124 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x124))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x76)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x14)))
 (let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2101X)))
 (let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2101X)))
 (=> $x281 (= ?x127 ?x237))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2100X) (bvult input.ind-%var2100X (_ bv100 32)))))
 (let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2100X)))
 (= $x281 $x285))))
 ))
 (let (($x216 (and $x16 $x189)))
 (let (($x8 (= $x216 true)))
 (let ((?x230 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x179 (bvneg ?x230)))
 (let (($x53 (= ?x179 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x236 (= $x53 true)))
 (let (($x325 (= $x236 true)))
 (let (($x30 (= ?x179 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x213 (= $x30 true)))
 (let (($x186 (= $x213 true)))
 (let (($x147 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x224 (= $x147 true)))
 (let (($x164 (= $x224 true)))
 (let (($x81 (= $x164 true)))
 (let (($x88 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x304 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x13 (and $x304 $x88)))
 (let (($x38 (and $x13 $x147)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x272 (= (_ bv0 32) ?x154)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x107 (= (_ bv0 32) ?x217)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x39 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x134 $x151)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x247 $x209)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x295 $x19)))
 (let (($x87 (not $x173)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x95 $x117)))
 (let (($x181 (and (not $x11) $x87)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x235 $x250)))
 (let (($x206 (not $x59)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x37 $x187)))
 (let (($x172 (and (not $x93) $x206)))
 (let (($x60 (and (and (and (and (and (and $x172 $x181) $x195) $x145) $x131) $x219) $x107)))
 (let (($x144 (and $x60 $x272)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x20 (or false (or false (and (and true (or $x287 $x104)) (or $x42 $x100))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x170 (and $x96 $x144)))
 (let (($x300 (= $x170 true)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x228 (= $x56 true)))
 (let (($x113 (and $x228 $x18)))
 (let (($x139 (and $x113 $x81)))
 (let (($x280 (and $x139 $x288)))
 (let (($x132 (and $x280 $x81)))
 (let (($x99 (and $x132 $x186)))
 (let (($x167 (and $x99 $x325)))
 (let (($x162 (and $x167 $x8)))
 (let (($x148 (and $x162 $x177)))
 (let (($x15 (and $x148 $x35)))
 (let (($x253 (and $x15 $x324)))
 (let (($x312 (and $x253 $x40)))
 (let (($x289 (and $x312 $x146)))
 (let (($x143 (=> $x289 $x275)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x227 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x169 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x227)))
 (let ((?x67 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x115 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x67)))
 (let (($x178 (= ?x115 ?x169)))
 (let (($x220 (= $x178 true)))
 (let (($x275 (= $x220 true)))
 (let (($x36 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2131X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var2131X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2131X)))
 (=> $x317 (= ?x138 ?x106))))))
 ))
 (let (($x28 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2130X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2130X)))
 (= $x317 $x311))))
 ))
 (let (($x120 (and $x28 $x36)))
 (let (($x146 (= $x120 true)))
 (let (($x159 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2125X)))
 (let ((?x137 (input.spec-%var-m1-1.1.1 input.ind-%var2125X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2125X)))
 (=> $x66 (= ?x137 ?x127))))))
 ))
 (let (($x211 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2124X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2124X)))
 (= $x66 $x281))))
 ))
 (let (($x309 (and $x211 $x159)))
 (let (($x40 (= $x309 true)))
 (let (($x80 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2119X (_ bv4 32))))
 (let ((?x252 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x252))))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x296)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x188)))
 (let ((?x106 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2119X)))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2119X)))
 (=> $x311 (= ?x106 ?x45))))))))))
 ))
 (let (($x278 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X (_ bv100 32)))))
 (let (($x311 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2118X)))
 (= $x311 $x285))))
 ))
 (let (($x277 (and $x278 $x80)))
 (let (($x324 (= $x277 true)))
 (let (($x114 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x252 (bvadd ?x246 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x252))))
 (let ((?x188 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv2 32))) ?x296)))
 (let ((?x45 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x252 (_ bv3 32))) ?x188)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var2113X)))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2113X)))
 (=> $x317 (= ?x138 ?x45))))))))))
 ))
 (let (($x180 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x317 (input.spec-%var-m2-1.0.1 input.ind-%var2112X)))
 (= $x317 $x285))))
 ))
 (let (($x176 (and $x180 $x114)))
 (let (($x35 (= $x176 true)))
 (let (($x46 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2107X (_ bv4 32))))
 (let ((?x124 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x124))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x76)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x14)))
 (let ((?x137 (input.spec-%var-m1-1.1.1 input.ind-%var2107X)))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2107X)))
 (=> $x66 (= ?x137 ?x237))))))))))
 ))
 (let (($x255 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2106X) (bvult input.ind-%var2106X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m1-1.0.1 input.ind-%var2106X)))
 (= $x66 $x285))))
 ))
 (let (($x86 (and $x255 $x46)))
 (let (($x177 (= $x86 true)))
 (let (($x189 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x246 (bvmul input.ind-%var2101X (_ bv4 32))))
 (let ((?x124 (bvadd ?x246 input.dst.llvm-%m1)))
 (let ((?x76 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x124))))
 (let ((?x14 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x76)))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x14)))
 (let ((?x127 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2101X)))
 (let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2101X)))
 (=> $x281 (= ?x127 ?x237))))))))))
 ))
 (let (($x16 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x285 (and (bvule (_ bv0 32) input.ind-%var2100X) (bvult input.ind-%var2100X (_ bv100 32)))))
 (let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2100X)))
 (= $x281 $x285))))
 ))
 (let (($x216 (and $x16 $x189)))
 (let (($x8 (= $x216 true)))
 (let ((?x230 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x179 (bvneg ?x230)))
 (let (($x53 (= ?x179 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x236 (= $x53 true)))
 (let (($x325 (= $x236 true)))
 (let (($x30 (= ?x179 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x213 (= $x30 true)))
 (let (($x186 (= $x213 true)))
 (let (($x147 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x224 (= $x147 true)))
 (let (($x164 (= $x224 true)))
 (let (($x81 (= $x164 true)))
 (let (($x88 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x304 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x13 (and $x304 $x88)))
 (let (($x38 (and $x13 $x147)))
 (let (($x51 (= $x38 true)))
 (let (($x149 (= $x51 true)))
 (let (($x288 (= $x149 true)))
 (let ((?x154 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x272 (= (_ bv0 32) ?x154)))
 (let ((?x217 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x107 (= (_ bv0 32) ?x217)))
 (let ((?x142 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x142)))
 (let ((?x39 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x151 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x39)))
 (let (($x134 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x209 (and $x134 $x151)))
 (let (($x247 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x131 (and $x247 $x209)))
 (let (($x145 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x195 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x295 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x173 (and $x295 $x19)))
 (let (($x87 (not $x173)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x95 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x11 (and $x95 $x117)))
 (let (($x181 (and (not $x11) $x87)))
 (let (($x250 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x235 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x59 (and $x235 $x250)))
 (let (($x206 (not $x59)))
 (let (($x187 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x93 (and $x37 $x187)))
 (let (($x172 (and (not $x93) $x206)))
 (let (($x60 (and (and (and (and (and (and $x172 $x181) $x195) $x145) $x131) $x219) $x107)))
 (let (($x144 (and $x60 $x272)))
 (let (($x100 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x104 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x20 (or false (or false (and (and true (or $x287 $x104)) (or $x42 $x100))))))
 (let (($x96 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x20)))
 (let (($x170 (and $x96 $x144)))
 (let (($x300 (= $x170 true)))
 (let (($x22 (= $x300 true)))
 (let (($x18 (= $x22 true)))
 (let (($x266 (= $x13 true)))
 (let (($x56 (= $x266 true)))
 (let (($x228 (= $x56 true)))
 (let (($x113 (and $x228 $x18)))
 (let (($x139 (and $x113 $x81)))
 (let (($x280 (and $x139 $x288)))
 (let (($x132 (and $x280 $x81)))
 (let (($x99 (and $x132 $x186)))
 (let (($x167 (and $x99 $x325)))
 (let (($x162 (and $x167 $x8)))
 (let (($x148 (and $x162 $x177)))
 (let (($x15 (and $x148 $x35)))
 (let (($x253 (and $x15 $x324)))
 (let (($x312 (and $x253 $x40)))
 (let (($x289 (and $x312 $x146)))
 (let (($x143 (=> $x289 $x275)))
 (not $x143)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x235 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x326 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x256 (or (bvugt input.memlabel-mem--arg.0_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x326 $x235)))))))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= ?x52 (_ bv0 32))))
 (let ((?x20 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x228 $x201)))
 (let (($x134 (and $x79 $x131)))
 (let (($x145 (and $x134 $x144)))
 (and $x145 $x13)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x235 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x326 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x256 (or (bvugt input.memlabel-mem--arg.0_begin ?x26) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x13 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x256) (or $x326 $x235)))))))
 (let (($x144 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x52 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x131 (= ?x52 (_ bv0 32))))
 (let ((?x20 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x92 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x20)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x92)))
 (let (($x228 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x228 $x201)))
 (let (($x134 (and $x79 $x131)))
 (let (($x145 (and $x134 $x144)))
 (and $x145 $x13)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x245 (= true false)))
 (let (($x264 (= $x245 true)))
 (let ((?x144 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x31 (= ?x144 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x214 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x214 (_ bv1 32))))
 (let (($x77 (=> $x315 $x31)))
 (let (($x251 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x5 (= $x315 $x251)))
 (let (($x221 (= false false)))
 (let (($x258 (= ?x214 (_ bv0 32))))
 (let (($x226 (=> $x258 $x221)))
 (let (($x229 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x199 (= $x258 $x229)))
 (let (($x183 (and (and (and $x199 $x226) $x5) $x77)))
 (let (($x136 (= $x183 true)))
 (let ((?x156 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x320 (= ?x156 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x303 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x303 (_ bv1 32))))
 (let (($x190 (=> $x118 $x320)))
 (let (($x112 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x321 (= $x118 $x112)))
 (let (($x308 (= ?x303 (_ bv0 32))))
 (let (($x58 (=> $x308 $x221)))
 (let (($x126 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x207 (= $x308 $x126)))
 (let (($x196 (and (and (and $x207 $x58) $x321) $x190)))
 (let (($x232 (= $x196 true)))
 (let ((?x170 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x218 (= ?x170 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x322 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x97 (ite $x322 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x97 (_ bv1 32))))
 (let (($x212 (=> $x130 $x218)))
 (let (($x274 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x238 (= $x130 $x274)))
 (let (($x27 (= ?x97 (_ bv0 32))))
 (let (($x116 (=> $x27 $x221)))
 (let (($x273 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x233 (= $x27 $x273)))
 (let (($x184 (and (and (and $x233 $x116) $x238) $x212)))
 (let (($x33 (= $x184 true)))
 (let ((?x219 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x122 (= ?x219 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x178 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x220 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x220 (_ bv1 32))))
 (let (($x327 (=> $x194 $x122)))
 (let (($x283 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x323 (= $x194 $x283)))
 (let (($x275 (= ?x220 (_ bv0 32))))
 (let (($x21 (=> $x275 $x221)))
 (let (($x298 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x47 (= $x275 $x298)))
 (let (($x155 (and (and (and $x47 $x21) $x323) $x327)))
 (let (($x239 (= $x155 true)))
 (let (($x67 (forall ((input.ind-%var2235X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2235X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x312))))
 (let ((?x151 (input.spec-%var-m-0.1.1 input.ind-%var2235X)))
 (let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var2235X)))
 (=> $x252 (= ?x151 ?x120))))))))
 ))
 (let (($x9 (forall ((input.ind-%var2234X (_ BitVec 32)) )(let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var2234X)))
 (= $x252 (and (bvule (_ bv0 32) input.ind-%var2234X) (bvult input.ind-%var2234X (_ bv100 32))))))
 ))
 (let (($x115 (and $x9 $x67)))
 (let (($x227 (= $x115 true)))
 (let ((?x189 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x137 (bvugt ?x189 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x189 (_ bv3 32)))))
 (let (($x148 (=> (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x216 (= $x148 true)))
 (let (($x8 (= $x216 true)))
 (let (($x317 (= $x8 true)))
 (let (($x294 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x14 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x294)))))))
 (let (($x316 (= $x14 true)))
 (let (($x246 (= $x316 true)))
 (let (($x237 (= $x246 true)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x281 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x99 (_ bv3 32)))))
 (let (($x16 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x281)))))))
 (let (($x57 (= $x16 true)))
 (let (($x53 (= $x57 true)))
 (let (($x127 (= $x53 true)))
 (let ((?x224 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x132 (bvugt ?x224 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x224 (_ bv3 32)))))
 (let (($x30 (=> (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x280 $x132)))))))
 (let (($x139 (= $x30 true)))
 (let (($x38 (= $x139 true)))
 (let (($x213 (= $x38 true)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x292)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x82 $x83)))
 (let (($x154 (and $x284 $x153)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x261 $x154)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x295)))))))
 (let (($x22 (and $x217 $x300)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x165 (= $x113 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x291 (concat ?x208 (concat ?x79 ?x85)))))
 (let (($x88 (= ?x215 input.dst.llvm-%m)))
 (let (($x105 (= $x88 true)))
 (let (($x68 (= $x105 true)))
 (let (($x222 (and $x68 $x165)))
 (let (($x186 (and $x222 $x213)))
 (let (($x133 (and $x186 $x127)))
 (let (($x193 (and $x133 $x237)))
 (let (($x223 (and $x193 $x317)))
 (let (($x169 (and $x223 $x227)))
 (let (($x297 (and $x169 $x239)))
 (let (($x231 (and $x297 $x33)))
 (let (($x10 (and $x231 $x232)))
 (let (($x48 (and $x10 $x136)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x306 (and $x73 $x48)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x276 (and $x206 $x306)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x197 (and $x26 $x276)))
 (let (($x145 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x318 (and $x145 $x197)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x328 (and $x52 $x318)))
 (let (($x108 (and $x221 $x328)))
 (let (($x228 (= ?x219 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x191 (and $x228 $x108)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x259 (and $x107 $x191)))
 (let (($x168 (and $x221 $x259)))
 (let (($x174 (= ?x170 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x240 (and $x174 $x168)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x268 (and $x131 $x240)))
 (let (($x123 (and $x221 $x268)))
 (let (($x326 (= ?x156 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x314 (and $x326 $x123)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x198 (and $x235 $x314)))
 (let (($x302 (and $x221 $x198)))
 (let (($x256 (= ?x144 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x269 (and $x256 $x302)))
 (let (($x282 (=> $x269 $x264)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x245 (= true false)))
 (let (($x264 (= $x245 true)))
 (let ((?x144 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x31 (= ?x144 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x214 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x214 (_ bv1 32))))
 (let (($x77 (=> $x315 $x31)))
 (let (($x251 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x5 (= $x315 $x251)))
 (let (($x221 (= false false)))
 (let (($x258 (= ?x214 (_ bv0 32))))
 (let (($x226 (=> $x258 $x221)))
 (let (($x229 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x199 (= $x258 $x229)))
 (let (($x183 (and (and (and $x199 $x226) $x5) $x77)))
 (let (($x136 (= $x183 true)))
 (let ((?x156 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x320 (= ?x156 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x303 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x303 (_ bv1 32))))
 (let (($x190 (=> $x118 $x320)))
 (let (($x112 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x321 (= $x118 $x112)))
 (let (($x308 (= ?x303 (_ bv0 32))))
 (let (($x58 (=> $x308 $x221)))
 (let (($x126 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x207 (= $x308 $x126)))
 (let (($x196 (and (and (and $x207 $x58) $x321) $x190)))
 (let (($x232 (= $x196 true)))
 (let ((?x170 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x218 (= ?x170 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x322 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x97 (ite $x322 (_ bv1 32) (_ bv0 32))))
 (let (($x130 (bvuge ?x97 (_ bv1 32))))
 (let (($x212 (=> $x130 $x218)))
 (let (($x274 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x238 (= $x130 $x274)))
 (let (($x27 (= ?x97 (_ bv0 32))))
 (let (($x116 (=> $x27 $x221)))
 (let (($x273 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x233 (= $x27 $x273)))
 (let (($x184 (and (and (and $x233 $x116) $x238) $x212)))
 (let (($x33 (= $x184 true)))
 (let ((?x219 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x122 (= ?x219 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x178 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x220 (ite $x178 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x220 (_ bv1 32))))
 (let (($x327 (=> $x194 $x122)))
 (let (($x283 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x323 (= $x194 $x283)))
 (let (($x275 (= ?x220 (_ bv0 32))))
 (let (($x21 (=> $x275 $x221)))
 (let (($x298 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x47 (= $x275 $x298)))
 (let (($x155 (and (and (and $x47 $x21) $x323) $x327)))
 (let (($x239 (= $x155 true)))
 (let (($x67 (forall ((input.ind-%var2235X (_ BitVec 32)) )(let ((?x135 (bvadd (bvmul input.ind-%var2235X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x312 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x120 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x312))))
 (let ((?x151 (input.spec-%var-m-0.1.1 input.ind-%var2235X)))
 (let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var2235X)))
 (=> $x252 (= ?x151 ?x120))))))))
 ))
 (let (($x9 (forall ((input.ind-%var2234X (_ BitVec 32)) )(let (($x252 (input.spec-%var-m-0.0.1 input.ind-%var2234X)))
 (= $x252 (and (bvule (_ bv0 32) input.ind-%var2234X) (bvult input.ind-%var2234X (_ bv100 32))))))
 ))
 (let (($x115 (and $x9 $x67)))
 (let (($x227 (= $x115 true)))
 (let ((?x189 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x137 (bvugt ?x189 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x189 (_ bv3 32)))))
 (let (($x148 (=> (bvule ?x189 (bvsub (bvadd ?x189 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x216 (= $x148 true)))
 (let (($x8 (= $x216 true)))
 (let (($x317 (= $x8 true)))
 (let (($x294 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x129 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x14 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x129 $x294)))))))
 (let (($x316 (= $x14 true)))
 (let (($x246 (= $x316 true)))
 (let (($x237 (= $x246 true)))
 (let ((?x99 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x281 (bvugt ?x99 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x99 (_ bv3 32)))))
 (let (($x16 (=> (bvule ?x99 (bvsub (bvadd ?x99 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x281)))))))
 (let (($x57 (= $x16 true)))
 (let (($x53 (= $x57 true)))
 (let (($x127 (= $x53 true)))
 (let ((?x224 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x132 (bvugt ?x224 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x280 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x224 (_ bv3 32)))))
 (let (($x30 (=> (bvule ?x224 (bvsub (bvadd ?x224 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x280 $x132)))))))
 (let (($x139 (= $x30 true)))
 (let (($x38 (= $x139 true)))
 (let (($x213 (= $x38 true)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x153 (= (_ bv0 32) ?x292)))
 (let ((?x209 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x209)))
 (let (($x82 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x284 (and $x82 $x83)))
 (let (($x154 (and $x284 $x153)))
 (let (($x261 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x261 $x154)))
 (let (($x295 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x217 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x295)))))))
 (let (($x22 (and $x217 $x300)))
 (let (($x18 (= $x22 true)))
 (let (($x113 (= $x18 true)))
 (let (($x165 (= $x113 true)))
 (let ((?x85 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x208 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x291 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x215 (concat ?x291 (concat ?x208 (concat ?x79 ?x85)))))
 (let (($x88 (= ?x215 input.dst.llvm-%m)))
 (let (($x105 (= $x88 true)))
 (let (($x68 (= $x105 true)))
 (let (($x222 (and $x68 $x165)))
 (let (($x186 (and $x222 $x213)))
 (let (($x133 (and $x186 $x127)))
 (let (($x193 (and $x133 $x237)))
 (let (($x223 (and $x193 $x317)))
 (let (($x169 (and $x223 $x227)))
 (let (($x297 (and $x169 $x239)))
 (let (($x231 (and $x297 $x33)))
 (let (($x10 (and $x231 $x232)))
 (let (($x48 (and $x10 $x136)))
 (let (($x73 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x306 (and $x73 $x48)))
 (let (($x206 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x276 (and $x206 $x306)))
 (let (($x26 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x197 (and $x26 $x276)))
 (let (($x145 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x318 (and $x145 $x197)))
 (let (($x52 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x328 (and $x52 $x318)))
 (let (($x108 (and $x221 $x328)))
 (let (($x228 (= ?x219 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x191 (and $x228 $x108)))
 (let (($x107 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x259 (and $x107 $x191)))
 (let (($x168 (and $x221 $x259)))
 (let (($x174 (= ?x170 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x240 (and $x174 $x168)))
 (let (($x131 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x268 (and $x131 $x240)))
 (let (($x123 (and $x221 $x268)))
 (let (($x326 (= ?x156 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x314 (and $x326 $x123)))
 (let (($x235 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x198 (and $x235 $x314)))
 (let (($x302 (and $x221 $x198)))
 (let (($x256 (= ?x144 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x269 (and $x256 $x302)))
 (let (($x282 (=> $x269 $x264)))
 (not $x282)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xa4c9db28)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xa4c9db2b)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff1)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xa4c9db28)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xa4c9db28) #xf1
    (ite (= x!0 #xa4c9db29) #xff
    (ite (= x!0 #xa4c9db2b) #xff
    (ite (= x!0 #xa4c9db2a) #xff
      #x00)))))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000003) true
      (not (bvule #x00000064 x!0)))))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa4c9db2b)
                                     (k!4 #xa4c9db2a)
                                     (k!4 #xa4c9db29)
                                     (k!4 #xa4c9db28)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa4c9db2b)
                                     (k!4 #xa4c9db2a)
                                     (k!4 #xa4c9db29)
                                     (k!4 #xa4c9db28)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xa4c9db2b)
                                     (k!4 #xa4c9db2a)
                                     (k!4 #xa4c9db29)
                                     (k!4 #xa4c9db28)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xa4c9db2b)
                                     (k!4 #xa4c9db2a)
                                     (k!4 #xa4c9db29)
                                     (k!4 #xa4c9db28))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbfffbfa4)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbfffbfa7)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff1)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbfffbfa4)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000003) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbfffbfa6) #xff
    (ite (= x!0 #xbfffbfa5) #xff
    (ite (= x!0 #xbfffbfa4) #xf1
    (ite (= x!0 #xbfffbfa7) #xff
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x70 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x70 (_ bv1 32))))
 (let (($x109 (= ?x70 (_ bv0 32))))
 (let (($x334 (or $x109 $x23)))
 (let (($x43 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x152 (_ bv1 32))))
 (let (($x336 (and $x253 $x334)))
 (let (($x61 (= ?x152 (_ bv0 32))))
 (let (($x335 (and $x61 $x334)))
 (let (($x337 (or $x335 $x336)))
 (let (($x245 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x264 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x264 (_ bv1 32))))
 (let (($x339 (and $x25 $x337)))
 (let (($x282 (= ?x264 (_ bv0 32))))
 (let (($x338 (and $x282 $x337)))
 (let (($x340 (or $x338 $x339)))
 (let (($x136 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x48 (ite $x136 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x48 (_ bv1 32))))
 (let (($x342 (and $x108 $x340)))
 (let (($x306 (= ?x48 (_ bv0 32))))
 (let (($x341 (and $x306 $x340)))
 (let (($x343 (or $x341 $x342)))
 (let ((?x104 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x146 (= (bvand ?x104 (_ bv4294967292 32)) ?x104)))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x40 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x36 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x64 (and true $x36)))
 (let ((?x107 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x9 (= (bvand ?x107 (_ bv4294967292 32)) ?x107)))
 (let (($x28 (and $x9 $x64)))
 (let (($x188 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x104 (bvsub ?x104 (_ bv8 32))) (bvult ?x104 (bvsub ?x104 (_ bv8 32))))))
 (let (($x89 (and (and (and true $x188) $x28) $x40)))
 (let (($x265 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x54 (and true $x265)))
 (let (($x237 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x46 (and $x237 $x54)))
 (let (($x66 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x107 (bvsub ?x107 (_ bv12 32))) (bvult ?x107 (bvsub ?x107 (_ bv12 32))))))
 (let (($x216 (and (and (and true $x237) $x66) $x46)))
 (let (($x220 (and (and $x216 $x89) $x146)))
 (let (($x344 (=> $x220 $x343)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x84 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x78 (=> $x23 $x84)))
 (let (($x205 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x65 (= $x23 $x205)))
 (let (($x292 (= false false)))
 (let (($x41 (=> $x109 $x292)))
 (let (($x202 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x103 (= $x109 $x202)))
 (let (($x293 (and (and (and $x103 $x41) $x65) $x78)))
 (let (($x210 (= $x293 true)))
 (let ((?x18 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x111 (= ?x18 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x114 (=> $x253 $x111)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x286 (= $x253 $x138)))
 (let (($x119 (and (and (= $x61 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x61 $x292)) $x286)))
 (let (($x128 (and $x119 $x114)))
 (let (($x175 (= $x128 true)))
 (let ((?x224 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x180 (= ?x224 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x141 (=> $x25 $x180)))
 (let (($x201 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x290 (= $x25 $x201)))
 (let (($x35 (and (and (= $x282 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x282 $x292)) $x290)))
 (let (($x15 (and $x35 $x141)))
 (let (($x277 (= $x15 true)))
 (let ((?x288 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x240 (= ?x288 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x268 (=> $x108 $x240)))
 (let (($x191 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x259 (= $x108 $x191)))
 (let (($x314 (and (and (= $x306 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x306 $x292)) $x259)))
 (let (($x198 (and $x314 $x268)))
 (let (($x302 (= $x198 true)))
 (let (($x299 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2318X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var2318X) (bvult input.ind-%var2318X (_ bv100 32))))))
 ))
 (let (($x329 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let ((?x207 (bvadd (bvmul input.ind-%var2319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x112))))
 (let ((?x82 (input.spec-%var-m-0.1.1 input.ind-%var2319X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2319X)))
 (=> $x233 (= ?x82 ?x196))))))))
 ))
 (let (($x31 (and $x329 $x299)))
 (let (($x77 (= $x31 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x155 (concat ?x330 (concat ?x283 ?x249)))))
 (let (($x297 (= ?x239 input.dst.llvm-%m)))
 (let (($x322 (= $x297 true)))
 (let (($x97 (= $x322 true)))
 (let (($x275 (= $x220 true)))
 (let (($x143 (= $x275 true)))
 (let (($x298 (= $x143 true)))
 (let (($x289 (and $x89 $x146)))
 (let (($x67 (= $x289 true)))
 (let (($x115 (= $x67 true)))
 (let (($x227 (= $x115 true)))
 (let (($x8 (= $x216 true)))
 (let (($x317 (= $x8 true)))
 (let (($x223 (= $x317 true)))
 (let ((?x163 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x129 (= (_ bv0 32) ?x163)))
 (let ((?x124 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x133 $x157)))
 (let (($x294 (and $x76 $x129)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x101 $x294)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x307 $x271)))))))
 (let (($x140 (and $x127 $x125)))
 (let (($x44 (= $x140 true)))
 (let (($x242 (= $x44 true)))
 (let (($x14 (= $x242 true)))
 (let (($x20 (and $x14 $x223)))
 (let (($x169 (and $x20 $x227)))
 (let (($x47 (and $x169 $x298)))
 (let (($x27 (and $x47 $x97)))
 (let (($x183 (and $x27 $x77)))
 (let (($x269 (and $x183 $x302)))
 (let (($x324 (and $x269 $x277)))
 (let (($x94 (and $x324 $x175)))
 (let (($x91 (and $x94 $x210)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x166 (and $x99 $x91)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x150 (and $x213 $x166)))
 (let (($x139 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x310 (and $x139 $x150)))
 (let (($x179 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x254 (and $x179 $x310)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x75 (and $x319 $x254)))
 (let (($x69 (and $x292 $x75)))
 (let (($x132 (= ?x288 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x132 $x69)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x110 (and $x262 $x279)))
 (let (($x270 (and $x292 $x110)))
 (let (($x51 (= ?x224 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x204 (and $x51 $x270)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x32 (and $x147 $x204)))
 (let (($x24 (and $x292 $x32)))
 (let (($x165 (= ?x18 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x121 (and $x165 $x24)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x171 (and $x300 $x121)))
 (let (($x331 (and $x292 $x171)))
 (let (($x284 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x332 (and $x284 $x331)))
 (let (($x225 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x291 (_ bv3 32)))))
 (let (($x181 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x85 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x105 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x85)))))))
 (let (($x266 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x107 (_ bv3 32)))))
 (let (($x60 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x266)))))))
 (let (($x100 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x100)))))))
 (let (($x256 (and $x195 $x60)))
 (let (($x250 (and $x256 $x105)))
 (let (($x68 (and $x250 $x181)))
 (let (($x333 (and $x68 $x332)))
 (let (($x347 (=> $x333 $x346)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x7 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x70 (ite $x7 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x70 (_ bv1 32))))
 (let (($x109 (= ?x70 (_ bv0 32))))
 (let (($x334 (or $x109 $x23)))
 (let (($x43 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x152 (ite $x43 (_ bv1 32) (_ bv0 32))))
 (let (($x253 (bvuge ?x152 (_ bv1 32))))
 (let (($x336 (and $x253 $x334)))
 (let (($x61 (= ?x152 (_ bv0 32))))
 (let (($x335 (and $x61 $x334)))
 (let (($x337 (or $x335 $x336)))
 (let (($x245 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x264 (ite $x245 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x264 (_ bv1 32))))
 (let (($x339 (and $x25 $x337)))
 (let (($x282 (= ?x264 (_ bv0 32))))
 (let (($x338 (and $x282 $x337)))
 (let (($x340 (or $x338 $x339)))
 (let (($x136 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x48 (ite $x136 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x48 (_ bv1 32))))
 (let (($x342 (and $x108 $x340)))
 (let (($x306 (= ?x48 (_ bv0 32))))
 (let (($x341 (and $x306 $x340)))
 (let (($x343 (or $x341 $x342)))
 (let ((?x104 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x146 (= (bvand ?x104 (_ bv4294967292 32)) ?x104)))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x40 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x36 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x64 (and true $x36)))
 (let ((?x107 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x9 (= (bvand ?x107 (_ bv4294967292 32)) ?x107)))
 (let (($x28 (and $x9 $x64)))
 (let (($x188 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x104 (bvsub ?x104 (_ bv8 32))) (bvult ?x104 (bvsub ?x104 (_ bv8 32))))))
 (let (($x89 (and (and (and true $x188) $x28) $x40)))
 (let (($x265 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x54 (and true $x265)))
 (let (($x237 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x46 (and $x237 $x54)))
 (let (($x66 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x107 (bvsub ?x107 (_ bv12 32))) (bvult ?x107 (bvsub ?x107 (_ bv12 32))))))
 (let (($x216 (and (and (and true $x237) $x66) $x46)))
 (let (($x220 (and (and $x216 $x89) $x146)))
 (let (($x344 (=> $x220 $x343)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x84 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x78 (=> $x23 $x84)))
 (let (($x205 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x65 (= $x23 $x205)))
 (let (($x292 (= false false)))
 (let (($x41 (=> $x109 $x292)))
 (let (($x202 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x103 (= $x109 $x202)))
 (let (($x293 (and (and (and $x103 $x41) $x65) $x78)))
 (let (($x210 (= $x293 true)))
 (let ((?x18 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x111 (= ?x18 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x114 (=> $x253 $x111)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x286 (= $x253 $x138)))
 (let (($x119 (and (and (= $x61 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x61 $x292)) $x286)))
 (let (($x128 (and $x119 $x114)))
 (let (($x175 (= $x128 true)))
 (let ((?x224 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x180 (= ?x224 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x141 (=> $x25 $x180)))
 (let (($x201 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x290 (= $x25 $x201)))
 (let (($x35 (and (and (= $x282 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x282 $x292)) $x290)))
 (let (($x15 (and $x35 $x141)))
 (let (($x277 (= $x15 true)))
 (let ((?x288 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x240 (= ?x288 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x268 (=> $x108 $x240)))
 (let (($x191 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x259 (= $x108 $x191)))
 (let (($x314 (and (and (= $x306 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x306 $x292)) $x259)))
 (let (($x198 (and $x314 $x268)))
 (let (($x302 (= $x198 true)))
 (let (($x299 (forall ((input.ind-%var2318X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2318X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var2318X) (bvult input.ind-%var2318X (_ bv100 32))))))
 ))
 (let (($x329 (forall ((input.ind-%var2319X (_ BitVec 32)) )(let ((?x207 (bvadd (bvmul input.ind-%var2319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv1 32))) (select input.dst.llvm-mem ?x207))))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x207 (_ bv2 32))) ?x112))))
 (let ((?x82 (input.spec-%var-m-0.1.1 input.ind-%var2319X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2319X)))
 (=> $x233 (= ?x82 ?x196))))))))
 ))
 (let (($x31 (and $x329 $x299)))
 (let (($x77 (= $x31 true)))
 (let ((?x249 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x283 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x330 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x239 (concat ?x155 (concat ?x330 (concat ?x283 ?x249)))))
 (let (($x297 (= ?x239 input.dst.llvm-%m)))
 (let (($x322 (= $x297 true)))
 (let (($x97 (= $x322 true)))
 (let (($x275 (= $x220 true)))
 (let (($x143 (= $x275 true)))
 (let (($x298 (= $x143 true)))
 (let (($x289 (and $x89 $x146)))
 (let (($x67 (= $x289 true)))
 (let (($x115 (= $x67 true)))
 (let (($x227 (= $x115 true)))
 (let (($x8 (= $x216 true)))
 (let (($x317 (= $x8 true)))
 (let (($x223 (= $x317 true)))
 (let ((?x163 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x129 (= (_ bv0 32) ?x163)))
 (let ((?x124 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x124)))
 (let (($x133 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x76 (and $x133 $x157)))
 (let (($x294 (and $x76 $x129)))
 (let (($x101 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x125 (and $x101 $x294)))
 (let (($x271 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x307 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x307 $x271)))))))
 (let (($x140 (and $x127 $x125)))
 (let (($x44 (= $x140 true)))
 (let (($x242 (= $x44 true)))
 (let (($x14 (= $x242 true)))
 (let (($x20 (and $x14 $x223)))
 (let (($x169 (and $x20 $x227)))
 (let (($x47 (and $x169 $x298)))
 (let (($x27 (and $x47 $x97)))
 (let (($x183 (and $x27 $x77)))
 (let (($x269 (and $x183 $x302)))
 (let (($x324 (and $x269 $x277)))
 (let (($x94 (and $x324 $x175)))
 (let (($x91 (and $x94 $x210)))
 (let (($x99 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x166 (and $x99 $x91)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x150 (and $x213 $x166)))
 (let (($x139 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x310 (and $x139 $x150)))
 (let (($x179 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x254 (and $x179 $x310)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x75 (and $x319 $x254)))
 (let (($x69 (and $x292 $x75)))
 (let (($x132 (= ?x288 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x132 $x69)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x110 (and $x262 $x279)))
 (let (($x270 (and $x292 $x110)))
 (let (($x51 (= ?x224 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x204 (and $x51 $x270)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x32 (and $x147 $x204)))
 (let (($x24 (and $x292 $x32)))
 (let (($x165 (= ?x18 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x121 (and $x165 $x24)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x171 (and $x300 $x121)))
 (let (($x331 (and $x292 $x171)))
 (let (($x284 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x332 (and $x284 $x331)))
 (let (($x225 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x291 (_ bv3 32)))))
 (let (($x181 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x85 (bvugt ?x104 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x104 (_ bv3 32)))))
 (let (($x105 (=> (bvule ?x104 (bvsub (bvadd ?x104 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x85)))))))
 (let (($x266 (bvugt ?x107 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x107 (_ bv3 32)))))
 (let (($x60 (=> (bvule ?x107 (bvsub (bvadd ?x107 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x266)))))))
 (let (($x100 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x170 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x170 $x100)))))))
 (let (($x256 (and $x195 $x60)))
 (let (($x250 (and $x256 $x105)))
 (let (($x68 (and $x250 $x181)))
 (let (($x333 (and $x68 $x332)))
 (let (($x347 (=> $x333 $x346)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 216 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x379 (bvmul (_ bv4294967295 32) ?x164)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x381 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x284)))
 (let ((?x382 (bvadd ?x381 ?x379)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x369 (concat ?x368 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x371 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x85 (bvadd ?x59 (_ bv3 32))))
 (let ((?x374 (concat (select input.dst.llvm-mem ?x85) (concat ?x371 ?x369))))
 (let ((?x375 (bvmul (_ bv4294967295 32) ?x374)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x359 (concat ?x358 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x225 (bvadd ?x88 (_ bv3 32))))
 (let ((?x364 (concat (select input.dst.llvm-mem ?x225) (concat ?x361 ?x359))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x350 (concat ?x349 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x266 (bvadd ?x185 (_ bv3 32))))
 (let ((?x355 (concat (select input.dst.llvm-mem ?x266) (concat ?x352 ?x350))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x303)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x313)))
 (let ((?x378 (bvadd (bvadd (bvadd ?x273 ?x355) ?x364) ?x375)))
 (let (($x383 (= ?x378 ?x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let (($x342 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x129 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x129 (_ bv1 32))))
 (let (($x343 (=> $x294 $x342)))
 (let (($x339 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x340 (= $x294 $x339)))
 (let (($x113 (= false false)))
 (let (($x334 (= ?x129 (_ bv0 32))))
 (let (($x338 (=> $x334 $x113)))
 (let (($x336 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x337 (= $x334 $x336)))
 (let (($x346 (and (and (and $x337 $x338) $x340) $x343)))
 (let (($x347 (= $x346 true)))
 (let (($x32 (= ?x164 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x157 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x157 (_ bv1 32))))
 (let (($x24 (=> $x76 $x32)))
 (let (($x110 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x76 $x110)))
 (let (($x310 (= ?x157 (_ bv0 32))))
 (let (($x279 (=> $x310 $x113)))
 (let (($x75 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x69 (= $x310 $x75)))
 (let (($x331 (and (and (and $x69 $x279) $x270) $x24)))
 (let (($x332 (= $x331 true)))
 (let ((?x280 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x84 (= ?x280 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x101 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x101 (_ bv1 32))))
 (let (($x78 (=> $x133 $x84)))
 (let (($x65 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x12 (= $x133 $x65)))
 (let (($x103 (= ?x101 (_ bv0 32))))
 (let (($x205 (=> $x103 $x113)))
 (let (($x260 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x23 (= $x103 $x260)))
 (let (($x91 (and (and (and $x23 $x205) $x12) $x78)))
 (let (($x166 (= $x91 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x175 (= ?x179 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x57 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x57 (_ bv1 32))))
 (let (($x94 (=> $x127 $x175)))
 (let (($x111 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x114 (= $x127 $x111)))
 (let (($x253 (= ?x57 (_ bv0 32))))
 (let (($x248 (=> $x253 $x113)))
 (let (($x286 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x119 (= $x253 $x286)))
 (let (($x109 (and (and (and $x119 $x248) $x114) $x94)))
 (let (($x17 (= $x109 true)))
 (let (($x311 (forall ((input.ind-%var2355X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var2355X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x180))))
 (let ((?x154 (input.spec-%var-m-0.1.1 input.ind-%var2355X)))
 (let (($x285 (input.spec-%var-m-0.0.1 input.ind-%var2355X)))
 (=> $x285 (= ?x154 ?x152))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2354X (_ BitVec 32)) )(let (($x285 (input.spec-%var-m-0.0.1 input.ind-%var2354X)))
 (= $x285 (and (bvule (_ bv0 32) input.ind-%var2354X) (bvult input.ind-%var2354X (_ bv100 32))))))
 ))
 (let (($x106 (and $x108 $x311)))
 (let (($x80 (= $x106 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x315 (concat ?x229 (concat ?x10 (concat ?x50 ?x58)))))
 (let (($x5 (= ?x315 input.dst.llvm-%m)))
 (let (($x74 (= $x5 true)))
 (let (($x299 (= $x74 true)))
 (let (($x115 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x89 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x312 (and true $x28)))
 (let (($x151 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x309 (and $x151 $x312)))
 (let (($x45 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv8 32))) (bvult ?x59 (bvsub ?x59 (_ bv8 32))))))
 (let (($x289 (and (and (and true $x45) $x309) $x89)))
 (let (($x323 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x122 (and true $x323)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x239 (and $x298 $x122)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv12 32))) (bvult ?x185 (bvsub ?x185 (_ bv12 32))))))
 (let (($x97 (and (and (and true $x298) $x305) $x239)))
 (let (($x207 (and (and $x97 $x289) $x115)))
 (let (($x320 (= $x207 true)))
 (let (($x190 (= $x320 true)))
 (let (($x321 (= $x190 true)))
 (let (($x27 (= $x97 true)))
 (let (($x261 (= $x27 true)))
 (let (($x233 (= $x261 true)))
 (let (($x227 (and $x289 $x115)))
 (let (($x169 (= $x227 true)))
 (let (($x178 (= $x169 true)))
 (let (($x220 (= $x178 true)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x46)))
 (let ((?x137 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x255 $x265)))
 (let (($x8 (and $x54 $x216)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x316 $x8)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x193)))))))
 (let (($x223 (and $x177 $x317)))
 (let (($x20 (= $x223 true)))
 (let (($x296 (= $x20 true)))
 (let (($x252 (= $x296 true)))
 (let (($x275 (and $x252 $x220)))
 (let (($x82 (and $x275 $x233)))
 (let (($x161 (and $x82 $x321)))
 (let (($x31 (and $x161 $x299)))
 (let (($x211 (and $x31 $x80)))
 (let (($x202 (and $x211 $x17)))
 (let (($x150 (and $x202 $x166)))
 (let (($x333 (and $x150 $x332)))
 (let (($x348 (and $x333 $x347)))
 (let (($x125 (and $x76 $x294)))
 (let (($x140 (and $x133 $x125)))
 (let (($x44 (and $x127 $x140)))
 (let (($x174 (and $x44 $x348)))
 (let (($x271 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x236 (and $x271 $x174)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x21 (and $x281 $x236)))
 (let (($x6 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x116 (and $x6 $x21)))
 (let (($x99 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x209 (and $x99 $x116)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x301 (and $x213 $x209)))
 (let (($x243 (and $x113 $x301)))
 (let (($x139 (= ?x179 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x214 (and $x139 $x243)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x49 (and $x230 $x214)))
 (let (($x199 (and $x113 $x49)))
 (let (($x182 (= ?x280 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x130 (and $x182 $x199)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x274 (and $x288 $x130)))
 (let (($x231 (and $x113 $x274)))
 (let (($x149 (= ?x164 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x244 (and $x149 $x231)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x212 (and $x147 $x244)))
 (let (($x184 (and $x113 $x212)))
 (let (($x18 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x62 (and $x18 $x184)))
 (let (($x295 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x55 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x172 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x55)))))))
 (let (($x134 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x104 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x134)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x219)))))))
 (let (($x56 (and $x195 $x104)))
 (let (($x208 (and $x56 $x172)))
 (let (($x142 (and $x208 $x83)))
 (let (($x234 (and $x142 $x62)))
 (let (($x386 (=> $x234 $x385)))
 (not $x386))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x164 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x379 (bvmul (_ bv4294967295 32) ?x164)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x381 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x284)))
 (let ((?x382 (bvadd ?x381 ?x379)))
 (let ((?x368 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x369 (concat ?x368 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x371 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x85 (bvadd ?x59 (_ bv3 32))))
 (let ((?x374 (concat (select input.dst.llvm-mem ?x85) (concat ?x371 ?x369))))
 (let ((?x375 (bvmul (_ bv4294967295 32) ?x374)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x359 (concat ?x358 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x361 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x225 (bvadd ?x88 (_ bv3 32))))
 (let ((?x364 (concat (select input.dst.llvm-mem ?x225) (concat ?x361 ?x359))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x350 (concat ?x349 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x266 (bvadd ?x185 (_ bv3 32))))
 (let ((?x355 (concat (select input.dst.llvm-mem ?x266) (concat ?x352 ?x350))))
 (let ((?x303 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x303)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x313)))
 (let ((?x378 (bvadd (bvadd (bvadd ?x273 ?x355) ?x364) ?x375)))
 (let (($x383 (= ?x378 ?x382)))
 (let (($x384 (= $x383 true)))
 (let (($x385 (= $x384 true)))
 (let (($x342 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x129 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x129 (_ bv1 32))))
 (let (($x343 (=> $x294 $x342)))
 (let (($x339 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x340 (= $x294 $x339)))
 (let (($x113 (= false false)))
 (let (($x334 (= ?x129 (_ bv0 32))))
 (let (($x338 (=> $x334 $x113)))
 (let (($x336 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x337 (= $x334 $x336)))
 (let (($x346 (and (and (and $x337 $x338) $x340) $x343)))
 (let (($x347 (= $x346 true)))
 (let (($x32 (= ?x164 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x157 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x157 (_ bv1 32))))
 (let (($x24 (=> $x76 $x32)))
 (let (($x110 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x76 $x110)))
 (let (($x310 (= ?x157 (_ bv0 32))))
 (let (($x279 (=> $x310 $x113)))
 (let (($x75 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x69 (= $x310 $x75)))
 (let (($x331 (and (and (and $x69 $x279) $x270) $x24)))
 (let (($x332 (= $x331 true)))
 (let ((?x280 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x84 (= ?x280 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x101 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x133 (bvuge ?x101 (_ bv1 32))))
 (let (($x78 (=> $x133 $x84)))
 (let (($x65 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x12 (= $x133 $x65)))
 (let (($x103 (= ?x101 (_ bv0 32))))
 (let (($x205 (=> $x103 $x113)))
 (let (($x260 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x23 (= $x103 $x260)))
 (let (($x91 (and (and (and $x23 $x205) $x12) $x78)))
 (let (($x166 (= $x91 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x175 (= ?x179 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x57 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x57 (_ bv1 32))))
 (let (($x94 (=> $x127 $x175)))
 (let (($x111 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x114 (= $x127 $x111)))
 (let (($x253 (= ?x57 (_ bv0 32))))
 (let (($x248 (=> $x253 $x113)))
 (let (($x286 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x119 (= $x253 $x286)))
 (let (($x109 (and (and (and $x119 $x248) $x114) $x94)))
 (let (($x17 (= $x109 true)))
 (let (($x311 (forall ((input.ind-%var2355X (_ BitVec 32)) )(let ((?x201 (bvadd (bvmul input.ind-%var2355X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x180 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv1 32))) (select input.dst.llvm-mem ?x201))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x201 (_ bv2 32))) ?x180))))
 (let ((?x154 (input.spec-%var-m-0.1.1 input.ind-%var2355X)))
 (let (($x285 (input.spec-%var-m-0.0.1 input.ind-%var2355X)))
 (=> $x285 (= ?x154 ?x152))))))))
 ))
 (let (($x108 (forall ((input.ind-%var2354X (_ BitVec 32)) )(let (($x285 (input.spec-%var-m-0.0.1 input.ind-%var2354X)))
 (= $x285 (and (bvule (_ bv0 32) input.ind-%var2354X) (bvult input.ind-%var2354X (_ bv100 32))))))
 ))
 (let (($x106 (and $x108 $x311)))
 (let (($x80 (= $x106 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x10 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x229 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x315 (concat ?x229 (concat ?x10 (concat ?x50 ?x58)))))
 (let (($x5 (= ?x315 input.dst.llvm-%m)))
 (let (($x74 (= $x5 true)))
 (let (($x299 (= $x74 true)))
 (let (($x115 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x89 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x28 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x312 (and true $x28)))
 (let (($x151 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x309 (and $x151 $x312)))
 (let (($x45 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv8 32))) (bvult ?x59 (bvsub ?x59 (_ bv8 32))))))
 (let (($x289 (and (and (and true $x45) $x309) $x89)))
 (let (($x323 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x122 (and true $x323)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x239 (and $x298 $x122)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv12 32))) (bvult ?x185 (bvsub ?x185 (_ bv12 32))))))
 (let (($x97 (and (and (and true $x298) $x305) $x239)))
 (let (($x207 (and (and $x97 $x289) $x115)))
 (let (($x320 (= $x207 true)))
 (let (($x190 (= $x320 true)))
 (let (($x321 (= $x190 true)))
 (let (($x27 (= $x97 true)))
 (let (($x261 (= $x27 true)))
 (let (($x233 (= $x261 true)))
 (let (($x227 (and $x289 $x115)))
 (let (($x169 (= $x227 true)))
 (let (($x178 (= $x169 true)))
 (let (($x220 (= $x178 true)))
 (let ((?x46 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x46)))
 (let ((?x137 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x137)))
 (let (($x255 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x255 $x265)))
 (let (($x8 (and $x54 $x216)))
 (let (($x316 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (and $x316 $x8)))
 (let (($x193 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x193)))))))
 (let (($x223 (and $x177 $x317)))
 (let (($x20 (= $x223 true)))
 (let (($x296 (= $x20 true)))
 (let (($x252 (= $x296 true)))
 (let (($x275 (and $x252 $x220)))
 (let (($x82 (and $x275 $x233)))
 (let (($x161 (and $x82 $x321)))
 (let (($x31 (and $x161 $x299)))
 (let (($x211 (and $x31 $x80)))
 (let (($x202 (and $x211 $x17)))
 (let (($x150 (and $x202 $x166)))
 (let (($x333 (and $x150 $x332)))
 (let (($x348 (and $x333 $x347)))
 (let (($x125 (and $x76 $x294)))
 (let (($x140 (and $x133 $x125)))
 (let (($x44 (and $x127 $x140)))
 (let (($x174 (and $x44 $x348)))
 (let (($x271 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x236 (and $x271 $x174)))
 (let (($x281 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x21 (and $x281 $x236)))
 (let (($x6 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x116 (and $x6 $x21)))
 (let (($x99 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x209 (and $x99 $x116)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x301 (and $x213 $x209)))
 (let (($x243 (and $x113 $x301)))
 (let (($x139 (= ?x179 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x214 (and $x139 $x243)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x49 (and $x230 $x214)))
 (let (($x199 (and $x113 $x49)))
 (let (($x182 (= ?x280 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x130 (and $x182 $x199)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x274 (and $x288 $x130)))
 (let (($x231 (and $x113 $x274)))
 (let (($x149 (= ?x164 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x244 (and $x149 $x231)))
 (let (($x147 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x212 (and $x147 $x244)))
 (let (($x184 (and $x113 $x212)))
 (let (($x18 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x62 (and $x18 $x184)))
 (let (($x295 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x55 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x172 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x55)))))))
 (let (($x134 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x104 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x134)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x195 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x219)))))))
 (let (($x56 (and $x195 $x104)))
 (let (($x208 (and $x56 $x172)))
 (let (($x142 (and $x208 $x83)))
 (let (($x234 (and $x142 $x62)))
 (let (($x386 (=> $x234 $x385)))
 (not $x386))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x280 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x282 (bvmul (_ bv4294967295 32) ?x280)))
 (let ((?x183 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x282)))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x168 (concat ?x306 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x55 (bvadd ?x192 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x55) (concat ?x263 ?x168))))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x387 (concat ?x386 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x295 (bvadd ?x291 (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x295) (concat ?x242 ?x387))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x378 (concat ?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x134 (bvadd ?x92 (_ bv3 32))))
 (let ((?x383 (concat (select input.dst.llvm-mem ?x134) (concat ?x381 ?x378))))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x370)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x368)))
 (let ((?x269 (bvadd (bvadd (bvadd ?x369 ?x383) ?x300) ?x198)))
 (let (($x276 (= ?x269 ?x183)))
 (let (($x197 (= $x276 true)))
 (let (($x96 (= $x197 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x218 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x237 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x200 (ite $x237 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x200 (_ bv1 32))))
 (let (($x33 (=> $x234 $x218)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x258 (= $x234 $x308)))
 (let (($x164 (= false false)))
 (let (($x86 (= ?x200 (_ bv0 32))))
 (let (($x62 (=> $x86 $x164)))
 (let (($x212 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x184 (= $x86 $x212)))
 (let (($x313 (and (and (and $x184 $x62) $x258) $x33)))
 (let (($x273 (= $x313 true)))
 (let (($x243 (= ?x280 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x140 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x44 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x44 (_ bv1 32))))
 (let (($x214 (=> $x246 $x243)))
 (let (($x116 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x209 (= $x246 $x116)))
 (let (($x347 (= ?x44 (_ bv0 32))))
 (let (($x21 (=> $x347 $x164)))
 (let (($x174 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x236 (= $x347 $x174)))
 (let (($x130 (and (and (and $x236 $x21) $x209) $x214)))
 (let (($x274 (= $x130 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x339 (= ?x179 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x129 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x294 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x294 (_ bv1 32))))
 (let (($x340 (=> $x125 $x339)))
 (let (($x337 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x338 (= $x125 $x337)))
 (let (($x332 (= ?x294 (_ bv0 32))))
 (let (($x336 (=> $x332 $x164)))
 (let (($x334 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x335 (= $x332 $x334)))
 (let (($x342 (and (and (and $x335 $x336) $x338) $x340)))
 (let (($x343 (= $x342 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x110 (= ?x186 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x133 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x76 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x76 (_ bv1 32))))
 (let (($x270 (=> $x163 $x110)))
 (let (($x69 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x279 (= $x163 $x69)))
 (let (($x166 (= ?x76 (_ bv0 32))))
 (let (($x75 (=> $x166 $x164)))
 (let (($x310 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x254 (= $x166 $x310)))
 (let (($x32 (and (and (and $x254 $x75) $x279) $x270)))
 (let (($x24 (= $x32 true)))
 (let (($x72 (forall ((input.ind-%var2387X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x103))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var2387X)))
 (let (($x124 (input.spec-%var-m-0.0.1 input.ind-%var2387X)))
 (=> $x124 (= ?x165 ?x65))))))))
 ))
 (let (($x152 (forall ((input.ind-%var2386X (_ BitVec 32)) )(let (($x124 (input.spec-%var-m-0.0.1 input.ind-%var2386X)))
 (= $x124 (and (bvule (_ bv0 32) input.ind-%var2386X) (bvult input.ind-%var2386X (_ bv100 32))))))
 ))
 (let (($x84 (and $x152 $x72)))
 (let (($x78 (= $x84 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x48 (concat ?x153 (concat ?x74 ?x315)))))
 (let (($x328 (= ?x318 input.dst.llvm-%m)))
 (let (($x123 (= $x328 true)))
 (let (($x108 (= $x123 true)))
 (let (($x297 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let (($x178 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x115 (and true $x67)))
 (let (($x309 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x227 (and $x309 $x115)))
 (let (($x64 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv8 32))) (bvult ?x192 (bvsub ?x192 (_ bv8 32))))))
 (let (($x143 (and (and (and true $x64) $x227) $x178)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x82 (and true $x233)))
 (let (($x194 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x126 (and $x194 $x82)))
 (let (($x122 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x190 (and (and (and true $x194) $x122) $x126)))
 (let (($x232 (and (and $x190 $x143) $x297)))
 (let (($x10 (= $x232 true)))
 (let (($x112 (= $x10 true)))
 (let (($x50 (= $x112 true)))
 (let (($x321 (= $x190 true)))
 (let (($x161 (= $x321 true)))
 (let (($x71 (= $x161 true)))
 (let (($x221 (and $x143 $x297)))
 (let (($x47 (= $x221 true)))
 (let (($x327 (= $x47 true)))
 (let (($x155 (= $x327 true)))
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x102 (= (_ bv0 32) ?x160)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x223 $x296)))
 (let (($x188 (and $x252 $x102)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x148 $x188)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x317 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x45 (and $x317 $x159)))
 (let (($x120 (= $x45 true)))
 (let (($x9 (= $x120 true)))
 (let (($x203 (= $x9 true)))
 (let (($x305 (and $x203 $x155)))
 (let (($x251 (and $x305 $x71)))
 (let (($x58 (and $x251 $x50)))
 (let (($x154 (and $x58 $x108)))
 (let (($x91 (and $x154 $x78)))
 (let (($x331 (and $x91 $x24)))
 (let (($x346 (and $x331 $x343)))
 (let (($x231 (and $x346 $x274)))
 (let (($x354 (and $x231 $x273)))
 (let (($x257 (and $x246 $x86)))
 (let (($x193 (and $x125 $x257)))
 (let (($x189 (and $x163 $x193)))
 (let (($x351 (and $x189 $x354)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x352 (and $x101 $x351)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x98 (and $x127 $x352)))
 (let (($x267 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x349 (and $x267 $x98)))
 (let (($x307 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x241 (and $x307 $x349)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x350 (and $x53 $x241)))
 (let (($x353 (and $x164 $x350)))
 (let (($x167 (= ?x186 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x355 (and $x167 $x353)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x376 (and $x213 $x355)))
 (let (($x363 (and $x164 $x376)))
 (let (($x139 (= ?x179 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x360 (and $x139 $x363)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x361 (and $x230 $x360)))
 (let (($x357 (and $x164 $x361)))
 (let (($x182 (= ?x280 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x358 (and $x182 $x357)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x356 (and $x262 $x358)))
 (let (($x359 (and $x164 $x356)))
 (let (($x224 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x362 (and $x224 $x359)))
 (let (($x173 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x304 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x95 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x304)))))))
 (let (($x287 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x59 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x287)))))))
 (let (($x81 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x187 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x81)))))))
 (let (($x145 (and $x187 $x59)))
 (let (($x79 (and $x145 $x95)))
 (let (($x11 (and $x79 $x22)))
 (let (($x364 (and $x11 $x362)))
 (let (($x259 (=> $x364 $x96)))
 (not $x259)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x280 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x282 (bvmul (_ bv4294967295 32) ?x280)))
 (let ((?x183 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x282)))
 (let ((?x306 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x168 (concat ?x306 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x55 (bvadd ?x192 (_ bv3 32))))
 (let ((?x264 (concat (select input.dst.llvm-mem ?x55) (concat ?x263 ?x168))))
 (let ((?x198 (bvmul (_ bv4294967295 32) ?x264)))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x387 (concat ?x386 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x295 (bvadd ?x291 (_ bv3 32))))
 (let ((?x300 (concat (select input.dst.llvm-mem ?x295) (concat ?x242 ?x387))))
 (let ((?x375 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x378 (concat ?x375 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x134 (bvadd ?x92 (_ bv3 32))))
 (let ((?x383 (concat (select input.dst.llvm-mem ?x134) (concat ?x381 ?x378))))
 (let ((?x370 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x368 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x370)))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x368)))
 (let ((?x269 (bvadd (bvadd (bvadd ?x369 ?x383) ?x300) ?x198)))
 (let (($x276 (= ?x269 ?x183)))
 (let (($x197 (= $x276 true)))
 (let (($x96 (= $x197 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x218 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x237 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x200 (ite $x237 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x200 (_ bv1 32))))
 (let (($x33 (=> $x234 $x218)))
 (let (($x308 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x258 (= $x234 $x308)))
 (let (($x164 (= false false)))
 (let (($x86 (= ?x200 (_ bv0 32))))
 (let (($x62 (=> $x86 $x164)))
 (let (($x212 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x184 (= $x86 $x212)))
 (let (($x313 (and (and (and $x184 $x62) $x258) $x33)))
 (let (($x273 (= $x313 true)))
 (let (($x243 (= ?x280 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x140 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x44 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x246 (bvuge ?x44 (_ bv1 32))))
 (let (($x214 (=> $x246 $x243)))
 (let (($x116 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x209 (= $x246 $x116)))
 (let (($x347 (= ?x44 (_ bv0 32))))
 (let (($x21 (=> $x347 $x164)))
 (let (($x174 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x236 (= $x347 $x174)))
 (let (($x130 (and (and (and $x236 $x21) $x209) $x214)))
 (let (($x274 (= $x130 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x339 (= ?x179 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x129 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x294 (ite $x129 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x294 (_ bv1 32))))
 (let (($x340 (=> $x125 $x339)))
 (let (($x337 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x338 (= $x125 $x337)))
 (let (($x332 (= ?x294 (_ bv0 32))))
 (let (($x336 (=> $x332 $x164)))
 (let (($x334 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x335 (= $x332 $x334)))
 (let (($x342 (and (and (and $x335 $x336) $x338) $x340)))
 (let (($x343 (= $x342 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x110 (= ?x186 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x133 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x76 (ite $x133 (_ bv1 32) (_ bv0 32))))
 (let (($x163 (bvuge ?x76 (_ bv1 32))))
 (let (($x270 (=> $x163 $x110)))
 (let (($x69 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x279 (= $x163 $x69)))
 (let (($x166 (= ?x76 (_ bv0 32))))
 (let (($x75 (=> $x166 $x164)))
 (let (($x310 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x254 (= $x166 $x310)))
 (let (($x32 (and (and (and $x254 $x75) $x279) $x270)))
 (let (($x24 (= $x32 true)))
 (let (($x72 (forall ((input.ind-%var2387X (_ BitVec 32)) )(let ((?x94 (bvadd (bvmul input.ind-%var2387X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x103 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv1 32))) (select input.dst.llvm-mem ?x94))))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x94 (_ bv2 32))) ?x103))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var2387X)))
 (let (($x124 (input.spec-%var-m-0.0.1 input.ind-%var2387X)))
 (=> $x124 (= ?x165 ?x65))))))))
 ))
 (let (($x152 (forall ((input.ind-%var2386X (_ BitVec 32)) )(let (($x124 (input.spec-%var-m-0.0.1 input.ind-%var2386X)))
 (= $x124 (and (bvule (_ bv0 32) input.ind-%var2386X) (bvult input.ind-%var2386X (_ bv100 32))))))
 ))
 (let (($x84 (and $x152 $x72)))
 (let (($x78 (= $x84 true)))
 (let ((?x315 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x153 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x48 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x318 (concat ?x48 (concat ?x153 (concat ?x74 ?x315)))))
 (let (($x328 (= ?x318 input.dst.llvm-%m)))
 (let (($x123 (= $x328 true)))
 (let (($x108 (= $x123 true)))
 (let (($x297 (= (bvand ?x192 (_ bv4294967292 32)) ?x192)))
 (let (($x178 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x67 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x115 (and true $x67)))
 (let (($x309 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x227 (and $x309 $x115)))
 (let (($x64 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x192 (bvsub ?x192 (_ bv8 32))) (bvult ?x192 (bvsub ?x192 (_ bv8 32))))))
 (let (($x143 (and (and (and true $x64) $x227) $x178)))
 (let (($x233 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x82 (and true $x233)))
 (let (($x194 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x126 (and $x194 $x82)))
 (let (($x122 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x190 (and (and (and true $x194) $x122) $x126)))
 (let (($x232 (and (and $x190 $x143) $x297)))
 (let (($x10 (= $x232 true)))
 (let (($x112 (= $x10 true)))
 (let (($x50 (= $x112 true)))
 (let (($x321 (= $x190 true)))
 (let (($x161 (= $x321 true)))
 (let (($x71 (= $x161 true)))
 (let (($x221 (and $x143 $x297)))
 (let (($x47 (= $x221 true)))
 (let (($x327 (= $x47 true)))
 (let (($x155 (= $x327 true)))
 (let ((?x160 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x102 (= (_ bv0 32) ?x160)))
 (let ((?x20 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x296 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x20)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x252 (and $x223 $x296)))
 (let (($x188 (and $x252 $x102)))
 (let (($x148 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x148 $x188)))
 (let (($x137 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x317 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x137)))))))
 (let (($x45 (and $x317 $x159)))
 (let (($x120 (= $x45 true)))
 (let (($x9 (= $x120 true)))
 (let (($x203 (= $x9 true)))
 (let (($x305 (and $x203 $x155)))
 (let (($x251 (and $x305 $x71)))
 (let (($x58 (and $x251 $x50)))
 (let (($x154 (and $x58 $x108)))
 (let (($x91 (and $x154 $x78)))
 (let (($x331 (and $x91 $x24)))
 (let (($x346 (and $x331 $x343)))
 (let (($x231 (and $x346 $x274)))
 (let (($x354 (and $x231 $x273)))
 (let (($x257 (and $x246 $x86)))
 (let (($x193 (and $x125 $x257)))
 (let (($x189 (and $x163 $x193)))
 (let (($x351 (and $x189 $x354)))
 (let (($x101 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x352 (and $x101 $x351)))
 (let (($x127 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x98 (and $x127 $x352)))
 (let (($x267 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x349 (and $x267 $x98)))
 (let (($x307 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x241 (and $x307 $x349)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x350 (and $x53 $x241)))
 (let (($x353 (and $x164 $x350)))
 (let (($x167 (= ?x186 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x355 (and $x167 $x353)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x376 (and $x213 $x355)))
 (let (($x363 (and $x164 $x376)))
 (let (($x139 (= ?x179 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x360 (and $x139 $x363)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x361 (and $x230 $x360)))
 (let (($x357 (and $x164 $x361)))
 (let (($x182 (= ?x280 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x358 (and $x182 $x357)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x356 (and $x262 $x358)))
 (let (($x359 (and $x164 $x356)))
 (let (($x224 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x362 (and $x224 $x359)))
 (let (($x173 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x304 (bvugt ?x192 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x95 (=> (bvule ?x192 (bvsub (bvadd ?x192 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x304)))))))
 (let (($x287 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x206 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x59 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x206 $x287)))))))
 (let (($x81 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x195)))
 (let (($x187 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x81)))))))
 (let (($x145 (and $x187 $x59)))
 (let (($x79 (and $x145 $x95)))
 (let (($x11 (and $x79 $x22)))
 (let (($x364 (and $x11 $x362)))
 (let (($x259 (=> $x364 $x96)))
 (not $x259)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x201 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x284)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x80 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x304 (bvadd ?x85 (_ bv3 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem ?x304) (concat ?x111 ?x80))))
 (let ((?x138 (bvmul (_ bv4294967295 32) ?x253)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x272 (concat ?x158 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x173 (bvadd ?x88 (_ bv3 32))))
 (let ((?x311 (concat (select input.dst.llvm-mem ?x173) (concat ?x329 ?x272))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x198 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x287 (bvadd ?x185 (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x287) (concat ?x282 ?x269))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x240)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x306)))
 (let ((?x248 (bvadd (bvadd (bvadd ?x168 ?x197) ?x311) ?x138)))
 (let (($x15 (= ?x248 ?x201)))
 (let (($x35 (= $x15 true)))
 (let (($x70 (= $x35 true)))
 (let (($x365 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x14 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x8 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x8 (_ bv1 32))))
 (let (($x373 (=> $x316 $x365)))
 (let (($x366 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x371 (= $x316 $x366)))
 (let (($x280 (= false false)))
 (let (($x358 (= ?x8 (_ bv0 32))))
 (let (($x364 (=> $x358 $x280)))
 (let (($x359 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x362 (= $x358 $x359)))
 (let (($x368 (and (and (and $x362 $x364) $x371) $x373)))
 (let (($x369 (= $x368 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x353 (= ?x179 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x193 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x189 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x189 (_ bv1 32))))
 (let (($x355 (=> $x98 $x353)))
 (let (($x349 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x241 (= $x98 $x349)))
 (let (($x177 (= ?x189 (_ bv0 32))))
 (let (($x352 (=> $x177 $x280)))
 (let (($x354 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x351 (= $x177 $x354)))
 (let (($x360 (and (and (and $x351 $x352) $x241) $x355)))
 (let (($x361 (= $x360 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x186 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x200 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x86 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x86 (_ bv1 32))))
 (let (($x258 (=> $x257 $x308)))
 (let (($x62 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x238 (= $x257 $x62)))
 (let (($x274 (= ?x86 (_ bv0 32))))
 (let (($x184 (=> $x274 $x280)))
 (let (($x244 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x212 (= $x274 $x244)))
 (let (($x218 (and (and (and $x212 $x184) $x238) $x258)))
 (let (($x33 (= $x218 true)))
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x116 (= ?x281 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x246 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x246 (_ bv1 32))))
 (let (($x209 (=> $x237 $x116)))
 (let (($x236 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x21 (= $x237 $x236)))
 (let (($x343 (= ?x246 (_ bv0 32))))
 (let (($x174 (=> $x343 $x280)))
 (let (($x347 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x348 (= $x343 $x347)))
 (let (($x243 (and (and (and $x348 $x174) $x21) $x209)))
 (let (($x214 (= $x243 true)))
 (let (($x344 (forall ((input.ind-%var2419X (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul input.ind-%var2419X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x332))))
 (let ((?x51 (input.spec-%var-m-0.1.1 input.ind-%var2419X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2419X)))
 (=> $x140 (= ?x51 ?x337))))))))
 ))
 (let (($x65 (forall ((input.ind-%var2418X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2418X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2418X) (bvult input.ind-%var2418X (_ bv100 32))))))
 ))
 (let (($x339 (and $x65 $x344)))
 (let (($x340 (= $x339 true)))
 (let ((?x318 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x43 (concat ?x18 (concat ?x123 ?x318)))))
 (let (($x180 (= ?x176 input.dst.llvm-%m)))
 (let (($x277 (= $x180 true)))
 (let (($x152 (= $x277 true)))
 (let (($x207 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x327 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x297 (and true $x298)))
 (let (($x227 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x221 (and $x227 $x297)))
 (let (($x289 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv8 32))) (bvult ?x85 (bvsub ?x85 (_ bv8 32))))))
 (let (($x322 (and (and (and true $x289) $x221) $x327)))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x251 (and true $x71)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x229 (and $x97 $x251)))
 (let (($x82 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv12 32))) (bvult ?x185 (bvsub ?x185 (_ bv12 32))))))
 (let (($x112 (and (and (and true $x97) $x82) $x229)))
 (let (($x31 (and (and $x112 $x322) $x207)))
 (let (($x153 (= $x31 true)))
 (let (($x5 (= $x153 true)))
 (let (($x74 (= $x5 true)))
 (let (($x50 (= $x112 true)))
 (let (($x58 (= $x50 true)))
 (let (($x196 (= $x58 true)))
 (let (($x283 (and $x322 $x207)))
 (let (($x330 (= $x283 true)))
 (let (($x249 (= $x330 true)))
 (let (($x323 (= $x249 true)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x151 (= (_ bv0 32) ?x29)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x45 $x9)))
 (let (($x135 (and $x203 $x151)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x216 $x135)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x20)))))))
 (let (($x64 (and $x159 $x36)))
 (let (($x220 (= $x64 true)))
 (let (($x28 (= $x220 true)))
 (let (($x312 (= $x28 true)))
 (let (($x122 (and $x312 $x323)))
 (let (($x292 (and $x122 $x196)))
 (let (($x315 (and $x292 $x74)))
 (let (($x165 (and $x315 $x152)))
 (let (($x342 (and $x165 $x340)))
 (let (($x130 (and $x342 $x214)))
 (let (($x313 (and $x130 $x33)))
 (let (($x357 (and $x313 $x361)))
 (let (($x382 (and $x357 $x369)))
 (let (($x255 (and $x177 $x316)))
 (let (($x137 (and $x257 $x255)))
 (let (($x265 (and $x237 $x137)))
 (let (($x380 (and $x265 $x382)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x381 (and $x294 $x380)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x374 (and $x163 $x381)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x375 (and $x133 $x374)))
 (let (($x325 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x372 (and $x325 $x375)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x378 (and $x57 $x372)))
 (let (($x379 (and $x280 $x378)))
 (let (($x271 (= ?x281 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x383 (and $x271 $x379)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x302 (and $x53 $x383)))
 (let (($x16 (and $x280 $x302)))
 (let (($x167 (= ?x186 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x90 (and $x167 $x16)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x242 (and $x213 $x90)))
 (let (($x385 (and $x280 $x242)))
 (let (($x139 (= ?x179 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x386 (and $x139 $x385)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x384 (and $x319 $x386)))
 (let (($x387 (and $x280 $x384)))
 (let (($x288 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x118 (and $x288 $x387)))
 (let (($x68 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x250 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x225 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x250)))))))
 (let (($x256 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x287)))
 (let (($x192 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x256)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x266 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x219)))))))
 (let (($x26 (and $x266 $x192)))
 (let (($x93 (and $x26 $x225)))
 (let (($x117 (and $x93 $x147)))
 (let (($x300 (and $x117 $x118)))
 (let (($x278 (=> $x300 $x70)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x201 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x284)))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x80 (concat ?x106 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x85 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x304 (bvadd ?x85 (_ bv3 32))))
 (let ((?x253 (concat (select input.dst.llvm-mem ?x304) (concat ?x111 ?x80))))
 (let ((?x138 (bvmul (_ bv4294967295 32) ?x253)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x272 (concat ?x158 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x173 (bvadd ?x88 (_ bv3 32))))
 (let ((?x311 (concat (select input.dst.llvm-mem ?x173) (concat ?x329 ?x272))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x269 (concat ?x198 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x282 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x287 (bvadd ?x185 (_ bv3 32))))
 (let ((?x197 (concat (select input.dst.llvm-mem ?x287) (concat ?x282 ?x269))))
 (let ((?x240 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x306 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x240)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x306)))
 (let ((?x248 (bvadd (bvadd (bvadd ?x168 ?x197) ?x311) ?x138)))
 (let (($x15 (= ?x248 ?x201)))
 (let (($x35 (= $x15 true)))
 (let (($x70 (= $x35 true)))
 (let (($x365 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x14 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x8 (ite $x14 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x8 (_ bv1 32))))
 (let (($x373 (=> $x316 $x365)))
 (let (($x366 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x371 (= $x316 $x366)))
 (let (($x280 (= false false)))
 (let (($x358 (= ?x8 (_ bv0 32))))
 (let (($x364 (=> $x358 $x280)))
 (let (($x359 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x362 (= $x358 $x359)))
 (let (($x368 (and (and (and $x362 $x364) $x371) $x373)))
 (let (($x369 (= $x368 true)))
 (let ((?x179 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x353 (= ?x179 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x193 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x189 (ite $x193 (_ bv1 32) (_ bv0 32))))
 (let (($x98 (bvuge ?x189 (_ bv1 32))))
 (let (($x355 (=> $x98 $x353)))
 (let (($x349 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x241 (= $x98 $x349)))
 (let (($x177 (= ?x189 (_ bv0 32))))
 (let (($x352 (=> $x177 $x280)))
 (let (($x354 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x351 (= $x177 $x354)))
 (let (($x360 (and (and (and $x351 $x352) $x241) $x355)))
 (let (($x361 (= $x360 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x186 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x200 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x86 (ite $x200 (_ bv1 32) (_ bv0 32))))
 (let (($x257 (bvuge ?x86 (_ bv1 32))))
 (let (($x258 (=> $x257 $x308)))
 (let (($x62 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x238 (= $x257 $x62)))
 (let (($x274 (= ?x86 (_ bv0 32))))
 (let (($x184 (=> $x274 $x280)))
 (let (($x244 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x212 (= $x274 $x244)))
 (let (($x218 (and (and (and $x212 $x184) $x238) $x258)))
 (let (($x33 (= $x218 true)))
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x116 (= ?x281 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x246 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x246 (_ bv1 32))))
 (let (($x209 (=> $x237 $x116)))
 (let (($x236 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x21 (= $x237 $x236)))
 (let (($x343 (= ?x246 (_ bv0 32))))
 (let (($x174 (=> $x343 $x280)))
 (let (($x347 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x348 (= $x343 $x347)))
 (let (($x243 (and (and (and $x348 $x174) $x21) $x209)))
 (let (($x214 (= $x243 true)))
 (let (($x344 (forall ((input.ind-%var2419X (_ BitVec 32)) )(let ((?x270 (bvadd (bvmul input.ind-%var2419X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv1 32))) (select input.dst.llvm-mem ?x270))))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x270 (_ bv2 32))) ?x332))))
 (let ((?x51 (input.spec-%var-m-0.1.1 input.ind-%var2419X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2419X)))
 (=> $x140 (= ?x51 ?x337))))))))
 ))
 (let (($x65 (forall ((input.ind-%var2418X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2418X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2418X) (bvult input.ind-%var2418X (_ bv100 32))))))
 ))
 (let (($x339 (and $x65 $x344)))
 (let (($x340 (= $x339 true)))
 (let ((?x318 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x18 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x43 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x176 (concat ?x43 (concat ?x18 (concat ?x123 ?x318)))))
 (let (($x180 (= ?x176 input.dst.llvm-%m)))
 (let (($x277 (= $x180 true)))
 (let (($x152 (= $x277 true)))
 (let (($x207 (= (bvand ?x85 (_ bv4294967292 32)) ?x85)))
 (let (($x327 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x297 (and true $x298)))
 (let (($x227 (= (bvand ?x185 (_ bv4294967292 32)) ?x185)))
 (let (($x221 (and $x227 $x297)))
 (let (($x289 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x85 (bvsub ?x85 (_ bv8 32))) (bvult ?x85 (bvsub ?x85 (_ bv8 32))))))
 (let (($x322 (and (and (and true $x289) $x221) $x327)))
 (let (($x71 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x251 (and true $x71)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x229 (and $x97 $x251)))
 (let (($x82 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x185 (bvsub ?x185 (_ bv12 32))) (bvult ?x185 (bvsub ?x185 (_ bv12 32))))))
 (let (($x112 (and (and (and true $x97) $x82) $x229)))
 (let (($x31 (and (and $x112 $x322) $x207)))
 (let (($x153 (= $x31 true)))
 (let (($x5 (= $x153 true)))
 (let (($x74 (= $x5 true)))
 (let (($x50 (= $x112 true)))
 (let (($x58 (= $x50 true)))
 (let (($x196 (= $x58 true)))
 (let (($x283 (and $x322 $x207)))
 (let (($x330 (= $x283 true)))
 (let (($x249 (= $x330 true)))
 (let (($x323 (= $x249 true)))
 (let ((?x29 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x151 (= (_ bv0 32) ?x29)))
 (let ((?x120 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x120)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (and $x45 $x9)))
 (let (($x135 (and $x203 $x151)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (and $x216 $x135)))
 (let (($x20 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x20)))))))
 (let (($x64 (and $x159 $x36)))
 (let (($x220 (= $x64 true)))
 (let (($x28 (= $x220 true)))
 (let (($x312 (= $x28 true)))
 (let (($x122 (and $x312 $x323)))
 (let (($x292 (and $x122 $x196)))
 (let (($x315 (and $x292 $x74)))
 (let (($x165 (and $x315 $x152)))
 (let (($x342 (and $x165 $x340)))
 (let (($x130 (and $x342 $x214)))
 (let (($x313 (and $x130 $x33)))
 (let (($x357 (and $x313 $x361)))
 (let (($x382 (and $x357 $x369)))
 (let (($x255 (and $x177 $x316)))
 (let (($x137 (and $x257 $x255)))
 (let (($x265 (and $x237 $x137)))
 (let (($x380 (and $x265 $x382)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x381 (and $x294 $x380)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x374 (and $x163 $x381)))
 (let (($x133 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x375 (and $x133 $x374)))
 (let (($x325 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x372 (and $x325 $x375)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x378 (and $x57 $x372)))
 (let (($x379 (and $x280 $x378)))
 (let (($x271 (= ?x281 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x383 (and $x271 $x379)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x302 (and $x53 $x383)))
 (let (($x16 (and $x280 $x302)))
 (let (($x167 (= ?x186 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x90 (and $x167 $x16)))
 (let (($x213 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x242 (and $x213 $x90)))
 (let (($x385 (and $x280 $x242)))
 (let (($x139 (= ?x179 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x386 (and $x139 $x385)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x384 (and $x319 $x386)))
 (let (($x387 (and $x280 $x384)))
 (let (($x288 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x118 (and $x288 $x387)))
 (let (($x68 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x250 (bvugt ?x85 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x225 (=> (bvule ?x85 (bvsub (bvadd ?x85 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x250)))))))
 (let (($x256 (bvugt ?x185 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x287)))
 (let (($x192 (=> (bvule ?x185 (bvsub (bvadd ?x185 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x256)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x187 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x228 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x266 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x228 $x219)))))))
 (let (($x26 (and $x266 $x192)))
 (let (($x93 (and $x26 $x225)))
 (let (($x117 (and $x93 $x147)))
 (let (($x300 (and $x117 $x118)))
 (let (($x278 (=> $x300 $x70)))
 (not $x278))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x94 (bvadd ?x127 ?x281)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x250 (bvadd ?x55 (_ bv3 32))))
 (let ((?x150 (concat (select input.dst.llvm-mem ?x250) (concat ?x254 ?x171))))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x54 (concat ?x34 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x68 (bvadd ?x291 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x68) (concat ?x44 ?x54))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x248 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x256 (bvadd ?x92 (_ bv3 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem ?x256) (concat ?x201 ?x248))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x7)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x106)))
 (let ((?x279 (bvadd (bvadd (bvadd ?x80 ?x70) ?x175) ?x91)))
 (let (($x260 (= ?x279 ?x94)))
 (let (($x17 (= $x260 true)))
 (let (($x204 (= $x17 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x314 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x66 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x188 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x188 (_ bv1 32))))
 (let (($x245 (=> $x300 $x314)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x263 (= $x300 $x77)))
 (let (($x179 (= false false)))
 (let (($x148 (= ?x188 (_ bv0 32))))
 (let (($x118 (=> $x148 $x179)))
 (let (($x384 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x387 (= $x148 $x384)))
 (let (($x306 (and (and (and $x387 $x118) $x263) $x245)))
 (let (($x168 (= $x306 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x379 (= ?x186 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x137 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x265 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x265 (_ bv1 32))))
 (let (($x383 (=> $x374 $x379)))
 (let (($x375 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x372 (= $x374 $x375)))
 (let (($x317 (= ?x265 (_ bv0 32))))
 (let (($x381 (=> $x317 $x179)))
 (let (($x382 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x380 (= $x317 $x382)))
 (let (($x90 (and (and (and $x380 $x381) $x372) $x383)))
 (let (($x242 (= $x90 true)))
 (let (($x366 (= ?x281 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x8 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x316 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x316 (_ bv1 32))))
 (let (($x371 (=> $x255 $x366)))
 (let (($x362 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x364 (= $x255 $x362)))
 (let (($x361 (= ?x316 (_ bv0 32))))
 (let (($x359 (=> $x361 $x179)))
 (let (($x358 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x356 (= $x361 $x358)))
 (let (($x365 (and (and (and $x356 $x359) $x364) $x371)))
 (let (($x373 (= $x365 true)))
 (let (($x349 (= ?x127 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x177 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x177 (_ bv1 32))))
 (let (($x241 (=> $x14 $x349)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x376 (= $x14 $x352)))
 (let (($x33 (= ?x177 (_ bv0 32))))
 (let (($x351 (=> $x33 $x179)))
 (let (($x273 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x354 (= $x33 $x273)))
 (let (($x353 (and (and (and $x354 $x351) $x376) $x241)))
 (let (($x355 (= $x353 true)))
 (let (($x234 (forall ((input.ind-%var2451X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var2451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x274))))
 (let ((?x132 (input.spec-%var-m-0.1.1 input.ind-%var2451X)))
 (let (($x193 (input.spec-%var-m-0.0.1 input.ind-%var2451X)))
 (=> $x193 (= ?x132 ?x62))))))))
 ))
 (let (($x337 (forall ((input.ind-%var2450X (_ BitVec 32)) )(let (($x193 (input.spec-%var-m-0.0.1 input.ind-%var2450X)))
 (= $x193 (and (bvule (_ bv0 32) input.ind-%var2450X) (bvult input.ind-%var2450X (_ bv100 32))))))
 ))
 (let (($x308 (and $x337 $x234)))
 (let (($x258 (= $x308 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x293 (concat ?x224 (concat ?x277 ?x176)))))
 (let (($x103 (= ?x202 input.dst.llvm-%m)))
 (let (($x23 (= $x103 true)))
 (let (($x65 (= $x23 true)))
 (let (($x232 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x249 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x207 (and true $x194)))
 (let (($x221 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x283 (and $x221 $x207)))
 (let (($x143 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv8 32))) (bvult ?x55 (bvsub ?x55 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x143) $x283) $x249)))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x292 (and true $x196)))
 (let (($x190 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x48 (and $x190 $x292)))
 (let (($x251 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x5 (and (and (and true $x190) $x251) $x48)))
 (let (($x154 (and (and $x5 $x320) $x232)))
 (let (($x18 (= $x154 true)))
 (let (($x328 (= $x18 true)))
 (let (($x123 (= $x328 true)))
 (let (($x74 (= $x5 true)))
 (let (($x315 (= $x74 true)))
 (let (($x299 (= $x315 true)))
 (let (($x27 (and $x320 $x232)))
 (let (($x239 (= $x27 true)))
 (let (($x261 (= $x239 true)))
 (let (($x233 (= $x261 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x309 (= (_ bv0 32) ?x40)))
 (let ((?x220 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x64 $x28)))
 (let (($x146 (and $x312 $x309)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x102 $x146)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x120)))))))
 (let (($x289 (and $x36 $x89)))
 (let (($x155 (= $x289 true)))
 (let (($x67 (= $x155 true)))
 (let (($x115 (= $x67 true)))
 (let (($x82 (and $x115 $x233)))
 (let (($x290 (and $x82 $x299)))
 (let (($x318 (and $x290 $x123)))
 (let (($x51 (and $x318 $x65)))
 (let (($x218 (and $x51 $x258)))
 (let (($x360 (and $x218 $x355)))
 (let (($x368 (and $x360 $x373)))
 (let (($x385 (and $x368 $x242)))
 (let (($x276 (and $x385 $x168)))
 (let (($x223 (and $x317 $x148)))
 (let (($x20 (and $x255 $x223)))
 (let (($x296 (and $x14 $x20)))
 (let (($x37 (and $x296 $x276)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x282 (and $x86 $x37)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x264 (and $x237 $x282)))
 (let (($x125 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x198 (and $x125 $x264)))
 (let (($x129 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x13 (and $x129 $x198)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x269 (and $x76 $x13)))
 (let (($x183 (and $x179 $x269)))
 (let (($x101 (= ?x127 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x197 (and $x101 $x183)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x211 (and $x57 $x197)))
 (let (($x222 (and $x179 $x211)))
 (let (($x271 (= ?x281 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x162 (and $x271 $x222)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x329 (and $x53 $x162)))
 (let (($x259 (and $x179 $x329)))
 (let (($x167 (= ?x186 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x158 (and $x167 $x259)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x96 (and $x38 $x158)))
 (let (($x272 (and $x179 $x96)))
 (let (($x230 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x157 (and $x230 $x272)))
 (let (($x142 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x208 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x295 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x208)))))))
 (let (($x56 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x85 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x56)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x134 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x219)))))))
 (let (($x206 (and $x134 $x85)))
 (let (($x215 (and $x206 $x295)))
 (let (($x19 (and $x215 $x262)))
 (let (($x311 (and $x19 $x157)))
 (let (($x210 (=> $x311 $x204)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x94 (bvadd ?x127 ?x281)))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x171 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x254 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x250 (bvadd ?x55 (_ bv3 32))))
 (let ((?x150 (concat (select input.dst.llvm-mem ?x250) (concat ?x254 ?x171))))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x150)))
 (let ((?x34 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x54 (concat ?x34 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x44 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x68 (bvadd ?x291 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x68) (concat ?x44 ?x54))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x248 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x256 (bvadd ?x92 (_ bv3 32))))
 (let ((?x70 (concat (select input.dst.llvm-mem ?x256) (concat ?x201 ?x248))))
 (let ((?x7 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x106 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x7)))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x106)))
 (let ((?x279 (bvadd (bvadd (bvadd ?x80 ?x70) ?x175) ?x91)))
 (let (($x260 (= ?x279 ?x94)))
 (let (($x17 (= $x260 true)))
 (let (($x204 (= $x17 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x314 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x66 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x188 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x188 (_ bv1 32))))
 (let (($x245 (=> $x300 $x314)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x263 (= $x300 $x77)))
 (let (($x179 (= false false)))
 (let (($x148 (= ?x188 (_ bv0 32))))
 (let (($x118 (=> $x148 $x179)))
 (let (($x384 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x387 (= $x148 $x384)))
 (let (($x306 (and (and (and $x387 $x118) $x263) $x245)))
 (let (($x168 (= $x306 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x379 (= ?x186 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x137 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x265 (ite $x137 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x265 (_ bv1 32))))
 (let (($x383 (=> $x374 $x379)))
 (let (($x375 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x372 (= $x374 $x375)))
 (let (($x317 (= ?x265 (_ bv0 32))))
 (let (($x381 (=> $x317 $x179)))
 (let (($x382 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x380 (= $x317 $x382)))
 (let (($x90 (and (and (and $x380 $x381) $x372) $x383)))
 (let (($x242 (= $x90 true)))
 (let (($x366 (= ?x281 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x8 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x316 (ite $x8 (_ bv1 32) (_ bv0 32))))
 (let (($x255 (bvuge ?x316 (_ bv1 32))))
 (let (($x371 (=> $x255 $x366)))
 (let (($x362 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x364 (= $x255 $x362)))
 (let (($x361 (= ?x316 (_ bv0 32))))
 (let (($x359 (=> $x361 $x179)))
 (let (($x358 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x356 (= $x361 $x358)))
 (let (($x365 (and (and (and $x356 $x359) $x364) $x371)))
 (let (($x373 (= $x365 true)))
 (let (($x349 (= ?x127 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x177 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x14 (bvuge ?x177 (_ bv1 32))))
 (let (($x241 (=> $x14 $x349)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x376 (= $x14 $x352)))
 (let (($x33 (= ?x177 (_ bv0 32))))
 (let (($x351 (=> $x33 $x179)))
 (let (($x273 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x354 (= $x33 $x273)))
 (let (($x353 (and (and (and $x354 $x351) $x376) $x241)))
 (let (($x355 (= $x353 true)))
 (let (($x234 (forall ((input.ind-%var2451X (_ BitVec 32)) )(let ((?x209 (bvadd (bvmul input.ind-%var2451X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x274 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv1 32))) (select input.dst.llvm-mem ?x209))))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x209 (_ bv2 32))) ?x274))))
 (let ((?x132 (input.spec-%var-m-0.1.1 input.ind-%var2451X)))
 (let (($x193 (input.spec-%var-m-0.0.1 input.ind-%var2451X)))
 (=> $x193 (= ?x132 ?x62))))))))
 ))
 (let (($x337 (forall ((input.ind-%var2450X (_ BitVec 32)) )(let (($x193 (input.spec-%var-m-0.0.1 input.ind-%var2450X)))
 (= $x193 (and (bvule (_ bv0 32) input.ind-%var2450X) (bvult input.ind-%var2450X (_ bv100 32))))))
 ))
 (let (($x308 (and $x337 $x234)))
 (let (($x258 (= $x308 true)))
 (let ((?x176 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x224 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x293 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x202 (concat ?x293 (concat ?x224 (concat ?x277 ?x176)))))
 (let (($x103 (= ?x202 input.dst.llvm-%m)))
 (let (($x23 (= $x103 true)))
 (let (($x65 (= $x23 true)))
 (let (($x232 (= (bvand ?x55 (_ bv4294967292 32)) ?x55)))
 (let (($x249 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x194 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x207 (and true $x194)))
 (let (($x221 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x283 (and $x221 $x207)))
 (let (($x143 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x55 (bvsub ?x55 (_ bv8 32))) (bvult ?x55 (bvsub ?x55 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x143) $x283) $x249)))
 (let (($x196 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x292 (and true $x196)))
 (let (($x190 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x48 (and $x190 $x292)))
 (let (($x251 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x5 (and (and (and true $x190) $x251) $x48)))
 (let (($x154 (and (and $x5 $x320) $x232)))
 (let (($x18 (= $x154 true)))
 (let (($x328 (= $x18 true)))
 (let (($x123 (= $x328 true)))
 (let (($x74 (= $x5 true)))
 (let (($x315 (= $x74 true)))
 (let (($x299 (= $x315 true)))
 (let (($x27 (and $x320 $x232)))
 (let (($x239 (= $x27 true)))
 (let (($x261 (= $x239 true)))
 (let (($x233 (= $x261 true)))
 (let ((?x40 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x309 (= (_ bv0 32) ?x40)))
 (let ((?x220 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x220)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x312 (and $x64 $x28)))
 (let (($x146 (and $x312 $x309)))
 (let (($x102 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x89 (and $x102 $x146)))
 (let (($x120 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x36 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x120)))))))
 (let (($x289 (and $x36 $x89)))
 (let (($x155 (= $x289 true)))
 (let (($x67 (= $x155 true)))
 (let (($x115 (= $x67 true)))
 (let (($x82 (and $x115 $x233)))
 (let (($x290 (and $x82 $x299)))
 (let (($x318 (and $x290 $x123)))
 (let (($x51 (and $x318 $x65)))
 (let (($x218 (and $x51 $x258)))
 (let (($x360 (and $x218 $x355)))
 (let (($x368 (and $x360 $x373)))
 (let (($x385 (and $x368 $x242)))
 (let (($x276 (and $x385 $x168)))
 (let (($x223 (and $x317 $x148)))
 (let (($x20 (and $x255 $x223)))
 (let (($x296 (and $x14 $x20)))
 (let (($x37 (and $x296 $x276)))
 (let (($x86 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x282 (and $x86 $x37)))
 (let (($x237 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x264 (and $x237 $x282)))
 (let (($x125 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x198 (and $x125 $x264)))
 (let (($x129 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x13 (and $x129 $x198)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x269 (and $x76 $x13)))
 (let (($x183 (and $x179 $x269)))
 (let (($x101 (= ?x127 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x197 (and $x101 $x183)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x211 (and $x57 $x197)))
 (let (($x222 (and $x179 $x211)))
 (let (($x271 (= ?x281 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x162 (and $x271 $x222)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x329 (and $x53 $x162)))
 (let (($x259 (and $x179 $x329)))
 (let (($x167 (= ?x186 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x158 (and $x167 $x259)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x96 (and $x38 $x158)))
 (let (($x272 (and $x179 $x96)))
 (let (($x230 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x157 (and $x230 $x272)))
 (let (($x142 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x208 (bvugt ?x55 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x295 (=> (bvule ?x55 (bvsub (bvadd ?x55 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x208)))))))
 (let (($x56 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x256)))
 (let (($x85 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x56)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x134 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x219)))))))
 (let (($x206 (and $x134 $x85)))
 (let (($x215 (and $x206 $x295)))
 (let (($x19 (and $x215 $x262)))
 (let (($x311 (and $x19 $x157)))
 (let (($x210 (=> $x311 $x204)))
 (not $x210))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x334 (bvmul (_ bv4294967295 32) ?x281)))
 (let ((?x301 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x334)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x304 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x304 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x208) (concat ?x280 ?x236))))
 (let ((?x347 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x124 (concat ?x252 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x142 (bvadd ?x88 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x142) (concat ?x182 ?x124))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x279 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x56 (bvadd ?x195 (_ bv3 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem ?x56) (concat ?x260 ?x279))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x69)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x78)))
 (let ((?x270 (bvadd (bvadd (bvadd ?x171 ?x210) ?x336) ?x347)))
 (let (($x341 (= ?x270 ?x301)))
 (let (($x49 (= $x341 true)))
 (let (($x12 (= $x49 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x25 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x46 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x135 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x135 (_ bv1 32))))
 (let (($x113 (=> $x216 $x25)))
 (let (($x324 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x111 (= $x216 $x324)))
 (let (($x186 (= false false)))
 (let (($x158 (= ?x135 (_ bv0 32))))
 (let (($x311 (=> $x158 $x186)))
 (let (($x272 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x157 (= $x158 $x272)))
 (let (($x106 (and (and (and $x157 $x311) $x111) $x113)))
 (let (($x80 (= $x106 true)))
 (let (($x183 (= ?x281 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x20 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x296 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x296 (_ bv1 32))))
 (let (($x197 (=> $x159 $x183)))
 (let (($x198 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x13 (= $x159 $x198)))
 (let (($x168 (= ?x296 (_ bv0 32))))
 (let (($x264 (=> $x168 $x186)))
 (let (($x37 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x282 (= $x168 $x37)))
 (let (($x162 (and (and (and $x282 $x264) $x13) $x197)))
 (let (($x329 (= $x162 true)))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x77 (= ?x127 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x188 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x148 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x148 (_ bv1 32))))
 (let (($x263 (=> $x387 $x77)))
 (let (($x118 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x268 (= $x387 $x118)))
 (let (($x223 (= ?x148 (_ bv0 32))))
 (let (($x384 (=> $x223 $x186)))
 (let (($x385 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x386 (= $x223 $x385)))
 (let (($x314 (and (and (and $x386 $x384) $x268) $x263)))
 (let (($x245 (= $x314 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x375 (= ?x163 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x255 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x317 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x317 (_ bv1 32))))
 (let (($x372 (=> $x66 $x375)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x302 (= $x66 $x381)))
 (let (($x373 (= ?x317 (_ bv0 32))))
 (let (($x380 (=> $x373 $x186)))
 (let (($x369 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x382 (= $x373 $x369)))
 (let (($x379 (and (and (and $x382 $x380) $x302) $x372)))
 (let (($x383 (= $x379 true)))
 (let (($x377 (forall ((input.ind-%var2483X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2483X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x361))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2483X)))
 (let (($x137 (input.spec-%var-m-0.0.1 input.ind-%var2483X)))
 (=> $x137 (= ?x30 ?x362))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x137 (input.spec-%var-m-0.0.1 input.ind-%var2482X)))
 (= $x137 (and (bvule (_ bv0 32) input.ind-%var2482X) (bvult input.ind-%var2482X (_ bv100 32))))))
 ))
 (let (($x366 (and $x62 $x377)))
 (let (($x371 (= $x366 true)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x331 (concat ?x345 (concat ?x288 (concat ?x23 ?x202)))))
 (let (($x332 (= ?x331 input.dst.llvm-%m)))
 (let (($x335 (= $x332 true)))
 (let (($x337 (= $x335 true)))
 (let (($x31 (= (bvand ?x304 (_ bv4294967292 32)) ?x304)))
 (let (($x261 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x232 (and true $x97)))
 (let (($x283 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x27 (and $x283 $x232)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x304 (bvsub ?x304 (_ bv8 32))) (bvult ?x304 (bvsub ?x304 (_ bv8 32))))))
 (let (($x10 (and (and (and true $x322) $x27) $x261)))
 (let (($x299 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x290 (and true $x299)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x43 (and $x112 $x290)))
 (let (($x292 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x195 (bvsub ?x195 (_ bv12 32))) (bvult ?x195 (bvsub ?x195 (_ bv12 32))))))
 (let (($x328 (and (and (and true $x112) $x292) $x43)))
 (let (($x165 (and (and $x328 $x10) $x31)))
 (let (($x224 (= $x165 true)))
 (let (($x180 (= $x224 true)))
 (let (($x277 (= $x180 true)))
 (let (($x123 (= $x328 true)))
 (let (($x318 (= $x123 true)))
 (let (($x108 (= $x318 true)))
 (let (($x321 (and $x10 $x31)))
 (let (($x126 (= $x321 true)))
 (let (($x161 (= $x126 true)))
 (let (($x71 (= $x161 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x227 (= (_ bv0 32) ?x169)))
 (let ((?x155 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x289 $x67)))
 (let (($x275 (and $x115 $x227)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x151 $x275)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x220)))))))
 (let (($x143 (and $x89 $x178)))
 (let (($x323 (= $x143 true)))
 (let (($x298 (= $x323 true)))
 (let (($x297 (= $x298 true)))
 (let (($x251 (and $x297 $x71)))
 (let (($x109 (and $x251 $x108)))
 (let (($x176 (and $x109 $x277)))
 (let (($x132 (and $x176 $x337)))
 (let (($x365 (and $x132 $x371)))
 (let (($x90 (and $x365 $x383)))
 (let (($x306 (and $x90 $x245)))
 (let (($x259 (and $x306 $x329)))
 (let (($x35 (and $x259 $x80)))
 (let (($x45 (and $x159 $x216)))
 (let (($x120 (and $x223 $x45)))
 (let (($x9 (and $x66 $x120)))
 (let (($x114 (and $x9 $x35)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x201 (and $x316 $x114)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x253 (and $x14 $x201)))
 (let (($x257 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x138 (and $x257 $x253)))
 (let (($x200 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x119 (and $x200 $x138)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x248 (and $x246 $x119)))
 (let (($x15 (and $x186 $x248)))
 (let (($x294 (= ?x163 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x70 (and $x294 $x15)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x310 (and $x76 $x70)))
 (let (($x72 (and $x186 $x310)))
 (let (($x101 (= ?x127 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x285 (and $x101 $x72)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x44 (and $x57 $x285)))
 (let (($x128 (and $x186 $x44)))
 (let (($x271 (= ?x281 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x34 (and $x271 $x128)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x278 (and $x6 $x34)))
 (let (($x54 (and $x186 $x278)))
 (let (($x213 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x149 (and $x213 $x54)))
 (let (($x11 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x79 (bvugt ?x304 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x173 (=> (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x79)))))))
 (let (($x145 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x55 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x145)))))))
 (let (($x185 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x287 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x185)))))))
 (let (($x60 (and $x287 $x55)))
 (let (($x105 (and $x60 $x173)))
 (let (($x181 (and $x105 $x319)))
 (let (($x175 (and $x181 $x149)))
 (let (($x61 (=> $x175 $x12)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x281 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x334 (bvmul (_ bv4294967295 32) ?x281)))
 (let ((?x301 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x334)))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x304 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x208 (bvadd ?x304 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x208) (concat ?x280 ?x236))))
 (let ((?x347 (bvmul (_ bv4294967295 32) ?x342)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x124 (concat ?x252 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x142 (bvadd ?x88 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x142) (concat ?x182 ?x124))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x279 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x195 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x56 (bvadd ?x195 (_ bv3 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem ?x56) (concat ?x260 ?x279))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x69)))
 (let ((?x171 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x78)))
 (let ((?x270 (bvadd (bvadd (bvadd ?x171 ?x210) ?x336) ?x347)))
 (let (($x341 (= ?x270 ?x301)))
 (let (($x49 (= $x341 true)))
 (let (($x12 (= $x49 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x25 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x46 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x135 (ite $x46 (_ bv1 32) (_ bv0 32))))
 (let (($x216 (bvuge ?x135 (_ bv1 32))))
 (let (($x113 (=> $x216 $x25)))
 (let (($x324 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x111 (= $x216 $x324)))
 (let (($x186 (= false false)))
 (let (($x158 (= ?x135 (_ bv0 32))))
 (let (($x311 (=> $x158 $x186)))
 (let (($x272 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x157 (= $x158 $x272)))
 (let (($x106 (and (and (and $x157 $x311) $x111) $x113)))
 (let (($x80 (= $x106 true)))
 (let (($x183 (= ?x281 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x20 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x296 (ite $x20 (_ bv1 32) (_ bv0 32))))
 (let (($x159 (bvuge ?x296 (_ bv1 32))))
 (let (($x197 (=> $x159 $x183)))
 (let (($x198 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x13 (= $x159 $x198)))
 (let (($x168 (= ?x296 (_ bv0 32))))
 (let (($x264 (=> $x168 $x186)))
 (let (($x37 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x282 (= $x168 $x37)))
 (let (($x162 (and (and (and $x282 $x264) $x13) $x197)))
 (let (($x329 (= $x162 true)))
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x77 (= ?x127 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x188 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x148 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x387 (bvuge ?x148 (_ bv1 32))))
 (let (($x263 (=> $x387 $x77)))
 (let (($x118 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x268 (= $x387 $x118)))
 (let (($x223 (= ?x148 (_ bv0 32))))
 (let (($x384 (=> $x223 $x186)))
 (let (($x385 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x386 (= $x223 $x385)))
 (let (($x314 (and (and (and $x386 $x384) $x268) $x263)))
 (let (($x245 (= $x314 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x375 (= ?x163 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x255 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x317 (ite $x255 (_ bv1 32) (_ bv0 32))))
 (let (($x66 (bvuge ?x317 (_ bv1 32))))
 (let (($x372 (=> $x66 $x375)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x302 (= $x66 $x381)))
 (let (($x373 (= ?x317 (_ bv0 32))))
 (let (($x380 (=> $x373 $x186)))
 (let (($x369 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x382 (= $x373 $x369)))
 (let (($x379 (and (and (and $x382 $x380) $x302) $x372)))
 (let (($x383 (= $x379 true)))
 (let (($x377 (forall ((input.ind-%var2483X (_ BitVec 32)) )(let ((?x241 (bvadd (bvmul input.ind-%var2483X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x361 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv1 32))) (select input.dst.llvm-mem ?x241))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x241 (_ bv2 32))) ?x361))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2483X)))
 (let (($x137 (input.spec-%var-m-0.0.1 input.ind-%var2483X)))
 (=> $x137 (= ?x30 ?x362))))))))
 ))
 (let (($x62 (forall ((input.ind-%var2482X (_ BitVec 32)) )(let (($x137 (input.spec-%var-m-0.0.1 input.ind-%var2482X)))
 (= $x137 (and (bvule (_ bv0 32) input.ind-%var2482X) (bvult input.ind-%var2482X (_ bv100 32))))))
 ))
 (let (($x366 (and $x62 $x377)))
 (let (($x371 (= $x366 true)))
 (let ((?x202 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x23 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x288 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x331 (concat ?x345 (concat ?x288 (concat ?x23 ?x202)))))
 (let (($x332 (= ?x331 input.dst.llvm-%m)))
 (let (($x335 (= $x332 true)))
 (let (($x337 (= $x335 true)))
 (let (($x31 (= (bvand ?x304 (_ bv4294967292 32)) ?x304)))
 (let (($x261 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x232 (and true $x97)))
 (let (($x283 (= (bvand ?x195 (_ bv4294967292 32)) ?x195)))
 (let (($x27 (and $x283 $x232)))
 (let (($x322 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x304 (bvsub ?x304 (_ bv8 32))) (bvult ?x304 (bvsub ?x304 (_ bv8 32))))))
 (let (($x10 (and (and (and true $x322) $x27) $x261)))
 (let (($x299 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x290 (and true $x299)))
 (let (($x112 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x43 (and $x112 $x290)))
 (let (($x292 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x195 (bvsub ?x195 (_ bv12 32))) (bvult ?x195 (bvsub ?x195 (_ bv12 32))))))
 (let (($x328 (and (and (and true $x112) $x292) $x43)))
 (let (($x165 (and (and $x328 $x10) $x31)))
 (let (($x224 (= $x165 true)))
 (let (($x180 (= $x224 true)))
 (let (($x277 (= $x180 true)))
 (let (($x123 (= $x328 true)))
 (let (($x318 (= $x123 true)))
 (let (($x108 (= $x318 true)))
 (let (($x321 (and $x10 $x31)))
 (let (($x126 (= $x321 true)))
 (let (($x161 (= $x126 true)))
 (let (($x71 (= $x161 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x227 (= (_ bv0 32) ?x169)))
 (let ((?x155 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x155)))
 (let (($x289 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x115 (and $x289 $x67)))
 (let (($x275 (and $x115 $x227)))
 (let (($x151 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x151 $x275)))
 (let (($x220 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x89 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x220)))))))
 (let (($x143 (and $x89 $x178)))
 (let (($x323 (= $x143 true)))
 (let (($x298 (= $x323 true)))
 (let (($x297 (= $x298 true)))
 (let (($x251 (and $x297 $x71)))
 (let (($x109 (and $x251 $x108)))
 (let (($x176 (and $x109 $x277)))
 (let (($x132 (and $x176 $x337)))
 (let (($x365 (and $x132 $x371)))
 (let (($x90 (and $x365 $x383)))
 (let (($x306 (and $x90 $x245)))
 (let (($x259 (and $x306 $x329)))
 (let (($x35 (and $x259 $x80)))
 (let (($x45 (and $x159 $x216)))
 (let (($x120 (and $x223 $x45)))
 (let (($x9 (and $x66 $x120)))
 (let (($x114 (and $x9 $x35)))
 (let (($x316 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x201 (and $x316 $x114)))
 (let (($x14 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x253 (and $x14 $x201)))
 (let (($x257 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x138 (and $x257 $x253)))
 (let (($x200 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x119 (and $x200 $x138)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x248 (and $x246 $x119)))
 (let (($x15 (and $x186 $x248)))
 (let (($x294 (= ?x163 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x70 (and $x294 $x15)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x310 (and $x76 $x70)))
 (let (($x72 (and $x186 $x310)))
 (let (($x101 (= ?x127 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x285 (and $x101 $x72)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x44 (and $x57 $x285)))
 (let (($x128 (and $x186 $x44)))
 (let (($x271 (= ?x281 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x34 (and $x271 $x128)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x278 (and $x6 $x34)))
 (let (($x54 (and $x186 $x278)))
 (let (($x213 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x149 (and $x213 $x54)))
 (let (($x11 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x79 (bvugt ?x304 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x173 (=> (bvule ?x304 (bvsub (bvadd ?x304 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x79)))))))
 (let (($x145 (bvugt ?x195 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x55 (=> (bvule ?x195 (bvsub (bvadd ?x195 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x145)))))))
 (let (($x185 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x287 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x185)))))))
 (let (($x60 (and $x287 $x55)))
 (let (($x105 (and $x60 $x173)))
 (let (($x181 (and $x105 $x319)))
 (let (($x175 (and $x181 $x149)))
 (let (($x61 (=> $x175 $x12)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x376 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x209 (bvadd ?x237 ?x376)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x258 (concat ?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x250 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x79 (bvadd ?x250 (_ bv3 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem ?x79) (concat ?x352 ?x258))))
 (let ((?x313 (bvmul (_ bv4294967295 32) ?x33)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x326 (concat ?x191 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x291 (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x11) (concat ?x140 ?x326))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x270 (concat ?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x145 (bvadd ?x156 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x145) (concat ?x334 ?x270))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x348)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x199)))
 (let ((?x351 (bvadd (bvadd (bvadd ?x236 ?x49) ?x234) ?x313)))
 (let (($x244 (= ?x351 ?x209)))
 (let (($x214 (= $x244 true)))
 (let (($x350 (= $x214 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x205 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x160 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x146 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x146 (_ bv1 32))))
 (let (($x166 (=> $x175 $x205)))
 (let (($x41 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x254 (= $x175 $x41)))
 (let (($x281 (= false false)))
 (let (($x102 (= ?x146 (_ bv0 32))))
 (let (($x149 (=> $x102 $x281)))
 (let (($x278 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x54 (= $x102 $x278)))
 (let (($x78 (and (and (and $x54 $x149) $x254) $x166)))
 (let (($x171 (= $x78 true)))
 (let (($x15 (= ?x127 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x120 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x9 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x9 (_ bv1 32))))
 (let (($x70 (=> $x36 $x15)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x119 (= $x36 $x138)))
 (let (($x80 (= ?x9 (_ bv0 32))))
 (let (($x253 (=> $x80 $x281)))
 (let (($x114 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x201 (= $x80 $x114)))
 (let (($x285 (and (and (and $x201 $x253) $x119) $x70)))
 (let (($x44 (= $x285 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x324 (= ?x163 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x135 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x216 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x216 (_ bv1 32))))
 (let (($x111 (=> $x272 $x324)))
 (let (($x157 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x311 (= $x272 $x157)))
 (let (($x45 (= ?x216 (_ bv0 32))))
 (let (($x96 (=> $x45 $x281)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x158 (= $x45 $x259)))
 (let (($x25 (and (and (and $x158 $x96) $x311) $x111)))
 (let (($x113 (= $x25 true)))
 (let (($x198 (= ?x237 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x223 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x159 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x159 (_ bv1 32))))
 (let (($x13 (=> $x46 $x198)))
 (let (($x282 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x264 (= $x46 $x282)))
 (let (($x245 (= ?x159 (_ bv0 32))))
 (let (($x37 (=> $x245 $x281)))
 (let (($x168 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x276 (= $x245 $x168)))
 (let (($x183 (and (and (and $x276 $x37) $x264) $x13)))
 (let (($x197 (= $x183 true)))
 (let (($x300 (forall ((input.ind-%var2515X (_ BitVec 32)) )(let ((?x372 (bvadd (bvmul input.ind-%var2515X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv1 32))) (select input.dst.llvm-mem ?x372))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv2 32))) ?x242))))
 (let ((?x99 (input.spec-%var-m-0.1.1 input.ind-%var2515X)))
 (let (($x20 (input.spec-%var-m-0.0.1 input.ind-%var2515X)))
 (=> $x20 (= ?x99 ?x118))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2514X (_ BitVec 32)) )(let (($x20 (input.spec-%var-m-0.0.1 input.ind-%var2514X)))
 (= $x20 (and (bvule (_ bv0 32) input.ind-%var2514X) (bvult input.ind-%var2514X (_ bv100 32))))))
 ))
 (let (($x77 (and $x362 $x300)))
 (let (($x263 (= $x77 true)))
 (let ((?x331 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x303 (concat ?x230 (concat ?x335 ?x331)))))
 (let (($x274 (= ?x130 input.dst.llvm-%m)))
 (let (($x212 (= $x274 true)))
 (let (($x62 (= $x212 true)))
 (let (($x154 (= (bvand ?x250 (_ bv4294967292 32)) ?x250)))
 (let (($x161 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x31 (and true $x190)))
 (let (($x27 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x321 (and $x27 $x31)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x250 (bvsub ?x250 (_ bv8 32))) (bvult ?x250 (bvsub ?x250 (_ bv8 32))))))
 (let (($x153 (and (and (and true $x320) $x321) $x161)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x109 (and true $x108)))
 (let (($x5 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x293 (and $x5 $x109)))
 (let (($x290 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv12 32))) (bvult ?x156 (bvsub ?x156 (_ bv12 32))))))
 (let (($x180 (and (and (and true $x5) $x290) $x293)))
 (let (($x51 (and (and $x180 $x153) $x154)))
 (let (($x288 (= $x51 true)))
 (let (($x103 (= $x288 true)))
 (let (($x23 (= $x103 true)))
 (let (($x277 (= $x180 true)))
 (let (($x176 (= $x277 true)))
 (let (($x152 (= $x176 true)))
 (let (($x50 (and $x153 $x154)))
 (let (($x229 (= $x50 true)))
 (let (($x58 (= $x229 true)))
 (let (($x196 (= $x58 true)))
 (let ((?x47 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x221 (= (_ bv0 32) ?x47)))
 (let ((?x323 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x143 $x298)))
 (let (($x305 (and $x297 $x221)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (and $x309 $x305)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x155)))))))
 (let (($x322 (and $x178 $x327)))
 (let (($x233 (= $x322 true)))
 (let (($x194 (= $x233 true)))
 (let (($x207 (= $x194 true)))
 (let (($x292 (and $x207 $x196)))
 (let (($x32 (and $x292 $x152)))
 (let (($x202 (and $x32 $x23)))
 (let (($x30 (and $x202 $x62)))
 (let (($x314 (and $x30 $x263)))
 (let (($x162 (and $x314 $x197)))
 (let (($x106 (and $x162 $x113)))
 (let (($x128 (and $x106 $x44)))
 (let (($x204 (and $x128 $x171)))
 (let (($x64 (and $x36 $x102)))
 (let (($x220 (and $x45 $x64)))
 (let (($x28 (and $x46 $x220)))
 (let (($x94 (and $x28 $x204)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x260 (and $x148 $x94)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x150 (and $x66 $x260)))
 (let (($x255 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x91 (and $x255 $x150)))
 (let (($x8 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x164 (and $x8 $x91)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x279 (and $x177 $x164)))
 (let (($x17 (and $x281 $x279)))
 (let (($x86 (= ?x237 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x210 (and $x86 $x17)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x174 (and $x246 $x210)))
 (let (($x110 (and $x281 $x174)))
 (let (($x294 (= ?x163 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x189 (and $x294 $x110)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x182 (and $x76 $x189)))
 (let (($x170 (and $x281 $x182)))
 (let (($x101 (= ?x127 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x252 (and $x101 $x170)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x121 (and $x267 $x252)))
 (let (($x124 (and $x281 $x121)))
 (let (($x53 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x344 (and $x53 $x124)))
 (let (($x117 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x38 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x93 (bvugt ?x250 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x68 (=> (bvule ?x250 (bvsub (bvadd ?x250 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x93)))))))
 (let (($x26 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x304 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x26)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x256 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x219)))))))
 (let (($x104 (and $x256 $x304)))
 (let (($x172 (and $x104 $x68)))
 (let (($x83 (and $x172 $x38)))
 (let (($x336 (and $x83 $x344)))
 (let (($x226 (=> $x336 $x350)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x127 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x376 (bvmul (_ bv4294967295 32) ?x127)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x209 (bvadd ?x237 ?x376)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x258 (concat ?x308 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x250 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x79 (bvadd ?x250 (_ bv3 32))))
 (let ((?x33 (concat (select input.dst.llvm-mem ?x79) (concat ?x352 ?x258))))
 (let ((?x313 (bvmul (_ bv4294967295 32) ?x33)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x326 (concat ?x191 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x140 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x291 (_ bv3 32))))
 (let ((?x234 (concat (select input.dst.llvm-mem ?x11) (concat ?x140 ?x326))))
 (let ((?x347 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x270 (concat ?x347 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x334 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x156 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x145 (bvadd ?x156 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x145) (concat ?x334 ?x270))))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x348)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x199)))
 (let ((?x351 (bvadd (bvadd (bvadd ?x236 ?x49) ?x234) ?x313)))
 (let (($x244 (= ?x351 ?x209)))
 (let (($x214 (= $x244 true)))
 (let (($x350 (= $x214 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x205 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x160 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x146 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x146 (_ bv1 32))))
 (let (($x166 (=> $x175 $x205)))
 (let (($x41 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x254 (= $x175 $x41)))
 (let (($x281 (= false false)))
 (let (($x102 (= ?x146 (_ bv0 32))))
 (let (($x149 (=> $x102 $x281)))
 (let (($x278 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x54 (= $x102 $x278)))
 (let (($x78 (and (and (and $x54 $x149) $x254) $x166)))
 (let (($x171 (= $x78 true)))
 (let (($x15 (= ?x127 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x120 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x9 (ite $x120 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x9 (_ bv1 32))))
 (let (($x70 (=> $x36 $x15)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x119 (= $x36 $x138)))
 (let (($x80 (= ?x9 (_ bv0 32))))
 (let (($x253 (=> $x80 $x281)))
 (let (($x114 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x201 (= $x80 $x114)))
 (let (($x285 (and (and (and $x201 $x253) $x119) $x70)))
 (let (($x44 (= $x285 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x324 (= ?x163 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x135 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x216 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x272 (bvuge ?x216 (_ bv1 32))))
 (let (($x111 (=> $x272 $x324)))
 (let (($x157 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x311 (= $x272 $x157)))
 (let (($x45 (= ?x216 (_ bv0 32))))
 (let (($x96 (=> $x45 $x281)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x158 (= $x45 $x259)))
 (let (($x25 (and (and (and $x158 $x96) $x311) $x111)))
 (let (($x113 (= $x25 true)))
 (let (($x198 (= ?x237 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x223 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x159 (ite $x223 (_ bv1 32) (_ bv0 32))))
 (let (($x46 (bvuge ?x159 (_ bv1 32))))
 (let (($x13 (=> $x46 $x198)))
 (let (($x282 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x264 (= $x46 $x282)))
 (let (($x245 (= ?x159 (_ bv0 32))))
 (let (($x37 (=> $x245 $x281)))
 (let (($x168 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x276 (= $x245 $x168)))
 (let (($x183 (and (and (and $x276 $x37) $x264) $x13)))
 (let (($x197 (= $x183 true)))
 (let (($x300 (forall ((input.ind-%var2515X (_ BitVec 32)) )(let ((?x372 (bvadd (bvmul input.ind-%var2515X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv1 32))) (select input.dst.llvm-mem ?x372))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x372 (_ bv2 32))) ?x242))))
 (let ((?x99 (input.spec-%var-m-0.1.1 input.ind-%var2515X)))
 (let (($x20 (input.spec-%var-m-0.0.1 input.ind-%var2515X)))
 (=> $x20 (= ?x99 ?x118))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2514X (_ BitVec 32)) )(let (($x20 (input.spec-%var-m-0.0.1 input.ind-%var2514X)))
 (= $x20 (and (bvule (_ bv0 32) input.ind-%var2514X) (bvult input.ind-%var2514X (_ bv100 32))))))
 ))
 (let (($x77 (and $x362 $x300)))
 (let (($x263 (= $x77 true)))
 (let ((?x331 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x335 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x230 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x130 (concat ?x303 (concat ?x230 (concat ?x335 ?x331)))))
 (let (($x274 (= ?x130 input.dst.llvm-%m)))
 (let (($x212 (= $x274 true)))
 (let (($x62 (= $x212 true)))
 (let (($x154 (= (bvand ?x250 (_ bv4294967292 32)) ?x250)))
 (let (($x161 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x190 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x31 (and true $x190)))
 (let (($x27 (= (bvand ?x156 (_ bv4294967292 32)) ?x156)))
 (let (($x321 (and $x27 $x31)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x250 (bvsub ?x250 (_ bv8 32))) (bvult ?x250 (bvsub ?x250 (_ bv8 32))))))
 (let (($x153 (and (and (and true $x320) $x321) $x161)))
 (let (($x108 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x109 (and true $x108)))
 (let (($x5 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x293 (and $x5 $x109)))
 (let (($x290 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x156 (bvsub ?x156 (_ bv12 32))) (bvult ?x156 (bvsub ?x156 (_ bv12 32))))))
 (let (($x180 (and (and (and true $x5) $x290) $x293)))
 (let (($x51 (and (and $x180 $x153) $x154)))
 (let (($x288 (= $x51 true)))
 (let (($x103 (= $x288 true)))
 (let (($x23 (= $x103 true)))
 (let (($x277 (= $x180 true)))
 (let (($x176 (= $x277 true)))
 (let (($x152 (= $x176 true)))
 (let (($x50 (and $x153 $x154)))
 (let (($x229 (= $x50 true)))
 (let (($x58 (= $x229 true)))
 (let (($x196 (= $x58 true)))
 (let ((?x47 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x221 (= (_ bv0 32) ?x47)))
 (let ((?x323 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x323)))
 (let (($x143 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x297 (and $x143 $x298)))
 (let (($x305 (and $x297 $x221)))
 (let (($x309 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x327 (and $x309 $x305)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x178 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x155)))))))
 (let (($x322 (and $x178 $x327)))
 (let (($x233 (= $x322 true)))
 (let (($x194 (= $x233 true)))
 (let (($x207 (= $x194 true)))
 (let (($x292 (and $x207 $x196)))
 (let (($x32 (and $x292 $x152)))
 (let (($x202 (and $x32 $x23)))
 (let (($x30 (and $x202 $x62)))
 (let (($x314 (and $x30 $x263)))
 (let (($x162 (and $x314 $x197)))
 (let (($x106 (and $x162 $x113)))
 (let (($x128 (and $x106 $x44)))
 (let (($x204 (and $x128 $x171)))
 (let (($x64 (and $x36 $x102)))
 (let (($x220 (and $x45 $x64)))
 (let (($x28 (and $x46 $x220)))
 (let (($x94 (and $x28 $x204)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x260 (and $x148 $x94)))
 (let (($x66 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x150 (and $x66 $x260)))
 (let (($x255 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x91 (and $x255 $x150)))
 (let (($x8 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x164 (and $x8 $x91)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x279 (and $x177 $x164)))
 (let (($x17 (and $x281 $x279)))
 (let (($x86 (= ?x237 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x210 (and $x86 $x17)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x174 (and $x246 $x210)))
 (let (($x110 (and $x281 $x174)))
 (let (($x294 (= ?x163 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x189 (and $x294 $x110)))
 (let (($x76 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x182 (and $x76 $x189)))
 (let (($x170 (and $x281 $x182)))
 (let (($x101 (= ?x127 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x252 (and $x101 $x170)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x121 (and $x267 $x252)))
 (let (($x124 (and $x281 $x121)))
 (let (($x53 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x344 (and $x53 $x124)))
 (let (($x117 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x38 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x93 (bvugt ?x250 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x68 (=> (bvule ?x250 (bvsub (bvadd ?x250 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x93)))))))
 (let (($x26 (bvugt ?x156 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x304 (=> (bvule ?x156 (bvsub (bvadd ?x156 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x26)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x256 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x39 $x219)))))))
 (let (($x104 (and $x256 $x304)))
 (let (($x172 (and $x104 $x68)))
 (let (($x83 (and $x172 $x38)))
 (let (($x336 (and $x83 $x344)))
 (let (($x226 (=> $x336 $x350)))
 (not $x226)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x241 (bvadd ?x14 ?x284)))
 (let ((?x371 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x16 (concat ?x371 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x93 (bvadd ?x208 (_ bv3 32))))
 (let ((?x368 (concat (select input.dst.llvm-mem ?x93) (concat ?x382 ?x16))))
 (let ((?x365 (bvmul (_ bv4294967295 32) ?x368)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x312 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x117 (bvadd ?x88 (_ bv3 32))))
 (let ((?x349 (concat (select input.dst.llvm-mem ?x117) (concat ?x296 ?x312))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x351 (concat ?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x81 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x26 (bvadd ?x81 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x26) (concat ?x209 ?x351))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x363)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x308)))
 (let ((?x302 (bvadd (bvadd (bvadd ?x258 ?x350) ?x349) ?x365)))
 (let (($x358 (= ?x302 ?x241)))
 (let (($x355 (= $x358 true)))
 (let (($x378 (= $x355 true)))
 (let (($x333 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x29 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x275 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x275 (_ bv1 32))))
 (let (($x346 (=> $x151 $x333)))
 (let (($x339 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x280 (= $x151 $x339)))
 (let (($x127 (= false false)))
 (let (($x252 (= ?x275 (_ bv0 32))))
 (let (($x336 (=> $x252 $x127)))
 (let (($x124 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x344 (= $x252 $x124)))
 (let (($x199 (and (and (and $x344 $x336) $x280) $x346)))
 (let (($x236 (= $x199 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x17 (= ?x163 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x220 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x28 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x28 (_ bv1 32))))
 (let (($x210 (=> $x150 $x17)))
 (let (($x91 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x164 (= $x150 $x91)))
 (let (($x89 (= ?x28 (_ bv0 32))))
 (let (($x260 (=> $x89 $x127)))
 (let (($x204 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x94 (= $x89 $x204)))
 (let (($x189 (and (and (and $x94 $x260) $x164) $x210)))
 (let (($x182 (= $x189 true)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x41 (= ?x237 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x146 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x102 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x102 (_ bv1 32))))
 (let (($x254 (=> $x54 $x41)))
 (let (($x149 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x75 (= $x54 $x149)))
 (let (($x64 (= ?x102 (_ bv0 32))))
 (let (($x278 (=> $x64 $x127)))
 (let (($x128 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x34 (= $x64 $x128)))
 (let (($x205 (and (and (and $x34 $x278) $x75) $x254)))
 (let (($x166 (= $x205 true)))
 (let (($x138 (= ?x14 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x45 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x36 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x36 (_ bv1 32))))
 (let (($x119 (=> $x160 $x138)))
 (let (($x201 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x253 (= $x160 $x201)))
 (let (($x113 (= ?x36 (_ bv0 32))))
 (let (($x114 (=> $x113 $x127)))
 (let (($x80 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x35 (= $x113 $x80)))
 (let (($x15 (and (and (and $x35 $x114) $x253) $x119)))
 (let (($x70 (= $x15 true)))
 (let (($x286 (forall ((input.ind-%var2547X (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul input.ind-%var2547X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x329))))
 (let ((?x307 (input.spec-%var-m-0.1.1 input.ind-%var2547X)))
 (let (($x120 (input.spec-%var-m-0.0.1 input.ind-%var2547X)))
 (=> $x120 (= ?x307 ?x157))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2546X (_ BitVec 32)) )(let (($x120 (input.spec-%var-m-0.0.1 input.ind-%var2546X)))
 (= $x120 (and (bvule (_ bv0 32) input.ind-%var2546X) (bvult input.ind-%var2546X (_ bv100 32))))))
 ))
 (let (($x324 (and $x118 $x286)))
 (let (($x111 (= $x324 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x370 (concat ?x213 (concat ?x212 ?x130)))))
 (let (($x361 (= ?x360 input.dst.llvm-%m)))
 (let (($x356 (= $x361 true)))
 (let (($x362 (= $x356 true)))
 (let (($x165 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x58 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x112 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x154 (and true $x112)))
 (let (($x321 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x50 (and $x321 $x154)))
 (let (($x10 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv8 32))) (bvult ?x208 (bvsub ?x208 (_ bv8 32))))))
 (let (($x18 (and (and (and true $x10) $x50) $x58)))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x32 (and true $x152)))
 (let (($x328 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x345 (and $x328 $x32)))
 (let (($x109 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv12 32))) (bvult ?x81 (bvsub ?x81 (_ bv12 32))))))
 (let (($x103 (and (and (and true $x328) $x109) $x345)))
 (let (($x132 (and (and $x103 $x18) $x165)))
 (let (($x230 (= $x132 true)))
 (let (($x332 (= $x230 true)))
 (let (($x335 (= $x332 true)))
 (let (($x23 (= $x103 true)))
 (let (($x202 (= $x23 true)))
 (let (($x65 (= $x202 true)))
 (let (($x74 (and $x18 $x165)))
 (let (($x48 (= $x74 true)))
 (let (($x315 (= $x48 true)))
 (let (($x299 (= $x315 true)))
 (let ((?x330 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x283 (= (_ bv0 32) ?x330)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x322 $x194)))
 (let (($x122 (and $x207 $x283)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x227 $x122)))
 (let (($x323 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x327 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x323)))))))
 (let (($x320 (and $x327 $x249)))
 (let (($x71 (= $x320 true)))
 (let (($x97 (= $x71 true)))
 (let (($x232 (= $x97 true)))
 (let (($x290 (and $x232 $x299)))
 (let (($x243 (and $x290 $x65)))
 (let (($x331 (and $x243 $x335)))
 (let (($x99 (and $x331 $x362)))
 (let (($x25 (and $x99 $x111)))
 (let (($x285 (and $x25 $x70)))
 (let (($x78 (and $x285 $x166)))
 (let (($x170 (and $x78 $x182)))
 (let (($x341 (and $x170 $x236)))
 (let (($x289 (and $x89 $x151)))
 (let (($x155 (and $x64 $x289)))
 (let (($x67 (and $x160 $x155)))
 (let (($x24 (and $x67 $x341)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x334 (and $x216 $x24)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x342 (and $x46 $x334)))
 (let (($x223 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x347 (and $x223 $x342)))
 (let (($x188 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x343 (and $x188 $x347)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x270 (and $x317 $x343)))
 (let (($x301 (and $x127 $x270)))
 (let (($x316 (= ?x14 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x49 (and $x316 $x301)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x218 (and $x177 $x49)))
 (let (($x139 (and $x127 $x218)))
 (let (($x86 (= ?x237 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x203 (and $x86 $x139)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x140 (and $x246 $x203)))
 (let (($x61 (and $x127 $x140)))
 (let (($x294 (= ?x163 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x191 (and $x294 $x61)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x12 (and $x133 $x191)))
 (let (($x326 (and $x127 $x12)))
 (let (($x57 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x265 (and $x57 $x326)))
 (let (($x19 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x215 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x142 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x215)))))))
 (let (($x206 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x250 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x206)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x56 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x219)))))))
 (let (($x59 (and $x56 $x250)))
 (let (($x95 (and $x59 $x142)))
 (let (($x22 (and $x95 $x6)))
 (let (($x234 (and $x22 $x265)))
 (let (($x367 (=> $x234 $x378)))
 (not $x367))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x241 (bvadd ?x14 ?x284)))
 (let ((?x371 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x16 (concat ?x371 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x93 (bvadd ?x208 (_ bv3 32))))
 (let ((?x368 (concat (select input.dst.llvm-mem ?x93) (concat ?x382 ?x16))))
 (let ((?x365 (bvmul (_ bv4294967295 32) ?x368)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x312 (concat ?x107 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x117 (bvadd ?x88 (_ bv3 32))))
 (let ((?x349 (concat (select input.dst.llvm-mem ?x117) (concat ?x296 ?x312))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x351 (concat ?x313 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x209 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x81 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x26 (bvadd ?x81 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x26) (concat ?x209 ?x351))))
 (let ((?x363 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x363)))
 (let ((?x258 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x308)))
 (let ((?x302 (bvadd (bvadd (bvadd ?x258 ?x350) ?x349) ?x365)))
 (let (($x358 (= ?x302 ?x241)))
 (let (($x355 (= $x358 true)))
 (let (($x378 (= $x355 true)))
 (let (($x333 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x29 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x275 (ite $x29 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x275 (_ bv1 32))))
 (let (($x346 (=> $x151 $x333)))
 (let (($x339 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x280 (= $x151 $x339)))
 (let (($x127 (= false false)))
 (let (($x252 (= ?x275 (_ bv0 32))))
 (let (($x336 (=> $x252 $x127)))
 (let (($x124 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x344 (= $x252 $x124)))
 (let (($x199 (and (and (and $x344 $x336) $x280) $x346)))
 (let (($x236 (= $x199 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x17 (= ?x163 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x220 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x28 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x150 (bvuge ?x28 (_ bv1 32))))
 (let (($x210 (=> $x150 $x17)))
 (let (($x91 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x164 (= $x150 $x91)))
 (let (($x89 (= ?x28 (_ bv0 32))))
 (let (($x260 (=> $x89 $x127)))
 (let (($x204 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x94 (= $x89 $x204)))
 (let (($x189 (and (and (and $x94 $x260) $x164) $x210)))
 (let (($x182 (= $x189 true)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x41 (= ?x237 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x146 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x102 (ite $x146 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x102 (_ bv1 32))))
 (let (($x254 (=> $x54 $x41)))
 (let (($x149 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x75 (= $x54 $x149)))
 (let (($x64 (= ?x102 (_ bv0 32))))
 (let (($x278 (=> $x64 $x127)))
 (let (($x128 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x34 (= $x64 $x128)))
 (let (($x205 (and (and (and $x34 $x278) $x75) $x254)))
 (let (($x166 (= $x205 true)))
 (let (($x138 (= ?x14 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x45 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x36 (ite $x45 (_ bv1 32) (_ bv0 32))))
 (let (($x160 (bvuge ?x36 (_ bv1 32))))
 (let (($x119 (=> $x160 $x138)))
 (let (($x201 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x253 (= $x160 $x201)))
 (let (($x113 (= ?x36 (_ bv0 32))))
 (let (($x114 (=> $x113 $x127)))
 (let (($x80 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x35 (= $x113 $x80)))
 (let (($x15 (and (and (and $x35 $x114) $x253) $x119)))
 (let (($x70 (= $x15 true)))
 (let (($x286 (forall ((input.ind-%var2547X (_ BitVec 32)) )(let ((?x13 (bvadd (bvmul input.ind-%var2547X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x329 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem ?x13))))
 (let ((?x157 (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x13 (_ bv2 32))) ?x329))))
 (let ((?x307 (input.spec-%var-m-0.1.1 input.ind-%var2547X)))
 (let (($x120 (input.spec-%var-m-0.0.1 input.ind-%var2547X)))
 (=> $x120 (= ?x307 ?x157))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2546X (_ BitVec 32)) )(let (($x120 (input.spec-%var-m-0.0.1 input.ind-%var2546X)))
 (= $x120 (and (bvule (_ bv0 32) input.ind-%var2546X) (bvult input.ind-%var2546X (_ bv100 32))))))
 ))
 (let (($x324 (and $x118 $x286)))
 (let (($x111 (= $x324 true)))
 (let ((?x130 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x212 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x213 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x360 (concat ?x370 (concat ?x213 (concat ?x212 ?x130)))))
 (let (($x361 (= ?x360 input.dst.llvm-%m)))
 (let (($x356 (= $x361 true)))
 (let (($x362 (= $x356 true)))
 (let (($x165 (= (bvand ?x208 (_ bv4294967292 32)) ?x208)))
 (let (($x58 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x112 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x154 (and true $x112)))
 (let (($x321 (= (bvand ?x81 (_ bv4294967292 32)) ?x81)))
 (let (($x50 (and $x321 $x154)))
 (let (($x10 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x208 (bvsub ?x208 (_ bv8 32))) (bvult ?x208 (bvsub ?x208 (_ bv8 32))))))
 (let (($x18 (and (and (and true $x10) $x50) $x58)))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x32 (and true $x152)))
 (let (($x328 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x345 (and $x328 $x32)))
 (let (($x109 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x81 (bvsub ?x81 (_ bv12 32))) (bvult ?x81 (bvsub ?x81 (_ bv12 32))))))
 (let (($x103 (and (and (and true $x328) $x109) $x345)))
 (let (($x132 (and (and $x103 $x18) $x165)))
 (let (($x230 (= $x132 true)))
 (let (($x332 (= $x230 true)))
 (let (($x335 (= $x332 true)))
 (let (($x23 (= $x103 true)))
 (let (($x202 (= $x23 true)))
 (let (($x65 (= $x202 true)))
 (let (($x74 (and $x18 $x165)))
 (let (($x48 (= $x74 true)))
 (let (($x315 (= $x48 true)))
 (let (($x299 (= $x315 true)))
 (let ((?x330 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x283 (= (_ bv0 32) ?x330)))
 (let ((?x233 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x194 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x233)))
 (let (($x322 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (and $x322 $x194)))
 (let (($x122 (and $x207 $x283)))
 (let (($x227 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x227 $x122)))
 (let (($x323 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x327 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x323)))))))
 (let (($x320 (and $x327 $x249)))
 (let (($x71 (= $x320 true)))
 (let (($x97 (= $x71 true)))
 (let (($x232 (= $x97 true)))
 (let (($x290 (and $x232 $x299)))
 (let (($x243 (and $x290 $x65)))
 (let (($x331 (and $x243 $x335)))
 (let (($x99 (and $x331 $x362)))
 (let (($x25 (and $x99 $x111)))
 (let (($x285 (and $x25 $x70)))
 (let (($x78 (and $x285 $x166)))
 (let (($x170 (and $x78 $x182)))
 (let (($x341 (and $x170 $x236)))
 (let (($x289 (and $x89 $x151)))
 (let (($x155 (and $x64 $x289)))
 (let (($x67 (and $x160 $x155)))
 (let (($x24 (and $x67 $x341)))
 (let (($x216 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x334 (and $x216 $x24)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x342 (and $x46 $x334)))
 (let (($x223 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x347 (and $x223 $x342)))
 (let (($x188 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x343 (and $x188 $x347)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x270 (and $x317 $x343)))
 (let (($x301 (and $x127 $x270)))
 (let (($x316 (= ?x14 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x49 (and $x316 $x301)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x218 (and $x177 $x49)))
 (let (($x139 (and $x127 $x218)))
 (let (($x86 (= ?x237 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x203 (and $x86 $x139)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x140 (and $x246 $x203)))
 (let (($x61 (and $x127 $x140)))
 (let (($x294 (= ?x163 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x191 (and $x294 $x61)))
 (let (($x133 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x12 (and $x133 $x191)))
 (let (($x326 (and $x127 $x12)))
 (let (($x57 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x265 (and $x57 $x326)))
 (let (($x19 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x215 (bvugt ?x208 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x142 (=> (bvule ?x208 (bvsub (bvadd ?x208 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x215)))))))
 (let (($x206 (bvugt ?x81 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x250 (=> (bvule ?x81 (bvsub (bvadd ?x81 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x85 $x206)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x185 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x56 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x185 $x219)))))))
 (let (($x59 (and $x56 $x250)))
 (let (($x95 (and $x59 $x142)))
 (let (($x22 (and $x95 $x6)))
 (let (($x234 (and $x22 $x265)))
 (let (($x367 (=> $x234 $x378)))
 (not $x367))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x79 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x215 (bvadd ?x79 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x215) (concat ?x281 ?x282))))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x137 (concat ?x115 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x19 (bvadd ?x291 (_ bv3 32))))
 (let ((?x240 (concat (select input.dst.llvm-mem ?x19) (concat ?x271 ?x137))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x206 (bvadd ?x92 (_ bv3 32))))
 (let ((?x367 (concat (select input.dst.llvm-mem ?x206) (concat ?x358 ?x302))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x381)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x371)))
 (let ((?x372 (bvadd (bvadd (bvadd ?x16 ?x367) ?x240) ?x168)))
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x386 (= ?x66 ?x372)))
 (let (($x383 (= $x386 true)))
 (let (($x269 (= $x383 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x116 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x40 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x305 (_ bv1 32))))
 (let (($x179 (=> $x234 $x116)))
 (let (($x184 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x352 (= $x234 $x184)))
 (let (($x163 (= false false)))
 (let (($x309 (= ?x305 (_ bv0 32))))
 (let (($x265 (=> $x309 $x163)))
 (let (($x12 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x326 (= $x309 $x12)))
 (let (($x308 (and (and (and $x326 $x265) $x352) $x179)))
 (let (($x258 (= $x308 true)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x301 (= ?x237 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x155 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x67 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x67 (_ bv1 32))))
 (let (($x49 (=> $x342 $x301)))
 (let (($x347 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x343 (= $x342 $x347)))
 (let (($x178 (= ?x67 (_ bv0 32))))
 (let (($x334 (=> $x178 $x163)))
 (let (($x341 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x24 (= $x178 $x341)))
 (let (($x203 (and (and (and $x24 $x334) $x343) $x49)))
 (let (($x140 (= $x203 true)))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x339 (= ?x14 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x151 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x151 (_ bv1 32))))
 (let (($x280 (=> $x124 $x339)))
 (let (($x344 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x124 $x344)))
 (let (($x289 (= ?x151 (_ bv0 32))))
 (let (($x121 (=> $x289 $x163)))
 (let (($x170 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x252 (= $x289 $x170)))
 (let (($x333 (and (and (and $x252 $x121) $x336) $x280)))
 (let (($x346 (= $x333 true)))
 (let (($x91 (= ?x66 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x89 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x89 (_ bv1 32))))
 (let (($x164 (=> $x29 $x91)))
 (let (($x260 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x174 (= $x29 $x260)))
 (let (($x166 (= ?x89 (_ bv0 32))))
 (let (($x94 (=> $x166 $x163)))
 (let (($x171 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x204 (= $x166 $x171)))
 (let (($x17 (and (and (and $x204 $x94) $x174) $x164)))
 (let (($x210 (= $x17 true)))
 (let (($x175 (forall ((input.ind-%var2579X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var2579X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x44))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2579X)))
 (let (($x220 (input.spec-%var-m-0.0.1 input.ind-%var2579X)))
 (=> $x220 (= ?x325 ?x149))))))))
 ))
 (let (($x157 (forall ((input.ind-%var2578X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.0.1 input.ind-%var2578X)))
 (= $x220 (and (bvule (_ bv0 32) input.ind-%var2578X) (bvult input.ind-%var2578X (_ bv100 32))))))
 ))
 (let (($x41 (and $x157 $x175)))
 (let (($x254 (= $x41 true)))
 (let ((?x360 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x387 (concat ?x53 (concat ?x356 ?x360)))))
 (let (($x242 (= ?x90 input.dst.llvm-%m)))
 (let (($x384 (= $x242 true)))
 (let (($x118 (= $x384 true)))
 (let (($x51 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x315 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x165 (and true $x5)))
 (let (($x50 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x74 (and $x50 $x165)))
 (let (($x153 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv8 32))) (bvult ?x79 (bvsub ?x79 (_ bv8 32))))))
 (let (($x224 (and (and (and true $x153) $x74) $x315)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x65)))
 (let (($x180 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x303 (and $x180 $x243)))
 (let (($x32 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x332 (and (and (and true $x180) $x32) $x303)))
 (let (($x30 (and (and $x332 $x224) $x51)))
 (let (($x213 (= $x30 true)))
 (let (($x274 (= $x213 true)))
 (let (($x212 (= $x274 true)))
 (let (($x335 (= $x332 true)))
 (let (($x331 (= $x335 true)))
 (let (($x337 (= $x331 true)))
 (let (($x123 (and $x224 $x51)))
 (let (($x43 (= $x123 true)))
 (let (($x318 (= $x43 true)))
 (let (($x108 (= $x318 true)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x239)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x320 $x97)))
 (let (($x82 (and $x232 $x27)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x221 $x82)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x322 $x233)))))))
 (let (($x10 (and $x249 $x261)))
 (let (($x196 (= $x10 true)))
 (let (($x190 (= $x196 true)))
 (let (($x31 (= $x190 true)))
 (let (($x109 (and $x31 $x108)))
 (let (($x353 (and $x109 $x337)))
 (let (($x130 (and $x353 $x212)))
 (let (($x307 (and $x130 $x118)))
 (let (($x205 (and $x307 $x254)))
 (let (($x189 (and $x205 $x210)))
 (let (($x199 (and $x189 $x346)))
 (let (($x61 (and $x199 $x140)))
 (let (($x214 (and $x61 $x258)))
 (let (($x143 (and $x178 $x309)))
 (let (($x323 (and $x289 $x143)))
 (let (($x298 (and $x29 $x323)))
 (let (($x376 (and $x298 $x214)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x209 (and $x102 $x376)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x33 (and $x160 $x209)))
 (let (($x45 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x313 (and $x45 $x33)))
 (let (($x135 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x354 (and $x135 $x313)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x351 (and $x159 $x354)))
 (let (($x244 (and $x163 $x351)))
 (let (($x148 (= ?x66 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x350 (and $x148 $x244)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x369 (and $x317 $x350)))
 (let (($x377 (and $x163 $x369)))
 (let (($x316 (= ?x14 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x193 (and $x316 $x377)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x296 (and $x177 $x193)))
 (let (($x98 (and $x163 $x296)))
 (let (($x86 (= ?x237 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x86 $x98)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x226 (and $x125 $x107)))
 (let (($x312 (and $x163 $x226)))
 (let (($x76 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x167 (and $x76 $x312)))
 (let (($x181 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x105 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x11 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x60 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x208 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x60)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x145 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x187)))))))
 (let (($x192 (and $x145 $x208)))
 (let (($x225 (and $x192 $x11)))
 (let (($x147 (and $x225 $x267)))
 (let (($x349 (and $x147 $x167)))
 (let (($x136 (=> $x349 $x269)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x222 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x282 (concat ?x222 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x79 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x215 (bvadd ?x79 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x215) (concat ?x281 ?x282))))
 (let ((?x168 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x137 (concat ?x115 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x19 (bvadd ?x291 (_ bv3 32))))
 (let ((?x240 (concat (select input.dst.llvm-mem ?x19) (concat ?x271 ?x137))))
 (let ((?x365 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x365 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x206 (bvadd ?x92 (_ bv3 32))))
 (let ((?x367 (concat (select input.dst.llvm-mem ?x206) (concat ?x358 ?x302))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x381)))
 (let ((?x16 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x371)))
 (let ((?x372 (bvadd (bvadd (bvadd ?x16 ?x367) ?x240) ?x168)))
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x386 (= ?x66 ?x372)))
 (let (($x383 (= $x386 true)))
 (let (($x269 (= $x383 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x116 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x40 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x305 (_ bv1 32))))
 (let (($x179 (=> $x234 $x116)))
 (let (($x184 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x352 (= $x234 $x184)))
 (let (($x163 (= false false)))
 (let (($x309 (= ?x305 (_ bv0 32))))
 (let (($x265 (=> $x309 $x163)))
 (let (($x12 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x326 (= $x309 $x12)))
 (let (($x308 (and (and (and $x326 $x265) $x352) $x179)))
 (let (($x258 (= $x308 true)))
 (let ((?x237 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x301 (= ?x237 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x155 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x67 (ite $x155 (_ bv1 32) (_ bv0 32))))
 (let (($x342 (bvuge ?x67 (_ bv1 32))))
 (let (($x49 (=> $x342 $x301)))
 (let (($x347 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x343 (= $x342 $x347)))
 (let (($x178 (= ?x67 (_ bv0 32))))
 (let (($x334 (=> $x178 $x163)))
 (let (($x341 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x24 (= $x178 $x341)))
 (let (($x203 (and (and (and $x24 $x334) $x343) $x49)))
 (let (($x140 (= $x203 true)))
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x339 (= ?x14 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x151 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x124 (bvuge ?x151 (_ bv1 32))))
 (let (($x280 (=> $x124 $x339)))
 (let (($x344 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x124 $x344)))
 (let (($x289 (= ?x151 (_ bv0 32))))
 (let (($x121 (=> $x289 $x163)))
 (let (($x170 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x252 (= $x289 $x170)))
 (let (($x333 (and (and (and $x252 $x121) $x336) $x280)))
 (let (($x346 (= $x333 true)))
 (let (($x91 (= ?x66 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x89 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x29 (bvuge ?x89 (_ bv1 32))))
 (let (($x164 (=> $x29 $x91)))
 (let (($x260 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x174 (= $x29 $x260)))
 (let (($x166 (= ?x89 (_ bv0 32))))
 (let (($x94 (=> $x166 $x163)))
 (let (($x171 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x204 (= $x166 $x171)))
 (let (($x17 (and (and (and $x204 $x94) $x174) $x164)))
 (let (($x210 (= $x17 true)))
 (let (($x175 (forall ((input.ind-%var2579X (_ BitVec 32)) )(let ((?x119 (bvadd (bvmul input.ind-%var2579X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x44 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv1 32))) (select input.dst.llvm-mem ?x119))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x119 (_ bv2 32))) ?x44))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2579X)))
 (let (($x220 (input.spec-%var-m-0.0.1 input.ind-%var2579X)))
 (=> $x220 (= ?x325 ?x149))))))))
 ))
 (let (($x157 (forall ((input.ind-%var2578X (_ BitVec 32)) )(let (($x220 (input.spec-%var-m-0.0.1 input.ind-%var2578X)))
 (= $x220 (and (bvule (_ bv0 32) input.ind-%var2578X) (bvult input.ind-%var2578X (_ bv100 32))))))
 ))
 (let (($x41 (and $x157 $x175)))
 (let (($x254 (= $x41 true)))
 (let ((?x360 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x356 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x53 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x90 (concat ?x387 (concat ?x53 (concat ?x356 ?x360)))))
 (let (($x242 (= ?x90 input.dst.llvm-%m)))
 (let (($x384 (= $x242 true)))
 (let (($x118 (= $x384 true)))
 (let (($x51 (= (bvand ?x79 (_ bv4294967292 32)) ?x79)))
 (let (($x315 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x5 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x165 (and true $x5)))
 (let (($x50 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x74 (and $x50 $x165)))
 (let (($x153 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x79 (bvsub ?x79 (_ bv8 32))) (bvult ?x79 (bvsub ?x79 (_ bv8 32))))))
 (let (($x224 (and (and (and true $x153) $x74) $x315)))
 (let (($x65 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x65)))
 (let (($x180 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x303 (and $x180 $x243)))
 (let (($x32 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x332 (and (and (and true $x180) $x32) $x303)))
 (let (($x30 (and (and $x332 $x224) $x51)))
 (let (($x213 (= $x30 true)))
 (let (($x274 (= $x213 true)))
 (let (($x212 (= $x274 true)))
 (let (($x335 (= $x332 true)))
 (let (($x331 (= $x335 true)))
 (let (($x337 (= $x331 true)))
 (let (($x123 (and $x224 $x51)))
 (let (($x43 (= $x123 true)))
 (let (($x318 (= $x43 true)))
 (let (($x108 (= $x318 true)))
 (let ((?x239 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x27 (= (_ bv0 32) ?x239)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x71)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x320 $x97)))
 (let (($x82 (and $x232 $x27)))
 (let (($x221 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x261 (and $x221 $x82)))
 (let (($x233 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x322 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x322 $x233)))))))
 (let (($x10 (and $x249 $x261)))
 (let (($x196 (= $x10 true)))
 (let (($x190 (= $x196 true)))
 (let (($x31 (= $x190 true)))
 (let (($x109 (and $x31 $x108)))
 (let (($x353 (and $x109 $x337)))
 (let (($x130 (and $x353 $x212)))
 (let (($x307 (and $x130 $x118)))
 (let (($x205 (and $x307 $x254)))
 (let (($x189 (and $x205 $x210)))
 (let (($x199 (and $x189 $x346)))
 (let (($x61 (and $x199 $x140)))
 (let (($x214 (and $x61 $x258)))
 (let (($x143 (and $x178 $x309)))
 (let (($x323 (and $x289 $x143)))
 (let (($x298 (and $x29 $x323)))
 (let (($x376 (and $x298 $x214)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x209 (and $x102 $x376)))
 (let (($x160 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x33 (and $x160 $x209)))
 (let (($x45 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x313 (and $x45 $x33)))
 (let (($x135 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x354 (and $x135 $x313)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x351 (and $x159 $x354)))
 (let (($x244 (and $x163 $x351)))
 (let (($x148 (= ?x66 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x350 (and $x148 $x244)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x369 (and $x317 $x350)))
 (let (($x377 (and $x163 $x369)))
 (let (($x316 (= ?x14 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x193 (and $x316 $x377)))
 (let (($x177 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x296 (and $x177 $x193)))
 (let (($x98 (and $x163 $x296)))
 (let (($x86 (= ?x237 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x86 $x98)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x226 (and $x125 $x107)))
 (let (($x312 (and $x163 $x226)))
 (let (($x76 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x167 (and $x76 $x312)))
 (let (($x181 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x105 (bvugt ?x79 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x215)))
 (let (($x11 (=> (bvule ?x79 (bvsub (bvadd ?x79 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x60 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x206)))
 (let (($x208 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x60)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x185 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x185)))
 (let (($x145 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x187)))))))
 (let (($x192 (and $x145 $x208)))
 (let (($x225 (and $x192 $x11)))
 (let (($x147 (and $x225 $x267)))
 (let (($x349 (and $x147 $x167)))
 (let (($x136 (=> $x349 $x269)))
 (not $x136)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x197 (bvmul (_ bv4294967295 32) ?x14)))
 (let ((?x141 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x197)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x35 (concat ?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x105 (bvadd ?x93 (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x105) (concat ?x113 ?x35))))
 (let ((?x114 (bvmul (_ bv4294967295 32) ?x80)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x28 (concat ?x20 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x181 (bvadd ?x88 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x181) (concat ?x286 ?x28))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x372 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x60 (bvadd ?x219 (_ bv3 32))))
 (let ((?x211 (concat (select input.dst.llvm-mem ?x60) (concat ?x383 ?x372))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x276)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x222)))
 (let ((?x158 (bvadd (bvadd (bvadd ?x282 ?x211) ?x259) ?x114)))
 (let (($x310 (= ?x158 ?x141)))
 (let (($x268 (= $x310 true)))
 (let (($x364 (= $x268 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x359 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x169 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x122 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x122 (_ bv1 32))))
 (let (($x373 (=> $x227 $x359)))
 (let (($x357 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x382 (= $x227 $x357)))
 (let (($x237 (= false false)))
 (let (($x107 (= ?x122 (_ bv0 32))))
 (let (($x349 (=> $x107 $x237)))
 (let (($x312 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x167 (= $x107 $x312)))
 (let (($x371 (and (and (and $x167 $x349) $x382) $x373)))
 (let (($x16 (= $x371 true)))
 (let (($x244 (= ?x14 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x323 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x298 (ite $x323 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x298 (_ bv1 32))))
 (let (($x350 (=> $x327 $x244)))
 (let (($x313 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x354 (= $x327 $x313)))
 (let (($x258 (= ?x298 (_ bv0 32))))
 (let (($x33 (=> $x258 $x237)))
 (let (($x376 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x209 (= $x258 $x376)))
 (let (($x193 (and (and (and $x209 $x33) $x354) $x350)))
 (let (($x296 (= $x193 true)))
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x66 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x309 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x309 (_ bv1 32))))
 (let (($x352 (=> $x143 $x184)))
 (let (($x265 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x273 (= $x143 $x265)))
 (let (($x140 (= ?x309 (_ bv0 32))))
 (let (($x326 (=> $x140 $x237)))
 (let (($x191 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x12 (= $x140 $x191)))
 (let (($x116 (and (and (and $x12 $x326) $x273) $x352)))
 (let (($x179 (= $x116 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x347 (= ?x46 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x178 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x178 (_ bv1 32))))
 (let (($x343 (=> $x24 $x347)))
 (let (($x334 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x218 (= $x24 $x334)))
 (let (($x40 (= ?x178 (_ bv0 32))))
 (let (($x341 (=> $x40 $x237)))
 (let (($x199 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x236 (= $x40 $x199)))
 (let (($x301 (and (and (and $x236 $x341) $x218) $x343)))
 (let (($x49 (= $x301 true)))
 (let (($x21 (forall ((input.ind-%var2611X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2611X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x182))))
 (let ((?x129 (input.spec-%var-m-0.1.1 input.ind-%var2611X)))
 (let (($x155 (input.spec-%var-m-0.0.1 input.ind-%var2611X)))
 (=> $x155 (= ?x129 ?x344))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2610X (_ BitVec 32)) )(let (($x155 (input.spec-%var-m-0.0.1 input.ind-%var2610X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var2610X) (bvult input.ind-%var2610X (_ bv100 32))))))
 ))
 (let (($x339 (and $x149 $x21)))
 (let (($x280 (= $x339 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x384 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x272 (concat ?x57 (concat ?x384 ?x90)))))
 (let (($x329 (= ?x162 input.dst.llvm-%m)))
 (let (($x96 (= $x329 true)))
 (let (($x157 (= $x96 true)))
 (let (($x132 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x318 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x328 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x51 (and true $x328)))
 (let (($x74 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x123 (and $x74 $x51)))
 (let (($x18 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv8 32))) (bvult ?x93 (bvsub ?x93 (_ bv8 32))))))
 (let (($x288 (and (and (and true $x18) $x123) $x318)))
 (let (($x337 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x353 (and true $x337)))
 (let (($x103 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x370 (and $x103 $x353)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x274 (and (and (and true $x103) $x243) $x370)))
 (let (($x99 (and (and $x274 $x288) $x132)))
 (let (($x53 (= $x99 true)))
 (let (($x361 (= $x53 true)))
 (let (($x356 (= $x361 true)))
 (let (($x212 (= $x274 true)))
 (let (($x130 (= $x212 true)))
 (let (($x62 (= $x130 true)))
 (let (($x277 (and $x288 $x132)))
 (let (($x293 (= $x277 true)))
 (let (($x176 (= $x293 true)))
 (let (($x152 (= $x176 true)))
 (let ((?x126 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x126)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x10 $x190)))
 (let (($x251 (and $x31 $x321)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x283 $x251)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x320 $x71)))))))
 (let (($x153 (and $x261 $x161)))
 (let (($x299 (= $x153 true)))
 (let (($x112 (= $x299 true)))
 (let (($x154 (= $x112 true)))
 (let (($x32 (and $x154 $x152)))
 (let (($x379 (and $x32 $x62)))
 (let (($x360 (and $x379 $x356)))
 (let (($x325 (and $x360 $x157)))
 (let (($x333 (and $x325 $x280)))
 (let (($x203 (and $x333 $x49)))
 (let (($x308 (and $x203 $x179)))
 (let (($x98 (and $x308 $x296)))
 (let (($x378 (and $x98 $x16)))
 (let (($x322 (and $x327 $x227)))
 (let (($x233 (and $x143 $x322)))
 (let (($x194 (and $x40 $x233)))
 (let (($x241 (and $x194 $x378)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x151 $x241)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x368 (and $x29 $x358)))
 (let (($x64 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x365 (and $x64 $x368)))
 (let (($x146 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x186 (and $x146 $x365)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x36 $x186)))
 (let (($x355 (and $x237 $x302)))
 (let (($x216 (= ?x46 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x367 (and $x216 $x355)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x37 (and $x159 $x367)))
 (let (($x375 (and $x237 $x37)))
 (let (($x148 (= ?x66 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x9 (and $x148 $x375)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x271 (and $x317 $x9)))
 (let (($x228 (and $x237 $x271)))
 (let (($x316 (= ?x14 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x115 (and $x316 $x228)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x374 (and $x257 $x115)))
 (let (($x137 (and $x237 $x374)))
 (let (($x246 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x300 (and $x246 $x137)))
 (let (($x83 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x172 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x117 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x172)))))))
 (let (($x104 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x79 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x104)))))))
 (let (($x81 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x26 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x81)))))))
 (let (($x85 (and $x26 $x79)))
 (let (($x295 (and $x85 $x117)))
 (let (($x262 (and $x295 $x133)))
 (let (($x240 (and $x262 $x300)))
 (let (($x238 (=> $x240 $x364)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x14 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x197 (bvmul (_ bv4294967295 32) ?x14)))
 (let ((?x141 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x197)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x35 (concat ?x201 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x105 (bvadd ?x93 (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x105) (concat ?x113 ?x35))))
 (let ((?x114 (bvmul (_ bv4294967295 32) ?x80)))
 (let ((?x20 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x28 (concat ?x20 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x181 (bvadd ?x88 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x181) (concat ?x286 ?x28))))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x372 (concat ?x168 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x60 (bvadd ?x219 (_ bv3 32))))
 (let ((?x211 (concat (select input.dst.llvm-mem ?x60) (concat ?x383 ?x372))))
 (let ((?x276 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x276)))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x222)))
 (let ((?x158 (bvadd (bvadd (bvadd ?x282 ?x211) ?x259) ?x114)))
 (let (($x310 (= ?x158 ?x141)))
 (let (($x268 (= $x310 true)))
 (let (($x364 (= $x268 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x359 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x169 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x122 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x227 (bvuge ?x122 (_ bv1 32))))
 (let (($x373 (=> $x227 $x359)))
 (let (($x357 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x382 (= $x227 $x357)))
 (let (($x237 (= false false)))
 (let (($x107 (= ?x122 (_ bv0 32))))
 (let (($x349 (=> $x107 $x237)))
 (let (($x312 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x167 (= $x107 $x312)))
 (let (($x371 (and (and (and $x167 $x349) $x382) $x373)))
 (let (($x16 (= $x371 true)))
 (let (($x244 (= ?x14 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x323 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x298 (ite $x323 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x298 (_ bv1 32))))
 (let (($x350 (=> $x327 $x244)))
 (let (($x313 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x354 (= $x327 $x313)))
 (let (($x258 (= ?x298 (_ bv0 32))))
 (let (($x33 (=> $x258 $x237)))
 (let (($x376 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x209 (= $x258 $x376)))
 (let (($x193 (and (and (and $x209 $x33) $x354) $x350)))
 (let (($x296 (= $x193 true)))
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x66 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x309 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x143 (bvuge ?x309 (_ bv1 32))))
 (let (($x352 (=> $x143 $x184)))
 (let (($x265 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x273 (= $x143 $x265)))
 (let (($x140 (= ?x309 (_ bv0 32))))
 (let (($x326 (=> $x140 $x237)))
 (let (($x191 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x12 (= $x140 $x191)))
 (let (($x116 (and (and (and $x12 $x326) $x273) $x352)))
 (let (($x179 (= $x116 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x347 (= ?x46 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x178 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x24 (bvuge ?x178 (_ bv1 32))))
 (let (($x343 (=> $x24 $x347)))
 (let (($x334 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x218 (= $x24 $x334)))
 (let (($x40 (= ?x178 (_ bv0 32))))
 (let (($x341 (=> $x40 $x237)))
 (let (($x199 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x236 (= $x40 $x199)))
 (let (($x301 (and (and (and $x236 $x341) $x218) $x343)))
 (let (($x49 (= $x301 true)))
 (let (($x21 (forall ((input.ind-%var2611X (_ BitVec 32)) )(let ((?x164 (bvadd (bvmul input.ind-%var2611X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x182 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv1 32))) (select input.dst.llvm-mem ?x164))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x164 (_ bv2 32))) ?x182))))
 (let ((?x129 (input.spec-%var-m-0.1.1 input.ind-%var2611X)))
 (let (($x155 (input.spec-%var-m-0.0.1 input.ind-%var2611X)))
 (=> $x155 (= ?x129 ?x344))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2610X (_ BitVec 32)) )(let (($x155 (input.spec-%var-m-0.0.1 input.ind-%var2610X)))
 (= $x155 (and (bvule (_ bv0 32) input.ind-%var2610X) (bvult input.ind-%var2610X (_ bv100 32))))))
 ))
 (let (($x339 (and $x149 $x21)))
 (let (($x280 (= $x339 true)))
 (let ((?x90 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x384 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x162 (concat ?x272 (concat ?x57 (concat ?x384 ?x90)))))
 (let (($x329 (= ?x162 input.dst.llvm-%m)))
 (let (($x96 (= $x329 true)))
 (let (($x157 (= $x96 true)))
 (let (($x132 (= (bvand ?x93 (_ bv4294967292 32)) ?x93)))
 (let (($x318 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x328 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x51 (and true $x328)))
 (let (($x74 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x123 (and $x74 $x51)))
 (let (($x18 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x93 (bvsub ?x93 (_ bv8 32))) (bvult ?x93 (bvsub ?x93 (_ bv8 32))))))
 (let (($x288 (and (and (and true $x18) $x123) $x318)))
 (let (($x337 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x353 (and true $x337)))
 (let (($x103 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x370 (and $x103 $x353)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x274 (and (and (and true $x103) $x243) $x370)))
 (let (($x99 (and (and $x274 $x288) $x132)))
 (let (($x53 (= $x99 true)))
 (let (($x361 (= $x53 true)))
 (let (($x356 (= $x361 true)))
 (let (($x212 (= $x274 true)))
 (let (($x130 (= $x212 true)))
 (let (($x62 (= $x130 true)))
 (let (($x277 (and $x288 $x132)))
 (let (($x293 (= $x277 true)))
 (let (($x176 (= $x293 true)))
 (let (($x152 (= $x176 true)))
 (let ((?x126 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x126)))
 (let ((?x196 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x190 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x196)))
 (let (($x10 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x10 $x190)))
 (let (($x251 (and $x31 $x321)))
 (let (($x283 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x161 (and $x283 $x251)))
 (let (($x71 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x261 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x320 $x71)))))))
 (let (($x153 (and $x261 $x161)))
 (let (($x299 (= $x153 true)))
 (let (($x112 (= $x299 true)))
 (let (($x154 (= $x112 true)))
 (let (($x32 (and $x154 $x152)))
 (let (($x379 (and $x32 $x62)))
 (let (($x360 (and $x379 $x356)))
 (let (($x325 (and $x360 $x157)))
 (let (($x333 (and $x325 $x280)))
 (let (($x203 (and $x333 $x49)))
 (let (($x308 (and $x203 $x179)))
 (let (($x98 (and $x308 $x296)))
 (let (($x378 (and $x98 $x16)))
 (let (($x322 (and $x327 $x227)))
 (let (($x233 (and $x143 $x322)))
 (let (($x194 (and $x40 $x233)))
 (let (($x241 (and $x194 $x378)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x151 $x241)))
 (let (($x29 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x368 (and $x29 $x358)))
 (let (($x64 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x365 (and $x64 $x368)))
 (let (($x146 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x186 (and $x146 $x365)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x36 $x186)))
 (let (($x355 (and $x237 $x302)))
 (let (($x216 (= ?x46 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x367 (and $x216 $x355)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x37 (and $x159 $x367)))
 (let (($x375 (and $x237 $x37)))
 (let (($x148 (= ?x66 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x9 (and $x148 $x375)))
 (let (($x317 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x271 (and $x317 $x9)))
 (let (($x228 (and $x237 $x271)))
 (let (($x316 (= ?x14 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x115 (and $x316 $x228)))
 (let (($x257 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x374 (and $x257 $x115)))
 (let (($x137 (and $x237 $x374)))
 (let (($x246 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x300 (and $x246 $x137)))
 (let (($x83 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x172 (bvugt ?x93 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x117 (=> (bvule ?x93 (bvsub (bvadd ?x93 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x172)))))))
 (let (($x104 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x79 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x104)))))))
 (let (($x81 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x145 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x134 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x145)))
 (let (($x26 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x134 $x81)))))))
 (let (($x85 (and $x26 $x79)))
 (let (($x295 (and $x85 $x117)))
 (let (($x262 (and $x295 $x133)))
 (let (($x240 (and $x262 $x300)))
 (let (($x238 (=> $x240 $x364)))
 (not $x238)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x174 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x119 (bvadd ?x46 ?x174)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x254 (concat ?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x215 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x172 (bvadd ?x215 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x172) (concat ?x260 ?x254))))
 (let ((?x78 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x100 (concat ?x338 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x83 (bvadd ?x291 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x83) (concat ?x120 ?x100))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x158 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x104 (bvadd ?x92 (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x104) (concat ?x197 ?x158))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x127)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x201)))
 (let ((?x94 (bvadd (bvadd (bvadd ?x35 ?x268) ?x175) ?x78)))
 (let (($x34 (= ?x94 ?x119)))
 (let (($x70 (= $x34 true)))
 (let (($x279 (= $x70 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x385 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x82 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x82 (_ bv1 32))))
 (let (($x306 (=> $x240 $x385)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x281 (= $x240 $x77)))
 (let (($x14 (= false false)))
 (let (($x221 (= ?x82 (_ bv0 32))))
 (let (($x300 (=> $x221 $x14)))
 (let (($x374 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x137 (= $x221 $x374)))
 (let (($x222 (and (and (and $x137 $x300) $x281) $x306)))
 (let (($x282 (= $x222 true)))
 (let (($x355 (= ?x66 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x194 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x194 (_ bv1 32))))
 (let (($x367 (=> $x249 $x355)))
 (let (($x365 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x186 (= $x249 $x365)))
 (let (($x16 (= ?x194 (_ bv0 32))))
 (let (($x368 (=> $x16 $x14)))
 (let (($x241 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x358 (= $x16 $x241)))
 (let (($x9 (and (and (and $x358 $x368) $x186) $x367)))
 (let (($x271 (= $x9 true)))
 (let (($x357 (= ?x46 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x227 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x227 (_ bv1 32))))
 (let (($x382 (=> $x322 $x357)))
 (let (($x167 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x349 (= $x322 $x167)))
 (let (($x296 (= ?x227 (_ bv0 32))))
 (let (($x312 (=> $x296 $x14)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x226 (= $x296 $x107)))
 (let (($x359 (and (and (and $x226 $x312) $x349) $x382)))
 (let (($x373 (= $x359 true)))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x313 (= ?x160 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x327 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x376 (bvuge ?x327 (_ bv1 32))))
 (let (($x354 (=> $x376 $x313)))
 (let (($x209 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x33 (= $x376 $x209)))
 (let (($x169 (= ?x327 (_ bv0 32))))
 (let (($x214 (=> $x169 $x14)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x258 (= $x169 $x308)))
 (let (($x244 (and (and (and $x258 $x214) $x33) $x354)))
 (let (($x350 (= $x244 true)))
 (let (($x234 (forall ((input.ind-%var2643X (_ BitVec 32)) )(let ((?x343 (bvadd (bvmul input.ind-%var2643X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x140))))
 (let ((?x200 (input.spec-%var-m-0.1.1 input.ind-%var2643X)))
 (let (($x323 (input.spec-%var-m-0.0.1 input.ind-%var2643X)))
 (=> $x323 (= ?x200 ?x265))))))))
 ))
 (let (($x344 (forall ((input.ind-%var2642X (_ BitVec 32)) )(let (($x323 (input.spec-%var-m-0.0.1 input.ind-%var2642X)))
 (= $x323 (and (bvule (_ bv0 32) input.ind-%var2642X) (bvult input.ind-%var2642X (_ bv100 32))))))
 ))
 (let (($x184 (and $x344 $x234)))
 (let (($x352 (= $x184 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x285 (concat ?x54 (concat ?x76 (concat ?x96 ?x162)))))
 (let (($x44 (= ?x285 input.dst.llvm-%m)))
 (let (($x278 (= $x44 true)))
 (let (($x149 (= $x278 true)))
 (let (($x30 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x176 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x132 (and true $x180)))
 (let (($x123 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x277 (and $x123 $x132)))
 (let (($x224 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv8 32))) (bvult ?x215 (bvsub ?x215 (_ bv8 32))))))
 (let (($x230 (and (and (and true $x224) $x277) $x176)))
 (let (($x62 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x379 (and true $x62)))
 (let (($x332 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x387 (and $x332 $x379)))
 (let (($x353 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x361 (and (and (and true $x332) $x353) $x387)))
 (let (($x307 (and (and $x361 $x230) $x30)))
 (let (($x57 (= $x307 true)))
 (let (($x242 (= $x57 true)))
 (let (($x384 (= $x242 true)))
 (let (($x356 (= $x361 true)))
 (let (($x360 (= $x356 true)))
 (let (($x362 (= $x360 true)))
 (let (($x23 (and $x230 $x30)))
 (let (($x345 (= $x23 true)))
 (let (($x202 (= $x345 true)))
 (let (($x65 (= $x202 true)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x50 (= (_ bv0 32) ?x229)))
 (let ((?x299 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x153 $x112)))
 (let (($x292 (and $x154 $x50)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x27 $x292)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x196)))))))
 (let (($x18 (and $x161 $x58)))
 (let (($x108 (= $x18 true)))
 (let (($x5 (= $x108 true)))
 (let (($x165 (= $x5 true)))
 (let (($x243 (and $x165 $x65)))
 (let (($x183 (and $x243 $x362)))
 (let (($x90 (and $x183 $x384)))
 (let (($x129 (and $x90 $x149)))
 (let (($x116 (and $x129 $x352)))
 (let (($x193 (and $x116 $x350)))
 (let (($x371 (and $x193 $x373)))
 (let (($x228 (and $x371 $x271)))
 (let (($x136 (and $x228 $x282)))
 (let (($x320 (and $x249 $x221)))
 (let (($x71 (and $x322 $x320)))
 (let (($x97 (and $x169 $x71)))
 (let (($x386 (and $x97 $x136)))
 (let (($x309 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x383 (and $x309 $x386)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x314 (and $x40 $x383)))
 (let (($x289 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x168 (and $x289 $x314)))
 (let (($x275 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x245 (and $x275 $x168)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x372 (and $x89 $x245)))
 (let (($x269 (and $x14 $x372)))
 (let (($x102 (= ?x160 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x211 (and $x102 $x269)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x253 (and $x36 $x211)))
 (let (($x7 (and $x14 $x253)))
 (let (($x216 (= ?x46 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x101 (and $x216 $x7)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x286 (and $x159 $x101)))
 (let (($x297 (and $x14 $x286)))
 (let (($x148 (= ?x66 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x20 (and $x148 $x297)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x195 (and $x255 $x20)))
 (let (($x28 (and $x14 $x195)))
 (let (($x177 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x198 (and $x177 $x28)))
 (let (($x22 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x95 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x19 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x95)))))))
 (let (($x59 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x93 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x59)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x206 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x187)))))))
 (let (($x55 (and $x206 $x93)))
 (let (($x173 (and $x55 $x19)))
 (let (($x319 (and $x173 $x125)))
 (let (($x259 (and $x319 $x198)))
 (let (($x84 (=> $x259 $x279)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x174 (bvmul (_ bv4294967295 32) ?x66)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x119 (bvadd ?x46 ?x174)))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x254 (concat ?x41 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x260 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x215 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x172 (bvadd ?x215 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x172) (concat ?x260 ?x254))))
 (let ((?x78 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x100 (concat ?x338 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x83 (bvadd ?x291 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x83) (concat ?x120 ?x100))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x158 (concat ?x114 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x92 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x104 (bvadd ?x92 (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x104) (concat ?x197 ?x158))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x127)))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x201)))
 (let ((?x94 (bvadd (bvadd (bvadd ?x35 ?x268) ?x175) ?x78)))
 (let (($x34 (= ?x94 ?x119)))
 (let (($x70 (= $x34 true)))
 (let (($x279 (= $x70 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x385 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x82 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x240 (bvuge ?x82 (_ bv1 32))))
 (let (($x306 (=> $x240 $x385)))
 (let (($x77 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x281 (= $x240 $x77)))
 (let (($x14 (= false false)))
 (let (($x221 (= ?x82 (_ bv0 32))))
 (let (($x300 (=> $x221 $x14)))
 (let (($x374 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x137 (= $x221 $x374)))
 (let (($x222 (and (and (and $x137 $x300) $x281) $x306)))
 (let (($x282 (= $x222 true)))
 (let (($x355 (= ?x66 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x194 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x249 (bvuge ?x194 (_ bv1 32))))
 (let (($x367 (=> $x249 $x355)))
 (let (($x365 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x186 (= $x249 $x365)))
 (let (($x16 (= ?x194 (_ bv0 32))))
 (let (($x368 (=> $x16 $x14)))
 (let (($x241 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x358 (= $x16 $x241)))
 (let (($x9 (and (and (and $x358 $x368) $x186) $x367)))
 (let (($x271 (= $x9 true)))
 (let (($x357 (= ?x46 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x227 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x227 (_ bv1 32))))
 (let (($x382 (=> $x322 $x357)))
 (let (($x167 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x349 (= $x322 $x167)))
 (let (($x296 (= ?x227 (_ bv0 32))))
 (let (($x312 (=> $x296 $x14)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x226 (= $x296 $x107)))
 (let (($x359 (and (and (and $x226 $x312) $x349) $x382)))
 (let (($x373 (= $x359 true)))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x313 (= ?x160 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x143 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x327 (ite $x143 (_ bv1 32) (_ bv0 32))))
 (let (($x376 (bvuge ?x327 (_ bv1 32))))
 (let (($x354 (=> $x376 $x313)))
 (let (($x209 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x33 (= $x376 $x209)))
 (let (($x169 (= ?x327 (_ bv0 32))))
 (let (($x214 (=> $x169 $x14)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x258 (= $x169 $x308)))
 (let (($x244 (and (and (and $x258 $x214) $x33) $x354)))
 (let (($x350 (= $x244 true)))
 (let (($x234 (forall ((input.ind-%var2643X (_ BitVec 32)) )(let ((?x343 (bvadd (bvmul input.ind-%var2643X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv1 32))) (select input.dst.llvm-mem ?x343))))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x343 (_ bv2 32))) ?x140))))
 (let ((?x200 (input.spec-%var-m-0.1.1 input.ind-%var2643X)))
 (let (($x323 (input.spec-%var-m-0.0.1 input.ind-%var2643X)))
 (=> $x323 (= ?x200 ?x265))))))))
 ))
 (let (($x344 (forall ((input.ind-%var2642X (_ BitVec 32)) )(let (($x323 (input.spec-%var-m-0.0.1 input.ind-%var2642X)))
 (= $x323 (and (bvule (_ bv0 32) input.ind-%var2642X) (bvult input.ind-%var2642X (_ bv100 32))))))
 ))
 (let (($x184 (and $x344 $x234)))
 (let (($x352 (= $x184 true)))
 (let ((?x162 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x76 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x285 (concat ?x54 (concat ?x76 (concat ?x96 ?x162)))))
 (let (($x44 (= ?x285 input.dst.llvm-%m)))
 (let (($x278 (= $x44 true)))
 (let (($x149 (= $x278 true)))
 (let (($x30 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x176 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x180 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x132 (and true $x180)))
 (let (($x123 (= (bvand ?x92 (_ bv4294967292 32)) ?x92)))
 (let (($x277 (and $x123 $x132)))
 (let (($x224 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv8 32))) (bvult ?x215 (bvsub ?x215 (_ bv8 32))))))
 (let (($x230 (and (and (and true $x224) $x277) $x176)))
 (let (($x62 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x379 (and true $x62)))
 (let (($x332 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x387 (and $x332 $x379)))
 (let (($x353 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x92 (bvsub ?x92 (_ bv12 32))) (bvult ?x92 (bvsub ?x92 (_ bv12 32))))))
 (let (($x361 (and (and (and true $x332) $x353) $x387)))
 (let (($x307 (and (and $x361 $x230) $x30)))
 (let (($x57 (= $x307 true)))
 (let (($x242 (= $x57 true)))
 (let (($x384 (= $x242 true)))
 (let (($x356 (= $x361 true)))
 (let (($x360 (= $x356 true)))
 (let (($x362 (= $x360 true)))
 (let (($x23 (and $x230 $x30)))
 (let (($x345 (= $x23 true)))
 (let (($x202 (= $x345 true)))
 (let (($x65 (= $x202 true)))
 (let ((?x229 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x50 (= (_ bv0 32) ?x229)))
 (let ((?x299 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x112 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x299)))
 (let (($x153 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (and $x153 $x112)))
 (let (($x292 (and $x154 $x50)))
 (let (($x27 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x58 (and $x27 $x292)))
 (let (($x196 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x161 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x196)))))))
 (let (($x18 (and $x161 $x58)))
 (let (($x108 (= $x18 true)))
 (let (($x5 (= $x108 true)))
 (let (($x165 (= $x5 true)))
 (let (($x243 (and $x165 $x65)))
 (let (($x183 (and $x243 $x362)))
 (let (($x90 (and $x183 $x384)))
 (let (($x129 (and $x90 $x149)))
 (let (($x116 (and $x129 $x352)))
 (let (($x193 (and $x116 $x350)))
 (let (($x371 (and $x193 $x373)))
 (let (($x228 (and $x371 $x271)))
 (let (($x136 (and $x228 $x282)))
 (let (($x320 (and $x249 $x221)))
 (let (($x71 (and $x322 $x320)))
 (let (($x97 (and $x169 $x71)))
 (let (($x386 (and $x97 $x136)))
 (let (($x309 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x383 (and $x309 $x386)))
 (let (($x40 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x314 (and $x40 $x383)))
 (let (($x289 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x168 (and $x289 $x314)))
 (let (($x275 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x245 (and $x275 $x168)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x372 (and $x89 $x245)))
 (let (($x269 (and $x14 $x372)))
 (let (($x102 (= ?x160 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x211 (and $x102 $x269)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x253 (and $x36 $x211)))
 (let (($x7 (and $x14 $x253)))
 (let (($x216 (= ?x46 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x101 (and $x216 $x7)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x286 (and $x159 $x101)))
 (let (($x297 (and $x14 $x286)))
 (let (($x148 (= ?x66 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x20 (and $x148 $x297)))
 (let (($x255 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x195 (and $x255 $x20)))
 (let (($x28 (and $x14 $x195)))
 (let (($x177 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x198 (and $x177 $x28)))
 (let (($x22 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x95 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x19 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x95)))))))
 (let (($x59 (bvugt ?x92 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x93 (=> (bvule ?x92 (bvsub (bvadd ?x92 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x59)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x42 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x287 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x42)))
 (let (($x206 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x287 $x187)))))))
 (let (($x55 (and $x206 $x93)))
 (let (($x173 (and $x55 $x19)))
 (let (($x319 (and $x173 $x125)))
 (let (($x259 (and $x319 $x198)))
 (let (($x84 (=> $x259 $x279)))
 (not $x84)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x164 (bvadd ?x160 ?x284)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x95 (bvadd ?x105 (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x95) (concat ?x237 ?x24))))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x199)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x232 (concat ?x185 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x22 (bvadd ?x88 (_ bv3 32))))
 (let ((?x91 (concat (select input.dst.llvm-mem ?x22) (concat ?x298 ?x232))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x59 (bvadd ?x219 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x59) (concat ?x119 ?x94))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x110)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x41)))
 (let ((?x218 (bvadd (bvadd (bvadd ?x254 ?x279) ?x91) ?x333)))
 (let (($x252 (= ?x218 ?x164)))
 (let (($x210 (= $x252 true)))
 (let (($x270 (= $x210 true)))
 (let (($x324 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x330 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x251 (ite $x330 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x251 (_ bv1 32))))
 (let (($x25 (=> $x283 $x324)))
 (let (($x111 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x283 $x111)))
 (let (($x66 (= false false)))
 (let (($x20 (= ?x251 (_ bv0 32))))
 (let (($x259 (=> $x20 $x66)))
 (let (($x28 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x198 (= $x20 $x28)))
 (let (($x201 (and (and (and $x198 $x259) $x113) $x25)))
 (let (($x35 (= $x201 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x269 (= ?x46 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x97 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x97 (_ bv1 32))))
 (let (($x211 (=> $x314 $x269)))
 (let (($x168 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x245 (= $x314 $x168)))
 (let (($x261 (= ?x97 (_ bv0 32))))
 (let (($x383 (=> $x261 $x66)))
 (let (($x136 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x386 (= $x261 $x136)))
 (let (($x101 (and (and (and $x386 $x383) $x245) $x211)))
 (let (($x286 (= $x101 true)))
 (let (($x77 (= ?x160 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x82 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x221 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x221 (_ bv1 32))))
 (let (($x281 (=> $x320 $x77)))
 (let (($x300 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x264 (= $x320 $x300)))
 (let (($x271 (= ?x221 (_ bv0 32))))
 (let (($x137 (=> $x271 $x66)))
 (let (($x115 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x374 (= $x271 $x115)))
 (let (($x385 (and (and (and $x374 $x137) $x264) $x281)))
 (let (($x306 (= $x385 true)))
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x365 (= ?x29 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x322 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x249 (ite $x322 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x249 (_ bv1 32))))
 (let (($x186 (=> $x241 $x365)))
 (let (($x358 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x368 (= $x241 $x358)))
 (let (($x47 (= ?x249 (_ bv0 32))))
 (let (($x378 (=> $x47 $x66)))
 (let (($x371 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x16 (= $x47 $x371)))
 (let (($x355 (and (and (and $x16 $x378) $x368) $x186)))
 (let (($x367 (= $x355 true)))
 (let (($x380 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x354 (bvadd (bvmul input.ind-%var2675X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x296))))
 (let ((?x8 (input.spec-%var-m-0.1.1 input.ind-%var2675X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2675X)))
 (=> $x233 (= ?x8 ?x167))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2674X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var2674X) (bvult input.ind-%var2674X (_ bv100 32))))))
 ))
 (let (($x357 (and $x265 $x380)))
 (let (($x382 (= $x357 true)))
 (let ((?x285 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x124 (concat ?x246 (concat ?x278 ?x285)))))
 (let (($x182 (= ?x189 input.dst.llvm-%m)))
 (let (($x121 (= $x182 true)))
 (let (($x344 (= $x121 true)))
 (let (($x99 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x202 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x103 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x30 (and true $x103)))
 (let (($x277 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x23 (and $x277 $x30)))
 (let (($x288 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv8 32))) (bvult ?x105 (bvsub ?x105 (_ bv8 32))))))
 (let (($x213 (and (and (and true $x288) $x23) $x202)))
 (let (($x362 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x183 (and true $x362)))
 (let (($x274 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x272 (and $x274 $x183)))
 (let (($x379 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x242 (and (and (and true $x274) $x379) $x272)))
 (let (($x325 (and (and $x242 $x213) $x99)))
 (let (($x76 (= $x325 true)))
 (let (($x329 (= $x76 true)))
 (let (($x96 (= $x329 true)))
 (let (($x384 (= $x242 true)))
 (let (($x90 (= $x384 true)))
 (let (($x118 (= $x90 true)))
 (let (($x335 (and $x213 $x99)))
 (let (($x303 (= $x335 true)))
 (let (($x331 (= $x303 true)))
 (let (($x337 (= $x331 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x74 (= (_ bv0 32) ?x48)))
 (let ((?x108 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x18 $x5)))
 (let (($x290 (and $x165 $x74)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x321 $x290)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x299)))))))
 (let (($x224 (and $x58 $x315)))
 (let (($x152 (= $x224 true)))
 (let (($x328 (= $x152 true)))
 (let (($x51 (= $x328 true)))
 (let (($x353 (and $x51 $x337)))
 (let (($x15 (and $x353 $x118)))
 (let (($x162 (and $x15 $x96)))
 (let (($x200 (and $x162 $x344)))
 (let (($x359 (and $x200 $x382)))
 (let (($x9 (and $x359 $x367)))
 (let (($x222 (and $x9 $x306)))
 (let (($x297 (and $x222 $x286)))
 (let (($x310 (and $x297 $x35)))
 (let (($x10 (and $x261 $x283)))
 (let (($x196 (and $x320 $x10)))
 (let (($x190 (and $x47 $x196)))
 (let (($x248 (and $x190 $x310)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x227 $x248)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x80 (and $x169 $x197)))
 (let (($x143 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x114 (and $x143 $x80)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x106 (and $x305 $x114)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x158 (and $x178 $x106)))
 (let (($x141 (and $x66 $x158)))
 (let (($x151 (= ?x29 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x151 $x141)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x205 (and $x89 $x268)))
 (let (($x294 (and $x66 $x205)))
 (let (($x102 (= ?x160 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x207 (and $x102 $x294)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x120 (and $x36 $x207)))
 (let (($x238 (and $x66 $x120)))
 (let (($x216 (= ?x46 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x338 (and $x216 $x238)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x364 (and $x223 $x338)))
 (let (($x100 (and $x66 $x364)))
 (let (($x317 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x67 (and $x317 $x100)))
 (let (($x147 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x257 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x147)))))))
 (let (($x225 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x181 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x192 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x215 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x192)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x60 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x187)))))))
 (let (($x304 (and $x60 $x215)))
 (let (($x68 (and $x304 $x181)))
 (let (($x38 (and $x68 $x257)))
 (let (($x175 (and $x38 $x67)))
 (let (($x340 (=> $x175 $x270)))
 (not $x340))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x164 (bvadd ?x160 ?x284)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x24 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x237 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x105 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x95 (bvadd ?x105 (_ bv3 32))))
 (let ((?x199 (concat (select input.dst.llvm-mem ?x95) (concat ?x237 ?x24))))
 (let ((?x333 (bvmul (_ bv4294967295 32) ?x199)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x232 (concat ?x185 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x298 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x22 (bvadd ?x88 (_ bv3 32))))
 (let ((?x91 (concat (select input.dst.llvm-mem ?x22) (concat ?x298 ?x232))))
 (let ((?x78 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x94 (concat ?x78 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x59 (bvadd ?x219 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x59) (concat ?x119 ?x94))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x110)))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x41)))
 (let ((?x218 (bvadd (bvadd (bvadd ?x254 ?x279) ?x91) ?x333)))
 (let (($x252 (= ?x218 ?x164)))
 (let (($x210 (= $x252 true)))
 (let (($x270 (= $x210 true)))
 (let (($x324 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x330 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x251 (ite $x330 (_ bv1 32) (_ bv0 32))))
 (let (($x283 (bvuge ?x251 (_ bv1 32))))
 (let (($x25 (=> $x283 $x324)))
 (let (($x111 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x283 $x111)))
 (let (($x66 (= false false)))
 (let (($x20 (= ?x251 (_ bv0 32))))
 (let (($x259 (=> $x20 $x66)))
 (let (($x28 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x198 (= $x20 $x28)))
 (let (($x201 (and (and (and $x198 $x259) $x113) $x25)))
 (let (($x35 (= $x201 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x269 (= ?x46 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x97 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x97 (_ bv1 32))))
 (let (($x211 (=> $x314 $x269)))
 (let (($x168 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x245 (= $x314 $x168)))
 (let (($x261 (= ?x97 (_ bv0 32))))
 (let (($x383 (=> $x261 $x66)))
 (let (($x136 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x386 (= $x261 $x136)))
 (let (($x101 (and (and (and $x386 $x383) $x245) $x211)))
 (let (($x286 (= $x101 true)))
 (let (($x77 (= ?x160 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x82 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x221 (ite $x82 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x221 (_ bv1 32))))
 (let (($x281 (=> $x320 $x77)))
 (let (($x300 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x264 (= $x320 $x300)))
 (let (($x271 (= ?x221 (_ bv0 32))))
 (let (($x137 (=> $x271 $x66)))
 (let (($x115 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x374 (= $x271 $x115)))
 (let (($x385 (and (and (and $x374 $x137) $x264) $x281)))
 (let (($x306 (= $x385 true)))
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x365 (= ?x29 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x322 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x249 (ite $x322 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x249 (_ bv1 32))))
 (let (($x186 (=> $x241 $x365)))
 (let (($x358 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x368 (= $x241 $x358)))
 (let (($x47 (= ?x249 (_ bv0 32))))
 (let (($x378 (=> $x47 $x66)))
 (let (($x371 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x16 (= $x47 $x371)))
 (let (($x355 (and (and (and $x16 $x378) $x368) $x186)))
 (let (($x367 (= $x355 true)))
 (let (($x380 (forall ((input.ind-%var2675X (_ BitVec 32)) )(let ((?x354 (bvadd (bvmul input.ind-%var2675X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv1 32))) (select input.dst.llvm-mem ?x354))))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x354 (_ bv2 32))) ?x296))))
 (let ((?x8 (input.spec-%var-m-0.1.1 input.ind-%var2675X)))
 (let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2675X)))
 (=> $x233 (= ?x8 ?x167))))))))
 ))
 (let (($x265 (forall ((input.ind-%var2674X (_ BitVec 32)) )(let (($x233 (input.spec-%var-m-0.0.1 input.ind-%var2674X)))
 (= $x233 (and (bvule (_ bv0 32) input.ind-%var2674X) (bvult input.ind-%var2674X (_ bv100 32))))))
 ))
 (let (($x357 (and $x265 $x380)))
 (let (($x382 (= $x357 true)))
 (let ((?x285 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x124 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x189 (concat ?x124 (concat ?x246 (concat ?x278 ?x285)))))
 (let (($x182 (= ?x189 input.dst.llvm-%m)))
 (let (($x121 (= $x182 true)))
 (let (($x344 (= $x121 true)))
 (let (($x99 (= (bvand ?x105 (_ bv4294967292 32)) ?x105)))
 (let (($x202 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x103 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x30 (and true $x103)))
 (let (($x277 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x23 (and $x277 $x30)))
 (let (($x288 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x105 (bvsub ?x105 (_ bv8 32))) (bvult ?x105 (bvsub ?x105 (_ bv8 32))))))
 (let (($x213 (and (and (and true $x288) $x23) $x202)))
 (let (($x362 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x183 (and true $x362)))
 (let (($x274 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x272 (and $x274 $x183)))
 (let (($x379 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x242 (and (and (and true $x274) $x379) $x272)))
 (let (($x325 (and (and $x242 $x213) $x99)))
 (let (($x76 (= $x325 true)))
 (let (($x329 (= $x76 true)))
 (let (($x96 (= $x329 true)))
 (let (($x384 (= $x242 true)))
 (let (($x90 (= $x384 true)))
 (let (($x118 (= $x90 true)))
 (let (($x335 (and $x213 $x99)))
 (let (($x303 (= $x335 true)))
 (let (($x331 (= $x303 true)))
 (let (($x337 (= $x331 true)))
 (let ((?x48 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x74 (= (_ bv0 32) ?x48)))
 (let ((?x108 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x5 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x108)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x165 (and $x18 $x5)))
 (let (($x290 (and $x165 $x74)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x315 (and $x321 $x290)))
 (let (($x299 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x153 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x58 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x153 $x299)))))))
 (let (($x224 (and $x58 $x315)))
 (let (($x152 (= $x224 true)))
 (let (($x328 (= $x152 true)))
 (let (($x51 (= $x328 true)))
 (let (($x353 (and $x51 $x337)))
 (let (($x15 (and $x353 $x118)))
 (let (($x162 (and $x15 $x96)))
 (let (($x200 (and $x162 $x344)))
 (let (($x359 (and $x200 $x382)))
 (let (($x9 (and $x359 $x367)))
 (let (($x222 (and $x9 $x306)))
 (let (($x297 (and $x222 $x286)))
 (let (($x310 (and $x297 $x35)))
 (let (($x10 (and $x261 $x283)))
 (let (($x196 (and $x320 $x10)))
 (let (($x190 (and $x47 $x196)))
 (let (($x248 (and $x190 $x310)))
 (let (($x227 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x197 (and $x227 $x248)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x80 (and $x169 $x197)))
 (let (($x143 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x114 (and $x143 $x80)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x106 (and $x305 $x114)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x158 (and $x178 $x106)))
 (let (($x141 (and $x66 $x158)))
 (let (($x151 (= ?x29 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x151 $x141)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x205 (and $x89 $x268)))
 (let (($x294 (and $x66 $x205)))
 (let (($x102 (= ?x160 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x207 (and $x102 $x294)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x120 (and $x36 $x207)))
 (let (($x238 (and $x66 $x120)))
 (let (($x216 (= ?x46 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x338 (and $x216 $x238)))
 (let (($x223 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x364 (and $x223 $x338)))
 (let (($x100 (and $x66 $x364)))
 (let (($x317 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x67 (and $x317 $x100)))
 (let (($x147 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x257 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x147)))))))
 (let (($x225 (bvugt ?x105 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x181 (=> (bvule ?x105 (bvsub (bvadd ?x105 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x192 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x215 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x192)))))))
 (let (($x187 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x81 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x134)))
 (let (($x60 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x81 $x187)))))))
 (let (($x304 (and $x60 $x215)))
 (let (($x68 (and $x304 $x181)))
 (let (($x38 (and $x68 $x257)))
 (let (($x175 (and $x38 $x67)))
 (let (($x340 (=> $x175 $x270)))
 (not $x340))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x172 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x225 (bvadd ?x172 (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x225) (concat ?x214 ?x209))))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x116)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x155 (concat ?x31 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x147 (bvadd ?x291 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x147) (concat ?x316 ?x155))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x218 (concat ?x333 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x145 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x192 (bvadd ?x145 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x192) (concat ?x252 ?x218))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x334)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x280)))
 (let ((?x343 (bvadd (bvadd (bvadd ?x24 ?x340) ?x326) ?x258)))
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x191 (= ?x29 ?x343)))
 (let (($x49 (= $x191 true)))
 (let (($x351 (= $x49 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x138 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x239 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x292 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x292 (_ bv1 32))))
 (let (($x163 (=> $x175 $x138)))
 (let (($x69 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x260 (= $x175 $x69)))
 (let (($x46 (= false false)))
 (let (($x27 (= ?x292 (_ bv0 32))))
 (let (($x67 (=> $x27 $x46)))
 (let (($x364 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x100 (= $x27 $x364)))
 (let (($x41 (and (and (and $x100 $x67) $x260) $x163)))
 (let (($x254 (= $x41 true)))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x141 (= ?x160 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x190 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x190 (_ bv1 32))))
 (let (($x268 (=> $x80 $x141)))
 (let (($x114 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x106 (= $x80 $x114)))
 (let (($x161 (= ?x190 (_ bv0 32))))
 (let (($x197 (=> $x161 $x46)))
 (let (($x310 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x248 (= $x161 $x310)))
 (let (($x207 (and (and (and $x248 $x197) $x106) $x268)))
 (let (($x120 (= $x207 true)))
 (let (($x111 (= ?x29 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x251 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x283 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x283 (_ bv1 32))))
 (let (($x113 (=> $x10 $x111)))
 (let (($x198 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x259 (= $x10 $x198)))
 (let (($x286 (= ?x283 (_ bv0 32))))
 (let (($x28 (=> $x286 $x46)))
 (let (($x20 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x195 (= $x286 $x20)))
 (let (($x324 (and (and (and $x195 $x28) $x259) $x113)))
 (let (($x25 (= $x324 true)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x168 (= ?x40 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x261 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x261 (_ bv1 32))))
 (let (($x245 (=> $x386 $x168)))
 (let (($x383 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x253 (= $x386 $x383)))
 (let (($x330 (= ?x261 (_ bv0 32))))
 (let (($x136 (=> $x330 $x46)))
 (let (($x222 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x282 (= $x330 $x222)))
 (let (($x269 (and (and (and $x282 $x136) $x253) $x245)))
 (let (($x211 (= $x269 true)))
 (let (($x240 (forall ((input.ind-%var2706X (_ BitVec 32)) )(let (($x71 (input.spec-%var-m-0.0.1 input.ind-%var2706X)))
 (= $x71 (and (bvule (_ bv0 32) input.ind-%var2706X) (bvult input.ind-%var2706X (_ bv100 32))))))
 ))
 (let (($x355 (forall ((input.ind-%var2707X (_ BitVec 32)) )(let ((?x373 (bvadd (bvmul input.ind-%var2707X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x378))))
 (let ((?x188 (input.spec-%var-m-0.1.1 input.ind-%var2707X)))
 (let (($x71 (input.spec-%var-m-0.0.1 input.ind-%var2707X)))
 (=> $x71 (= ?x188 ?x37))))))))
 ))
 (let (($x77 (and $x355 $x240)))
 (let (($x281 (= $x77 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x363 (concat ?x177 (concat ?x121 ?x189)))))
 (let (($x140 (= ?x203 input.dst.llvm-%m)))
 (let (($x12 (= $x140 true)))
 (let (($x265 (= $x12 true)))
 (let (($x307 (= (bvand ?x172 (_ bv4294967292 32)) ?x172)))
 (let (($x331 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x332 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x99 (and true $x332)))
 (let (($x23 (= (bvand ?x145 (_ bv4294967292 32)) ?x145)))
 (let (($x335 (and $x23 $x99)))
 (let (($x230 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x172 (bvsub ?x172 (_ bv8 32))) (bvult ?x172 (bvsub ?x172 (_ bv8 32))))))
 (let (($x53 (and (and (and true $x230) $x335) $x331)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x15 (and true $x118)))
 (let (($x361 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x54 (and $x361 $x15)))
 (let (($x183 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x145 (bvsub ?x145 (_ bv12 32))) (bvult ?x145 (bvsub ?x145 (_ bv12 32))))))
 (let (($x329 (and (and (and true $x361) $x183) $x54)))
 (let (($x129 (and (and $x329 $x53) $x307)))
 (let (($x246 (= $x129 true)))
 (let (($x44 (= $x246 true)))
 (let (($x278 (= $x44 true)))
 (let (($x96 (= $x329 true)))
 (let (($x162 (= $x96 true)))
 (let (($x157 (= $x162 true)))
 (let (($x212 (and $x53 $x307)))
 (let (($x370 (= $x212 true)))
 (let (($x130 (= $x370 true)))
 (let (($x62 (= $x130 true)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x123 (= (_ bv0 32) ?x43)))
 (let ((?x152 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x224 $x328)))
 (let (($x109 (and $x51 $x123)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x50 $x109)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x315 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x108)))))))
 (let (($x288 (and $x315 $x318)))
 (let (($x65 (= $x288 true)))
 (let (($x180 (= $x65 true)))
 (let (($x132 (= $x180 true)))
 (let (($x379 (and $x132 $x62)))
 (let (($x17 (and $x379 $x157)))
 (let (($x285 (and $x17 $x278)))
 (let (($x8 (and $x285 $x265)))
 (let (($x385 (and $x8 $x281)))
 (let (($x101 (and $x385 $x211)))
 (let (($x201 (and $x101 $x25)))
 (let (($x238 (and $x201 $x120)))
 (let (($x70 (and $x238 $x254)))
 (let (($x153 (and $x161 $x27)))
 (let (($x299 (and $x10 $x153)))
 (let (($x112 (and $x330 $x299)))
 (let (($x174 (and $x112 $x70)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x119 (and $x221 $x174)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x166 (and $x47 $x119)))
 (let (($x322 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x78 (and $x322 $x166)))
 (let (($x122 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x204 (and $x122 $x78)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x94 (and $x327 $x204)))
 (let (($x34 (and $x46 $x94)))
 (let (($x309 (= ?x40 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x309 $x34)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x236 (and $x178 $x279)))
 (let (($x21 (and $x46 $x236)))
 (let (($x151 (= ?x29 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x220 (and $x151 $x21)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x298 (and $x89 $x220)))
 (let (($x150 (and $x46 $x298)))
 (let (($x102 (= ?x160 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x185 (and $x102 $x150)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x84 (and $x45 $x185)))
 (let (($x232 (and $x46 $x84)))
 (let (($x159 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x86 (and $x159 $x232)))
 (let (($x262 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x255 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x262)))))))
 (let (($x295 (bvugt ?x172 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x172 (bvsub (bvadd ?x172 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x85 (bvugt ?x145 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x105 (=> (bvule ?x145 (bvsub (bvadd ?x145 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x85)))))))
 (let (($x63 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x104 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x63)))))))
 (let (($x250 (and $x104 $x105)))
 (let (($x142 (and $x250 $x83)))
 (let (($x6 (and $x142 $x255)))
 (let (($x91 (and $x6 $x86)))
 (let (($x231 (=> $x91 $x351)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x376 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x209 (concat ?x376 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x172 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x225 (bvadd ?x172 (_ bv3 32))))
 (let ((?x116 (concat (select input.dst.llvm-mem ?x225) (concat ?x214 ?x209))))
 (let ((?x258 (bvmul (_ bv4294967295 32) ?x116)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x155 (concat ?x31 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x147 (bvadd ?x291 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x147) (concat ?x316 ?x155))))
 (let ((?x333 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x218 (concat ?x333 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x252 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x145 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x192 (bvadd ?x145 (_ bv3 32))))
 (let ((?x340 (concat (select input.dst.llvm-mem ?x192) (concat ?x252 ?x218))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x280 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x334)))
 (let ((?x24 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x280)))
 (let ((?x343 (bvadd (bvadd (bvadd ?x24 ?x340) ?x326) ?x258)))
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x191 (= ?x29 ?x343)))
 (let (($x49 (= $x191 true)))
 (let (($x351 (= $x49 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x138 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x239 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x292 (ite $x239 (_ bv1 32) (_ bv0 32))))
 (let (($x175 (bvuge ?x292 (_ bv1 32))))
 (let (($x163 (=> $x175 $x138)))
 (let (($x69 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x260 (= $x175 $x69)))
 (let (($x46 (= false false)))
 (let (($x27 (= ?x292 (_ bv0 32))))
 (let (($x67 (=> $x27 $x46)))
 (let (($x364 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x100 (= $x27 $x364)))
 (let (($x41 (and (and (and $x100 $x67) $x260) $x163)))
 (let (($x254 (= $x41 true)))
 (let ((?x160 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x141 (= ?x160 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x190 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x80 (bvuge ?x190 (_ bv1 32))))
 (let (($x268 (=> $x80 $x141)))
 (let (($x114 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x106 (= $x80 $x114)))
 (let (($x161 (= ?x190 (_ bv0 32))))
 (let (($x197 (=> $x161 $x46)))
 (let (($x310 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x248 (= $x161 $x310)))
 (let (($x207 (and (and (and $x248 $x197) $x106) $x268)))
 (let (($x120 (= $x207 true)))
 (let (($x111 (= ?x29 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x251 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x283 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x283 (_ bv1 32))))
 (let (($x113 (=> $x10 $x111)))
 (let (($x198 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x259 (= $x10 $x198)))
 (let (($x286 (= ?x283 (_ bv0 32))))
 (let (($x28 (=> $x286 $x46)))
 (let (($x20 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x195 (= $x286 $x20)))
 (let (($x324 (and (and (and $x195 $x28) $x259) $x113)))
 (let (($x25 (= $x324 true)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x168 (= ?x40 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x261 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x261 (_ bv1 32))))
 (let (($x245 (=> $x386 $x168)))
 (let (($x383 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x253 (= $x386 $x383)))
 (let (($x330 (= ?x261 (_ bv0 32))))
 (let (($x136 (=> $x330 $x46)))
 (let (($x222 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x282 (= $x330 $x222)))
 (let (($x269 (and (and (and $x282 $x136) $x253) $x245)))
 (let (($x211 (= $x269 true)))
 (let (($x240 (forall ((input.ind-%var2706X (_ BitVec 32)) )(let (($x71 (input.spec-%var-m-0.0.1 input.ind-%var2706X)))
 (= $x71 (and (bvule (_ bv0 32) input.ind-%var2706X) (bvult input.ind-%var2706X (_ bv100 32))))))
 ))
 (let (($x355 (forall ((input.ind-%var2707X (_ BitVec 32)) )(let ((?x373 (bvadd (bvmul input.ind-%var2707X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv1 32))) (select input.dst.llvm-mem ?x373))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x373 (_ bv2 32))) ?x378))))
 (let ((?x188 (input.spec-%var-m-0.1.1 input.ind-%var2707X)))
 (let (($x71 (input.spec-%var-m-0.0.1 input.ind-%var2707X)))
 (=> $x71 (= ?x188 ?x37))))))))
 ))
 (let (($x77 (and $x355 $x240)))
 (let (($x281 (= $x77 true)))
 (let ((?x189 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x121 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x177 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x203 (concat ?x363 (concat ?x177 (concat ?x121 ?x189)))))
 (let (($x140 (= ?x203 input.dst.llvm-%m)))
 (let (($x12 (= $x140 true)))
 (let (($x265 (= $x12 true)))
 (let (($x307 (= (bvand ?x172 (_ bv4294967292 32)) ?x172)))
 (let (($x331 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x332 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x99 (and true $x332)))
 (let (($x23 (= (bvand ?x145 (_ bv4294967292 32)) ?x145)))
 (let (($x335 (and $x23 $x99)))
 (let (($x230 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x172 (bvsub ?x172 (_ bv8 32))) (bvult ?x172 (bvsub ?x172 (_ bv8 32))))))
 (let (($x53 (and (and (and true $x230) $x335) $x331)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x15 (and true $x118)))
 (let (($x361 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x54 (and $x361 $x15)))
 (let (($x183 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x145 (bvsub ?x145 (_ bv12 32))) (bvult ?x145 (bvsub ?x145 (_ bv12 32))))))
 (let (($x329 (and (and (and true $x361) $x183) $x54)))
 (let (($x129 (and (and $x329 $x53) $x307)))
 (let (($x246 (= $x129 true)))
 (let (($x44 (= $x246 true)))
 (let (($x278 (= $x44 true)))
 (let (($x96 (= $x329 true)))
 (let (($x162 (= $x96 true)))
 (let (($x157 (= $x162 true)))
 (let (($x212 (and $x53 $x307)))
 (let (($x370 (= $x212 true)))
 (let (($x130 (= $x370 true)))
 (let (($x62 (= $x130 true)))
 (let ((?x43 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x123 (= (_ bv0 32) ?x43)))
 (let ((?x152 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x152)))
 (let (($x224 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x224 $x328)))
 (let (($x109 (and $x51 $x123)))
 (let (($x50 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x318 (and $x50 $x109)))
 (let (($x108 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x315 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x18 $x108)))))))
 (let (($x288 (and $x315 $x318)))
 (let (($x65 (= $x288 true)))
 (let (($x180 (= $x65 true)))
 (let (($x132 (= $x180 true)))
 (let (($x379 (and $x132 $x62)))
 (let (($x17 (and $x379 $x157)))
 (let (($x285 (and $x17 $x278)))
 (let (($x8 (and $x285 $x265)))
 (let (($x385 (and $x8 $x281)))
 (let (($x101 (and $x385 $x211)))
 (let (($x201 (and $x101 $x25)))
 (let (($x238 (and $x201 $x120)))
 (let (($x70 (and $x238 $x254)))
 (let (($x153 (and $x161 $x27)))
 (let (($x299 (and $x10 $x153)))
 (let (($x112 (and $x330 $x299)))
 (let (($x174 (and $x112 $x70)))
 (let (($x221 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x119 (and $x221 $x174)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x166 (and $x47 $x119)))
 (let (($x322 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x78 (and $x322 $x166)))
 (let (($x122 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x204 (and $x122 $x78)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x94 (and $x327 $x204)))
 (let (($x34 (and $x46 $x94)))
 (let (($x309 (= ?x40 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x309 $x34)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x236 (and $x178 $x279)))
 (let (($x21 (and $x46 $x236)))
 (let (($x151 (= ?x29 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x220 (and $x151 $x21)))
 (let (($x89 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x298 (and $x89 $x220)))
 (let (($x150 (and $x46 $x298)))
 (let (($x102 (= ?x160 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x185 (and $x102 $x150)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x84 (and $x45 $x185)))
 (let (($x232 (and $x46 $x84)))
 (let (($x159 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x86 (and $x159 $x232)))
 (let (($x262 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x255 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x262)))))))
 (let (($x295 (bvugt ?x172 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x172 (bvsub (bvadd ?x172 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x85 (bvugt ?x145 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x105 (=> (bvule ?x145 (bvsub (bvadd ?x145 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x85)))))))
 (let (($x63 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x81 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x26 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x81)))
 (let (($x104 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x26 $x63)))))))
 (let (($x250 (and $x104 $x105)))
 (let (($x142 (and $x250 $x83)))
 (let (($x6 (and $x142 $x255)))
 (let (($x91 (and $x6 $x86)))
 (let (($x231 (=> $x91 $x351)))
 (not $x231)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x137 (bvmul (_ bv4294967295 32) ?x29)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x357 (bvadd ?x284 ?x137)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x296 (concat ?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x295 (bvadd ?x95 (_ bv3 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem ?x295) (concat ?x350 ?x296))))
 (let ((?x167 (bvmul (_ bv4294967295 32) ?x244)))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x97 (concat ?x323 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x262 (bvadd ?x88 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x262) (concat ?x313 ?x97))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x343 (concat ?x258 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x85 (bvadd ?x219 (_ bv3 32))))
 (let ((?x369 (concat (select input.dst.llvm-mem ?x85) (concat ?x49 ?x343))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x14)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x376)))
 (let ((?x374 (bvadd (bvadd (bvadd ?x209 ?x369) ?x115) ?x167)))
 (let (($x354 (= ?x374 ?x357)))
 (let (($x382 (= $x354 true)))
 (let (($x273 (= $x382 true)))
 (let (($x348 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x126 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x290 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x290 (_ bv1 32))))
 (let (($x346 (=> $x321 $x348)))
 (let (($x170 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x237 (= $x321 $x170)))
 (let (($x160 (= false false)))
 (let (($x185 (= ?x290 (_ bv0 32))))
 (let (($x91 (=> $x185 $x160)))
 (let (($x232 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x86 (= $x185 $x232)))
 (let (($x280 (and (and (and $x86 $x91) $x237) $x346)))
 (let (($x24 (= $x280 true)))
 (let (($x34 (= ?x29 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x299 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x112 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x112 (_ bv1 32))))
 (let (($x279 (=> $x58 $x34)))
 (let (($x78 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x204 (= $x58 $x78)))
 (let (($x254 (= ?x112 (_ bv0 32))))
 (let (($x166 (=> $x254 $x160)))
 (let (($x174 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x119 (= $x254 $x174)))
 (let (($x220 (and (and (and $x119 $x166) $x204) $x279)))
 (let (($x298 (= $x220 true)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x69 (= ?x40 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x27 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x27 (_ bv1 32))))
 (let (($x260 (=> $x100 $x69)))
 (let (($x67 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x171 (= $x100 $x67)))
 (let (($x153 (= ?x27 (_ bv0 32))))
 (let (($x364 (=> $x153 $x160)))
 (let (($x238 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x338 (= $x153 $x238)))
 (let (($x138 (and (and (and $x338 $x364) $x171) $x260)))
 (let (($x163 (= $x138 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x114 (= ?x169 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x10 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x161 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x161 (_ bv1 32))))
 (let (($x106 (=> $x248 $x114)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x248 $x197)))
 (let (($x239 (= ?x161 (_ bv0 32))))
 (let (($x310 (=> $x239 $x160)))
 (let (($x201 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x35 (= $x239 $x201)))
 (let (($x141 (and (and (and $x35 $x310) $x205) $x106)))
 (let (($x268 (= $x141 true)))
 (let (($x13 (forall ((input.ind-%var2739X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2739X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x286))))
 (let ((?x135 (input.spec-%var-m-0.1.1 input.ind-%var2739X)))
 (let (($x196 (input.spec-%var-m-0.0.1 input.ind-%var2739X)))
 (=> $x196 (= ?x135 ?x198))))))))
 ))
 (let (($x276 (forall ((input.ind-%var2738X (_ BitVec 32)) )(let (($x196 (input.spec-%var-m-0.0.1 input.ind-%var2738X)))
 (= $x196 (and (bvule (_ bv0 32) input.ind-%var2738X) (bvult input.ind-%var2738X (_ bv100 32))))))
 ))
 (let (($x111 (and $x276 $x13)))
 (let (($x113 (= $x111 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x373 (concat ?x359 (concat ?x317 (concat ?x12 ?x203)))))
 (let (($x368 (= ?x373 input.dst.llvm-%m)))
 (let (($x302 (= $x368 true)))
 (let (($x375 (= $x302 true)))
 (let (($x325 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x130 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x274 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x307 (and true $x274)))
 (let (($x335 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x212 (and $x335 $x307)))
 (let (($x213 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv8 32))) (bvult ?x95 (bvsub ?x95 (_ bv8 32))))))
 (let (($x57 (and (and (and true $x213) $x212) $x130)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x17 (and true $x157)))
 (let (($x242 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x124 (and $x242 $x17)))
 (let (($x15 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x44 (and (and (and true $x242) $x15) $x124)))
 (let (($x200 (and (and $x44 $x57) $x325)))
 (let (($x177 (= $x200 true)))
 (let (($x182 (= $x177 true)))
 (let (($x121 (= $x182 true)))
 (let (($x278 (= $x44 true)))
 (let (($x285 (= $x278 true)))
 (let (($x149 (= $x285 true)))
 (let (($x356 (and $x57 $x325)))
 (let (($x387 (= $x356 true)))
 (let (($x360 (= $x387 true)))
 (let (($x362 (= $x360 true)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x293)))
 (let ((?x65 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x288 $x180)))
 (let (($x32 (and $x132 $x277)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x74 $x32)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x224 $x152)))))))
 (let (($x230 (and $x318 $x176)))
 (let (($x337 (= $x230 true)))
 (let (($x103 (= $x337 true)))
 (let (($x30 (= $x103 true)))
 (let (($x183 (and $x30 $x362)))
 (let (($x301 (and $x183 $x149)))
 (let (($x189 (and $x301 $x121)))
 (let (($x241 (and $x189 $x375)))
 (let (($x324 (and $x241 $x113)))
 (let (($x207 (and $x324 $x268)))
 (let (($x41 (and $x207 $x163)))
 (let (($x150 (and $x41 $x298)))
 (let (($x270 (and $x150 $x24)))
 (let (($x18 (and $x58 $x321)))
 (let (($x108 (and $x153 $x18)))
 (let (($x5 (and $x239 $x108)))
 (let (($x164 (and $x5 $x270)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x252 (and $x283 $x164)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x199 (and $x330 $x252)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x333 (and $x320 $x199)))
 (let (($x82 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x341 (and $x82 $x333)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x218 (and $x249 $x341)))
 (let (($x210 (and $x160 $x218)))
 (let (($x227 (= ?x169 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x340 (and $x227 $x210)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x377 (and $x327 $x340)))
 (let (($x347 (and $x160 $x377)))
 (let (($x309 (= ?x40 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x194 (and $x309 $x347)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x316 (and $x178 $x194)))
 (let (($x256 (and $x160 $x316)))
 (let (($x151 (= ?x29 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x31 (and $x151 $x256)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x342 (and $x64 $x31)))
 (let (($x155 (and $x160 $x342)))
 (let (($x36 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x234 (and $x36 $x155)))
 (let (($x319 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x223 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x319)))))))
 (let (($x173 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x55 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x172 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x55)))))))
 (let (($x134 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x134)))))))
 (let (($x208 (and $x59 $x172)))
 (let (($x11 (and $x208 $x22)))
 (let (($x267 (and $x11 $x223)))
 (let (($x326 (and $x267 $x234)))
 (let (($x336 (=> $x326 $x273)))
 (not $x336)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x29 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x137 (bvmul (_ bv4294967295 32) ?x29)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x357 (bvadd ?x284 ?x137)))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x296 (concat ?x366 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x95 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x295 (bvadd ?x95 (_ bv3 32))))
 (let ((?x244 (concat (select input.dst.llvm-mem ?x295) (concat ?x350 ?x296))))
 (let ((?x167 (bvmul (_ bv4294967295 32) ?x244)))
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x97 (concat ?x323 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x262 (bvadd ?x88 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x262) (concat ?x313 ?x97))))
 (let ((?x258 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x343 (concat ?x258 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x85 (bvadd ?x219 (_ bv3 32))))
 (let ((?x369 (concat (select input.dst.llvm-mem ?x85) (concat ?x49 ?x343))))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x14)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x376)))
 (let ((?x374 (bvadd (bvadd (bvadd ?x209 ?x369) ?x115) ?x167)))
 (let (($x354 (= ?x374 ?x357)))
 (let (($x382 (= $x354 true)))
 (let (($x273 (= $x382 true)))
 (let (($x348 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x126 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x290 (ite $x126 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x290 (_ bv1 32))))
 (let (($x346 (=> $x321 $x348)))
 (let (($x170 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x237 (= $x321 $x170)))
 (let (($x160 (= false false)))
 (let (($x185 (= ?x290 (_ bv0 32))))
 (let (($x91 (=> $x185 $x160)))
 (let (($x232 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x86 (= $x185 $x232)))
 (let (($x280 (and (and (and $x86 $x91) $x237) $x346)))
 (let (($x24 (= $x280 true)))
 (let (($x34 (= ?x29 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x299 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x112 (ite $x299 (_ bv1 32) (_ bv0 32))))
 (let (($x58 (bvuge ?x112 (_ bv1 32))))
 (let (($x279 (=> $x58 $x34)))
 (let (($x78 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x204 (= $x58 $x78)))
 (let (($x254 (= ?x112 (_ bv0 32))))
 (let (($x166 (=> $x254 $x160)))
 (let (($x174 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x119 (= $x254 $x174)))
 (let (($x220 (and (and (and $x119 $x166) $x204) $x279)))
 (let (($x298 (= $x220 true)))
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x69 (= ?x40 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x27 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x27 (_ bv1 32))))
 (let (($x260 (=> $x100 $x69)))
 (let (($x67 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x171 (= $x100 $x67)))
 (let (($x153 (= ?x27 (_ bv0 32))))
 (let (($x364 (=> $x153 $x160)))
 (let (($x238 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x338 (= $x153 $x238)))
 (let (($x138 (and (and (and $x338 $x364) $x171) $x260)))
 (let (($x163 (= $x138 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x114 (= ?x169 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x10 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x161 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x248 (bvuge ?x161 (_ bv1 32))))
 (let (($x106 (=> $x248 $x114)))
 (let (($x197 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x205 (= $x248 $x197)))
 (let (($x239 (= ?x161 (_ bv0 32))))
 (let (($x310 (=> $x239 $x160)))
 (let (($x201 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x35 (= $x239 $x201)))
 (let (($x141 (and (and (and $x35 $x310) $x205) $x106)))
 (let (($x268 (= $x141 true)))
 (let (($x13 (forall ((input.ind-%var2739X (_ BitVec 32)) )(let ((?x245 (bvadd (bvmul input.ind-%var2739X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv1 32))) (select input.dst.llvm-mem ?x245))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x245 (_ bv2 32))) ?x286))))
 (let ((?x135 (input.spec-%var-m-0.1.1 input.ind-%var2739X)))
 (let (($x196 (input.spec-%var-m-0.0.1 input.ind-%var2739X)))
 (=> $x196 (= ?x135 ?x198))))))))
 ))
 (let (($x276 (forall ((input.ind-%var2738X (_ BitVec 32)) )(let (($x196 (input.spec-%var-m-0.0.1 input.ind-%var2738X)))
 (= $x196 (and (bvule (_ bv0 32) input.ind-%var2738X) (bvult input.ind-%var2738X (_ bv100 32))))))
 ))
 (let (($x111 (and $x276 $x13)))
 (let (($x113 (= $x111 true)))
 (let ((?x203 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x359 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x373 (concat ?x359 (concat ?x317 (concat ?x12 ?x203)))))
 (let (($x368 (= ?x373 input.dst.llvm-%m)))
 (let (($x302 (= $x368 true)))
 (let (($x375 (= $x302 true)))
 (let (($x325 (= (bvand ?x95 (_ bv4294967292 32)) ?x95)))
 (let (($x130 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x274 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x307 (and true $x274)))
 (let (($x335 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x212 (and $x335 $x307)))
 (let (($x213 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x95 (bvsub ?x95 (_ bv8 32))) (bvult ?x95 (bvsub ?x95 (_ bv8 32))))))
 (let (($x57 (and (and (and true $x213) $x212) $x130)))
 (let (($x157 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x17 (and true $x157)))
 (let (($x242 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x124 (and $x242 $x17)))
 (let (($x15 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv12 32))) (bvult ?x219 (bvsub ?x219 (_ bv12 32))))))
 (let (($x44 (and (and (and true $x242) $x15) $x124)))
 (let (($x200 (and (and $x44 $x57) $x325)))
 (let (($x177 (= $x200 true)))
 (let (($x182 (= $x177 true)))
 (let (($x121 (= $x182 true)))
 (let (($x278 (= $x44 true)))
 (let (($x285 (= $x278 true)))
 (let (($x149 (= $x285 true)))
 (let (($x356 (and $x57 $x325)))
 (let (($x387 (= $x356 true)))
 (let (($x360 (= $x387 true)))
 (let (($x362 (= $x360 true)))
 (let ((?x293 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x277 (= (_ bv0 32) ?x293)))
 (let ((?x65 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x180 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x65)))
 (let (($x288 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x132 (and $x288 $x180)))
 (let (($x32 (and $x132 $x277)))
 (let (($x74 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x176 (and $x74 $x32)))
 (let (($x152 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x318 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x224 $x152)))))))
 (let (($x230 (and $x318 $x176)))
 (let (($x337 (= $x230 true)))
 (let (($x103 (= $x337 true)))
 (let (($x30 (= $x103 true)))
 (let (($x183 (and $x30 $x362)))
 (let (($x301 (and $x183 $x149)))
 (let (($x189 (and $x301 $x121)))
 (let (($x241 (and $x189 $x375)))
 (let (($x324 (and $x241 $x113)))
 (let (($x207 (and $x324 $x268)))
 (let (($x41 (and $x207 $x163)))
 (let (($x150 (and $x41 $x298)))
 (let (($x270 (and $x150 $x24)))
 (let (($x18 (and $x58 $x321)))
 (let (($x108 (and $x153 $x18)))
 (let (($x5 (and $x239 $x108)))
 (let (($x164 (and $x5 $x270)))
 (let (($x283 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x252 (and $x283 $x164)))
 (let (($x330 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x199 (and $x330 $x252)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x333 (and $x320 $x199)))
 (let (($x82 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x341 (and $x82 $x333)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x218 (and $x249 $x341)))
 (let (($x210 (and $x160 $x218)))
 (let (($x227 (= ?x169 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x340 (and $x227 $x210)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x377 (and $x327 $x340)))
 (let (($x347 (and $x160 $x377)))
 (let (($x309 (= ?x40 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x194 (and $x309 $x347)))
 (let (($x178 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x316 (and $x178 $x194)))
 (let (($x256 (and $x160 $x316)))
 (let (($x151 (= ?x29 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x31 (and $x151 $x256)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x342 (and $x64 $x31)))
 (let (($x155 (and $x160 $x342)))
 (let (($x36 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x234 (and $x36 $x155)))
 (let (($x319 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x223 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x319)))))))
 (let (($x173 (bvugt ?x95 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x95 (bvsub (bvadd ?x95 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x55 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x172 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x55)))))))
 (let (($x134 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x134)))))))
 (let (($x208 (and $x59 $x172)))
 (let (($x11 (and $x208 $x22)))
 (let (($x267 (and $x11 $x223)))
 (let (($x326 (and $x267 $x234)))
 (let (($x336 (=> $x326 $x273)))
 (not $x336)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x40)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x386 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x173 (bvadd ?x225 (_ bv3 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem ?x173) (concat ?x46 ?x386))))
 (let ((?x385 (bvmul (_ bv4294967295 32) ?x222)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x165 (concat ?x266 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x319 (bvadd ?x291 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x319) (concat ?x190 ?x165))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x137 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x39 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x55 (bvadd ?x39 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x55) (concat ?x354 ?x137))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x350)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x98)))
 (let ((?x253 (bvadd (bvadd (bvadd ?x193 ?x336) ?x16) ?x385)))
 (let (($x37 (= ?x253 ?x66)))
 (let (($x365 (= $x37 true)))
 (let (($x372 (= $x365 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x61 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x229 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x109 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x326 (bvuge ?x109 (_ bv1 32))))
 (let (($x308 (=> $x326 $x61)))
 (let (($x184 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x214 (= $x326 $x184)))
 (let (($x29 (= false false)))
 (let (($x50 (= ?x109 (_ bv0 32))))
 (let (($x234 (=> $x50 $x29)))
 (let (($x342 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x155 (= $x50 $x342)))
 (let (($x376 (and (and (and $x155 $x234) $x214) $x308)))
 (let (($x209 (= $x376 true)))
 (let (($x210 (= ?x40 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x5 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x5 (_ bv1 32))))
 (let (($x340 (=> $x315 $x210)))
 (let (($x333 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x341 (= $x315 $x333)))
 (let (($x24 (= ?x5 (_ bv0 32))))
 (let (($x199 (=> $x24 $x29)))
 (let (($x164 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x252 (= $x24 $x164)))
 (let (($x194 (and (and (and $x252 $x199) $x341) $x340)))
 (let (($x316 (= $x194 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x170 (= ?x169 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x290 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x321 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x321 (_ bv1 32))))
 (let (($x237 (=> $x232 $x170)))
 (let (($x86 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x91 (= $x232 $x86)))
 (let (($x18 (= ?x321 (_ bv0 32))))
 (let (($x84 (=> $x18 $x29)))
 (let (($x150 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x185 (= $x18 $x150)))
 (let (($x348 (and (and (and $x185 $x84) $x91) $x237)))
 (let (($x346 (= $x348 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x78 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x58 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x58 (_ bv1 32))))
 (let (($x204 (=> $x174 $x78)))
 (let (($x119 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x166 (= $x174 $x119)))
 (let (($x126 (= ?x58 (_ bv0 32))))
 (let (($x70 (=> $x126 $x29)))
 (let (($x41 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x254 (= $x126 $x41)))
 (let (($x34 (and (and (and $x254 $x70) $x166) $x204)))
 (let (($x279 (= $x34 true)))
 (let (($x175 (forall ((input.ind-%var2770X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.0.1 input.ind-%var2770X)))
 (= $x299 (and (bvule (_ bv0 32) input.ind-%var2770X) (bvult input.ind-%var2770X (_ bv100 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var2771X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var2771X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x310))))
 (let ((?x146 (input.spec-%var-m-0.1.1 input.ind-%var2771X)))
 (let (($x299 (input.spec-%var-m-0.0.1 input.ind-%var2771X)))
 (=> $x299 (= ?x146 ?x80))))))))
 ))
 (let (($x69 (and $x141 $x175)))
 (let (($x260 (= $x69 true)))
 (let ((?x373 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x378 (concat ?x159 (concat ?x302 ?x373)))))
 (let (($x300 (= ?x186 input.dst.llvm-%m)))
 (let (($x228 (= $x300 true)))
 (let (($x276 (= $x228 true)))
 (let (($x129 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x360 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x361 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x325 (and true $x361)))
 (let (($x212 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x356 (and $x212 $x325)))
 (let (($x53 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv8 32))) (bvult ?x225 (bvsub ?x225 (_ bv8 32))))))
 (let (($x76 (and (and (and true $x53) $x356) $x360)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x301 (and true $x149)))
 (let (($x329 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x363 (and $x329 $x301)))
 (let (($x17 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv12 32))) (bvult ?x39 (bvsub ?x39 (_ bv12 32))))))
 (let (($x182 (and (and (and true $x329) $x17) $x363)))
 (let (($x8 (and (and $x182 $x76) $x129)))
 (let (($x317 (= $x8 true)))
 (let (($x140 (= $x317 true)))
 (let (($x12 (= $x140 true)))
 (let (($x121 (= $x182 true)))
 (let (($x189 (= $x121 true)))
 (let (($x344 (= $x189 true)))
 (let (($x384 (and $x76 $x129)))
 (let (($x272 (= $x384 true)))
 (let (($x90 (= $x272 true)))
 (let (($x118 (= $x90 true)))
 (let ((?x345 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x23 (= (_ bv0 32) ?x345)))
 (let ((?x337 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x337)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x230 $x103)))
 (let (($x243 (and $x30 $x23)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x123 $x243)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x65)))))))
 (let (($x213 (and $x176 $x202)))
 (let (($x62 (= $x213 true)))
 (let (($x332 (= $x62 true)))
 (let (($x99 (= $x332 true)))
 (let (($x15 (and $x99 $x118)))
 (let (($x188 (and $x15 $x344)))
 (let (($x203 (and $x188 $x12)))
 (let (($x135 (and $x203 $x276)))
 (let (($x138 (and $x135 $x260)))
 (let (($x220 (and $x138 $x279)))
 (let (($x280 (and $x220 $x346)))
 (let (($x256 (and $x280 $x316)))
 (let (($x231 (and $x256 $x209)))
 (let (($x224 (and $x315 $x50)))
 (let (($x152 (and $x18 $x224)))
 (let (($x328 (and $x126 $x152)))
 (let (($x191 (and $x328 $x231)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x49 (and $x27 $x191)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x116 (and $x239 $x49)))
 (let (($x10 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x258 (and $x10 $x116)))
 (let (($x251 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x179 (and $x251 $x258)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x343 (and $x261 $x179)))
 (let (($x351 (and $x29 $x343)))
 (let (($x221 (= ?x47 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x369 (and $x221 $x351)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x380 (and $x249 $x369)))
 (let (($x271 (and $x29 $x380)))
 (let (($x227 (= ?x169 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x148 (and $x227 $x271)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x313 (and $x327 $x148)))
 (let (($x154 (and $x29 $x313)))
 (let (($x309 (= ?x40 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x323 (and $x309 $x154)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x144 (and $x289 $x323)))
 (let (($x97 (and $x29 $x144)))
 (let (($x89 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x312 (and $x89 $x97)))
 (let (($x38 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x45 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x38)))))))
 (let (($x68 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x304 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x95 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x304)))))))
 (let (($x235 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x192 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x235)))))))
 (let (($x79 (and $x192 $x95)))
 (let (($x117 (and $x79 $x147)))
 (let (($x133 (and $x117 $x45)))
 (let (($x115 (and $x133 $x312)))
 (let (($x263 (=> $x115 $x372)))
 (not $x263))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x40 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x66 (bvmul (_ bv4294967295 32) ?x40)))
 (let ((?x281 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x386 (concat ?x281 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x225 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x173 (bvadd ?x225 (_ bv3 32))))
 (let ((?x222 (concat (select input.dst.llvm-mem ?x173) (concat ?x46 ?x386))))
 (let ((?x385 (bvmul (_ bv4294967295 32) ?x222)))
 (let ((?x266 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x165 (concat ?x266 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x190 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x319 (bvadd ?x291 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x319) (concat ?x190 ?x165))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x137 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x39 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x55 (bvadd ?x39 (_ bv3 32))))
 (let ((?x336 (concat (select input.dst.llvm-mem ?x55) (concat ?x354 ?x137))))
 (let ((?x350 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x98 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x350)))
 (let ((?x193 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x98)))
 (let ((?x253 (bvadd (bvadd (bvadd ?x193 ?x336) ?x16) ?x385)))
 (let (($x37 (= ?x253 ?x66)))
 (let (($x365 (= $x37 true)))
 (let (($x372 (= $x365 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x61 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x229 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x109 (ite $x229 (_ bv1 32) (_ bv0 32))))
 (let (($x326 (bvuge ?x109 (_ bv1 32))))
 (let (($x308 (=> $x326 $x61)))
 (let (($x184 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x214 (= $x326 $x184)))
 (let (($x29 (= false false)))
 (let (($x50 (= ?x109 (_ bv0 32))))
 (let (($x234 (=> $x50 $x29)))
 (let (($x342 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x155 (= $x50 $x342)))
 (let (($x376 (and (and (and $x155 $x234) $x214) $x308)))
 (let (($x209 (= $x376 true)))
 (let (($x210 (= ?x40 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x5 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x5 (_ bv1 32))))
 (let (($x340 (=> $x315 $x210)))
 (let (($x333 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x341 (= $x315 $x333)))
 (let (($x24 (= ?x5 (_ bv0 32))))
 (let (($x199 (=> $x24 $x29)))
 (let (($x164 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x252 (= $x24 $x164)))
 (let (($x194 (and (and (and $x252 $x199) $x341) $x340)))
 (let (($x316 (= $x194 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x170 (= ?x169 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x290 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x321 (ite $x290 (_ bv1 32) (_ bv0 32))))
 (let (($x232 (bvuge ?x321 (_ bv1 32))))
 (let (($x237 (=> $x232 $x170)))
 (let (($x86 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x91 (= $x232 $x86)))
 (let (($x18 (= ?x321 (_ bv0 32))))
 (let (($x84 (=> $x18 $x29)))
 (let (($x150 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x185 (= $x18 $x150)))
 (let (($x348 (and (and (and $x185 $x84) $x91) $x237)))
 (let (($x346 (= $x348 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x78 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x58 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x174 (bvuge ?x58 (_ bv1 32))))
 (let (($x204 (=> $x174 $x78)))
 (let (($x119 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x166 (= $x174 $x119)))
 (let (($x126 (= ?x58 (_ bv0 32))))
 (let (($x70 (=> $x126 $x29)))
 (let (($x41 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x254 (= $x126 $x41)))
 (let (($x34 (and (and (and $x254 $x70) $x166) $x204)))
 (let (($x279 (= $x34 true)))
 (let (($x175 (forall ((input.ind-%var2770X (_ BitVec 32)) )(let (($x299 (input.spec-%var-m-0.0.1 input.ind-%var2770X)))
 (= $x299 (and (bvule (_ bv0 32) input.ind-%var2770X) (bvult input.ind-%var2770X (_ bv100 32))))))
 ))
 (let (($x141 (forall ((input.ind-%var2771X (_ BitVec 32)) )(let ((?x25 (bvadd (bvmul input.ind-%var2771X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x310 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv1 32))) (select input.dst.llvm-mem ?x25))))
 (let ((?x80 (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x25 (_ bv2 32))) ?x310))))
 (let ((?x146 (input.spec-%var-m-0.1.1 input.ind-%var2771X)))
 (let (($x299 (input.spec-%var-m-0.0.1 input.ind-%var2771X)))
 (=> $x299 (= ?x146 ?x80))))))))
 ))
 (let (($x69 (and $x141 $x175)))
 (let (($x260 (= $x69 true)))
 (let ((?x373 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x186 (concat ?x378 (concat ?x159 (concat ?x302 ?x373)))))
 (let (($x300 (= ?x186 input.dst.llvm-%m)))
 (let (($x228 (= $x300 true)))
 (let (($x276 (= $x228 true)))
 (let (($x129 (= (bvand ?x225 (_ bv4294967292 32)) ?x225)))
 (let (($x360 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x361 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x325 (and true $x361)))
 (let (($x212 (= (bvand ?x39 (_ bv4294967292 32)) ?x39)))
 (let (($x356 (and $x212 $x325)))
 (let (($x53 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x225 (bvsub ?x225 (_ bv8 32))) (bvult ?x225 (bvsub ?x225 (_ bv8 32))))))
 (let (($x76 (and (and (and true $x53) $x356) $x360)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x301 (and true $x149)))
 (let (($x329 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x363 (and $x329 $x301)))
 (let (($x17 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x39 (bvsub ?x39 (_ bv12 32))) (bvult ?x39 (bvsub ?x39 (_ bv12 32))))))
 (let (($x182 (and (and (and true $x329) $x17) $x363)))
 (let (($x8 (and (and $x182 $x76) $x129)))
 (let (($x317 (= $x8 true)))
 (let (($x140 (= $x317 true)))
 (let (($x12 (= $x140 true)))
 (let (($x121 (= $x182 true)))
 (let (($x189 (= $x121 true)))
 (let (($x344 (= $x189 true)))
 (let (($x384 (and $x76 $x129)))
 (let (($x272 (= $x384 true)))
 (let (($x90 (= $x272 true)))
 (let (($x118 (= $x90 true)))
 (let ((?x345 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x23 (= (_ bv0 32) ?x345)))
 (let ((?x337 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x337)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x30 (and $x230 $x103)))
 (let (($x243 (and $x30 $x23)))
 (let (($x123 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x202 (and $x123 $x243)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x176 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x65)))))))
 (let (($x213 (and $x176 $x202)))
 (let (($x62 (= $x213 true)))
 (let (($x332 (= $x62 true)))
 (let (($x99 (= $x332 true)))
 (let (($x15 (and $x99 $x118)))
 (let (($x188 (and $x15 $x344)))
 (let (($x203 (and $x188 $x12)))
 (let (($x135 (and $x203 $x276)))
 (let (($x138 (and $x135 $x260)))
 (let (($x220 (and $x138 $x279)))
 (let (($x280 (and $x220 $x346)))
 (let (($x256 (and $x280 $x316)))
 (let (($x231 (and $x256 $x209)))
 (let (($x224 (and $x315 $x50)))
 (let (($x152 (and $x18 $x224)))
 (let (($x328 (and $x126 $x152)))
 (let (($x191 (and $x328 $x231)))
 (let (($x27 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x49 (and $x27 $x191)))
 (let (($x239 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x116 (and $x239 $x49)))
 (let (($x10 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x258 (and $x10 $x116)))
 (let (($x251 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x179 (and $x251 $x258)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x343 (and $x261 $x179)))
 (let (($x351 (and $x29 $x343)))
 (let (($x221 (= ?x47 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x369 (and $x221 $x351)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x380 (and $x249 $x369)))
 (let (($x271 (and $x29 $x380)))
 (let (($x227 (= ?x169 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x148 (and $x227 $x271)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x313 (and $x327 $x148)))
 (let (($x154 (and $x29 $x313)))
 (let (($x309 (= ?x40 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x323 (and $x309 $x154)))
 (let (($x289 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x144 (and $x289 $x323)))
 (let (($x97 (and $x29 $x144)))
 (let (($x89 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x312 (and $x89 $x97)))
 (let (($x38 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x45 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x38)))))))
 (let (($x68 (bvugt ?x225 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x225 (bvsub (bvadd ?x225 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x304 (bvugt ?x39 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x215 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x95 (=> (bvule ?x39 (bvsub (bvadd ?x39 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x215 $x304)))))))
 (let (($x235 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x192 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x235)))))))
 (let (($x79 (and $x192 $x95)))
 (let (($x117 (and $x79 $x147)))
 (let (($x133 (and $x117 $x45)))
 (let (($x115 (and $x133 $x312)))
 (let (($x263 (=> $x115 $x372)))
 (not $x263))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x259 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x295 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x68 (bvadd ?x295 (_ bv3 32))))
 (let ((?x20 (concat (select input.dst.llvm-mem ?x68) (concat ?x195 ?x72))))
 (let ((?x269 (bvmul (_ bv4294967295 32) ?x20)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x71 (concat ?x51 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x38 (bvadd ?x88 (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x38) (concat ?x102 ?x71))))
 (let ((?x385 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x253 (concat ?x385 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x304 (bvadd ?x287 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x304) (concat ?x37 ?x253))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x383)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x281)))
 (let ((?x207 (bvadd (bvadd (bvadd ?x386 ?x263) ?x120) ?x269)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x364 (= ?x284 ?x207)))
 (let (($x110 (= $x364 true)))
 (let (($x111 (= $x110 true)))
 (let (($x107 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x48 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x32 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x32 (_ bv1 32))))
 (let (($x226 (=> $x74 $x107)))
 (let (($x296 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x349 (= $x74 $x296)))
 (let (($x40 (= false false)))
 (let (($x323 (= ?x32 (_ bv0 32))))
 (let (($x115 (=> $x323 $x40)))
 (let (($x97 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x312 (= $x323 $x97)))
 (let (($x98 (and (and (and $x312 $x115) $x349) $x226)))
 (let (($x193 (= $x98 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x351 (= ?x169 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x152 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x328 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x328 (_ bv1 32))))
 (let (($x369 (=> $x116 $x351)))
 (let (($x258 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x179 (= $x116 $x258)))
 (let (($x318 (= ?x328 (_ bv0 32))))
 (let (($x49 (=> $x318 $x40)))
 (let (($x231 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x191 (= $x318 $x231)))
 (let (($x148 (and (and (and $x191 $x49) $x179) $x369)))
 (let (($x313 (= $x148 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x47 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x109 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x50 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x50 (_ bv1 32))))
 (let (($x214 (=> $x155 $x184)))
 (let (($x234 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x33 (= $x155 $x234)))
 (let (($x224 (= ?x50 (_ bv0 32))))
 (let (($x342 (=> $x224 $x40)))
 (let (($x256 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x31 (= $x224 $x256)))
 (let (($x61 (and (and (and $x31 $x342) $x33) $x214)))
 (let (($x308 (= $x61 true)))
 (let ((?x330 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x333 (= ?x330 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x18 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x315 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x315 (_ bv1 32))))
 (let (($x341 (=> $x164 $x333)))
 (let (($x252 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x199 (= $x164 $x252)))
 (let (($x229 (= ?x315 (_ bv0 32))))
 (let (($x270 (=> $x229 $x40)))
 (let (($x280 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x24 (= $x229 $x280)))
 (let (($x210 (and (and (and $x24 $x270) $x199) $x341)))
 (let (($x340 (= $x210 true)))
 (let (($x139 (forall ((input.ind-%var2802X (_ BitVec 32)) )(let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2802X)))
 (= $x108 (and (bvule (_ bv0 32) input.ind-%var2802X) (bvult input.ind-%var2802X (_ bv100 32))))))
 ))
 (let (($x34 (forall ((input.ind-%var2803X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var2803X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x70))))
 (let ((?x275 (input.spec-%var-m-0.1.1 input.ind-%var2803X)))
 (let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2803X)))
 (=> $x108 (= ?x275 ?x236))))))))
 ))
 (let (($x170 (and $x34 $x139)))
 (let (($x237 (= $x170 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x324 (concat ?x36 (concat ?x228 ?x186)))))
 (let (($x205 (= ?x25 input.dst.llvm-%m)))
 (let (($x158 (= $x205 true)))
 (let (($x294 (= $x158 true)))
 (let (($x200 (= (bvand ?x295 (_ bv4294967292 32)) ?x295)))
 (let (($x90 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x242 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x129 (and true $x242)))
 (let (($x356 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x384 (and $x356 $x129)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x295 (bvsub ?x295 (_ bv8 32))) (bvult ?x295 (bvsub ?x295 (_ bv8 32))))))
 (let (($x246 (and (and (and true $x57) $x384) $x90)))
 (let (($x344 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x188 (and true $x344)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x359 (and $x44 $x188)))
 (let (($x301 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x140 (and (and (and true $x44) $x301) $x359)))
 (let (($x241 (and (and $x140 $x246) $x200)))
 (let (($x159 (= $x241 true)))
 (let (($x368 (= $x159 true)))
 (let (($x302 (= $x368 true)))
 (let (($x12 (= $x140 true)))
 (let (($x203 (= $x12 true)))
 (let (($x265 (= $x203 true)))
 (let (($x96 (and $x246 $x200)))
 (let (($x54 (= $x96 true)))
 (let (($x162 (= $x54 true)))
 (let (($x157 (= $x162 true)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x335 (= (_ bv0 32) ?x303)))
 (let ((?x62 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x213 $x332)))
 (let (($x353 (and $x99 $x335)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x277 $x353)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x337)))))))
 (let (($x53 (and $x202 $x331)))
 (let (($x362 (= $x53 true)))
 (let (($x274 (= $x362 true)))
 (let (($x307 (= $x274 true)))
 (let (($x17 (and $x307 $x157)))
 (let (($x355 (and $x17 $x265)))
 (let (($x373 (and $x355 $x302)))
 (let (($x248 (and $x373 $x294)))
 (let (($x348 (and $x248 $x237)))
 (let (($x194 (and $x348 $x340)))
 (let (($x376 (and $x194 $x308)))
 (let (($x154 (and $x376 $x313)))
 (let (($x273 (and $x154 $x193)))
 (let (($x288 (and $x318 $x74)))
 (let (($x65 (and $x224 $x288)))
 (let (($x180 (and $x229 $x65)))
 (let (($x357 (and $x180 $x273)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x354 (and $x321 $x357)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x167 (and $x126 $x354)))
 (let (($x153 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x374 (and $x153 $x167)))
 (let (($x292 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x244 (and $x292 $x374)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x137 (and $x161 $x244)))
 (let (($x382 (and $x40 $x137)))
 (let (($x283 (= ?x330 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x336 (and $x283 $x382)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x282 (and $x261 $x336)))
 (let (($x240 (and $x40 $x282)))
 (let (($x221 (= ?x47 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x233 (and $x221 $x240)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x190 (and $x249 $x233)))
 (let (($x52 (and $x40 $x190)))
 (let (($x227 (= ?x169 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x266 (and $x227 $x52)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x75 (and $x143 $x266)))
 (let (($x165 (and $x40 $x75)))
 (let (($x178 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x216 (and $x178 $x165)))
 (let (($x6 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x64 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x6)))))))
 (let (($x142 (bvugt ?x295 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x250 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x225 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x250)))))))
 (let (($x42 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x85 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x42)))))))
 (let (($x93 (and $x85 $x225)))
 (let (($x19 (and $x93 $x262)))
 (let (($x125 (and $x19 $x64)))
 (let (($x16 (and $x125 $x216)))
 (let (($x245 (=> $x16 $x111)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x72 (concat ?x259 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x295 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x68 (bvadd ?x295 (_ bv3 32))))
 (let ((?x20 (concat (select input.dst.llvm-mem ?x68) (concat ?x195 ?x72))))
 (let ((?x269 (bvmul (_ bv4294967295 32) ?x20)))
 (let ((?x51 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x71 (concat ?x51 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x38 (bvadd ?x88 (_ bv3 32))))
 (let ((?x120 (concat (select input.dst.llvm-mem ?x38) (concat ?x102 ?x71))))
 (let ((?x385 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x253 (concat ?x385 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x304 (bvadd ?x287 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x304) (concat ?x37 ?x253))))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x281 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x383)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x281)))
 (let ((?x207 (bvadd (bvadd (bvadd ?x386 ?x263) ?x120) ?x269)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x364 (= ?x284 ?x207)))
 (let (($x110 (= $x364 true)))
 (let (($x111 (= $x110 true)))
 (let (($x107 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x48 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x32 (ite $x48 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x32 (_ bv1 32))))
 (let (($x226 (=> $x74 $x107)))
 (let (($x296 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x349 (= $x74 $x296)))
 (let (($x40 (= false false)))
 (let (($x323 (= ?x32 (_ bv0 32))))
 (let (($x115 (=> $x323 $x40)))
 (let (($x97 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x312 (= $x323 $x97)))
 (let (($x98 (and (and (and $x312 $x115) $x349) $x226)))
 (let (($x193 (= $x98 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x351 (= ?x169 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x152 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x328 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x116 (bvuge ?x328 (_ bv1 32))))
 (let (($x369 (=> $x116 $x351)))
 (let (($x258 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x179 (= $x116 $x258)))
 (let (($x318 (= ?x328 (_ bv0 32))))
 (let (($x49 (=> $x318 $x40)))
 (let (($x231 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x191 (= $x318 $x231)))
 (let (($x148 (and (and (and $x191 $x49) $x179) $x369)))
 (let (($x313 (= $x148 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x184 (= ?x47 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x109 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x50 (ite $x109 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x50 (_ bv1 32))))
 (let (($x214 (=> $x155 $x184)))
 (let (($x234 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x33 (= $x155 $x234)))
 (let (($x224 (= ?x50 (_ bv0 32))))
 (let (($x342 (=> $x224 $x40)))
 (let (($x256 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x31 (= $x224 $x256)))
 (let (($x61 (and (and (and $x31 $x342) $x33) $x214)))
 (let (($x308 (= $x61 true)))
 (let ((?x330 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x333 (= ?x330 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x18 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x315 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x164 (bvuge ?x315 (_ bv1 32))))
 (let (($x341 (=> $x164 $x333)))
 (let (($x252 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x199 (= $x164 $x252)))
 (let (($x229 (= ?x315 (_ bv0 32))))
 (let (($x270 (=> $x229 $x40)))
 (let (($x280 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x24 (= $x229 $x280)))
 (let (($x210 (and (and (and $x24 $x270) $x199) $x341)))
 (let (($x340 (= $x210 true)))
 (let (($x139 (forall ((input.ind-%var2802X (_ BitVec 32)) )(let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2802X)))
 (= $x108 (and (bvule (_ bv0 32) input.ind-%var2802X) (bvult input.ind-%var2802X (_ bv100 32))))))
 ))
 (let (($x34 (forall ((input.ind-%var2803X (_ BitVec 32)) )(let ((?x163 (bvadd (bvmul input.ind-%var2803X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x70 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv1 32))) (select input.dst.llvm-mem ?x163))))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x163 (_ bv2 32))) ?x70))))
 (let ((?x275 (input.spec-%var-m-0.1.1 input.ind-%var2803X)))
 (let (($x108 (input.spec-%var-m-0.0.1 input.ind-%var2803X)))
 (=> $x108 (= ?x275 ?x236))))))))
 ))
 (let (($x170 (and $x34 $x139)))
 (let (($x237 (= $x170 true)))
 (let ((?x186 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x25 (concat ?x324 (concat ?x36 (concat ?x228 ?x186)))))
 (let (($x205 (= ?x25 input.dst.llvm-%m)))
 (let (($x158 (= $x205 true)))
 (let (($x294 (= $x158 true)))
 (let (($x200 (= (bvand ?x295 (_ bv4294967292 32)) ?x295)))
 (let (($x90 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x242 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x129 (and true $x242)))
 (let (($x356 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x384 (and $x356 $x129)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x295 (bvsub ?x295 (_ bv8 32))) (bvult ?x295 (bvsub ?x295 (_ bv8 32))))))
 (let (($x246 (and (and (and true $x57) $x384) $x90)))
 (let (($x344 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x188 (and true $x344)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x359 (and $x44 $x188)))
 (let (($x301 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x140 (and (and (and true $x44) $x301) $x359)))
 (let (($x241 (and (and $x140 $x246) $x200)))
 (let (($x159 (= $x241 true)))
 (let (($x368 (= $x159 true)))
 (let (($x302 (= $x368 true)))
 (let (($x12 (= $x140 true)))
 (let (($x203 (= $x12 true)))
 (let (($x265 (= $x203 true)))
 (let (($x96 (and $x246 $x200)))
 (let (($x54 (= $x96 true)))
 (let (($x162 (= $x54 true)))
 (let (($x157 (= $x162 true)))
 (let ((?x303 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x335 (= (_ bv0 32) ?x303)))
 (let ((?x62 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x332 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x99 (and $x213 $x332)))
 (let (($x353 (and $x99 $x335)))
 (let (($x277 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x331 (and $x277 $x353)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x202 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x337)))))))
 (let (($x53 (and $x202 $x331)))
 (let (($x362 (= $x53 true)))
 (let (($x274 (= $x362 true)))
 (let (($x307 (= $x274 true)))
 (let (($x17 (and $x307 $x157)))
 (let (($x355 (and $x17 $x265)))
 (let (($x373 (and $x355 $x302)))
 (let (($x248 (and $x373 $x294)))
 (let (($x348 (and $x248 $x237)))
 (let (($x194 (and $x348 $x340)))
 (let (($x376 (and $x194 $x308)))
 (let (($x154 (and $x376 $x313)))
 (let (($x273 (and $x154 $x193)))
 (let (($x288 (and $x318 $x74)))
 (let (($x65 (and $x224 $x288)))
 (let (($x180 (and $x229 $x65)))
 (let (($x357 (and $x180 $x273)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x354 (and $x321 $x357)))
 (let (($x126 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x167 (and $x126 $x354)))
 (let (($x153 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x374 (and $x153 $x167)))
 (let (($x292 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x244 (and $x292 $x374)))
 (let (($x161 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x137 (and $x161 $x244)))
 (let (($x382 (and $x40 $x137)))
 (let (($x283 (= ?x330 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x336 (and $x283 $x382)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x282 (and $x261 $x336)))
 (let (($x240 (and $x40 $x282)))
 (let (($x221 (= ?x47 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x233 (and $x221 $x240)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x190 (and $x249 $x233)))
 (let (($x52 (and $x40 $x190)))
 (let (($x227 (= ?x169 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x266 (and $x227 $x52)))
 (let (($x143 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x75 (and $x143 $x266)))
 (let (($x165 (and $x40 $x75)))
 (let (($x178 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x216 (and $x178 $x165)))
 (let (($x6 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x64 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x6)))))))
 (let (($x142 (bvugt ?x295 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x295 (bvsub (bvadd ?x295 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x250 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x225 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x250)))))))
 (let (($x42 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x104 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x85 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x104 $x42)))))))
 (let (($x93 (and $x85 $x225)))
 (let (($x19 (and $x93 $x262)))
 (let (($x125 (and $x19 $x64)))
 (let (($x16 (and $x125 $x216)))
 (let (($x245 (=> $x16 $x111)))
 (not $x245)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x128 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x173 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x142 (bvadd ?x173 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x142) (concat ?x114 ?x67))))
 (let ((?x100 (bvmul (_ bv4294967295 32) ?x141)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x5 (concat ?x196 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x6 (bvadd ?x291 (_ bv3 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem ?x6) (concat ?x35 ?x5))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x250 (bvadd ?x134 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x250) (concat ?x111 ?x364))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x195)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x127)))
 (let ((?x84 (bvadd (bvadd (bvadd ?x211 ?x145) ?x185) ?x100)))
 (let (($x334 (= (_ bv0 32) ?x84)))
 (let (($x69 (= $x334 true)))
 (let (($x160 (= $x69 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x306 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x243 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x123 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x123 (_ bv1 32))))
 (let (($x7 (=> $x358 $x306)))
 (let (($x46 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x358 $x46)))
 (let (($x122 (= false false)))
 (let (($x230 (= ?x123 (_ bv0 32))))
 (let (($x16 (=> $x230 $x122)))
 (let (($x165 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x216 (= $x230 $x165)))
 (let (($x386 (and (and (and $x216 $x16) $x77) $x7)))
 (let (($x372 (= $x386 true)))
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x336 (= ?x82 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x176 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x176 (_ bv1 32))))
 (let (($x282 (=> $x374 $x336)))
 (let (($x244 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x137 (= $x374 $x244)))
 (let (($x43 (= ?x176 (_ bv0 32))))
 (let (($x167 (=> $x43 $x122)))
 (let (($x357 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x354 (= $x43 $x357)))
 (let (($x190 (and (and (and $x354 $x167) $x137) $x282)))
 (let (($x52 (= $x190 true)))
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x349 (= ?x251 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x288 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x288 (_ bv1 32))))
 (let (($x350 (=> $x312 $x349)))
 (let (($x115 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x9 (= $x312 $x115)))
 (let (($x65 (= ?x288 (_ bv0 32))))
 (let (($x97 (=> $x65 $x122)))
 (let (($x323 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x144 (= $x65 $x323)))
 (let (($x226 (and (and (and $x144 $x97) $x9) $x350)))
 (let (($x98 (= $x226 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x179 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x152 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x48 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x48 (_ bv1 32))))
 (let (($x271 (=> $x49 $x179)))
 (let (($x380 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x49 $x380)))
 (let (($x32 (= ?x48 (_ bv0 32))))
 (let (($x191 (=> $x32 $x122)))
 (let (($x209 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x231 (= $x32 $x209)))
 (let (($x369 (and (and (and $x231 $x191) $x116) $x271)))
 (let (($x148 (= $x369 true)))
 (let (($x184 (forall ((input.ind-%var2834X (_ BitVec 32)) )(let (($x328 (input.spec-%var-m-0.0.1 input.ind-%var2834X)))
 (= $x328 (and (bvule (_ bv0 32) input.ind-%var2834X) (bvult input.ind-%var2834X (_ bv100 32))))))
 ))
 (let (($x340 (forall ((input.ind-%var2835X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2835X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x347))))
 (let ((?x309 (input.spec-%var-m-0.1.1 input.ind-%var2835X)))
 (let (($x328 (input.spec-%var-m-0.0.1 input.ind-%var2835X)))
 (=> $x328 (= ?x309 ?x333))))))))
 ))
 (let (($x214 (and $x340 $x184)))
 (let (($x61 (= $x214 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x163 (concat ?x108 (concat ?x294 ?x205)))))
 (let (($x94 (= ?x166 input.dst.llvm-%m)))
 (let (($x21 (= $x94 true)))
 (let (($x174 (= $x21 true)))
 (let (($x278 (= (bvand ?x173 (_ bv4294967292 32)) ?x173)))
 (let (($x157 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x200 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x96 (and true $x200)))
 (let (($x15 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x54 (and $x15 $x96)))
 (let (($x242 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x173 (bvsub ?x173 (_ bv8 32))) (bvult ?x173 (bvsub ?x173 (_ bv8 32))))))
 (let (($x44 (and (and (and true $x242) $x54) $x157)))
 (let (($x355 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x378 (and true $x355)))
 (let (($x363 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x241 (and $x363 $x378)))
 (let (($x359 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x302 (and (and (and true $x363) $x359) $x241)))
 (let (($x36 (and (and $x302 $x44) $x278)))
 (let (($x300 (= $x36 true)))
 (let (($x228 (= $x300 true)))
 (let (($x186 (= $x228 true)))
 (let (($x373 (= $x302 true)))
 (let (($x375 (= $x373 true)))
 (let (($x146 (= $x375 true)))
 (let (($x124 (and $x44 $x278)))
 (let (($x285 (= $x124 true)))
 (let (($x149 (= $x285 true)))
 (let (($x301 (= $x149 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x379 (= (_ bv0 32) ?x212)))
 (let ((?x274 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x274)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x362 $x307)))
 (let (($x130 (and $x370 $x379)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x202 $x130)))
 (let (($x332 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x332)))))))
 (let (($x118 (and $x53 $x57)))
 (let (($x361 (= $x118 true)))
 (let (($x325 (= $x361 true)))
 (let (($x356 (= $x325 true)))
 (let (($x317 (and $x356 $x301)))
 (let (($x324 (and $x317 $x146)))
 (let (($x276 (and $x324 $x186)))
 (let (($x254 (and $x276 $x174)))
 (let (($x308 (and $x254 $x61)))
 (let (($x313 (and $x308 $x148)))
 (let (($x193 (and $x313 $x98)))
 (let (($x266 (and $x193 $x52)))
 (let (($x66 (and $x266 $x372)))
 (let (($x337 (and $x43 $x230)))
 (let (($x103 (and $x65 $x337)))
 (let (($x30 (and $x32 $x103)))
 (let (($x37 (and $x30 $x66)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x222 (and $x224 $x37)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x385 (and $x109 $x222)))
 (let (($x315 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x136 (and $x315 $x385)))
 (let (($x321 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x253 (and $x321 $x136)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x126 $x253)))
 (let (($x263 (and $x122 $x365)))
 (let (($x153 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x198 (and $x153 $x263)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x28 (and $x239 $x198)))
 (let (($x112 (and $x122 $x28)))
 (let (($x10 (= ?x251 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x102 (and $x10 $x112)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x381 (and $x330 $x102)))
 (let (($x51 (and $x122 $x381)))
 (let (($x320 (= ?x82 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x314 (and $x320 $x51)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x71 (and $x249 $x314)))
 (let (($x168 (and $x122 $x71)))
 (let (($x169 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x120 (and $x169 $x168)))
 (let (($x267 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x289 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x267)))))))
 (let (($x11 (bvugt ?x173 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x173 (bvsub (bvadd ?x173 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x208 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x295 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x208)))))))
 (let (($x104 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x104)))))))
 (let (($x131 (and $x59 $x295)))
 (let (($x181 (and $x131 $x319)))
 (let (($x257 (and $x181 $x289)))
 (let (($x13 (and $x257 $x120)))
 (let (($x260 (=> $x13 $x160)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x128 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x67 (concat ?x128 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x173 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x142 (bvadd ?x173 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x142) (concat ?x114 ?x67))))
 (let ((?x100 (bvmul (_ bv4294967295 32) ?x141)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x5 (concat ?x196 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x6 (bvadd ?x291 (_ bv3 32))))
 (let ((?x185 (concat (select input.dst.llvm-mem ?x6) (concat ?x35 ?x5))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x364 (concat ?x207 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x111 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x250 (bvadd ?x134 (_ bv3 32))))
 (let ((?x145 (concat (select input.dst.llvm-mem ?x250) (concat ?x111 ?x364))))
 (let ((?x195 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x127 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x195)))
 (let ((?x211 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x127)))
 (let ((?x84 (bvadd (bvadd (bvadd ?x211 ?x145) ?x185) ?x100)))
 (let (($x334 (= (_ bv0 32) ?x84)))
 (let (($x69 (= $x334 true)))
 (let (($x160 (= $x69 true)))
 (let ((?x217 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x306 (= ?x217 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x243 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x123 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x358 (bvuge ?x123 (_ bv1 32))))
 (let (($x7 (=> $x358 $x306)))
 (let (($x46 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x358 $x46)))
 (let (($x122 (= false false)))
 (let (($x230 (= ?x123 (_ bv0 32))))
 (let (($x16 (=> $x230 $x122)))
 (let (($x165 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x216 (= $x230 $x165)))
 (let (($x386 (and (and (and $x216 $x16) $x77) $x7)))
 (let (($x372 (= $x386 true)))
 (let ((?x82 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x336 (= ?x82 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x176 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x176 (_ bv1 32))))
 (let (($x282 (=> $x374 $x336)))
 (let (($x244 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x137 (= $x374 $x244)))
 (let (($x43 (= ?x176 (_ bv0 32))))
 (let (($x167 (=> $x43 $x122)))
 (let (($x357 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x354 (= $x43 $x357)))
 (let (($x190 (and (and (and $x354 $x167) $x137) $x282)))
 (let (($x52 (= $x190 true)))
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x349 (= ?x251 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x74 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x288 (ite $x74 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x288 (_ bv1 32))))
 (let (($x350 (=> $x312 $x349)))
 (let (($x115 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x9 (= $x312 $x115)))
 (let (($x65 (= ?x288 (_ bv0 32))))
 (let (($x97 (=> $x65 $x122)))
 (let (($x323 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x144 (= $x65 $x323)))
 (let (($x226 (and (and (and $x144 $x97) $x9) $x350)))
 (let (($x98 (= $x226 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x179 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x152 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x48 (ite $x152 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x48 (_ bv1 32))))
 (let (($x271 (=> $x49 $x179)))
 (let (($x380 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x116 (= $x49 $x380)))
 (let (($x32 (= ?x48 (_ bv0 32))))
 (let (($x191 (=> $x32 $x122)))
 (let (($x209 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x231 (= $x32 $x209)))
 (let (($x369 (and (and (and $x231 $x191) $x116) $x271)))
 (let (($x148 (= $x369 true)))
 (let (($x184 (forall ((input.ind-%var2834X (_ BitVec 32)) )(let (($x328 (input.spec-%var-m-0.0.1 input.ind-%var2834X)))
 (= $x328 (and (bvule (_ bv0 32) input.ind-%var2834X) (bvult input.ind-%var2834X (_ bv100 32))))))
 ))
 (let (($x340 (forall ((input.ind-%var2835X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2835X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x347 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x333 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x347))))
 (let ((?x309 (input.spec-%var-m-0.1.1 input.ind-%var2835X)))
 (let (($x328 (input.spec-%var-m-0.0.1 input.ind-%var2835X)))
 (=> $x328 (= ?x309 ?x333))))))))
 ))
 (let (($x214 (and $x340 $x184)))
 (let (($x61 (= $x214 true)))
 (let ((?x205 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x108 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x166 (concat ?x163 (concat ?x108 (concat ?x294 ?x205)))))
 (let (($x94 (= ?x166 input.dst.llvm-%m)))
 (let (($x21 (= $x94 true)))
 (let (($x174 (= $x21 true)))
 (let (($x278 (= (bvand ?x173 (_ bv4294967292 32)) ?x173)))
 (let (($x157 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x200 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x96 (and true $x200)))
 (let (($x15 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x54 (and $x15 $x96)))
 (let (($x242 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x173 (bvsub ?x173 (_ bv8 32))) (bvult ?x173 (bvsub ?x173 (_ bv8 32))))))
 (let (($x44 (and (and (and true $x242) $x54) $x157)))
 (let (($x355 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x378 (and true $x355)))
 (let (($x363 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x241 (and $x363 $x378)))
 (let (($x359 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x302 (and (and (and true $x363) $x359) $x241)))
 (let (($x36 (and (and $x302 $x44) $x278)))
 (let (($x300 (= $x36 true)))
 (let (($x228 (= $x300 true)))
 (let (($x186 (= $x228 true)))
 (let (($x373 (= $x302 true)))
 (let (($x375 (= $x373 true)))
 (let (($x146 (= $x375 true)))
 (let (($x124 (and $x44 $x278)))
 (let (($x285 (= $x124 true)))
 (let (($x149 (= $x285 true)))
 (let (($x301 (= $x149 true)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x379 (= (_ bv0 32) ?x212)))
 (let ((?x274 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x307 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x274)))
 (let (($x362 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x370 (and $x362 $x307)))
 (let (($x130 (and $x370 $x379)))
 (let (($x202 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x57 (and $x202 $x130)))
 (let (($x332 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x53 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x332)))))))
 (let (($x118 (and $x53 $x57)))
 (let (($x361 (= $x118 true)))
 (let (($x325 (= $x361 true)))
 (let (($x356 (= $x325 true)))
 (let (($x317 (and $x356 $x301)))
 (let (($x324 (and $x317 $x146)))
 (let (($x276 (and $x324 $x186)))
 (let (($x254 (and $x276 $x174)))
 (let (($x308 (and $x254 $x61)))
 (let (($x313 (and $x308 $x148)))
 (let (($x193 (and $x313 $x98)))
 (let (($x266 (and $x193 $x52)))
 (let (($x66 (and $x266 $x372)))
 (let (($x337 (and $x43 $x230)))
 (let (($x103 (and $x65 $x337)))
 (let (($x30 (and $x32 $x103)))
 (let (($x37 (and $x30 $x66)))
 (let (($x224 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x222 (and $x224 $x37)))
 (let (($x109 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x385 (and $x109 $x222)))
 (let (($x315 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x136 (and $x315 $x385)))
 (let (($x321 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x253 (and $x321 $x136)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x126 $x253)))
 (let (($x263 (and $x122 $x365)))
 (let (($x153 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x198 (and $x153 $x263)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x28 (and $x239 $x198)))
 (let (($x112 (and $x122 $x28)))
 (let (($x10 (= ?x251 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x102 (and $x10 $x112)))
 (let (($x330 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x381 (and $x330 $x102)))
 (let (($x51 (and $x122 $x381)))
 (let (($x320 (= ?x82 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x314 (and $x320 $x51)))
 (let (($x249 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x71 (and $x249 $x314)))
 (let (($x168 (and $x122 $x71)))
 (let (($x169 (= ?x217 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x120 (and $x169 $x168)))
 (let (($x267 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x289 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x267)))))))
 (let (($x11 (bvugt ?x173 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x173 (bvsub (bvadd ?x173 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x208 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x295 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x208)))))))
 (let (($x104 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x104)))))))
 (let (($x131 (and $x59 $x295)))
 (let (($x181 (and $x131 $x319)))
 (let (($x257 (and $x181 $x289)))
 (let (($x13 (and $x257 $x120)))
 (let (($x260 (=> $x13 $x160)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x28 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x28 (_ bv1 32))))
 (let (($x112 (= ?x28 (_ bv0 32))))
 (let (($x156 (or $x112 $x71)))
 (let (($x383 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x358 (ite $x383 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x358 (_ bv1 32))))
 (let (($x201 (and $x7 $x156)))
 (let (($x46 (= ?x358 (_ bv0 32))))
 (let (($x5 (and $x46 $x156)))
 (let (($x185 (or $x5 $x201)))
 (let (($x357 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x354 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x354 (_ bv1 32))))
 (let (($x310 (and $x233 $x185)))
 (let (($x167 (= ?x354 (_ bv0 32))))
 (let (($x220 (and $x167 $x185)))
 (let (($x80 (or $x220 $x310)))
 (let (($x148 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x313 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x313 (_ bv1 32))))
 (let (($x114 (and $x312 $x80)))
 (let (($x154 (= ?x313 (_ bv0 32))))
 (let (($x238 (and $x154 $x80)))
 (let (($x171 (or $x238 $x114)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x329 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x384 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x242 (and true $x76)))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x325 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x17 (and $x325 $x242)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x272 (and (and (and true $x57) $x17) $x384)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x189 (and true $x159)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and $x44 $x189)))
 (let (($x149 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x359 (and (and (and true $x44) $x149) $x121)))
 (let (($x355 (and (and $x359 $x272) $x329)))
 (let (($x128 (=> $x355 $x171)))
 (let (($x197 (= $x128 true)))
 (let (($x67 (= $x197 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x72 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x297 (=> $x71 $x72)))
 (let (($x168 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x71 $x168)))
 (let (($x82 (= false false)))
 (let (($x314 (=> $x112 $x82)))
 (let (($x381 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x51 (= $x112 $x381)))
 (let (($x286 (and (and (and $x51 $x314) $x120) $x297)))
 (let (($x338 (= $x286 true)))
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x37 (= ?x251 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x222 (=> $x7 $x37)))
 (let (($x386 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x372 (= $x7 $x386)))
 (let (($x136 (and (and (= $x46 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x46 $x82)) $x372)))
 (let (($x253 (and $x136 $x222)))
 (let (($x365 (= $x253 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x292 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x52 (=> $x233 $x190)))
 (let (($x382 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x233 $x382)))
 (let (($x75 (and (and (= $x167 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x167 $x82)) $x336)))
 (let (($x165 (and $x75 $x52)))
 (let (($x216 (= $x165 true)))
 (let ((?x290 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x296 (= ?x290 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x349 (=> $x312 $x296)))
 (let (($x115 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x9 (= $x312 $x115)))
 (let (($x226 (and (and (= $x154 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x154 $x82)) $x9)))
 (let (($x98 (and $x226 $x349)))
 (let (($x193 (= $x98 true)))
 (let (($x258 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2866X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var2866X) (bvult input.ind-%var2866X (_ bv100 32))))))
 ))
 (let (($x61 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let ((?x347 (bvadd (bvmul input.ind-%var2867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem ?x347))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv2 32))) ?x210))))
 (let ((?x227 (input.spec-%var-m-0.1.1 input.ind-%var2867X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2867X)))
 (=> $x275 (= ?x227 ?x326))))))))
 ))
 (let (($x179 (and $x61 $x258)))
 (let (($x271 (= $x179 true)))
 (let ((?x324 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x138 (concat ?x186 (concat ?x36 ?x324)))))
 (let (($x89 (= ?x163 input.dst.llvm-%m)))
 (let (($x108 (= $x89 true)))
 (let (($x158 (= $x108 true)))
 (let (($x378 (= $x355 true)))
 (let (($x241 (= $x378 true)))
 (let (($x302 (= $x241 true)))
 (let (($x368 (= $x359 true)))
 (let (($x12 (= $x368 true)))
 (let (($x140 (= $x12 true)))
 (let (($x200 (and $x272 $x329)))
 (let (($x96 (= $x200 true)))
 (let (($x54 (= $x96 true)))
 (let (($x177 (= $x54 true)))
 (let ((?x335 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x353 (= (_ bv0 32) ?x335)))
 (let ((?x332 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x62 $x99)))
 (let (($x53 (and $x303 $x353)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x176 $x53)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x337)))))))
 (let (($x202 (and $x213 $x23)))
 (let (($x362 (= $x202 true)))
 (let (($x274 (= $x362 true)))
 (let (($x307 (= $x274 true)))
 (let (($x162 (and $x307 $x177)))
 (let (($x203 (and $x162 $x140)))
 (let (($x373 (and $x203 $x302)))
 (let (($x294 (and $x373 $x158)))
 (let (($x369 (and $x294 $x271)))
 (let (($x273 (and $x369 $x193)))
 (let (($x16 (and $x273 $x216)))
 (let (($x263 (and $x16 $x365)))
 (let (($x195 (and $x263 $x338)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x127 (and $x288 $x195)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x211 (and $x32 $x127)))
 (let (($x152 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x113 (and $x152 $x211)))
 (let (($x50 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x110 (and $x50 $x113)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x111 (and $x229 $x110)))
 (let (($x269 (and $x82 $x111)))
 (let (($x18 (= ?x290 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x207 (and $x18 $x269)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x20 (and $x126 $x207)))
 (let (($x364 (and $x82 $x20)))
 (let (($x153 (= ?x292 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x245 (and $x153 $x364)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x145 (and $x239 $x245)))
 (let (($x175 (and $x82 $x145)))
 (let (($x10 (= ?x251 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x298 (and $x10 $x175)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x151 (and $x261 $x298)))
 (let (($x35 (and $x82 $x151)))
 (let (($x47 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x132 (and $x47 $x35)))
 (let (($x133 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x327 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x133)))))))
 (let (($x117 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x38 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x79 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x206 (_ bv3 32)))))
 (let (($x173 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x79)))))))
 (let (($x26 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x304 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x26)))))))
 (let (($x105 (and $x304 $x173)))
 (let (($x83 (and $x105 $x38)))
 (let (($x255 (and $x83 $x327)))
 (let (($x196 (and $x255 $x132)))
 (let (($x106 (=> $x196 $x67)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x198 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x28 (ite $x198 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x28 (_ bv1 32))))
 (let (($x112 (= ?x28 (_ bv0 32))))
 (let (($x156 (or $x112 $x71)))
 (let (($x383 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x358 (ite $x383 (_ bv1 32) (_ bv0 32))))
 (let (($x7 (bvuge ?x358 (_ bv1 32))))
 (let (($x201 (and $x7 $x156)))
 (let (($x46 (= ?x358 (_ bv0 32))))
 (let (($x5 (and $x46 $x156)))
 (let (($x185 (or $x5 $x201)))
 (let (($x357 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x354 (ite $x357 (_ bv1 32) (_ bv0 32))))
 (let (($x233 (bvuge ?x354 (_ bv1 32))))
 (let (($x310 (and $x233 $x185)))
 (let (($x167 (= ?x354 (_ bv0 32))))
 (let (($x220 (and $x167 $x185)))
 (let (($x80 (or $x220 $x310)))
 (let (($x148 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x313 (ite $x148 (_ bv1 32) (_ bv0 32))))
 (let (($x312 (bvuge ?x313 (_ bv1 32))))
 (let (($x114 (and $x312 $x80)))
 (let (($x154 (= ?x313 (_ bv0 32))))
 (let (($x238 (and $x154 $x80)))
 (let (($x171 (or $x238 $x114)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x329 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x384 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x76 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x242 (and true $x76)))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x325 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x17 (and $x325 $x242)))
 (let (($x57 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv8 32))) (bvult ?x68 (bvsub ?x68 (_ bv8 32))))))
 (let (($x272 (and (and (and true $x57) $x17) $x384)))
 (let (($x159 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x189 (and true $x159)))
 (let (($x44 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and $x44 $x189)))
 (let (($x149 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x359 (and (and (and true $x44) $x149) $x121)))
 (let (($x355 (and (and $x359 $x272) $x329)))
 (let (($x128 (=> $x355 $x171)))
 (let (($x197 (= $x128 true)))
 (let (($x67 (= $x197 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x72 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x297 (=> $x71 $x72)))
 (let (($x168 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x71 $x168)))
 (let (($x82 (= false false)))
 (let (($x314 (=> $x112 $x82)))
 (let (($x381 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x51 (= $x112 $x381)))
 (let (($x286 (and (and (and $x51 $x314) $x120) $x297)))
 (let (($x338 (= $x286 true)))
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x37 (= ?x251 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x222 (=> $x7 $x37)))
 (let (($x386 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x372 (= $x7 $x386)))
 (let (($x136 (and (and (= $x46 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x46 $x82)) $x372)))
 (let (($x253 (and $x136 $x222)))
 (let (($x365 (= $x253 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x190 (= ?x292 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x52 (=> $x233 $x190)))
 (let (($x382 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x233 $x382)))
 (let (($x75 (and (and (= $x167 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x167 $x82)) $x336)))
 (let (($x165 (and $x75 $x52)))
 (let (($x216 (= $x165 true)))
 (let ((?x290 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x296 (= ?x290 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x349 (=> $x312 $x296)))
 (let (($x115 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x9 (= $x312 $x115)))
 (let (($x226 (and (and (= $x154 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x154 $x82)) $x9)))
 (let (($x98 (and $x226 $x349)))
 (let (($x193 (= $x98 true)))
 (let (($x258 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2866X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var2866X) (bvult input.ind-%var2866X (_ bv100 32))))))
 ))
 (let (($x61 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let ((?x347 (bvadd (bvmul input.ind-%var2867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv1 32))) (select input.dst.llvm-mem ?x347))))
 (let ((?x326 (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x347 (_ bv2 32))) ?x210))))
 (let ((?x227 (input.spec-%var-m-0.1.1 input.ind-%var2867X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var2867X)))
 (=> $x275 (= ?x227 ?x326))))))))
 ))
 (let (($x179 (and $x61 $x258)))
 (let (($x271 (= $x179 true)))
 (let ((?x324 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x138 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x163 (concat ?x138 (concat ?x186 (concat ?x36 ?x324)))))
 (let (($x89 (= ?x163 input.dst.llvm-%m)))
 (let (($x108 (= $x89 true)))
 (let (($x158 (= $x108 true)))
 (let (($x378 (= $x355 true)))
 (let (($x241 (= $x378 true)))
 (let (($x302 (= $x241 true)))
 (let (($x368 (= $x359 true)))
 (let (($x12 (= $x368 true)))
 (let (($x140 (= $x12 true)))
 (let (($x200 (and $x272 $x329)))
 (let (($x96 (= $x200 true)))
 (let (($x54 (= $x96 true)))
 (let (($x177 (= $x54 true)))
 (let ((?x335 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x353 (= (_ bv0 32) ?x335)))
 (let ((?x332 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x99 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x332)))
 (let (($x62 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (and $x62 $x99)))
 (let (($x53 (and $x303 $x353)))
 (let (($x176 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x176 $x53)))
 (let (($x337 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x213 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x337)))))))
 (let (($x202 (and $x213 $x23)))
 (let (($x362 (= $x202 true)))
 (let (($x274 (= $x362 true)))
 (let (($x307 (= $x274 true)))
 (let (($x162 (and $x307 $x177)))
 (let (($x203 (and $x162 $x140)))
 (let (($x373 (and $x203 $x302)))
 (let (($x294 (and $x373 $x158)))
 (let (($x369 (and $x294 $x271)))
 (let (($x273 (and $x369 $x193)))
 (let (($x16 (and $x273 $x216)))
 (let (($x263 (and $x16 $x365)))
 (let (($x195 (and $x263 $x338)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x127 (and $x288 $x195)))
 (let (($x32 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x211 (and $x32 $x127)))
 (let (($x152 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x113 (and $x152 $x211)))
 (let (($x50 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x110 (and $x50 $x113)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x111 (and $x229 $x110)))
 (let (($x269 (and $x82 $x111)))
 (let (($x18 (= ?x290 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x207 (and $x18 $x269)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x20 (and $x126 $x207)))
 (let (($x364 (and $x82 $x20)))
 (let (($x153 (= ?x292 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x245 (and $x153 $x364)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x145 (and $x239 $x245)))
 (let (($x175 (and $x82 $x145)))
 (let (($x10 (= ?x251 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x298 (and $x10 $x175)))
 (let (($x261 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x151 (and $x261 $x298)))
 (let (($x35 (and $x82 $x151)))
 (let (($x47 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x132 (and $x47 $x35)))
 (let (($x133 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x88 (_ bv3 32)))))
 (let (($x327 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x133)))))))
 (let (($x117 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x68 (_ bv3 32)))))
 (let (($x38 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x79 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x206 (_ bv3 32)))))
 (let (($x173 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x79)))))))
 (let (($x26 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x304 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x42 $x26)))))))
 (let (($x105 (and $x304 $x173)))
 (let (($x83 (and $x105 $x38)))
 (let (($x255 (and $x83 $x327)))
 (let (($x196 (and $x255 $x132)))
 (let (($x106 (=> $x196 $x67)))
 (not $x106))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 216 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x155 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x41 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x47)))
 (let ((?x348 (bvadd ?x41 ?x155)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x139 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x142 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x117 (bvadd ?x142 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x117) (concat ?x204 ?x150))))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x318 (concat ?x25 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x133 (bvadd ?x291 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x133) (concat ?x29 ?x318))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x84 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x287 (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x79) (concat ?x69 ?x84))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x252)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x343)))
 (let ((?x14 (bvadd (bvadd (bvadd ?x248 ?x268) ?x342) ?x91)))
 (let (($x279 (= ?x14 ?x348)))
 (let (($x264 (= $x279 true)))
 (let (($x367 (= $x264 true)))
 (let (($x114 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x335 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x353 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x353 (_ bv1 32))))
 (let (($x171 (=> $x53 $x114)))
 (let (($x310 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x80 (= $x53 $x310)))
 (let (($x283 (= false false)))
 (let (($x156 (= ?x353 (_ bv0 32))))
 (let (($x220 (=> $x156 $x283)))
 (let (($x201 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x185 (= $x156 $x201)))
 (let (($x67 (and (and (and $x185 $x220) $x80) $x171)))
 (let (($x106 (= $x67 true)))
 (let (($x145 (= ?x27 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x332 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x99 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x99 (_ bv1 32))))
 (let (($x175 (=> $x303 $x145)))
 (let (($x20 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x303 $x20)))
 (let (($x113 (= ?x99 (_ bv0 32))))
 (let (($x207 (=> $x113 $x283)))
 (let (($x111 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x269 (= $x113 $x111)))
 (let (($x35 (and (and (and $x269 $x207) $x364) $x175)))
 (let (($x132 (= $x35 true)))
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x72 (= ?x321 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x176 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x176 (_ bv1 32))))
 (let (($x297 (=> $x62 $x72)))
 (let (($x120 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x101 (= $x62 $x120)))
 (let (($x51 (= ?x176 (_ bv0 32))))
 (let (($x168 (=> $x51 $x283)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x71 (= $x51 $x259)))
 (let (($x195 (and (and (and $x71 $x168) $x101) $x297)))
 (let (($x127 (= $x195 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x365 (= ?x50 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x103 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x277 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x277 (_ bv1 32))))
 (let (($x263 (=> $x213 $x365)))
 (let (($x37 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x213 $x37)))
 (let (($x7 (= ?x277 (_ bv0 32))))
 (let (($x66 (=> $x7 $x283)))
 (let (($x372 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x136 (= $x7 $x372)))
 (let (($x112 (and (and (and $x136 $x66) $x222) $x263)))
 (let (($x102 (= $x112 true)))
 (let (($x281 (forall ((input.ind-%var2902X (_ BitVec 32)) )(let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2902X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var2902X) (bvult input.ind-%var2902X (_ bv100 32))))))
 ))
 (let (($x336 (forall ((input.ind-%var2903X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var2903X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x354))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var2903X)))
 (let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2903X)))
 (=> $x30 (= ?x320 ?x266))))))))
 ))
 (let (($x371 (and $x336 $x281)))
 (let (($x306 (= $x371 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x231 (concat ?x214 (concat ?x31 ?x199)))))
 (let (($x116 (= ?x49 input.dst.llvm-%m)))
 (let (($x351 (= $x116 true)))
 (let (($x258 (= $x351 true)))
 (let (($x12 (= (bvand ?x142 (_ bv4294967292 32)) ?x142)))
 (let (($x159 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x317 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x301 (and true $x317)))
 (let (($x8 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x182 (and $x8 $x301)))
 (let (($x44 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x142 (bvsub ?x142 (_ bv8 32))) (bvult ?x142 (bvsub ?x142 (_ bv8 32))))))
 (let (($x359 (and (and (and true $x44) $x182) $x159)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x276 (and true $x300)))
 (let (($x302 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (and $x302 $x276)))
 (let (($x228 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x158 (and (and (and true $x302) $x228) $x163)))
 (let (($x347 (and (and $x158 $x359) $x12)))
 (let (($x234 (= $x347 true)))
 (let (($x352 (= $x234 true)))
 (let (($x340 (= $x352 true)))
 (let (($x294 (= $x158 true)))
 (let (($x169 (= $x294 true)))
 (let (($x275 (= $x169 true)))
 (let (($x140 (and $x359 $x12)))
 (let (($x203 (= $x140 true)))
 (let (($x265 (= $x203 true)))
 (let (($x355 (= $x265 true)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x129 (= (_ bv0 32) ?x90)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x360 $x242)))
 (let (($x384 (and $x17 $x129)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x212 $x384)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x387 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x15)))))))
 (let (($x246 (and $x387 $x272)))
 (let (($x329 (= $x246 true)))
 (let (($x200 (= $x329 true)))
 (let (($x96 (= $x200 true)))
 (let (($x378 (and $x96 $x355)))
 (let (($x227 (and $x378 $x275)))
 (let (($x33 (and $x227 $x340)))
 (let (($x179 (and $x33 $x258)))
 (let (($x385 (and $x179 $x306)))
 (let (($x381 (and $x385 $x102)))
 (let (($x211 (and $x381 $x127)))
 (let (($x196 (and $x211 $x132)))
 (let (($x141 (and $x196 $x106)))
 (let (($x23 (and $x303 $x53)))
 (let (($x202 (and $x62 $x23)))
 (let (($x362 (and $x213 $x202)))
 (let (($x219 (and $x362 $x141)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x65 (and $x337 $x219)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x146 (and $x123 $x65)))
 (let (($x243 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x166 (and $x243 $x146)))
 (let (($x288 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x322 (and $x288 $x166)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x205 (and $x32 $x322)))
 (let (($x94 (and $x283 $x205)))
 (let (($x152 (= ?x50 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x308 (and $x152 $x94)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x109 $x308)))
 (let (($x122 (and $x283 $x209)))
 (let (($x315 (= ?x321 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x21 (and $x315 $x122)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x174 (and $x290 $x21)))
 (let (($x377 (and $x283 $x174)))
 (let (($x58 (= ?x27 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x164 (and $x58 $x377)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x346 (and $x239 $x164)))
 (let (($x280 (and $x283 $x346)))
 (let (($x251 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x178 (and $x251 $x280)))
 (let (($x125 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x249 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x19 (bvugt ?x142 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x142 (bvsub (bvadd ?x142 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x93 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x68 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x93)))))))
 (let (($x60 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x250 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x60)))))))
 (let (($x172 (and $x250 $x68)))
 (let (($x22 (and $x172 $x6)))
 (let (($x223 (and $x22 $x249)))
 (let (($x328 (and $x223 $x178)))
 (let (($x311 (=> $x328 $x367)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x27 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x155 (bvmul (_ bv4294967295 32) ?x27)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x41 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x47)))
 (let ((?x348 (bvadd ?x41 ?x155)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x150 (concat ?x139 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x204 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x142 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x117 (bvadd ?x142 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x117) (concat ?x204 ?x150))))
 (let ((?x91 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x25 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x318 (concat ?x25 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x29 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x133 (bvadd ?x291 (_ bv3 32))))
 (let ((?x342 (concat (select input.dst.llvm-mem ?x133) (concat ?x29 ?x318))))
 (let ((?x100 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x84 (concat ?x100 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x79 (bvadd ?x287 (_ bv3 32))))
 (let ((?x268 (concat (select input.dst.llvm-mem ?x79) (concat ?x69 ?x84))))
 (let ((?x252 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x343 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x252)))
 (let ((?x248 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x343)))
 (let ((?x14 (bvadd (bvadd (bvadd ?x248 ?x268) ?x342) ?x91)))
 (let (($x279 (= ?x14 ?x348)))
 (let (($x264 (= $x279 true)))
 (let (($x367 (= $x264 true)))
 (let (($x114 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x335 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x353 (ite $x335 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x353 (_ bv1 32))))
 (let (($x171 (=> $x53 $x114)))
 (let (($x310 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x80 (= $x53 $x310)))
 (let (($x283 (= false false)))
 (let (($x156 (= ?x353 (_ bv0 32))))
 (let (($x220 (=> $x156 $x283)))
 (let (($x201 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x185 (= $x156 $x201)))
 (let (($x67 (and (and (and $x185 $x220) $x80) $x171)))
 (let (($x106 (= $x67 true)))
 (let (($x145 (= ?x27 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x332 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x99 (ite $x332 (_ bv1 32) (_ bv0 32))))
 (let (($x303 (bvuge ?x99 (_ bv1 32))))
 (let (($x175 (=> $x303 $x145)))
 (let (($x20 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x303 $x20)))
 (let (($x113 (= ?x99 (_ bv0 32))))
 (let (($x207 (=> $x113 $x283)))
 (let (($x111 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x269 (= $x113 $x111)))
 (let (($x35 (and (and (and $x269 $x207) $x364) $x175)))
 (let (($x132 (= $x35 true)))
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x72 (= ?x321 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x176 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x176 (_ bv1 32))))
 (let (($x297 (=> $x62 $x72)))
 (let (($x120 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x101 (= $x62 $x120)))
 (let (($x51 (= ?x176 (_ bv0 32))))
 (let (($x168 (=> $x51 $x283)))
 (let (($x259 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x71 (= $x51 $x259)))
 (let (($x195 (and (and (and $x71 $x168) $x101) $x297)))
 (let (($x127 (= $x195 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x365 (= ?x50 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x103 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x277 (ite $x103 (_ bv1 32) (_ bv0 32))))
 (let (($x213 (bvuge ?x277 (_ bv1 32))))
 (let (($x263 (=> $x213 $x365)))
 (let (($x37 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x222 (= $x213 $x37)))
 (let (($x7 (= ?x277 (_ bv0 32))))
 (let (($x66 (=> $x7 $x283)))
 (let (($x372 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x136 (= $x7 $x372)))
 (let (($x112 (and (and (and $x136 $x66) $x222) $x263)))
 (let (($x102 (= $x112 true)))
 (let (($x281 (forall ((input.ind-%var2902X (_ BitVec 32)) )(let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2902X)))
 (= $x30 (and (bvule (_ bv0 32) input.ind-%var2902X) (bvult input.ind-%var2902X (_ bv100 32))))))
 ))
 (let (($x336 (forall ((input.ind-%var2903X (_ BitVec 32)) )(let ((?x98 (bvadd (bvmul input.ind-%var2903X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv1 32))) (select input.dst.llvm-mem ?x98))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x98 (_ bv2 32))) ?x354))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var2903X)))
 (let (($x30 (input.spec-%var-m-0.0.1 input.ind-%var2903X)))
 (=> $x30 (= ?x320 ?x266))))))))
 ))
 (let (($x371 (and $x336 $x281)))
 (let (($x306 (= $x371 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x31 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x214 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x49 (concat ?x231 (concat ?x214 (concat ?x31 ?x199)))))
 (let (($x116 (= ?x49 input.dst.llvm-%m)))
 (let (($x351 (= $x116 true)))
 (let (($x258 (= $x351 true)))
 (let (($x12 (= (bvand ?x142 (_ bv4294967292 32)) ?x142)))
 (let (($x159 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x317 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x301 (and true $x317)))
 (let (($x8 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x182 (and $x8 $x301)))
 (let (($x44 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x142 (bvsub ?x142 (_ bv8 32))) (bvult ?x142 (bvsub ?x142 (_ bv8 32))))))
 (let (($x359 (and (and (and true $x44) $x182) $x159)))
 (let (($x300 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x276 (and true $x300)))
 (let (($x302 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x163 (and $x302 $x276)))
 (let (($x228 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x158 (and (and (and true $x302) $x228) $x163)))
 (let (($x347 (and (and $x158 $x359) $x12)))
 (let (($x234 (= $x347 true)))
 (let (($x352 (= $x234 true)))
 (let (($x340 (= $x352 true)))
 (let (($x294 (= $x158 true)))
 (let (($x169 (= $x294 true)))
 (let (($x275 (= $x169 true)))
 (let (($x140 (and $x359 $x12)))
 (let (($x203 (= $x140 true)))
 (let (($x265 (= $x203 true)))
 (let (($x355 (= $x265 true)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x129 (= (_ bv0 32) ?x90)))
 (let ((?x76 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x76)))
 (let (($x360 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x17 (and $x360 $x242)))
 (let (($x384 (and $x17 $x129)))
 (let (($x212 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (and $x212 $x384)))
 (let (($x15 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x387 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x15)))))))
 (let (($x246 (and $x387 $x272)))
 (let (($x329 (= $x246 true)))
 (let (($x200 (= $x329 true)))
 (let (($x96 (= $x200 true)))
 (let (($x378 (and $x96 $x355)))
 (let (($x227 (and $x378 $x275)))
 (let (($x33 (and $x227 $x340)))
 (let (($x179 (and $x33 $x258)))
 (let (($x385 (and $x179 $x306)))
 (let (($x381 (and $x385 $x102)))
 (let (($x211 (and $x381 $x127)))
 (let (($x196 (and $x211 $x132)))
 (let (($x141 (and $x196 $x106)))
 (let (($x23 (and $x303 $x53)))
 (let (($x202 (and $x62 $x23)))
 (let (($x362 (and $x213 $x202)))
 (let (($x219 (and $x362 $x141)))
 (let (($x337 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x65 (and $x337 $x219)))
 (let (($x123 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x146 (and $x123 $x65)))
 (let (($x243 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x166 (and $x243 $x146)))
 (let (($x288 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x322 (and $x288 $x166)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x205 (and $x32 $x322)))
 (let (($x94 (and $x283 $x205)))
 (let (($x152 (= ?x50 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x308 (and $x152 $x94)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x109 $x308)))
 (let (($x122 (and $x283 $x209)))
 (let (($x315 (= ?x321 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x21 (and $x315 $x122)))
 (let (($x290 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x174 (and $x290 $x21)))
 (let (($x377 (and $x283 $x174)))
 (let (($x58 (= ?x27 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x164 (and $x58 $x377)))
 (let (($x239 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x346 (and $x239 $x164)))
 (let (($x280 (and $x283 $x346)))
 (let (($x251 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x178 (and $x251 $x280)))
 (let (($x125 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x249 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x19 (bvugt ?x142 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x142 (bvsub (bvadd ?x142 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x93 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x68 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x93)))))))
 (let (($x60 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x192 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x250 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x192 $x60)))))))
 (let (($x172 (and $x250 $x68)))
 (let (($x22 (and $x172 $x6)))
 (let (($x223 (and $x22 $x249)))
 (let (($x328 (and $x223 $x178)))
 (let (($x311 (=> $x328 $x367)))
 (not $x311))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x312 (bvmul (_ bv4294967295 32) ?x321)))
 (let ((?x282 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x312)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x313 (concat ?x165 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x11 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x19 (bvadd ?x11 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x19) (concat ?x115 ?x313))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x350)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x87 (concat ?x311 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x125 (bvadd ?x88 (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x125) (concat ?x274 ?x87))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x93 (bvadd ?x134 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x93) (concat ?x41 ?x14))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x232)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x139)))
 (let ((?x82 (bvadd (bvadd (bvadd ?x150 ?x279) ?x261) ?x144)))
 (let (($x216 (= ?x82 ?x282)))
 (let (($x16 (= $x216 true)))
 (let (($x107 (= $x16 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x379 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x356 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x356 (_ bv1 32))))
 (let (($x218 (=> $x328 $x309)))
 (let (($x40 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x376 (= $x328 $x40)))
 (let (($x27 (= false false)))
 (let (($x130 (= ?x356 (_ bv0 32))))
 (let (($x178 (=> $x130 $x27)))
 (let (($x346 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x280 (= $x130 $x346)))
 (let (($x343 (and (and (and $x280 $x178) $x376) $x218)))
 (let (($x248 (= $x343 true)))
 (let (($x94 (= ?x321 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x362 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x362 (_ bv1 32))))
 (let (($x308 (=> $x370 $x94)))
 (let (($x166 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x322 (= $x370 $x166)))
 (let (($x106 (= ?x362 (_ bv0 32))))
 (let (($x146 (=> $x106 $x27)))
 (let (($x219 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x65 (= $x106 $x219)))
 (let (($x21 (and (and (and $x65 $x146) $x322) $x308)))
 (let (($x174 (= $x21 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x310 (= ?x50 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x353 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x53 (ite $x353 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x53 (_ bv1 32))))
 (let (($x80 (=> $x23 $x310)))
 (let (($x185 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x220 (= $x23 $x185)))
 (let (($x132 (= ?x53 (_ bv0 32))))
 (let (($x201 (=> $x132 $x27)))
 (let (($x156 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x5 (= $x132 $x156)))
 (let (($x114 (and (and (and $x5 $x201) $x220) $x80)))
 (let (($x171 (= $x114 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x20 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x303 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x303 (_ bv1 32))))
 (let (($x364 (=> $x335 $x20)))
 (let (($x269 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x207 (= $x335 $x269)))
 (let (($x127 (= ?x303 (_ bv0 32))))
 (let (($x111 (=> $x127 $x27)))
 (let (($x113 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x110 (= $x127 $x113)))
 (let (($x145 (and (and (and $x110 $x111) $x207) $x364)))
 (let (($x175 (= $x145 true)))
 (let (($x13 (forall ((input.ind-%var2934X (_ BitVec 32)) )(let (($x332 (input.spec-%var-m-0.0.1 input.ind-%var2934X)))
 (= $x332 (and (bvule (_ bv0 32) input.ind-%var2934X) (bvult input.ind-%var2934X (_ bv100 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var2935X (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul input.ind-%var2935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x283))))
 (let ((?x10 (input.spec-%var-m-0.1.1 input.ind-%var2935X)))
 (let (($x332 (input.spec-%var-m-0.0.1 input.ind-%var2935X)))
 (=> $x332 (= ?x10 ?x253))))))))
 ))
 (let (($x72 (and $x112 $x13)))
 (let (($x297 (= $x72 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x351 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x349 (concat ?x221 (concat ?x351 ?x49)))))
 (let (($x244 (= ?x98 input.dst.llvm-%m)))
 (let (($x137 (= $x244 true)))
 (let (($x167 (= $x137 true)))
 (let (($x89 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x265 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x368 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x12 (and true $x368)))
 (let (($x182 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x140 (and $x182 $x12)))
 (let (($x188 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv8 32))) (bvult ?x11 (bvsub ?x11 (_ bv8 32))))))
 (let (($x241 (and (and (and true $x188) $x140) $x265)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x227 (and true $x275)))
 (let (($x135 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x24 (and $x135 $x227)))
 (let (($x276 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x352 (and (and (and true $x135) $x276) $x24)))
 (let (($x184 (and (and $x352 $x241) $x89)))
 (let (($x214 (= $x184 true)))
 (let (($x210 (= $x214 true)))
 (let (($x31 (= $x210 true)))
 (let (($x340 (= $x352 true)))
 (let (($x33 (= $x340 true)))
 (let (($x333 (= $x33 true)))
 (let (($x375 (and $x241 $x89)))
 (let (($x373 (= $x375 true)))
 (let (($x299 (= $x373 true)))
 (let (($x138 (= $x299 true)))
 (let ((?x177 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x54 (= (_ bv0 32) ?x177)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x246 $x200)))
 (let (($x162 (and $x96 $x54)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x183 $x162)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x360 $x76)))))))
 (let (($x44 (and $x272 $x157)))
 (let (($x189 (= $x44 true)))
 (let (($x344 (= $x189 true)))
 (let (($x278 (= $x344 true)))
 (let (($x228 (and $x278 $x138)))
 (let (($x380 (and $x228 $x333)))
 (let (($x199 (and $x380 $x31)))
 (let (($x240 (and $x199 $x167)))
 (let (($x195 (and $x240 $x297)))
 (let (($x35 (and $x195 $x175)))
 (let (($x67 (and $x35 $x171)))
 (let (($x377 (and $x67 $x174)))
 (let (($x260 (and $x377 $x248)))
 (let (($x57 (and $x370 $x130)))
 (let (($x15 (and $x23 $x57)))
 (let (($x118 (and $x335 $x15)))
 (let (($x334 (and $x118 $x260)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x69 (and $x176 $x334)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x194 (and $x213 $x69)))
 (let (($x103 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x100 (and $x103 $x194)))
 (let (($x230 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x270 (and $x230 $x100)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x84 (and $x331 $x270)))
 (let (($x160 (and $x27 $x84)))
 (let (($x43 (= ?x74 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x43 $x160)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x170 (and $x32 $x268)))
 (let (($x256 (and $x27 $x170)))
 (let (($x152 (= ?x50 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x143 (and $x152 $x256)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x29 (and $x109 $x143)))
 (let (($x345 (and $x27 $x29)))
 (let (($x315 (= ?x321 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x25 (and $x315 $x345)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x92 (and $x126 $x25)))
 (let (($x318 (and $x27 $x92)))
 (let (($x292 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x70 (and $x292 $x318)))
 (let (($x257 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x330 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x257)))))))
 (let (($x181 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x131 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x142 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x131)))))))
 (let (($x85 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x208 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x85)))))))
 (let (($x95 (and $x208 $x142)))
 (let (($x147 (and $x95 $x267)))
 (let (($x45 (and $x147 $x330)))
 (let (($x342 (and $x45 $x70)))
 (let (($x369 (=> $x342 $x107)))
 (not $x369)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x312 (bvmul (_ bv4294967295 32) ?x321)))
 (let ((?x282 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x312)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x313 (concat ?x165 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x11 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x19 (bvadd ?x11 (_ bv3 32))))
 (let ((?x350 (concat (select input.dst.llvm-mem ?x19) (concat ?x115 ?x313))))
 (let ((?x144 (bvmul (_ bv4294967295 32) ?x350)))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x87 (concat ?x311 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x125 (bvadd ?x88 (_ bv3 32))))
 (let ((?x261 (concat (select input.dst.llvm-mem ?x125) (concat ?x274 ?x87))))
 (let ((?x91 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x14 (concat ?x91 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x41 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x93 (bvadd ?x134 (_ bv3 32))))
 (let ((?x279 (concat (select input.dst.llvm-mem ?x93) (concat ?x41 ?x14))))
 (let ((?x232 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x139 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x232)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x139)))
 (let ((?x82 (bvadd (bvadd (bvadd ?x150 ?x279) ?x261) ?x144)))
 (let (($x216 (= ?x82 ?x282)))
 (let (($x16 (= $x216 true)))
 (let (($x107 (= $x16 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x379 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x356 (ite $x379 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x356 (_ bv1 32))))
 (let (($x218 (=> $x328 $x309)))
 (let (($x40 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x376 (= $x328 $x40)))
 (let (($x27 (= false false)))
 (let (($x130 (= ?x356 (_ bv0 32))))
 (let (($x178 (=> $x130 $x27)))
 (let (($x346 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x280 (= $x130 $x346)))
 (let (($x343 (and (and (and $x280 $x178) $x376) $x218)))
 (let (($x248 (= $x343 true)))
 (let (($x94 (= ?x321 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x202 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x362 (ite $x202 (_ bv1 32) (_ bv0 32))))
 (let (($x370 (bvuge ?x362 (_ bv1 32))))
 (let (($x308 (=> $x370 $x94)))
 (let (($x166 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x322 (= $x370 $x166)))
 (let (($x106 (= ?x362 (_ bv0 32))))
 (let (($x146 (=> $x106 $x27)))
 (let (($x219 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x65 (= $x106 $x219)))
 (let (($x21 (and (and (and $x65 $x146) $x322) $x308)))
 (let (($x174 (= $x21 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x310 (= ?x50 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x353 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x53 (ite $x353 (_ bv1 32) (_ bv0 32))))
 (let (($x23 (bvuge ?x53 (_ bv1 32))))
 (let (($x80 (=> $x23 $x310)))
 (let (($x185 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x220 (= $x23 $x185)))
 (let (($x132 (= ?x53 (_ bv0 32))))
 (let (($x201 (=> $x132 $x27)))
 (let (($x156 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x5 (= $x132 $x156)))
 (let (($x114 (and (and (and $x5 $x201) $x220) $x80)))
 (let (($x171 (= $x114 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x20 (= ?x74 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x303 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x335 (bvuge ?x303 (_ bv1 32))))
 (let (($x364 (=> $x335 $x20)))
 (let (($x269 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x207 (= $x335 $x269)))
 (let (($x127 (= ?x303 (_ bv0 32))))
 (let (($x111 (=> $x127 $x27)))
 (let (($x113 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x110 (= $x127 $x113)))
 (let (($x145 (and (and (and $x110 $x111) $x207) $x364)))
 (let (($x175 (= $x145 true)))
 (let (($x13 (forall ((input.ind-%var2934X (_ BitVec 32)) )(let (($x332 (input.spec-%var-m-0.0.1 input.ind-%var2934X)))
 (= $x332 (and (bvule (_ bv0 32) input.ind-%var2934X) (bvult input.ind-%var2934X (_ bv100 32))))))
 ))
 (let (($x112 (forall ((input.ind-%var2935X (_ BitVec 32)) )(let ((?x7 (bvadd (bvmul input.ind-%var2935X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x283 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv1 32))) (select input.dst.llvm-mem ?x7))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x7 (_ bv2 32))) ?x283))))
 (let ((?x10 (input.spec-%var-m-0.1.1 input.ind-%var2935X)))
 (let (($x332 (input.spec-%var-m-0.0.1 input.ind-%var2935X)))
 (=> $x332 (= ?x10 ?x253))))))))
 ))
 (let (($x72 (and $x112 $x13)))
 (let (($x297 (= $x72 true)))
 (let ((?x49 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x351 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x221 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x98 (concat ?x349 (concat ?x221 (concat ?x351 ?x49)))))
 (let (($x244 (= ?x98 input.dst.llvm-%m)))
 (let (($x137 (= $x244 true)))
 (let (($x167 (= $x137 true)))
 (let (($x89 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x265 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x368 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x12 (and true $x368)))
 (let (($x182 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x140 (and $x182 $x12)))
 (let (($x188 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv8 32))) (bvult ?x11 (bvsub ?x11 (_ bv8 32))))))
 (let (($x241 (and (and (and true $x188) $x140) $x265)))
 (let (($x275 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x227 (and true $x275)))
 (let (($x135 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x24 (and $x135 $x227)))
 (let (($x276 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x352 (and (and (and true $x135) $x276) $x24)))
 (let (($x184 (and (and $x352 $x241) $x89)))
 (let (($x214 (= $x184 true)))
 (let (($x210 (= $x214 true)))
 (let (($x31 (= $x210 true)))
 (let (($x340 (= $x352 true)))
 (let (($x33 (= $x340 true)))
 (let (($x333 (= $x33 true)))
 (let (($x375 (and $x241 $x89)))
 (let (($x373 (= $x375 true)))
 (let (($x299 (= $x373 true)))
 (let (($x138 (= $x299 true)))
 (let ((?x177 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x54 (= (_ bv0 32) ?x177)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x200 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x246 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x96 (and $x246 $x200)))
 (let (($x162 (and $x96 $x54)))
 (let (($x183 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x157 (and $x183 $x162)))
 (let (($x76 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x272 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x360 $x76)))))))
 (let (($x44 (and $x272 $x157)))
 (let (($x189 (= $x44 true)))
 (let (($x344 (= $x189 true)))
 (let (($x278 (= $x344 true)))
 (let (($x228 (and $x278 $x138)))
 (let (($x380 (and $x228 $x333)))
 (let (($x199 (and $x380 $x31)))
 (let (($x240 (and $x199 $x167)))
 (let (($x195 (and $x240 $x297)))
 (let (($x35 (and $x195 $x175)))
 (let (($x67 (and $x35 $x171)))
 (let (($x377 (and $x67 $x174)))
 (let (($x260 (and $x377 $x248)))
 (let (($x57 (and $x370 $x130)))
 (let (($x15 (and $x23 $x57)))
 (let (($x118 (and $x335 $x15)))
 (let (($x334 (and $x118 $x260)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x69 (and $x176 $x334)))
 (let (($x213 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x194 (and $x213 $x69)))
 (let (($x103 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x100 (and $x103 $x194)))
 (let (($x230 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x270 (and $x230 $x100)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x84 (and $x331 $x270)))
 (let (($x160 (and $x27 $x84)))
 (let (($x43 (= ?x74 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x43 $x160)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x170 (and $x32 $x268)))
 (let (($x256 (and $x27 $x170)))
 (let (($x152 (= ?x50 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x143 (and $x152 $x256)))
 (let (($x109 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x29 (and $x109 $x143)))
 (let (($x345 (and $x27 $x29)))
 (let (($x315 (= ?x321 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x25 (and $x315 $x345)))
 (let (($x126 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x92 (and $x126 $x25)))
 (let (($x318 (and $x27 $x92)))
 (let (($x292 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x70 (and $x292 $x318)))
 (let (($x257 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x330 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x257)))))))
 (let (($x181 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x131 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x142 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x131)))))))
 (let (($x85 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x208 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x85)))))))
 (let (($x95 (and $x208 $x142)))
 (let (($x147 (and $x95 $x267)))
 (let (($x45 (and $x147 $x330)))
 (let (($x342 (and $x45 $x70)))
 (let (($x369 (=> $x342 $x107)))
 (not $x369)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x381 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x47)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x117 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x181 (bvadd ?x117 (_ bv3 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem ?x181) (concat ?x77 ?x374))))
 (let ((?x382 (bvmul (_ bv4294967295 32) ?x233)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x39 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x257 (bvadd ?x291 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x257) (concat ?x61 ?x39))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x82 (concat ?x144 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x131 (bvadd ?x206 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x131) (concat ?x312 ?x82))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x154)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x165)))
 (let ((?x383 (bvadd (bvadd (bvadd ?x313 ?x16) ?x273) ?x382)))
 (let (($x71 (= ?x383 ?x381)))
 (let (($x168 (= $x71 true)))
 (let (($x371 (= $x168 true)))
 (let (($x119 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x384 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x384 (_ bv1 32))))
 (let (($x78 (=> $x212 $x119)))
 (let (($x236 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x204 (= $x212 $x236)))
 (let (($x321 (= false false)))
 (let (($x25 (= ?x384 (_ bv0 32))))
 (let (($x342 (=> $x25 $x321)))
 (let (($x318 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x70 (= $x25 $x318)))
 (let (($x139 (and (and (and $x70 $x342) $x204) $x78)))
 (let (($x150 (= $x139 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x160 (= ?x50 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x15 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x118 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x118 (_ bv1 32))))
 (let (($x268 (=> $x194 $x160)))
 (let (($x100 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x194 $x100)))
 (let (($x387 (= ?x118 (_ bv0 32))))
 (let (($x69 (=> $x387 $x321)))
 (let (($x260 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x334 (= $x387 $x260)))
 (let (($x143 (and (and (and $x334 $x69) $x270) $x268)))
 (let (($x29 (= $x143 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x40 (= ?x74 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x356 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x130 (ite $x356 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x130 (_ bv1 32))))
 (let (($x376 (=> $x57 $x40)))
 (let (($x178 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x254 (= $x57 $x178)))
 (let (($x174 (= ?x130 (_ bv0 32))))
 (let (($x280 (=> $x174 $x321)))
 (let (($x164 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x346 (= $x174 $x164)))
 (let (($x309 (and (and (and $x346 $x280) $x254) $x376)))
 (let (($x218 (= $x309 true)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x166 (= ?x123 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x23 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x370 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x370 (_ bv1 32))))
 (let (($x322 (=> $x379 $x166)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x146 (= $x379 $x65)))
 (let (($x171 (= ?x370 (_ bv0 32))))
 (let (($x219 (=> $x171 $x321)))
 (let (($x106 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x141 (= $x171 $x106)))
 (let (($x94 (and (and (and $x141 $x219) $x146) $x322)))
 (let (($x308 (= $x94 true)))
 (let (($x128 (forall ((input.ind-%var2966X (_ BitVec 32)) )(let (($x202 (input.spec-%var-m-0.0.1 input.ind-%var2966X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var2966X) (bvult input.ind-%var2966X (_ bv100 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var2967X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var2967X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x27))))
 (let ((?x153 (input.spec-%var-m-0.1.1 input.ind-%var2967X)))
 (let (($x202 (input.spec-%var-m-0.0.1 input.ind-%var2967X)))
 (=> $x202 (= ?x153 ?x298))))))))
 ))
 (let (($x310 (and $x145 $x128)))
 (let (($x80 (= $x310 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x385 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x385 (concat ?x251 (concat ?x137 ?x98)))))
 (let (($x222 (= ?x7 input.dst.llvm-%m)))
 (let (($x28 (= $x222 true)))
 (let (($x66 (= $x28 true)))
 (let (($x347 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x299 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x302 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x89 (and true $x302)))
 (let (($x140 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x375 (and $x140 $x89)))
 (let (($x359 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv8 32))) (bvult ?x117 (bvsub ?x117 (_ bv8 32))))))
 (let (($x108 (and (and (and true $x359) $x375) $x299)))
 (let (($x333 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x380 (and true $x333)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x231 (and $x158 $x380)))
 (let (($x227 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x210 (and (and (and true $x158) $x227) $x231)))
 (let (($x179 (and (and $x210 $x108) $x347)))
 (let (($x221 (= $x179 true)))
 (let (($x116 (= $x221 true)))
 (let (($x351 (= $x116 true)))
 (let (($x31 (= $x210 true)))
 (let (($x199 (= $x31 true)))
 (let (($x326 (= $x199 true)))
 (let (($x36 (and $x108 $x347)))
 (let (($x186 (= $x36 true)))
 (let (($x324 (= $x186 true)))
 (let (($x300 (= $x324 true)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x8 (= (_ bv0 32) ?x285)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (and $x44 $x344)))
 (let (($x124 (and $x278 $x8)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x129 $x124)))
 (let (($x329 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x329)))))))
 (let (($x188 (and $x157 $x149)))
 (let (($x355 (= $x188 true)))
 (let (($x317 (= $x355 true)))
 (let (($x301 (= $x317 true)))
 (let (($x276 (and $x301 $x300)))
 (let (($x320 (and $x276 $x326)))
 (let (($x49 (and $x320 $x351)))
 (let (($x198 (and $x49 $x66)))
 (let (($x114 (and $x198 $x80)))
 (let (($x21 (and $x114 $x308)))
 (let (($x343 (and $x21 $x218)))
 (let (($x345 (and $x343 $x29)))
 (let (($x348 (and $x345 $x150)))
 (let (($x360 (and $x387 $x212)))
 (let (($x76 (and $x57 $x360)))
 (let (($x242 (and $x379 $x76)))
 (let (($x237 (and $x242 $x348)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x41 (and $x53 $x237)))
 (let (($x335 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x86 (and $x335 $x41)))
 (let (($x62 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x91 (and $x62 $x86)))
 (let (($x180 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x34 (and $x180 $x91)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x14 (and $x277 $x34)))
 (let (($x155 (and $x321 $x14)))
 (let (($x337 (= ?x123 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x337 $x155)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x97 (and $x331 $x279)))
 (let (($x293 (and $x321 $x97)))
 (let (($x43 (= ?x74 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x215 (and $x43 $x293)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x274 (and $x32 $x215)))
 (let (($x367 (and $x321 $x274)))
 (let (($x152 (= ?x50 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x311 (and $x152 $x367)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x264 (and $x229 $x311)))
 (let (($x87 (and $x321 $x264)))
 (let (($x290 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x341 (and $x290 $x87)))
 (let (($x255 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x239 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x327 $x255)))))))
 (let (($x83 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x105 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x11 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x79 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x55)))))))
 (let (($x225 (and $x79 $x11)))
 (let (($x262 (and $x225 $x133)))
 (let (($x64 (and $x262 $x239)))
 (let (($x261 (and $x64 $x341)))
 (let (($x357 (=> $x261 $x371)))
 (not $x357))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x381 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x47)))
 (let ((?x354 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x374 (concat ?x354 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x117 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x181 (bvadd ?x117 (_ bv3 32))))
 (let ((?x233 (concat (select input.dst.llvm-mem ?x181) (concat ?x77 ?x374))))
 (let ((?x382 (bvmul (_ bv4294967295 32) ?x233)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x39 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x257 (bvadd ?x291 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x257) (concat ?x61 ?x39))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x82 (concat ?x144 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x312 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x131 (bvadd ?x206 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x131) (concat ?x312 ?x82))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x154)))
 (let ((?x313 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x165)))
 (let ((?x383 (bvadd (bvadd (bvadd ?x313 ?x16) ?x273) ?x382)))
 (let (($x71 (= ?x383 ?x381)))
 (let (($x168 (= $x71 true)))
 (let (($x371 (= $x168 true)))
 (let (($x119 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x384 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x212 (bvuge ?x384 (_ bv1 32))))
 (let (($x78 (=> $x212 $x119)))
 (let (($x236 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x204 (= $x212 $x236)))
 (let (($x321 (= false false)))
 (let (($x25 (= ?x384 (_ bv0 32))))
 (let (($x342 (=> $x25 $x321)))
 (let (($x318 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x70 (= $x25 $x318)))
 (let (($x139 (and (and (and $x70 $x342) $x204) $x78)))
 (let (($x150 (= $x139 true)))
 (let ((?x50 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x160 (= ?x50 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x15 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x118 (ite $x15 (_ bv1 32) (_ bv0 32))))
 (let (($x194 (bvuge ?x118 (_ bv1 32))))
 (let (($x268 (=> $x194 $x160)))
 (let (($x100 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x270 (= $x194 $x100)))
 (let (($x387 (= ?x118 (_ bv0 32))))
 (let (($x69 (=> $x387 $x321)))
 (let (($x260 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x334 (= $x387 $x260)))
 (let (($x143 (and (and (and $x334 $x69) $x270) $x268)))
 (let (($x29 (= $x143 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x40 (= ?x74 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x356 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x130 (ite $x356 (_ bv1 32) (_ bv0 32))))
 (let (($x57 (bvuge ?x130 (_ bv1 32))))
 (let (($x376 (=> $x57 $x40)))
 (let (($x178 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x254 (= $x57 $x178)))
 (let (($x174 (= ?x130 (_ bv0 32))))
 (let (($x280 (=> $x174 $x321)))
 (let (($x164 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x346 (= $x174 $x164)))
 (let (($x309 (and (and (and $x346 $x280) $x254) $x376)))
 (let (($x218 (= $x309 true)))
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x166 (= ?x123 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x23 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x370 (ite $x23 (_ bv1 32) (_ bv0 32))))
 (let (($x379 (bvuge ?x370 (_ bv1 32))))
 (let (($x322 (=> $x379 $x166)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x146 (= $x379 $x65)))
 (let (($x171 (= ?x370 (_ bv0 32))))
 (let (($x219 (=> $x171 $x321)))
 (let (($x106 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x141 (= $x171 $x106)))
 (let (($x94 (and (and (and $x141 $x219) $x146) $x322)))
 (let (($x308 (= $x94 true)))
 (let (($x128 (forall ((input.ind-%var2966X (_ BitVec 32)) )(let (($x202 (input.spec-%var-m-0.0.1 input.ind-%var2966X)))
 (= $x202 (and (bvule (_ bv0 32) input.ind-%var2966X) (bvult input.ind-%var2966X (_ bv100 32))))))
 ))
 (let (($x145 (forall ((input.ind-%var2967X (_ BitVec 32)) )(let ((?x127 (bvadd (bvmul input.ind-%var2967X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x27))))
 (let ((?x153 (input.spec-%var-m-0.1.1 input.ind-%var2967X)))
 (let (($x202 (input.spec-%var-m-0.0.1 input.ind-%var2967X)))
 (=> $x202 (= ?x153 ?x298))))))))
 ))
 (let (($x310 (and $x145 $x128)))
 (let (($x80 (= $x310 true)))
 (let ((?x98 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x137 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x251 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x385 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x7 (concat ?x385 (concat ?x251 (concat ?x137 ?x98)))))
 (let (($x222 (= ?x7 input.dst.llvm-%m)))
 (let (($x28 (= $x222 true)))
 (let (($x66 (= $x28 true)))
 (let (($x347 (= (bvand ?x117 (_ bv4294967292 32)) ?x117)))
 (let (($x299 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x302 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x89 (and true $x302)))
 (let (($x140 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x375 (and $x140 $x89)))
 (let (($x359 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x117 (bvsub ?x117 (_ bv8 32))) (bvult ?x117 (bvsub ?x117 (_ bv8 32))))))
 (let (($x108 (and (and (and true $x359) $x375) $x299)))
 (let (($x333 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x380 (and true $x333)))
 (let (($x158 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x231 (and $x158 $x380)))
 (let (($x227 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x210 (and (and (and true $x158) $x227) $x231)))
 (let (($x179 (and (and $x210 $x108) $x347)))
 (let (($x221 (= $x179 true)))
 (let (($x116 (= $x221 true)))
 (let (($x351 (= $x116 true)))
 (let (($x31 (= $x210 true)))
 (let (($x199 (= $x31 true)))
 (let (($x326 (= $x199 true)))
 (let (($x36 (and $x108 $x347)))
 (let (($x186 (= $x36 true)))
 (let (($x324 (= $x186 true)))
 (let (($x300 (= $x324 true)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x8 (= (_ bv0 32) ?x285)))
 (let ((?x189 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x344 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x189)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x278 (and $x44 $x344)))
 (let (($x124 (and $x278 $x8)))
 (let (($x129 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x149 (and $x129 $x124)))
 (let (($x329 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x157 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x329)))))))
 (let (($x188 (and $x157 $x149)))
 (let (($x355 (= $x188 true)))
 (let (($x317 (= $x355 true)))
 (let (($x301 (= $x317 true)))
 (let (($x276 (and $x301 $x300)))
 (let (($x320 (and $x276 $x326)))
 (let (($x49 (and $x320 $x351)))
 (let (($x198 (and $x49 $x66)))
 (let (($x114 (and $x198 $x80)))
 (let (($x21 (and $x114 $x308)))
 (let (($x343 (and $x21 $x218)))
 (let (($x345 (and $x343 $x29)))
 (let (($x348 (and $x345 $x150)))
 (let (($x360 (and $x387 $x212)))
 (let (($x76 (and $x57 $x360)))
 (let (($x242 (and $x379 $x76)))
 (let (($x237 (and $x242 $x348)))
 (let (($x53 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x41 (and $x53 $x237)))
 (let (($x335 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x86 (and $x335 $x41)))
 (let (($x62 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x91 (and $x62 $x86)))
 (let (($x180 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x34 (and $x180 $x91)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x14 (and $x277 $x34)))
 (let (($x155 (and $x321 $x14)))
 (let (($x337 (= ?x123 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x279 (and $x337 $x155)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x97 (and $x331 $x279)))
 (let (($x293 (and $x321 $x97)))
 (let (($x43 (= ?x74 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x215 (and $x43 $x293)))
 (let (($x32 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x274 (and $x32 $x215)))
 (let (($x367 (and $x321 $x274)))
 (let (($x152 (= ?x50 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x311 (and $x152 $x367)))
 (let (($x229 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x264 (and $x229 $x311)))
 (let (($x87 (and $x321 $x264)))
 (let (($x290 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x341 (and $x290 $x87)))
 (let (($x255 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x239 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x327 $x255)))))))
 (let (($x83 (bvugt ?x117 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x117 (bvsub (bvadd ?x117 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x105 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x11 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x105)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x85 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x304 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x85)))
 (let (($x79 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x304 $x55)))))))
 (let (($x225 (and $x79 $x11)))
 (let (($x262 (and $x225 $x133)))
 (let (($x64 (and $x262 $x239)))
 (let (($x261 (and $x64 $x341)))
 (let (($x357 (=> $x261 $x371)))
 (not $x357))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x35 (bvadd ?x213 ?x123)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x83 (bvadd ?x19 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x83) (concat ?x120 ?x101))))
 (let ((?x253 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x17 (concat ?x42 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x255 (bvadd ?x88 (_ bv3 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem ?x255) (concat ?x362 ?x17))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x383 (concat ?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x105 (bvadd ?x287 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x105) (concat ?x381 ?x383))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x46)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x354)))
 (let ((?x13 (bvadd (bvadd (bvadd ?x374 ?x371) ?x386) ?x253)))
 (let (($x5 (= ?x13 ?x35)))
 (let (($x201 (= $x5 true)))
 (let (($x72 (= $x201 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x271 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x162 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x162 (_ bv1 32))))
 (let (($x366 (=> $x261 $x271)))
 (let (($x148 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x115 (= $x261 $x148)))
 (let (($x50 (= false false)))
 (let (($x183 (= ?x162 (_ bv0 32))))
 (let (($x341 (=> $x183 $x50)))
 (let (($x264 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x87 (= $x183 $x264)))
 (let (($x165 (and (and (and $x87 $x341) $x115) $x366)))
 (let (($x313 (= $x165 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x155 (= ?x74 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x76 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x242 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x242 (_ bv1 32))))
 (let (($x279 (=> $x86 $x155)))
 (let (($x91 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x34 (= $x86 $x91)))
 (let (($x272 (= ?x242 (_ bv0 32))))
 (let (($x41 (=> $x272 $x50)))
 (let (($x348 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x237 (= $x272 $x348)))
 (let (($x215 (and (and (and $x237 $x41) $x34) $x279)))
 (let (($x274 (= $x215 true)))
 (let (($x236 (= ?x123 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x384 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x212 (ite $x384 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x212 (_ bv1 32))))
 (let (($x204 (=> $x360 $x236)))
 (let (($x70 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x342 (= $x360 $x70)))
 (let (($x29 (= ?x212 (_ bv0 32))))
 (let (($x318 (=> $x29 $x50)))
 (let (($x25 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x92 (= $x29 $x25)))
 (let (($x119 (and (and (and $x92 $x318) $x342) $x204)))
 (let (($x78 (= $x119 true)))
 (let (($x100 (= ?x213 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x387 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x387 (_ bv1 32))))
 (let (($x270 (=> $x307 $x100)))
 (let (($x69 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x307 $x69)))
 (let (($x218 (= ?x387 (_ bv0 32))))
 (let (($x334 (=> $x218 $x50)))
 (let (($x248 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x260 (= $x218 $x248)))
 (let (($x160 (and (and (and $x260 $x334) $x170) $x270)))
 (let (($x268 (= $x160 true)))
 (let (($x328 (forall ((input.ind-%var2998X (_ BitVec 32)) )(let (($x15 (input.spec-%var-m-0.0.1 input.ind-%var2998X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2998X) (bvult input.ind-%var2998X (_ bv100 32))))))
 ))
 (let (($x94 (forall ((input.ind-%var2999X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var2999X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x321))))
 (let ((?x18 (input.spec-%var-m-0.1.1 input.ind-%var2999X)))
 (let (($x15 (input.spec-%var-m-0.0.1 input.ind-%var2999X)))
 (=> $x15 (= ?x18 ?x209))))))))
 ))
 (let (($x40 (and $x94 $x328)))
 (let (($x376 (= $x40 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x195 (concat ?x292 (concat ?x28 ?x7)))))
 (let (($x207 (= ?x127 input.dst.llvm-%m)))
 (let (($x245 (= $x207 true)))
 (let (($x111 (= $x245 true)))
 (let (($x184 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x324 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x347 (and true $x135)))
 (let (($x375 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x36 (and $x375 $x347)))
 (let (($x241 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv8 32))) (bvult ?x19 (bvsub ?x19 (_ bv8 32))))))
 (let (($x234 (and (and (and true $x241) $x36) $x324)))
 (let (($x326 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x320 (and true $x326)))
 (let (($x352 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x349 (and $x352 $x320)))
 (let (($x380 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x116 (and (and (and true $x352) $x380) $x349)))
 (let (($x240 (and (and $x116 $x234) $x184)))
 (let (($x251 (= $x240 true)))
 (let (($x244 (= $x251 true)))
 (let (($x137 (= $x244 true)))
 (let (($x351 (= $x116 true)))
 (let (($x49 (= $x351 true)))
 (let (($x258 (= $x49 true)))
 (let (($x294 (and $x234 $x184)))
 (let (($x163 (= $x294 true)))
 (let (($x169 (= $x163 true)))
 (let (($x275 (= $x169 true)))
 (let ((?x363 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x363)))
 (let ((?x355 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x355)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x188 $x317)))
 (let (($x121 (and $x301 $x182)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x54 $x121)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x189)))))))
 (let (($x359 (and $x149 $x159)))
 (let (($x138 (= $x359 true)))
 (let (($x368 (= $x138 true)))
 (let (($x12 (= $x368 true)))
 (let (($x227 (and $x12 $x275)))
 (let (($x10 (and $x227 $x258)))
 (let (($x98 (and $x10 $x137)))
 (let (($x151 (and $x98 $x111)))
 (let (($x309 (and $x151 $x376)))
 (let (($x143 (and $x309 $x268)))
 (let (($x139 (and $x143 $x78)))
 (let (($x367 (and $x139 $x274)))
 (let (($x216 (and $x367 $x313)))
 (let (($x246 (and $x272 $x183)))
 (let (($x329 (and $x360 $x246)))
 (let (($x200 (and $x307 $x329)))
 (let (($x226 (and $x200 $x216)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x312 (and $x130 $x226)))
 (let (($x379 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x350 (and $x379 $x312)))
 (let (($x23 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x144 (and $x23 $x350)))
 (let (($x353 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x9 (and $x353 $x144)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x82 (and $x303 $x9)))
 (let (($x282 (and $x50 $x82)))
 (let (($x176 (= ?x213 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x16 (and $x176 $x282)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x266 (and $x277 $x16)))
 (let (($x161 (and $x50 $x266)))
 (let (($x337 (= ?x123 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x361 (and $x337 $x161)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x61 (and $x331 $x361)))
 (let (($x369 (and $x50 $x61)))
 (let (($x43 (= ?x74 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x296 (and $x43 $x369)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x107 (and $x48 $x296)))
 (let (($x39 (and $x50 $x107)))
 (let (($x109 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x99 (and $x109 $x39)))
 (let (($x223 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x126 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x22 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x172 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x117 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x172)))))))
 (let (($x63 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x93 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x63)))))))
 (let (($x295 (and $x93 $x117)))
 (let (($x319 (and $x295 $x125)))
 (let (($x289 (and $x319 $x126)))
 (let (($x273 (and $x289 $x99)))
 (let (($x136 (=> $x273 $x72)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x35 (bvadd ?x213 ?x123)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x101 (concat ?x37 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x120 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x83 (bvadd ?x19 (_ bv3 32))))
 (let ((?x263 (concat (select input.dst.llvm-mem ?x83) (concat ?x120 ?x101))))
 (let ((?x253 (bvmul (_ bv4294967295 32) ?x263)))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x17 (concat ?x42 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x362 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x255 (bvadd ?x88 (_ bv3 32))))
 (let ((?x386 (concat (select input.dst.llvm-mem ?x255) (concat ?x362 ?x17))))
 (let ((?x382 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x383 (concat ?x382 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x105 (bvadd ?x287 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x105) (concat ?x381 ?x383))))
 (let ((?x46 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x354 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x46)))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x354)))
 (let ((?x13 (bvadd (bvadd (bvadd ?x374 ?x371) ?x386) ?x253)))
 (let (($x5 (= ?x13 ?x35)))
 (let (($x201 (= $x5 true)))
 (let (($x72 (= $x201 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x271 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x162 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x162 (_ bv1 32))))
 (let (($x366 (=> $x261 $x271)))
 (let (($x148 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x115 (= $x261 $x148)))
 (let (($x50 (= false false)))
 (let (($x183 (= ?x162 (_ bv0 32))))
 (let (($x341 (=> $x183 $x50)))
 (let (($x264 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x87 (= $x183 $x264)))
 (let (($x165 (and (and (and $x87 $x341) $x115) $x366)))
 (let (($x313 (= $x165 true)))
 (let ((?x74 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x155 (= ?x74 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x76 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x242 (ite $x76 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x242 (_ bv1 32))))
 (let (($x279 (=> $x86 $x155)))
 (let (($x91 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x34 (= $x86 $x91)))
 (let (($x272 (= ?x242 (_ bv0 32))))
 (let (($x41 (=> $x272 $x50)))
 (let (($x348 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x237 (= $x272 $x348)))
 (let (($x215 (and (and (and $x237 $x41) $x34) $x279)))
 (let (($x274 (= $x215 true)))
 (let (($x236 (= ?x123 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x384 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x212 (ite $x384 (_ bv1 32) (_ bv0 32))))
 (let (($x360 (bvuge ?x212 (_ bv1 32))))
 (let (($x204 (=> $x360 $x236)))
 (let (($x70 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x342 (= $x360 $x70)))
 (let (($x29 (= ?x212 (_ bv0 32))))
 (let (($x318 (=> $x29 $x50)))
 (let (($x25 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x92 (= $x29 $x25)))
 (let (($x119 (and (and (and $x92 $x318) $x342) $x204)))
 (let (($x78 (= $x119 true)))
 (let (($x100 (= ?x213 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x387 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x387 (_ bv1 32))))
 (let (($x270 (=> $x307 $x100)))
 (let (($x69 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x170 (= $x307 $x69)))
 (let (($x218 (= ?x387 (_ bv0 32))))
 (let (($x334 (=> $x218 $x50)))
 (let (($x248 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x260 (= $x218 $x248)))
 (let (($x160 (and (and (and $x260 $x334) $x170) $x270)))
 (let (($x268 (= $x160 true)))
 (let (($x328 (forall ((input.ind-%var2998X (_ BitVec 32)) )(let (($x15 (input.spec-%var-m-0.0.1 input.ind-%var2998X)))
 (= $x15 (and (bvule (_ bv0 32) input.ind-%var2998X) (bvult input.ind-%var2998X (_ bv100 32))))))
 ))
 (let (($x94 (forall ((input.ind-%var2999X (_ BitVec 32)) )(let ((?x171 (bvadd (bvmul input.ind-%var2999X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv1 32))) (select input.dst.llvm-mem ?x171))))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x171 (_ bv2 32))) ?x321))))
 (let ((?x18 (input.spec-%var-m-0.1.1 input.ind-%var2999X)))
 (let (($x15 (input.spec-%var-m-0.0.1 input.ind-%var2999X)))
 (=> $x15 (= ?x18 ?x209))))))))
 ))
 (let (($x40 (and $x94 $x328)))
 (let (($x376 (= $x40 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x195 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x127 (concat ?x195 (concat ?x292 (concat ?x28 ?x7)))))
 (let (($x207 (= ?x127 input.dst.llvm-%m)))
 (let (($x245 (= $x207 true)))
 (let (($x111 (= $x245 true)))
 (let (($x184 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x324 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x135 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x347 (and true $x135)))
 (let (($x375 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x36 (and $x375 $x347)))
 (let (($x241 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv8 32))) (bvult ?x19 (bvsub ?x19 (_ bv8 32))))))
 (let (($x234 (and (and (and true $x241) $x36) $x324)))
 (let (($x326 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x320 (and true $x326)))
 (let (($x352 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x349 (and $x352 $x320)))
 (let (($x380 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x116 (and (and (and true $x352) $x380) $x349)))
 (let (($x240 (and (and $x116 $x234) $x184)))
 (let (($x251 (= $x240 true)))
 (let (($x244 (= $x251 true)))
 (let (($x137 (= $x244 true)))
 (let (($x351 (= $x116 true)))
 (let (($x49 (= $x351 true)))
 (let (($x258 (= $x49 true)))
 (let (($x294 (and $x234 $x184)))
 (let (($x163 (= $x294 true)))
 (let (($x169 (= $x163 true)))
 (let (($x275 (= $x169 true)))
 (let ((?x363 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x363)))
 (let ((?x355 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x317 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x355)))
 (let (($x188 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x301 (and $x188 $x317)))
 (let (($x121 (and $x301 $x182)))
 (let (($x54 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (and $x54 $x121)))
 (let (($x189 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x149 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x189)))))))
 (let (($x359 (and $x149 $x159)))
 (let (($x138 (= $x359 true)))
 (let (($x368 (= $x138 true)))
 (let (($x12 (= $x368 true)))
 (let (($x227 (and $x12 $x275)))
 (let (($x10 (and $x227 $x258)))
 (let (($x98 (and $x10 $x137)))
 (let (($x151 (and $x98 $x111)))
 (let (($x309 (and $x151 $x376)))
 (let (($x143 (and $x309 $x268)))
 (let (($x139 (and $x143 $x78)))
 (let (($x367 (and $x139 $x274)))
 (let (($x216 (and $x367 $x313)))
 (let (($x246 (and $x272 $x183)))
 (let (($x329 (and $x360 $x246)))
 (let (($x200 (and $x307 $x329)))
 (let (($x226 (and $x200 $x216)))
 (let (($x130 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x312 (and $x130 $x226)))
 (let (($x379 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x350 (and $x379 $x312)))
 (let (($x23 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x144 (and $x23 $x350)))
 (let (($x353 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x9 (and $x353 $x144)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x82 (and $x303 $x9)))
 (let (($x282 (and $x50 $x82)))
 (let (($x176 (= ?x213 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x16 (and $x176 $x282)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x266 (and $x277 $x16)))
 (let (($x161 (and $x50 $x266)))
 (let (($x337 (= ?x123 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x361 (and $x337 $x161)))
 (let (($x331 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x61 (and $x331 $x361)))
 (let (($x369 (and $x50 $x61)))
 (let (($x43 (= ?x74 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x296 (and $x43 $x369)))
 (let (($x48 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x107 (and $x48 $x296)))
 (let (($x39 (and $x50 $x107)))
 (let (($x109 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x99 (and $x109 $x39)))
 (let (($x223 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x126 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x22 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x172 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x105)))
 (let (($x117 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x172)))))))
 (let (($x63 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x250 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x93 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x250 $x63)))))))
 (let (($x295 (and $x93 $x117)))
 (let (($x319 (and $x295 $x125)))
 (let (($x289 (and $x319 $x126)))
 (let (($x273 (and $x289 $x99)))
 (let (($x136 (=> $x273 $x72)))
 (not $x136))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x123)))
 (let ((?x310 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x346)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x22 (bvadd ?x181 (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x22) (concat ?x196 ?x238))))
 (let ((?x145 (bvmul (_ bv4294967295 32) ?x298)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x332 (concat ?x96 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x223 (bvadd ?x291 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x223) (concat ?x315 ?x332))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x13 (concat ?x253 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x172 (bvadd ?x134 (_ bv3 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem ?x172) (concat ?x5 ?x13))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x338)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x37)))
 (let ((?x21 (bvadd (bvadd (bvadd ?x101 ?x136) ?x174) ?x145)))
 (let (($x110 (= ?x21 ?x310)))
 (let (($x80 (= $x110 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x193 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x90 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x124 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x124 (_ bv1 32))))
 (let (($x52 (=> $x129 $x193)))
 (let (($x51 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x129 $x51)))
 (let (($x74 (= false false)))
 (let (($x296 (= ?x124 (_ bv0 32))))
 (let (($x273 (=> $x296 $x74)))
 (let (($x39 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x99 (= $x296 $x39)))
 (let (($x354 (and (and (and $x99 $x273) $x77) $x52)))
 (let (($x374 (= $x354 true)))
 (let (($x282 (= ?x123 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x200 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x200 (_ bv1 32))))
 (let (($x16 (=> $x157 $x282)))
 (let (($x144 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x9 (= $x157 $x144)))
 (let (($x313 (= ?x200 (_ bv0 32))))
 (let (($x350 (=> $x313 $x74)))
 (let (($x226 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x312 (= $x313 $x226)))
 (let (($x361 (and (and (and $x312 $x350) $x9) $x16)))
 (let (($x61 (= $x361 true)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x148 (= ?x213 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x183 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x115 (=> $x87 $x148)))
 (let (($x341 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x323 (= $x87 $x341)))
 (let (($x246 (= ?x183 (_ bv0 32))))
 (let (($x264 (=> $x246 $x74)))
 (let (($x367 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x311 (= $x246 $x367)))
 (let (($x271 (and (and (and $x311 $x264) $x323) $x115)))
 (let (($x366 (= $x271 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x91 (= ?x335 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x360 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x272 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x325 (bvuge ?x272 (_ bv1 32))))
 (let (($x34 (=> $x325 $x91)))
 (let (($x41 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x97 (= $x325 $x41)))
 (let (($x78 (= ?x272 (_ bv0 32))))
 (let (($x237 (=> $x78 $x74)))
 (let (($x150 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x348 (= $x78 $x150)))
 (let (($x155 (and (and (and $x348 $x237) $x97) $x34)))
 (let (($x279 (= $x155 true)))
 (let (($x316 (forall ((input.ind-%var3030X (_ BitVec 32)) )(let (($x76 (input.spec-%var-m-0.0.1 input.ind-%var3030X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var3030X) (bvult input.ind-%var3030X (_ bv100 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var3031X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var3031X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x50))))
 (let ((?x224 (input.spec-%var-m-0.1.1 input.ind-%var3031X)))
 (let (($x76 (input.spec-%var-m-0.0.1 input.ind-%var3031X)))
 (=> $x76 (= ?x224 ?x194))))))))
 ))
 (let (($x236 (and $x160 $x316)))
 (let (($x204 (= $x236 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x114 (concat ?x290 (concat ?x245 ?x127)))))
 (let (($x146 (= ?x171 input.dst.llvm-%m)))
 (let (($x205 (= $x146 true)))
 (let (($x219 (= $x205 true)))
 (let (($x179 (= (bvand ?x181 (_ bv4294967292 32)) ?x181)))
 (let (($x169 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x184 (and true $x158)))
 (let (($x36 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x294 (and $x36 $x184)))
 (let (($x108 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x181 (bvsub ?x181 (_ bv8 32))) (bvult ?x181 (bvsub ?x181 (_ bv8 32))))))
 (let (($x214 (and (and (and true $x108) $x294) $x169)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x10 (and true $x258)))
 (let (($x210 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x385 (and $x210 $x10)))
 (let (($x320 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x244 (and (and (and true $x210) $x320) $x385)))
 (let (($x198 (and (and $x244 $x214) $x179)))
 (let (($x292 (= $x198 true)))
 (let (($x222 (= $x292 true)))
 (let (($x28 (= $x222 true)))
 (let (($x137 (= $x244 true)))
 (let (($x98 (= $x137 true)))
 (let (($x167 (= $x98 true)))
 (let (($x340 (and $x214 $x179)))
 (let (($x24 (= $x340 true)))
 (let (($x33 (= $x24 true)))
 (let (($x333 (= $x33 true)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x140 (= (_ bv0 32) ?x203)))
 (let ((?x138 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x359 $x368)))
 (let (($x378 (and $x12 $x140)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x8 $x378)))
 (let (($x355 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x355)))))))
 (let (($x241 (and $x159 $x265)))
 (let (($x300 (= $x241 true)))
 (let (($x302 (= $x300 true)))
 (let (($x89 (= $x302 true)))
 (let (($x380 (and $x89 $x333)))
 (let (($x153 (and $x380 $x167)))
 (let (($x7 (and $x153 $x28)))
 (let (($x122 (and $x7 $x219)))
 (let (($x119 (and $x122 $x204)))
 (let (($x215 (and $x119 $x279)))
 (let (($x165 (and $x215 $x366)))
 (let (($x369 (and $x165 $x61)))
 (let (($x168 (and $x369 $x374)))
 (let (($x44 (and $x157 $x129)))
 (let (($x189 (and $x246 $x44)))
 (let (($x344 (and $x325 $x189)))
 (let (($x281 (and $x344 $x168)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x381 (and $x212 $x281)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x233 (and $x307 $x381)))
 (let (($x57 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x382 (and $x57 $x233)))
 (let (($x356 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x358 (and $x356 $x382)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x383 (and $x370 $x358)))
 (let (($x71 (and $x74 $x383)))
 (let (($x53 (= ?x335 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x371 (and $x53 $x71)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x112 (and $x303 $x371)))
 (let (($x372 (and $x74 $x112)))
 (let (($x176 (= ?x213 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x30 (and $x176 $x372)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x362 (and $x277 $x30)))
 (let (($x306 (and $x74 $x362)))
 (let (($x337 (= ?x123 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x42 (and $x337 $x306)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x357 (and $x243 $x42)))
 (let (($x17 (and $x74 $x357)))
 (let (($x32 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x32 $x17)))
 (let (($x45 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x229 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x330 $x45)))))))
 (let (($x147 (bvugt ?x181 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x257 (=> (bvule ?x181 (bvsub (bvadd ?x181 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x147)))))))
 (let (($x95 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x19 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x95)))))))
 (let (($x104 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x131 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x104)))))))
 (let (($x173 (and $x131 $x19)))
 (let (($x38 (and $x173 $x257)))
 (let (($x327 (and $x38 $x229)))
 (let (($x386 (and $x327 $x58)))
 (let (($x102 (=> $x386 $x175)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x123 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x123)))
 (let ((?x310 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x346)))
 (let ((?x220 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x238 (concat ?x220 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x196 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x181 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x22 (bvadd ?x181 (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x22) (concat ?x196 ?x238))))
 (let ((?x145 (bvmul (_ bv4294967295 32) ?x298)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x332 (concat ?x96 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x315 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x223 (bvadd ?x291 (_ bv3 32))))
 (let ((?x174 (concat (select input.dst.llvm-mem ?x223) (concat ?x315 ?x332))))
 (let ((?x253 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x13 (concat ?x253 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x172 (bvadd ?x134 (_ bv3 32))))
 (let ((?x136 (concat (select input.dst.llvm-mem ?x172) (concat ?x5 ?x13))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x37 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x338)))
 (let ((?x101 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x37)))
 (let ((?x21 (bvadd (bvadd (bvadd ?x101 ?x136) ?x174) ?x145)))
 (let (($x110 (= ?x21 ?x310)))
 (let (($x80 (= $x110 true)))
 (let (($x175 (= $x80 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x193 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x90 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x124 (ite $x90 (_ bv1 32) (_ bv0 32))))
 (let (($x129 (bvuge ?x124 (_ bv1 32))))
 (let (($x52 (=> $x129 $x193)))
 (let (($x51 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x77 (= $x129 $x51)))
 (let (($x74 (= false false)))
 (let (($x296 (= ?x124 (_ bv0 32))))
 (let (($x273 (=> $x296 $x74)))
 (let (($x39 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x99 (= $x296 $x39)))
 (let (($x354 (and (and (and $x99 $x273) $x77) $x52)))
 (let (($x374 (= $x354 true)))
 (let (($x282 (= ?x123 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x200 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x157 (bvuge ?x200 (_ bv1 32))))
 (let (($x16 (=> $x157 $x282)))
 (let (($x144 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x9 (= $x157 $x144)))
 (let (($x313 (= ?x200 (_ bv0 32))))
 (let (($x350 (=> $x313 $x74)))
 (let (($x226 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x312 (= $x313 $x226)))
 (let (($x361 (and (and (and $x312 $x350) $x9) $x16)))
 (let (($x61 (= $x361 true)))
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x148 (= ?x213 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x162 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x183 (ite $x162 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x183 (_ bv1 32))))
 (let (($x115 (=> $x87 $x148)))
 (let (($x341 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x323 (= $x87 $x341)))
 (let (($x246 (= ?x183 (_ bv0 32))))
 (let (($x264 (=> $x246 $x74)))
 (let (($x367 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x311 (= $x246 $x367)))
 (let (($x271 (and (and (and $x311 $x264) $x323) $x115)))
 (let (($x366 (= $x271 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x91 (= ?x335 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x360 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x272 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x325 (bvuge ?x272 (_ bv1 32))))
 (let (($x34 (=> $x325 $x91)))
 (let (($x41 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x97 (= $x325 $x41)))
 (let (($x78 (= ?x272 (_ bv0 32))))
 (let (($x237 (=> $x78 $x74)))
 (let (($x150 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x348 (= $x78 $x150)))
 (let (($x155 (and (and (and $x348 $x237) $x97) $x34)))
 (let (($x279 (= $x155 true)))
 (let (($x316 (forall ((input.ind-%var3030X (_ BitVec 32)) )(let (($x76 (input.spec-%var-m-0.0.1 input.ind-%var3030X)))
 (= $x76 (and (bvule (_ bv0 32) input.ind-%var3030X) (bvult input.ind-%var3030X (_ bv100 32))))))
 ))
 (let (($x160 (forall ((input.ind-%var3031X (_ BitVec 32)) )(let ((?x218 (bvadd (bvmul input.ind-%var3031X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv1 32))) (select input.dst.llvm-mem ?x218))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x218 (_ bv2 32))) ?x50))))
 (let ((?x224 (input.spec-%var-m-0.1.1 input.ind-%var3031X)))
 (let (($x76 (input.spec-%var-m-0.0.1 input.ind-%var3031X)))
 (=> $x76 (= ?x224 ?x194))))))))
 ))
 (let (($x236 (and $x160 $x316)))
 (let (($x204 (= $x236 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x245 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x114 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x171 (concat ?x114 (concat ?x290 (concat ?x245 ?x127)))))
 (let (($x146 (= ?x171 input.dst.llvm-%m)))
 (let (($x205 (= $x146 true)))
 (let (($x219 (= $x205 true)))
 (let (($x179 (= (bvand ?x181 (_ bv4294967292 32)) ?x181)))
 (let (($x169 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x158 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x184 (and true $x158)))
 (let (($x36 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x294 (and $x36 $x184)))
 (let (($x108 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x181 (bvsub ?x181 (_ bv8 32))) (bvult ?x181 (bvsub ?x181 (_ bv8 32))))))
 (let (($x214 (and (and (and true $x108) $x294) $x169)))
 (let (($x258 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x10 (and true $x258)))
 (let (($x210 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x385 (and $x210 $x10)))
 (let (($x320 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x244 (and (and (and true $x210) $x320) $x385)))
 (let (($x198 (and (and $x244 $x214) $x179)))
 (let (($x292 (= $x198 true)))
 (let (($x222 (= $x292 true)))
 (let (($x28 (= $x222 true)))
 (let (($x137 (= $x244 true)))
 (let (($x98 (= $x137 true)))
 (let (($x167 (= $x98 true)))
 (let (($x340 (and $x214 $x179)))
 (let (($x24 (= $x340 true)))
 (let (($x33 (= $x24 true)))
 (let (($x333 (= $x33 true)))
 (let ((?x203 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x140 (= (_ bv0 32) ?x203)))
 (let ((?x138 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x368 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x138)))
 (let (($x359 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x12 (and $x359 $x368)))
 (let (($x378 (and $x12 $x140)))
 (let (($x8 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x265 (and $x8 $x378)))
 (let (($x355 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x159 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x188 $x355)))))))
 (let (($x241 (and $x159 $x265)))
 (let (($x300 (= $x241 true)))
 (let (($x302 (= $x300 true)))
 (let (($x89 (= $x302 true)))
 (let (($x380 (and $x89 $x333)))
 (let (($x153 (and $x380 $x167)))
 (let (($x7 (and $x153 $x28)))
 (let (($x122 (and $x7 $x219)))
 (let (($x119 (and $x122 $x204)))
 (let (($x215 (and $x119 $x279)))
 (let (($x165 (and $x215 $x366)))
 (let (($x369 (and $x165 $x61)))
 (let (($x168 (and $x369 $x374)))
 (let (($x44 (and $x157 $x129)))
 (let (($x189 (and $x246 $x44)))
 (let (($x344 (and $x325 $x189)))
 (let (($x281 (and $x344 $x168)))
 (let (($x212 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x381 (and $x212 $x281)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x233 (and $x307 $x381)))
 (let (($x57 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x382 (and $x57 $x233)))
 (let (($x356 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x358 (and $x356 $x382)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x383 (and $x370 $x358)))
 (let (($x71 (and $x74 $x383)))
 (let (($x53 (= ?x335 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x371 (and $x53 $x71)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x112 (and $x303 $x371)))
 (let (($x372 (and $x74 $x112)))
 (let (($x176 (= ?x213 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x30 (and $x176 $x372)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x362 (and $x277 $x30)))
 (let (($x306 (and $x74 $x362)))
 (let (($x337 (= ?x123 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x42 (and $x337 $x306)))
 (let (($x243 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x357 (and $x243 $x42)))
 (let (($x17 (and $x74 $x357)))
 (let (($x32 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x32 $x17)))
 (let (($x45 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x229 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x330 $x45)))))))
 (let (($x147 (bvugt ?x181 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x267 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x257 (=> (bvule ?x181 (bvsub (bvadd ?x181 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x267 $x147)))))))
 (let (($x95 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x172)))
 (let (($x19 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x95)))))))
 (let (($x104 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x63 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x63)))
 (let (($x131 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x208 $x104)))))))
 (let (($x173 (and $x131 $x19)))
 (let (($x38 (and $x173 $x257)))
 (let (($x327 (and $x38 $x229)))
 (let (($x386 (and $x327 $x58)))
 (let (($x102 (=> $x386 $x175)))
 (not $x102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x328 (bvmul (_ bv4294967295 32) ?x213)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x143 (bvadd ?x379 ?x328)))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x65 (concat ?x321 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x83 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x147 (bvadd ?x83 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x147) (concat ?x191 ?x65))))
 (let ((?x322 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x60 (concat ?x75 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x45 (bvadd ?x88 (_ bv3 32))))
 (let ((?x106 (concat (select input.dst.llvm-mem ?x45) (concat ?x202 ?x60))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x21 (concat ?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x95 (bvadd ?x206 (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x95) (concat ?x346 ?x21))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x185)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x220)))
 (let ((?x252 (bvadd (bvadd (bvadd ?x238 ?x80) ?x106) ?x322)))
 (let (($x92 (= ?x252 ?x143)))
 (let (($x318 (= $x92 true)))
 (let (($x40 (= $x318 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x132 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x177 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x121 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x121 (_ bv1 32))))
 (let (($x365 (=> $x386 $x132)))
 (let (($x156 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x386 $x156)))
 (let (($x123 (= false false)))
 (let (($x54 (= ?x121 (_ bv0 32))))
 (let (($x58 (=> $x54 $x123)))
 (let (($x357 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x17 (= $x54 $x357)))
 (let (($x37 (and (and (and $x17 $x58) $x120) $x365)))
 (let (($x101 (= $x37 true)))
 (let (($x71 (= ?x213 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x189 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x344 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x344 (_ bv1 32))))
 (let (($x371 (=> $x149 $x71)))
 (let (($x382 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x358 (= $x149 $x382)))
 (let (($x374 (= ?x344 (_ bv0 32))))
 (let (($x233 (=> $x374 $x123)))
 (let (($x281 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x381 (= $x374 $x281)))
 (let (($x30 (and (and (and $x381 $x233) $x358) $x371)))
 (let (($x362 (= $x30 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x51 (= ?x335 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x129 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x129 (_ bv1 32))))
 (let (($x77 (=> $x39 $x51)))
 (let (($x99 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x273 (= $x39 $x99)))
 (let (($x44 (= ?x129 (_ bv0 32))))
 (let (($x107 (=> $x44 $x123)))
 (let (($x369 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x296 (= $x44 $x369)))
 (let (($x193 (and (and (and $x296 $x107) $x273) $x77)))
 (let (($x52 (= $x193 true)))
 (let (($x144 (= ?x379 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x246 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x157 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x157 (_ bv1 32))))
 (let (($x9 (=> $x90 $x144)))
 (let (($x312 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x350 (= $x90 $x312)))
 (let (($x366 (= ?x157 (_ bv0 32))))
 (let (($x226 (=> $x366 $x123)))
 (let (($x313 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x216 (= $x366 $x313)))
 (let (($x282 (and (and (and $x216 $x226) $x350) $x9)))
 (let (($x16 (= $x282 true)))
 (let (($x261 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3062X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3062X) (bvult input.ind-%var3062X (_ bv100 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var3063X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var3063X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x74))))
 (let ((?x288 (input.spec-%var-m-0.1.1 input.ind-%var3063X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3063X)))
 (=> $x329 (= ?x288 ?x86))))))))
 ))
 (let (($x148 (and $x155 $x261)))
 (let (($x115 (= $x148 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x309 (concat ?x109 (concat ?x205 ?x171)))))
 (let (($x170 (= ?x218 input.dst.llvm-%m)))
 (let (($x84 (= $x170 true)))
 (let (($x334 (= $x84 true)))
 (let (($x240 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x33 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x352 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x179 (and true $x352)))
 (let (($x294 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x340 (and $x294 $x179)))
 (let (($x234 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv8 32))) (bvult ?x83 (bvsub ?x83 (_ bv8 32))))))
 (let (($x221 (and (and (and true $x234) $x340) $x33)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x153 (and true $x167)))
 (let (($x116 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x195 (and $x116 $x153)))
 (let (($x10 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x222 (and (and (and true $x116) $x10) $x195)))
 (let (($x151 (and (and $x222 $x221) $x240)))
 (let (($x290 (= $x151 true)))
 (let (($x207 (= $x290 true)))
 (let (($x245 (= $x207 true)))
 (let (($x28 (= $x222 true)))
 (let (($x7 (= $x28 true)))
 (let (($x66 (= $x7 true)))
 (let (($x31 (and $x221 $x240)))
 (let (($x231 (= $x31 true)))
 (let (($x199 (= $x231 true)))
 (let (($x326 (= $x199 true)))
 (let ((?x373 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x375 (= (_ bv0 32) ?x373)))
 (let ((?x300 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x300)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x241 $x302)))
 (let (($x228 (and $x89 $x375)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x182 $x228)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x359 $x138)))))))
 (let (($x108 (and $x265 $x299)))
 (let (($x275 (= $x108 true)))
 (let (($x135 (= $x275 true)))
 (let (($x347 (= $x135 true)))
 (let (($x320 (and $x347 $x326)))
 (let (($x18 (and $x320 $x66)))
 (let (($x127 (and $x18 $x245)))
 (let (($x256 (and $x127 $x334)))
 (let (($x271 (and $x256 $x115)))
 (let (($x361 (and $x271 $x16)))
 (let (($x354 (and $x361 $x52)))
 (let (($x306 (and $x354 $x362)))
 (let (($x72 (and $x306 $x101)))
 (let (($x188 (and $x149 $x54)))
 (let (($x355 (and $x44 $x188)))
 (let (($x317 (and $x90 $x355)))
 (let (($x35 (and $x317 $x72)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x5 (and $x183 $x35)))
 (let (($x325 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x263 (and $x325 $x5)))
 (let (($x360 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x253 (and $x360 $x263)))
 (let (($x384 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x314 (and $x384 $x253)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x13 (and $x387 $x314)))
 (let (($x201 (and $x123 $x13)))
 (let (($x130 (= ?x379 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x136 (and $x130 $x201)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x197 (and $x370 $x136)))
 (let (($x211 (and $x123 $x197)))
 (let (($x53 (= ?x335 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x118 (and $x53 $x211)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x315 (and $x303 $x118)))
 (let (($x26 (and $x123 $x315)))
 (let (($x176 (= ?x213 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x96 (and $x176 $x26)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x297 (and $x103 $x96)))
 (let (($x332 (and $x123 $x297)))
 (let (($x331 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x113 (and $x331 $x332)))
 (let (($x64 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x48 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x239 $x64)))))))
 (let (($x262 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x255 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x262)))))))
 (let (($x225 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x181 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x235 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x105 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x235)))))))
 (let (($x68 (and $x105 $x181)))
 (let (($x6 (and $x68 $x255)))
 (let (($x249 (and $x6 $x48)))
 (let (($x174 (and $x249 $x113)))
 (let (($x141 (=> $x174 $x40)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x213 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x328 (bvmul (_ bv4294967295 32) ?x213)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x143 (bvadd ?x379 ?x328)))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x65 (concat ?x321 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x191 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x83 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x147 (bvadd ?x83 (_ bv3 32))))
 (let ((?x166 (concat (select input.dst.llvm-mem ?x147) (concat ?x191 ?x65))))
 (let ((?x322 (bvmul (_ bv4294967295 32) ?x166)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x60 (concat ?x75 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x45 (bvadd ?x88 (_ bv3 32))))
 (let ((?x106 (concat (select input.dst.llvm-mem ?x45) (concat ?x202 ?x60))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x21 (concat ?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x95 (bvadd ?x206 (_ bv3 32))))
 (let ((?x80 (concat (select input.dst.llvm-mem ?x95) (concat ?x346 ?x21))))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x185)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x220)))
 (let ((?x252 (bvadd (bvadd (bvadd ?x238 ?x80) ?x106) ?x322)))
 (let (($x92 (= ?x252 ?x143)))
 (let (($x318 (= $x92 true)))
 (let (($x40 (= $x318 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x132 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x177 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x121 (ite $x177 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x121 (_ bv1 32))))
 (let (($x365 (=> $x386 $x132)))
 (let (($x156 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x120 (= $x386 $x156)))
 (let (($x123 (= false false)))
 (let (($x54 (= ?x121 (_ bv0 32))))
 (let (($x58 (=> $x54 $x123)))
 (let (($x357 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x17 (= $x54 $x357)))
 (let (($x37 (and (and (and $x17 $x58) $x120) $x365)))
 (let (($x101 (= $x37 true)))
 (let (($x71 (= ?x213 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x189 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x344 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x344 (_ bv1 32))))
 (let (($x371 (=> $x149 $x71)))
 (let (($x382 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x358 (= $x149 $x382)))
 (let (($x374 (= ?x344 (_ bv0 32))))
 (let (($x233 (=> $x374 $x123)))
 (let (($x281 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x381 (= $x374 $x281)))
 (let (($x30 (and (and (and $x381 $x233) $x358) $x371)))
 (let (($x362 (= $x30 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x51 (= ?x335 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x124 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x129 (ite $x124 (_ bv1 32) (_ bv0 32))))
 (let (($x39 (bvuge ?x129 (_ bv1 32))))
 (let (($x77 (=> $x39 $x51)))
 (let (($x99 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x273 (= $x39 $x99)))
 (let (($x44 (= ?x129 (_ bv0 32))))
 (let (($x107 (=> $x44 $x123)))
 (let (($x369 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x296 (= $x44 $x369)))
 (let (($x193 (and (and (and $x296 $x107) $x273) $x77)))
 (let (($x52 (= $x193 true)))
 (let (($x144 (= ?x379 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x246 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x157 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x90 (bvuge ?x157 (_ bv1 32))))
 (let (($x9 (=> $x90 $x144)))
 (let (($x312 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x350 (= $x90 $x312)))
 (let (($x366 (= ?x157 (_ bv0 32))))
 (let (($x226 (=> $x366 $x123)))
 (let (($x313 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x216 (= $x366 $x313)))
 (let (($x282 (and (and (and $x216 $x226) $x350) $x9)))
 (let (($x16 (= $x282 true)))
 (let (($x261 (forall ((input.ind-%var3062X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3062X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3062X) (bvult input.ind-%var3062X (_ bv100 32))))))
 ))
 (let (($x155 (forall ((input.ind-%var3063X (_ BitVec 32)) )(let ((?x78 (bvadd (bvmul input.ind-%var3063X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x74 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x74))))
 (let ((?x288 (input.spec-%var-m-0.1.1 input.ind-%var3063X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3063X)))
 (=> $x329 (= ?x288 ?x86))))))))
 ))
 (let (($x148 (and $x155 $x261)))
 (let (($x115 (= $x148 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x205 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x109 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x309 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x218 (concat ?x309 (concat ?x109 (concat ?x205 ?x171)))))
 (let (($x170 (= ?x218 input.dst.llvm-%m)))
 (let (($x84 (= $x170 true)))
 (let (($x334 (= $x84 true)))
 (let (($x240 (= (bvand ?x83 (_ bv4294967292 32)) ?x83)))
 (let (($x33 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x352 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x179 (and true $x352)))
 (let (($x294 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x340 (and $x294 $x179)))
 (let (($x234 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x83 (bvsub ?x83 (_ bv8 32))) (bvult ?x83 (bvsub ?x83 (_ bv8 32))))))
 (let (($x221 (and (and (and true $x234) $x340) $x33)))
 (let (($x167 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x153 (and true $x167)))
 (let (($x116 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x195 (and $x116 $x153)))
 (let (($x10 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x222 (and (and (and true $x116) $x10) $x195)))
 (let (($x151 (and (and $x222 $x221) $x240)))
 (let (($x290 (= $x151 true)))
 (let (($x207 (= $x290 true)))
 (let (($x245 (= $x207 true)))
 (let (($x28 (= $x222 true)))
 (let (($x7 (= $x28 true)))
 (let (($x66 (= $x7 true)))
 (let (($x31 (and $x221 $x240)))
 (let (($x231 (= $x31 true)))
 (let (($x199 (= $x231 true)))
 (let (($x326 (= $x199 true)))
 (let ((?x373 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x375 (= (_ bv0 32) ?x373)))
 (let ((?x300 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x302 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x300)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x89 (and $x241 $x302)))
 (let (($x228 (and $x89 $x375)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x299 (and $x182 $x228)))
 (let (($x138 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x359 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x265 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x359 $x138)))))))
 (let (($x108 (and $x265 $x299)))
 (let (($x275 (= $x108 true)))
 (let (($x135 (= $x275 true)))
 (let (($x347 (= $x135 true)))
 (let (($x320 (and $x347 $x326)))
 (let (($x18 (and $x320 $x66)))
 (let (($x127 (and $x18 $x245)))
 (let (($x256 (and $x127 $x334)))
 (let (($x271 (and $x256 $x115)))
 (let (($x361 (and $x271 $x16)))
 (let (($x354 (and $x361 $x52)))
 (let (($x306 (and $x354 $x362)))
 (let (($x72 (and $x306 $x101)))
 (let (($x188 (and $x149 $x54)))
 (let (($x355 (and $x44 $x188)))
 (let (($x317 (and $x90 $x355)))
 (let (($x35 (and $x317 $x72)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x5 (and $x183 $x35)))
 (let (($x325 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x263 (and $x325 $x5)))
 (let (($x360 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x253 (and $x360 $x263)))
 (let (($x384 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x314 (and $x384 $x253)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x13 (and $x387 $x314)))
 (let (($x201 (and $x123 $x13)))
 (let (($x130 (= ?x379 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x136 (and $x130 $x201)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x197 (and $x370 $x136)))
 (let (($x211 (and $x123 $x197)))
 (let (($x53 (= ?x335 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x118 (and $x53 $x211)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x315 (and $x303 $x118)))
 (let (($x26 (and $x123 $x315)))
 (let (($x176 (= ?x213 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x96 (and $x176 $x26)))
 (let (($x103 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x297 (and $x103 $x96)))
 (let (($x332 (and $x123 $x297)))
 (let (($x331 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x113 (and $x331 $x332)))
 (let (($x64 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x239 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x48 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x239 $x64)))))))
 (let (($x262 (bvugt ?x83 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x133 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x147)))
 (let (($x255 (=> (bvule ?x83 (bvsub (bvadd ?x83 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x133 $x262)))))))
 (let (($x225 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x95)))
 (let (($x181 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x225)))))))
 (let (($x235 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x104 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x104)))
 (let (($x105 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x79 $x235)))))))
 (let (($x68 (and $x105 $x181)))
 (let (($x6 (and $x68 $x255)))
 (let (($x249 (and $x6 $x48)))
 (let (($x174 (and $x249 $x113)))
 (let (($x141 (=> $x174 $x40)))
 (not $x141)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x215 (bvadd ?x307 ?x47)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x342 (concat ?x69 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x262 (bvadd ?x22 (_ bv3 32))))
 (let ((?x270 (concat (select input.dst.llvm-mem ?x262) (concat ?x70 ?x342))))
 (let ((?x194 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x301 (concat ?x85 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x64 (bvadd ?x291 (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x64) (concat ?x200 ?x301))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x252 (concat ?x322 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x225 (bvadd ?x287 (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x225) (concat ?x143 ?x252))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x254)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x321)))
 (let ((?x316 (bvadd (bvadd (bvadd ?x65 ?x40) ?x343) ?x194)))
 (let (($x264 (= ?x316 ?x215)))
 (let (($x154 (= $x264 true)))
 (let (($x236 (= $x154 true)))
 (let (($x164 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x285 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x378 (ite $x285 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x378 (_ bv1 32))))
 (let (($x364 (=> $x8 $x164)))
 (let (($x27 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x196 (= $x8 $x27)))
 (let (($x213 (= false false)))
 (let (($x96 (= ?x378 (_ bv0 32))))
 (let (($x174 (=> $x96 $x213)))
 (let (($x332 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x113 (= $x96 $x332)))
 (let (($x220 (and (and (and $x113 $x174) $x196) $x364)))
 (let (($x238 (= $x220 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x201 (= ?x335 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x317 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x317 (_ bv1 32))))
 (let (($x136 (=> $x263 $x201)))
 (let (($x253 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x314 (= $x263 $x253)))
 (let (($x159 (= ?x317 (_ bv0 32))))
 (let (($x5 (=> $x159 $x213)))
 (let (($x72 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x35 (= $x159 $x72)))
 (let (($x118 (and (and (and $x35 $x5) $x314) $x136)))
 (let (($x315 (= $x118 true)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x156 (= ?x379 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x54 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x54 (_ bv1 32))))
 (let (($x120 (=> $x17 $x156)))
 (let (($x58 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x286 (= $x17 $x58)))
 (let (($x188 (= ?x54 (_ bv0 32))))
 (let (($x357 (=> $x188 $x213)))
 (let (($x306 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x42 (= $x188 $x306)))
 (let (($x132 (and (and (and $x42 $x357) $x286) $x120)))
 (let (($x365 (= $x132 true)))
 (let (($x382 (= ?x307 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x44 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x149 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x149 (_ bv1 32))))
 (let (($x358 (=> $x177 $x382)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x177 $x381)))
 (let (($x52 (= ?x149 (_ bv0 32))))
 (let (($x281 (=> $x52 $x213)))
 (let (($x374 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x168 (= $x52 $x374)))
 (let (($x71 (and (and (and $x168 $x281) $x233) $x358)))
 (let (($x371 (= $x71 true)))
 (let (($x336 (forall ((input.ind-%var3094X (_ BitVec 32)) )(let (($x189 (input.spec-%var-m-0.0.1 input.ind-%var3094X)))
 (= $x189 (and (bvule (_ bv0 32) input.ind-%var3094X) (bvult input.ind-%var3094X (_ bv100 32))))))
 ))
 (let (($x282 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3095X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x123))))
 (let ((?x230 (input.spec-%var-m-0.1.1 input.ind-%var3095X)))
 (let (($x189 (input.spec-%var-m-0.0.1 input.ind-%var3095X)))
 (=> $x189 (= ?x230 ?x266))))))))
 ))
 (let (($x51 (and $x282 $x336)))
 (let (($x77 (= $x51 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x119 (concat ?x32 (concat ?x84 ?x218)))))
 (let (($x97 (= ?x78 input.dst.llvm-%m)))
 (let (($x14 (= $x97 true)))
 (let (($x237 (= $x14 true)))
 (let (($x198 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x199 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x240 (and true $x210)))
 (let (($x340 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x31 (and $x340 $x240)))
 (let (($x214 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv8 32))) (bvult ?x22 (bvsub ?x22 (_ bv8 32))))))
 (let (($x251 (and (and (and true $x214) $x31) $x199)))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x18 (and true $x66)))
 (let (($x244 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and $x244 $x18)))
 (let (($x153 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x207 (and (and (and true $x244) $x153) $x114)))
 (let (($x122 (and (and $x207 $x251) $x198)))
 (let (($x109 (= $x122 true)))
 (let (($x146 (= $x109 true)))
 (let (($x205 (= $x146 true)))
 (let (($x245 (= $x207 true)))
 (let (($x127 (= $x245 true)))
 (let (($x111 (= $x127 true)))
 (let (($x351 (and $x251 $x198)))
 (let (($x349 (= $x351 true)))
 (let (($x49 (= $x349 true)))
 (let (($x258 (= $x49 true)))
 (let ((?x186 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x36 (= (_ bv0 32) ?x186)))
 (let ((?x275 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x275)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x108 $x135)))
 (let (($x276 (and $x347 $x36)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x140 $x276)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x299 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x300)))))))
 (let (($x234 (and $x299 $x324)))
 (let (($x333 (= $x234 true)))
 (let (($x158 (= $x333 true)))
 (let (($x184 (= $x158 true)))
 (let (($x10 (and $x184 $x258)))
 (let (($x224 (and $x10 $x111)))
 (let (($x171 (and $x224 $x205)))
 (let (($x293 (and $x171 $x237)))
 (let (($x193 (and $x293 $x77)))
 (let (($x30 (and $x193 $x371)))
 (let (($x37 (and $x30 $x365)))
 (let (($x26 (and $x37 $x315)))
 (let (($x110 (and $x26 $x238)))
 (let (($x359 (and $x159 $x8)))
 (let (($x138 (and $x188 $x359)))
 (let (($x368 (and $x177 $x138)))
 (let (($x280 (and $x368 $x110)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x346 (and $x129 $x280)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x298 (and $x90 $x346)))
 (let (($x246 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x145 (and $x246 $x298)))
 (let (($x162 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x20 (and $x162 $x145)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x21 (and $x272 $x20)))
 (let (($x310 (and $x213 $x21)))
 (let (($x212 (= ?x307 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x80 (and $x212 $x310)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x387 $x80)))
 (let (($x152 (and $x213 $x209)))
 (let (($x130 (= ?x379 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x278 (and $x130 $x152)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x202 (and $x370 $x278)))
 (let (($x102 (and $x213 $x202)))
 (let (($x53 (= ?x335 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x75 (and $x53 $x102)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x175 (and $x62 $x75)))
 (let (($x60 (and $x213 $x175)))
 (let (($x277 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x242 (and $x277 $x60)))
 (let (($x289 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x243 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x289)))))))
 (let (($x319 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x223 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x319)))))))
 (let (($x295 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x56 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x172 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x56)))))))
 (let (($x142 (and $x172 $x83)))
 (let (($x267 (and $x142 $x223)))
 (let (($x330 (and $x267 $x243)))
 (let (($x106 (and $x330 $x242)))
 (let (($x260 (=> $x106 $x236)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x215 (bvadd ?x307 ?x47)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x342 (concat ?x69 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x70 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x22 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x262 (bvadd ?x22 (_ bv3 32))))
 (let ((?x270 (concat (select input.dst.llvm-mem ?x262) (concat ?x70 ?x342))))
 (let ((?x194 (bvmul (_ bv4294967295 32) ?x270)))
 (let ((?x85 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x301 (concat ?x85 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x200 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x64 (bvadd ?x291 (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x64) (concat ?x200 ?x301))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x252 (concat ?x322 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x143 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x225 (bvadd ?x287 (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x225) (concat ?x143 ?x252))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x254)))
 (let ((?x65 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x321)))
 (let ((?x316 (bvadd (bvadd (bvadd ?x65 ?x40) ?x343) ?x194)))
 (let (($x264 (= ?x316 ?x215)))
 (let (($x154 (= $x264 true)))
 (let (($x236 (= $x154 true)))
 (let (($x164 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x285 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x378 (ite $x285 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x378 (_ bv1 32))))
 (let (($x364 (=> $x8 $x164)))
 (let (($x27 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x196 (= $x8 $x27)))
 (let (($x213 (= false false)))
 (let (($x96 (= ?x378 (_ bv0 32))))
 (let (($x174 (=> $x96 $x213)))
 (let (($x332 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x113 (= $x96 $x332)))
 (let (($x220 (and (and (and $x113 $x174) $x196) $x364)))
 (let (($x238 (= $x220 true)))
 (let ((?x335 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x201 (= ?x335 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x317 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x263 (bvuge ?x317 (_ bv1 32))))
 (let (($x136 (=> $x263 $x201)))
 (let (($x253 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x314 (= $x263 $x253)))
 (let (($x159 (= ?x317 (_ bv0 32))))
 (let (($x5 (=> $x159 $x213)))
 (let (($x72 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x35 (= $x159 $x72)))
 (let (($x118 (and (and (and $x35 $x5) $x314) $x136)))
 (let (($x315 (= $x118 true)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x156 (= ?x379 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x54 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x17 (bvuge ?x54 (_ bv1 32))))
 (let (($x120 (=> $x17 $x156)))
 (let (($x58 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x286 (= $x17 $x58)))
 (let (($x188 (= ?x54 (_ bv0 32))))
 (let (($x357 (=> $x188 $x213)))
 (let (($x306 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x42 (= $x188 $x306)))
 (let (($x132 (and (and (and $x42 $x357) $x286) $x120)))
 (let (($x365 (= $x132 true)))
 (let (($x382 (= ?x307 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x44 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x149 (ite $x44 (_ bv1 32) (_ bv0 32))))
 (let (($x177 (bvuge ?x149 (_ bv1 32))))
 (let (($x358 (=> $x177 $x382)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x233 (= $x177 $x381)))
 (let (($x52 (= ?x149 (_ bv0 32))))
 (let (($x281 (=> $x52 $x213)))
 (let (($x374 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x168 (= $x52 $x374)))
 (let (($x71 (and (and (and $x168 $x281) $x233) $x358)))
 (let (($x371 (= $x71 true)))
 (let (($x336 (forall ((input.ind-%var3094X (_ BitVec 32)) )(let (($x189 (input.spec-%var-m-0.0.1 input.ind-%var3094X)))
 (= $x189 (and (bvule (_ bv0 32) input.ind-%var3094X) (bvult input.ind-%var3094X (_ bv100 32))))))
 ))
 (let (($x282 (forall ((input.ind-%var3095X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3095X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x123 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x123))))
 (let ((?x230 (input.spec-%var-m-0.1.1 input.ind-%var3095X)))
 (let (($x189 (input.spec-%var-m-0.0.1 input.ind-%var3095X)))
 (=> $x189 (= ?x230 ?x266))))))))
 ))
 (let (($x51 (and $x282 $x336)))
 (let (($x77 (= $x51 true)))
 (let ((?x218 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x119 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x78 (concat ?x119 (concat ?x32 (concat ?x84 ?x218)))))
 (let (($x97 (= ?x78 input.dst.llvm-%m)))
 (let (($x14 (= $x97 true)))
 (let (($x237 (= $x14 true)))
 (let (($x198 (= (bvand ?x22 (_ bv4294967292 32)) ?x22)))
 (let (($x199 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x210 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x240 (and true $x210)))
 (let (($x340 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x31 (and $x340 $x240)))
 (let (($x214 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x22 (bvsub ?x22 (_ bv8 32))) (bvult ?x22 (bvsub ?x22 (_ bv8 32))))))
 (let (($x251 (and (and (and true $x214) $x31) $x199)))
 (let (($x66 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x18 (and true $x66)))
 (let (($x244 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x114 (and $x244 $x18)))
 (let (($x153 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x207 (and (and (and true $x244) $x153) $x114)))
 (let (($x122 (and (and $x207 $x251) $x198)))
 (let (($x109 (= $x122 true)))
 (let (($x146 (= $x109 true)))
 (let (($x205 (= $x146 true)))
 (let (($x245 (= $x207 true)))
 (let (($x127 (= $x245 true)))
 (let (($x111 (= $x127 true)))
 (let (($x351 (and $x251 $x198)))
 (let (($x349 (= $x351 true)))
 (let (($x49 (= $x349 true)))
 (let (($x258 (= $x49 true)))
 (let ((?x186 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x36 (= (_ bv0 32) ?x186)))
 (let ((?x275 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x135 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x275)))
 (let (($x108 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x347 (and $x108 $x135)))
 (let (($x276 (and $x347 $x36)))
 (let (($x140 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x140 $x276)))
 (let (($x300 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x241 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x299 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x241 $x300)))))))
 (let (($x234 (and $x299 $x324)))
 (let (($x333 (= $x234 true)))
 (let (($x158 (= $x333 true)))
 (let (($x184 (= $x158 true)))
 (let (($x10 (and $x184 $x258)))
 (let (($x224 (and $x10 $x111)))
 (let (($x171 (and $x224 $x205)))
 (let (($x293 (and $x171 $x237)))
 (let (($x193 (and $x293 $x77)))
 (let (($x30 (and $x193 $x371)))
 (let (($x37 (and $x30 $x365)))
 (let (($x26 (and $x37 $x315)))
 (let (($x110 (and $x26 $x238)))
 (let (($x359 (and $x159 $x8)))
 (let (($x138 (and $x188 $x359)))
 (let (($x368 (and $x177 $x138)))
 (let (($x280 (and $x368 $x110)))
 (let (($x129 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x346 (and $x129 $x280)))
 (let (($x90 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x298 (and $x90 $x346)))
 (let (($x246 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x145 (and $x246 $x298)))
 (let (($x162 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x20 (and $x162 $x145)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x21 (and $x272 $x20)))
 (let (($x310 (and $x213 $x21)))
 (let (($x212 (= ?x307 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x80 (and $x212 $x310)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x209 (and $x387 $x80)))
 (let (($x152 (and $x213 $x209)))
 (let (($x130 (= ?x379 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x278 (and $x130 $x152)))
 (let (($x370 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x202 (and $x370 $x278)))
 (let (($x102 (and $x213 $x202)))
 (let (($x53 (= ?x335 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x75 (and $x53 $x102)))
 (let (($x62 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x175 (and $x62 $x75)))
 (let (($x60 (and $x213 $x175)))
 (let (($x277 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x242 (and $x277 $x60)))
 (let (($x289 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x126 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x243 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x126 $x289)))))))
 (let (($x319 (bvugt ?x22 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x262)))
 (let (($x223 (=> (bvule ?x22 (bvsub (bvadd ?x22 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x319)))))))
 (let (($x295 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x117 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x83 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x117 $x295)))))))
 (let (($x56 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x235 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x93 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x235)))
 (let (($x172 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x93 $x56)))))))
 (let (($x142 (and $x172 $x83)))
 (let (($x267 (and $x142 $x223)))
 (let (($x330 (and $x267 $x243)))
 (let (($x106 (and $x330 $x242)))
 (let (($x260 (=> $x106 $x236)))
 (not $x260))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x323 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x147 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x319 (bvadd ?x147 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x319) (concat ?x367 ?x190))))
 (let ((?x155 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x76 (concat ?x12 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x289 (bvadd ?x88 (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x289) (concat ?x337 ?x76))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x316 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x295 (bvadd ?x134 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x295) (concat ?x264 ?x316))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x339)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x69)))
 (let ((?x361 (bvadd (bvadd (bvadd ?x342 ?x260) ?x61) ?x155)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x107 (= ?x325 ?x361)))
 (let (($x46 (= $x107 true)))
 (let (($x148 (= $x46 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x67 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x228 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x228 (_ bv1 32))))
 (let (($x377 (=> $x106 $x67)))
 (let (($x29 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x191 (= $x106 $x29)))
 (let (($x335 (= false false)))
 (let (($x182 (= ?x228 (_ bv0 32))))
 (let (($x242 (=> $x182 $x335)))
 (let (($x175 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x60 (= $x182 $x175)))
 (let (($x321 (and (and (and $x60 $x242) $x191) $x377)))
 (let (($x65 (= $x321 true)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x310 (= ?x379 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x368 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x368 (_ bv1 32))))
 (let (($x80 (=> $x298 $x310)))
 (let (($x145 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x20 (= $x298 $x145)))
 (let (($x265 (= ?x368 (_ bv0 32))))
 (let (($x346 (=> $x265 $x335)))
 (let (($x110 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x280 (= $x265 $x110)))
 (let (($x278 (and (and (and $x280 $x346) $x20) $x80)))
 (let (($x202 (= $x278 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x27 (= ?x307 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x378 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x8 (ite $x378 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x8 (_ bv1 32))))
 (let (($x196 (=> $x332 $x27)))
 (let (($x113 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x174 (= $x332 $x113)))
 (let (($x359 (= ?x8 (_ bv0 32))))
 (let (($x297 (=> $x359 $x335)))
 (let (($x26 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x96 (= $x359 $x26)))
 (let (($x164 (and (and (and $x96 $x297) $x174) $x196)))
 (let (($x364 (= $x164 true)))
 (let (($x253 (= ?x325 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x188 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x159 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x159 (_ bv1 32))))
 (let (($x314 (=> $x285 $x253)))
 (let (($x5 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x197 (= $x285 $x5)))
 (let (($x365 (= ?x159 (_ bv0 32))))
 (let (($x35 (=> $x365 $x335)))
 (let (($x101 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x72 (= $x365 $x101)))
 (let (($x201 (and (and (and $x72 $x35) $x197) $x314)))
 (let (($x136 (= $x201 true)))
 (let (($x386 (forall ((input.ind-%var3126X (_ BitVec 32)) )(let (($x355 (input.spec-%var-m-0.0.1 input.ind-%var3126X)))
 (= $x355 (and (bvule (_ bv0 32) input.ind-%var3126X) (bvult input.ind-%var3126X (_ bv100 32))))))
 ))
 (let (($x71 (forall ((input.ind-%var3127X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var3127X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x213))))
 (let ((?x180 (input.spec-%var-m-0.1.1 input.ind-%var3127X)))
 (let (($x355 (input.spec-%var-m-0.0.1 input.ind-%var3127X)))
 (=> $x355 (= ?x180 ?x112))))))))
 ))
 (let (($x156 (and $x71 $x386)))
 (let (($x120 (= $x156 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x366 (concat ?x271 (concat ?x331 (concat ?x14 ?x78)))))
 (let (($x350 (= ?x366 input.dst.llvm-%m)))
 (let (($x82 (= $x350 true)))
 (let (($x226 (= $x82 true)))
 (let (($x151 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x49 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x198 (and true $x116)))
 (let (($x31 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x351 (and $x31 $x198)))
 (let (($x221 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv8 32))) (bvult ?x147 (bvsub ?x147 (_ bv8 32))))))
 (let (($x292 (and (and (and true $x221) $x351) $x49)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x224 (and true $x111)))
 (let (($x222 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x309 (and $x222 $x224)))
 (let (($x18 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x146 (and (and (and true $x222) $x18) $x309)))
 (let (($x256 (and (and $x146 $x292) $x151)))
 (let (($x32 (= $x256 true)))
 (let (($x170 (= $x32 true)))
 (let (($x84 (= $x170 true)))
 (let (($x205 (= $x146 true)))
 (let (($x171 (= $x205 true)))
 (let (($x219 (= $x171 true)))
 (let (($x137 (and $x292 $x151)))
 (let (($x385 (= $x137 true)))
 (let (($x98 (= $x385 true)))
 (let (($x167 (= $x98 true)))
 (let ((?x163 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x294 (= (_ bv0 32) ?x163)))
 (let ((?x333 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x234 $x158)))
 (let (($x227 (and $x184 $x294)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x375 $x227)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x324 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x275)))))))
 (let (($x214 (and $x324 $x169)))
 (let (($x326 (= $x214 true)))
 (let (($x352 (= $x326 true)))
 (let (($x179 (= $x352 true)))
 (let (($x153 (and $x179 $x167)))
 (let (($x288 (and $x153 $x219)))
 (let (($x218 (and $x288 $x84)))
 (let (($x161 (and $x218 $x226)))
 (let (($x132 (and $x161 $x120)))
 (let (($x118 (and $x132 $x136)))
 (let (($x220 (and $x118 $x364)))
 (let (($x102 (and $x220 $x202)))
 (let (($x318 (and $x102 $x65)))
 (let (($x241 (and $x265 $x182)))
 (let (($x300 (and $x359 $x241)))
 (let (($x302 (and $x285 $x300)))
 (let (($x328 (and $x302 $x318)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x143 (and $x54 $x328)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x166 (and $x177 $x143)))
 (let (($x44 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x322 (and $x44 $x166)))
 (let (($x124 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x178 (and $x124 $x322)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x252 (and $x157 $x178)))
 (let (($x92 (and $x335 $x252)))
 (let (($x183 (= ?x325 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x40 (and $x183 $x92)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x160 (and $x272 $x40)))
 (let (($x248 (and $x335 $x160)))
 (let (($x212 (= ?x307 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x15 (and $x212 $x248)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x200 (and $x387 $x15)))
 (let (($x376 (and $x335 $x200)))
 (let (($x130 (= ?x379 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x85 (and $x130 $x376)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x141 (and $x23 $x85)))
 (let (($x301 (and $x335 $x141)))
 (let (($x303 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x43 (and $x303 $x301)))
 (let (($x327 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x289)))
 (let (($x103 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x327)))))))
 (let (($x38 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x45 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x38)))))))
 (let (($x173 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x192 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x95 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x192)))))))
 (let (($x11 (and $x95 $x22)))
 (let (($x133 (and $x11 $x45)))
 (let (($x239 (and $x133 $x103)))
 (let (($x343 (and $x239 $x43)))
 (let (($x348 (=> $x343 $x148)))
 (not $x348)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x323 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x190 (concat ?x323 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x147 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x319 (bvadd ?x147 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x319) (concat ?x367 ?x190))))
 (let ((?x155 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x12 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x76 (concat ?x12 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x289 (bvadd ?x88 (_ bv3 32))))
 (let ((?x61 (concat (select input.dst.llvm-mem ?x289) (concat ?x337 ?x76))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x316 (concat ?x194 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x295 (bvadd ?x134 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x295) (concat ?x264 ?x316))))
 (let ((?x339 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x69 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x339)))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x69)))
 (let ((?x361 (bvadd (bvadd (bvadd ?x342 ?x260) ?x61) ?x155)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x107 (= ?x325 ?x361)))
 (let (($x46 (= $x107 true)))
 (let (($x148 (= $x46 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x67 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x363 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x228 (ite $x363 (_ bv1 32) (_ bv0 32))))
 (let (($x106 (bvuge ?x228 (_ bv1 32))))
 (let (($x377 (=> $x106 $x67)))
 (let (($x29 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x191 (= $x106 $x29)))
 (let (($x335 (= false false)))
 (let (($x182 (= ?x228 (_ bv0 32))))
 (let (($x242 (=> $x182 $x335)))
 (let (($x175 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x60 (= $x182 $x175)))
 (let (($x321 (and (and (and $x60 $x242) $x191) $x377)))
 (let (($x65 (= $x321 true)))
 (let ((?x379 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x310 (= ?x379 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x368 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x368 (_ bv1 32))))
 (let (($x80 (=> $x298 $x310)))
 (let (($x145 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x20 (= $x298 $x145)))
 (let (($x265 (= ?x368 (_ bv0 32))))
 (let (($x346 (=> $x265 $x335)))
 (let (($x110 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x280 (= $x265 $x110)))
 (let (($x278 (and (and (and $x280 $x346) $x20) $x80)))
 (let (($x202 (= $x278 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x27 (= ?x307 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x378 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x8 (ite $x378 (_ bv1 32) (_ bv0 32))))
 (let (($x332 (bvuge ?x8 (_ bv1 32))))
 (let (($x196 (=> $x332 $x27)))
 (let (($x113 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x174 (= $x332 $x113)))
 (let (($x359 (= ?x8 (_ bv0 32))))
 (let (($x297 (=> $x359 $x335)))
 (let (($x26 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x96 (= $x359 $x26)))
 (let (($x164 (and (and (and $x96 $x297) $x174) $x196)))
 (let (($x364 (= $x164 true)))
 (let (($x253 (= ?x325 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x188 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x159 (ite $x188 (_ bv1 32) (_ bv0 32))))
 (let (($x285 (bvuge ?x159 (_ bv1 32))))
 (let (($x314 (=> $x285 $x253)))
 (let (($x5 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x197 (= $x285 $x5)))
 (let (($x365 (= ?x159 (_ bv0 32))))
 (let (($x35 (=> $x365 $x335)))
 (let (($x101 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x72 (= $x365 $x101)))
 (let (($x201 (and (and (and $x72 $x35) $x197) $x314)))
 (let (($x136 (= $x201 true)))
 (let (($x386 (forall ((input.ind-%var3126X (_ BitVec 32)) )(let (($x355 (input.spec-%var-m-0.0.1 input.ind-%var3126X)))
 (= $x355 (and (bvule (_ bv0 32) input.ind-%var3126X) (bvult input.ind-%var3126X (_ bv100 32))))))
 ))
 (let (($x71 (forall ((input.ind-%var3127X (_ BitVec 32)) )(let ((?x52 (bvadd (bvmul input.ind-%var3127X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv1 32))) (select input.dst.llvm-mem ?x52))))
 (let ((?x112 (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x52 (_ bv2 32))) ?x213))))
 (let ((?x180 (input.spec-%var-m-0.1.1 input.ind-%var3127X)))
 (let (($x355 (input.spec-%var-m-0.0.1 input.ind-%var3127X)))
 (=> $x355 (= ?x180 ?x112))))))))
 ))
 (let (($x156 (and $x71 $x386)))
 (let (($x120 (= $x156 true)))
 (let ((?x78 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x14 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x331 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x366 (concat ?x271 (concat ?x331 (concat ?x14 ?x78)))))
 (let (($x350 (= ?x366 input.dst.llvm-%m)))
 (let (($x82 (= $x350 true)))
 (let (($x226 (= $x82 true)))
 (let (($x151 (= (bvand ?x147 (_ bv4294967292 32)) ?x147)))
 (let (($x49 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x116 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x198 (and true $x116)))
 (let (($x31 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x351 (and $x31 $x198)))
 (let (($x221 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x147 (bvsub ?x147 (_ bv8 32))) (bvult ?x147 (bvsub ?x147 (_ bv8 32))))))
 (let (($x292 (and (and (and true $x221) $x351) $x49)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x224 (and true $x111)))
 (let (($x222 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x309 (and $x222 $x224)))
 (let (($x18 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x146 (and (and (and true $x222) $x18) $x309)))
 (let (($x256 (and (and $x146 $x292) $x151)))
 (let (($x32 (= $x256 true)))
 (let (($x170 (= $x32 true)))
 (let (($x84 (= $x170 true)))
 (let (($x205 (= $x146 true)))
 (let (($x171 (= $x205 true)))
 (let (($x219 (= $x171 true)))
 (let (($x137 (and $x292 $x151)))
 (let (($x385 (= $x137 true)))
 (let (($x98 (= $x385 true)))
 (let (($x167 (= $x98 true)))
 (let ((?x163 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x294 (= (_ bv0 32) ?x163)))
 (let ((?x333 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x158 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x333)))
 (let (($x234 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x184 (and $x234 $x158)))
 (let (($x227 (and $x184 $x294)))
 (let (($x375 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x169 (and $x375 $x227)))
 (let (($x275 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x324 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x275)))))))
 (let (($x214 (and $x324 $x169)))
 (let (($x326 (= $x214 true)))
 (let (($x352 (= $x326 true)))
 (let (($x179 (= $x352 true)))
 (let (($x153 (and $x179 $x167)))
 (let (($x288 (and $x153 $x219)))
 (let (($x218 (and $x288 $x84)))
 (let (($x161 (and $x218 $x226)))
 (let (($x132 (and $x161 $x120)))
 (let (($x118 (and $x132 $x136)))
 (let (($x220 (and $x118 $x364)))
 (let (($x102 (and $x220 $x202)))
 (let (($x318 (and $x102 $x65)))
 (let (($x241 (and $x265 $x182)))
 (let (($x300 (and $x359 $x241)))
 (let (($x302 (and $x285 $x300)))
 (let (($x328 (and $x302 $x318)))
 (let (($x54 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x143 (and $x54 $x328)))
 (let (($x177 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x166 (and $x177 $x143)))
 (let (($x44 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x322 (and $x44 $x166)))
 (let (($x124 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x178 (and $x124 $x322)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x252 (and $x157 $x178)))
 (let (($x92 (and $x335 $x252)))
 (let (($x183 (= ?x325 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x40 (and $x183 $x92)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x160 (and $x272 $x40)))
 (let (($x248 (and $x335 $x160)))
 (let (($x212 (= ?x307 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x15 (and $x212 $x248)))
 (let (($x387 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x200 (and $x387 $x15)))
 (let (($x376 (and $x335 $x200)))
 (let (($x130 (= ?x379 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x85 (and $x130 $x376)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x141 (and $x23 $x85)))
 (let (($x301 (and $x335 $x141)))
 (let (($x303 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x43 (and $x303 $x301)))
 (let (($x327 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x289)))
 (let (($x103 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x229 $x327)))))))
 (let (($x38 (bvugt ?x147 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x257 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x319)))
 (let (($x45 (=> (bvule ?x147 (bvsub (bvadd ?x147 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x257 $x38)))))))
 (let (($x173 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x295)))
 (let (($x22 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x173)))))))
 (let (($x192 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x131 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x95 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x131 $x192)))))))
 (let (($x11 (and $x95 $x22)))
 (let (($x133 (and $x11 $x45)))
 (let (($x239 (and $x133 $x103)))
 (let (($x343 (and $x239 $x43)))
 (let (($x348 (=> $x343 $x148)))
 (not $x348)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x216 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x338)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x259 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x262 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x38 (bvadd ?x262 (_ bv3 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem ?x38) (concat ?x144 ?x99))))
 (let ((?x39 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x317 (concat ?x329 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x327 (bvadd ?x291 (_ bv3 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem ?x327) (concat ?x313 ?x317))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x361 (concat ?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x173 (bvadd ?x206 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x173) (concat ?x46 ?x361))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x341)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x323)))
 (let ((?x357 (bvadd (bvadd (bvadd ?x190 ?x115) ?x42) ?x39)))
 (let (($x77 (= ?x357 ?x216)))
 (let (($x16 (= $x77 true)))
 (let (($x279 (= $x16 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x274 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x203 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x276 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x276 (_ bv1 32))))
 (let (($x100 (=> $x140 $x274)))
 (let (($x311 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x70 (= $x140 $x311)))
 (let (($x379 (= false false)))
 (let (($x85 (= ?x276 (_ bv0 32))))
 (let (($x343 (=> $x85 $x379)))
 (let (($x301 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x43 (= $x85 $x301)))
 (let (($x69 (and (and (and $x43 $x343) $x70) $x100)))
 (let (($x342 (= $x69 true)))
 (let (($x92 (= ?x307 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x302 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x302 (_ bv1 32))))
 (let (($x40 (=> $x299 $x92)))
 (let (($x322 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x178 (= $x299 $x322)))
 (let (($x65 (= ?x302 (_ bv0 32))))
 (let (($x166 (=> $x65 $x379)))
 (let (($x328 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x143 (= $x65 $x328)))
 (let (($x15 (and (and (and $x143 $x166) $x178) $x40)))
 (let (($x200 (= $x15 true)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x29 (= ?x325 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x228 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x182 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x182 (_ bv1 32))))
 (let (($x191 (=> $x241 $x29)))
 (let (($x242 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x94 (= $x241 $x242)))
 (let (($x202 (= ?x182 (_ bv0 32))))
 (let (($x60 (=> $x202 $x379)))
 (let (($x75 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x175 (= $x202 $x75)))
 (let (($x67 (and (and (and $x175 $x60) $x94) $x191)))
 (let (($x377 (= $x67 true)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x145 (= ?x90 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x359 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x265 (ite $x359 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x265 (_ bv1 32))))
 (let (($x20 (=> $x280 $x145)))
 (let (($x346 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x209 (= $x280 $x346)))
 (let (($x363 (= ?x265 (_ bv0 32))))
 (let (($x110 (=> $x363 $x379)))
 (let (($x220 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x238 (= $x363 $x220)))
 (let (($x310 (and (and (and $x238 $x110) $x209) $x20)))
 (let (($x80 (= $x310 true)))
 (let (($x128 (forall ((input.ind-%var3158X (_ BitVec 32)) )(let (($x138 (input.spec-%var-m-0.0.1 input.ind-%var3158X)))
 (= $x138 (and (bvule (_ bv0 32) input.ind-%var3158X) (bvult input.ind-%var3158X (_ bv100 32))))))
 ))
 (let (($x201 (forall ((input.ind-%var3159X (_ BitVec 32)) )(let ((?x365 (bvadd (bvmul input.ind-%var3159X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x335))))
 (let ((?x353 (input.spec-%var-m-0.1.1 input.ind-%var3159X)))
 (let (($x138 (input.spec-%var-m-0.0.1 input.ind-%var3159X)))
 (=> $x138 (= ?x353 ?x263))))))))
 ))
 (let (($x27 (and $x201 $x128)))
 (let (($x196 (= $x27 true)))
 (let ((?x366 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x193 (concat ?x277 (concat ?x82 ?x366)))))
 (let (($x233 (= ?x52 input.dst.llvm-%m)))
 (let (($x383 (= $x233 true)))
 (let (($x281 (= $x383 true)))
 (let (($x122 (= (bvand ?x262 (_ bv4294967292 32)) ?x262)))
 (let (($x98 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x244 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x151 (and true $x244)))
 (let (($x351 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x137 (and $x351 $x151)))
 (let (($x251 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x262 (bvsub ?x262 (_ bv8 32))) (bvult ?x262 (bvsub ?x262 (_ bv8 32))))))
 (let (($x290 (and (and (and true $x251) $x137) $x98)))
 (let (($x219 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x288 (and true $x219)))
 (let (($x207 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x119 (and $x207 $x288)))
 (let (($x224 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x170 (and (and (and true $x207) $x224) $x119)))
 (let (($x293 (and (and $x170 $x290) $x122)))
 (let (($x331 (= $x293 true)))
 (let (($x97 (= $x331 true)))
 (let (($x14 (= $x97 true)))
 (let (($x84 (= $x170 true)))
 (let (($x218 (= $x84 true)))
 (let (($x334 (= $x218 true)))
 (let (($x28 (and $x290 $x122)))
 (let (($x195 (= $x28 true)))
 (let (($x7 (= $x195 true)))
 (let (($x66 (= $x7 true)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x340 (= (_ bv0 32) ?x24)))
 (let ((?x326 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x326)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x214 $x352)))
 (let (($x380 (and $x179 $x340)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x36 $x380)))
 (let (($x333 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x333)))))))
 (let (($x221 (and $x169 $x33)))
 (let (($x258 (= $x221 true)))
 (let (($x210 (= $x258 true)))
 (let (($x240 (= $x210 true)))
 (let (($x18 (and $x240 $x66)))
 (let (($x230 (and $x18 $x334)))
 (let (($x78 (and $x230 $x14)))
 (let (($x372 (and $x78 $x281)))
 (let (($x164 (and $x372 $x196)))
 (let (($x278 (and $x164 $x80)))
 (let (($x321 (and $x278 $x377)))
 (let (($x376 (and $x321 $x200)))
 (let (($x236 (and $x376 $x342)))
 (let (($x108 (and $x299 $x140)))
 (let (($x275 (and $x241 $x108)))
 (let (($x135 (and $x363 $x275)))
 (let (($x215 (and $x135 $x236)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x264 (and $x8 $x215)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x270 (and $x285 $x264)))
 (let (($x188 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x194 (and $x188 $x270)))
 (let (($x121 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x345 (and $x121 $x194)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x316 (and $x149 $x345)))
 (let (($x154 (and $x379 $x316)))
 (let (($x129 (= ?x90 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x260 (and $x129 $x154)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x87 (and $x157 $x260)))
 (let (($x139 (and $x379 $x87)))
 (let (($x183 (= ?x325 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x344 (and $x183 $x139)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x337 (and $x272 $x344)))
 (let (($x55 (and $x379 $x337)))
 (let (($x212 (= ?x307 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x12 (and $x212 $x55)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x204 (and $x57 $x12)))
 (let (($x76 (and $x379 $x204)))
 (let (($x370 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x150 (and $x370 $x76)))
 (let (($x249 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x327)))
 (let (($x62 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x249)))))))
 (let (($x6 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x64 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x6)))))))
 (let (($x68 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x59 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x225 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x59)))))))
 (let (($x117 (and $x225 $x147)))
 (let (($x125 (and $x117 $x64)))
 (let (($x126 (and $x125 $x62)))
 (let (($x61 (and $x126 $x150)))
 (let (($x268 (=> $x61 $x279)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x307)))
 (let ((?x216 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x338)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x99 (concat ?x259 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x262 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x38 (bvadd ?x262 (_ bv3 32))))
 (let ((?x282 (concat (select input.dst.llvm-mem ?x38) (concat ?x144 ?x99))))
 (let ((?x39 (bvmul (_ bv4294967295 32) ?x282)))
 (let ((?x329 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x317 (concat ?x329 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x313 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x327 (bvadd ?x291 (_ bv3 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem ?x327) (concat ?x313 ?x317))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x361 (concat ?x155 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x173 (bvadd ?x206 (_ bv3 32))))
 (let ((?x115 (concat (select input.dst.llvm-mem ?x173) (concat ?x46 ?x361))))
 (let ((?x341 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x323 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x341)))
 (let ((?x190 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x323)))
 (let ((?x357 (bvadd (bvadd (bvadd ?x190 ?x115) ?x42) ?x39)))
 (let (($x77 (= ?x357 ?x216)))
 (let (($x16 (= $x77 true)))
 (let (($x279 (= $x16 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x274 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x203 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x276 (ite $x203 (_ bv1 32) (_ bv0 32))))
 (let (($x140 (bvuge ?x276 (_ bv1 32))))
 (let (($x100 (=> $x140 $x274)))
 (let (($x311 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x70 (= $x140 $x311)))
 (let (($x379 (= false false)))
 (let (($x85 (= ?x276 (_ bv0 32))))
 (let (($x343 (=> $x85 $x379)))
 (let (($x301 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x43 (= $x85 $x301)))
 (let (($x69 (and (and (and $x43 $x343) $x70) $x100)))
 (let (($x342 (= $x69 true)))
 (let (($x92 (= ?x307 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x300 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x302 (ite $x300 (_ bv1 32) (_ bv0 32))))
 (let (($x299 (bvuge ?x302 (_ bv1 32))))
 (let (($x40 (=> $x299 $x92)))
 (let (($x322 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x178 (= $x299 $x322)))
 (let (($x65 (= ?x302 (_ bv0 32))))
 (let (($x166 (=> $x65 $x379)))
 (let (($x328 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x143 (= $x65 $x328)))
 (let (($x15 (and (and (and $x143 $x166) $x178) $x40)))
 (let (($x200 (= $x15 true)))
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x29 (= ?x325 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x228 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x182 (ite $x228 (_ bv1 32) (_ bv0 32))))
 (let (($x241 (bvuge ?x182 (_ bv1 32))))
 (let (($x191 (=> $x241 $x29)))
 (let (($x242 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x94 (= $x241 $x242)))
 (let (($x202 (= ?x182 (_ bv0 32))))
 (let (($x60 (=> $x202 $x379)))
 (let (($x75 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x175 (= $x202 $x75)))
 (let (($x67 (and (and (and $x175 $x60) $x94) $x191)))
 (let (($x377 (= $x67 true)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x145 (= ?x90 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x359 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x265 (ite $x359 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x265 (_ bv1 32))))
 (let (($x20 (=> $x280 $x145)))
 (let (($x346 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x209 (= $x280 $x346)))
 (let (($x363 (= ?x265 (_ bv0 32))))
 (let (($x110 (=> $x363 $x379)))
 (let (($x220 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x238 (= $x363 $x220)))
 (let (($x310 (and (and (and $x238 $x110) $x209) $x20)))
 (let (($x80 (= $x310 true)))
 (let (($x128 (forall ((input.ind-%var3158X (_ BitVec 32)) )(let (($x138 (input.spec-%var-m-0.0.1 input.ind-%var3158X)))
 (= $x138 (and (bvule (_ bv0 32) input.ind-%var3158X) (bvult input.ind-%var3158X (_ bv100 32))))))
 ))
 (let (($x201 (forall ((input.ind-%var3159X (_ BitVec 32)) )(let ((?x365 (bvadd (bvmul input.ind-%var3159X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv1 32))) (select input.dst.llvm-mem ?x365))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x365 (_ bv2 32))) ?x335))))
 (let ((?x353 (input.spec-%var-m-0.1.1 input.ind-%var3159X)))
 (let (($x138 (input.spec-%var-m-0.0.1 input.ind-%var3159X)))
 (=> $x138 (= ?x353 ?x263))))))))
 ))
 (let (($x27 (and $x201 $x128)))
 (let (($x196 (= $x27 true)))
 (let ((?x366 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x277 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x193 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x52 (concat ?x193 (concat ?x277 (concat ?x82 ?x366)))))
 (let (($x233 (= ?x52 input.dst.llvm-%m)))
 (let (($x383 (= $x233 true)))
 (let (($x281 (= $x383 true)))
 (let (($x122 (= (bvand ?x262 (_ bv4294967292 32)) ?x262)))
 (let (($x98 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x244 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x151 (and true $x244)))
 (let (($x351 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x137 (and $x351 $x151)))
 (let (($x251 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x262 (bvsub ?x262 (_ bv8 32))) (bvult ?x262 (bvsub ?x262 (_ bv8 32))))))
 (let (($x290 (and (and (and true $x251) $x137) $x98)))
 (let (($x219 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x288 (and true $x219)))
 (let (($x207 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x119 (and $x207 $x288)))
 (let (($x224 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x170 (and (and (and true $x207) $x224) $x119)))
 (let (($x293 (and (and $x170 $x290) $x122)))
 (let (($x331 (= $x293 true)))
 (let (($x97 (= $x331 true)))
 (let (($x14 (= $x97 true)))
 (let (($x84 (= $x170 true)))
 (let (($x218 (= $x84 true)))
 (let (($x334 (= $x218 true)))
 (let (($x28 (and $x290 $x122)))
 (let (($x195 (= $x28 true)))
 (let (($x7 (= $x195 true)))
 (let (($x66 (= $x7 true)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x340 (= (_ bv0 32) ?x24)))
 (let ((?x326 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x352 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x326)))
 (let (($x214 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x179 (and $x214 $x352)))
 (let (($x380 (and $x179 $x340)))
 (let (($x36 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x36 $x380)))
 (let (($x333 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x234 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x169 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x234 $x333)))))))
 (let (($x221 (and $x169 $x33)))
 (let (($x258 (= $x221 true)))
 (let (($x210 (= $x258 true)))
 (let (($x240 (= $x210 true)))
 (let (($x18 (and $x240 $x66)))
 (let (($x230 (and $x18 $x334)))
 (let (($x78 (and $x230 $x14)))
 (let (($x372 (and $x78 $x281)))
 (let (($x164 (and $x372 $x196)))
 (let (($x278 (and $x164 $x80)))
 (let (($x321 (and $x278 $x377)))
 (let (($x376 (and $x321 $x200)))
 (let (($x236 (and $x376 $x342)))
 (let (($x108 (and $x299 $x140)))
 (let (($x275 (and $x241 $x108)))
 (let (($x135 (and $x363 $x275)))
 (let (($x215 (and $x135 $x236)))
 (let (($x8 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x264 (and $x8 $x215)))
 (let (($x285 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x270 (and $x285 $x264)))
 (let (($x188 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x194 (and $x188 $x270)))
 (let (($x121 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x345 (and $x121 $x194)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x316 (and $x149 $x345)))
 (let (($x154 (and $x379 $x316)))
 (let (($x129 (= ?x90 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x260 (and $x129 $x154)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x87 (and $x157 $x260)))
 (let (($x139 (and $x379 $x87)))
 (let (($x183 (= ?x325 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x344 (and $x183 $x139)))
 (let (($x272 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x337 (and $x272 $x344)))
 (let (($x55 (and $x379 $x337)))
 (let (($x212 (= ?x307 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x12 (and $x212 $x55)))
 (let (($x57 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x204 (and $x57 $x12)))
 (let (($x76 (and $x379 $x204)))
 (let (($x370 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x150 (and $x370 $x76)))
 (let (($x249 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x327)))
 (let (($x62 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x48 $x249)))))))
 (let (($x6 (bvugt ?x262 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x255 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x38)))
 (let (($x64 (=> (bvule ?x262 (bvsub (bvadd ?x262 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x255 $x6)))))))
 (let (($x68 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x181 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x173)))
 (let (($x147 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x181 $x68)))))))
 (let (($x59 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x192 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x105 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x192)))
 (let (($x225 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x105 $x59)))))))
 (let (($x117 (and $x225 $x147)))
 (let (($x125 (and $x117 $x64)))
 (let (($x126 (and $x125 $x62)))
 (let (($x61 (and $x126 $x150)))
 (let (($x268 (=> $x61 $x279)))
 (not $x268)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x386 (bvmul (_ bv4294967295 32) ?x325)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x118 (bvadd ?x90 ?x386)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x319 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x319 (_ bv3 32))))
 (let ((?x382 (concat (select input.dst.llvm-mem ?x6) (concat ?x283 ?x381))))
 (let ((?x358 (bvmul (_ bv4294967295 32) ?x382)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x104 (concat ?x308 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x249 (bvadd ?x88 (_ bv3 32))))
 (let ((?x374 (concat (select input.dst.llvm-mem ?x249) (concat ?x189 ?x104))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x357 (concat ?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x68 (bvadd ?x287 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x68) (concat ?x338 ?x357))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x369)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x259)))
 (let ((?x17 (bvadd (bvadd (bvadd ?x99 ?x16) ?x374) ?x358)))
 (let (($x297 (= ?x17 ?x118)))
 (let (($x185 (= $x297 true)))
 (let (($x156 (= $x185 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x296 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x373 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x227 (ite $x373 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x227 (_ bv1 32))))
 (let (($x34 (=> $x61 $x296)))
 (let (($x74 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x367 (= $x61 $x74)))
 (let (($x307 (= false false)))
 (let (($x375 (= ?x227 (_ bv0 32))))
 (let (($x150 (=> $x375 $x307)))
 (let (($x204 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x76 (= $x375 $x204)))
 (let (($x323 (and (and (and $x76 $x150) $x367) $x34)))
 (let (($x190 (= $x323 true)))
 (let (($x154 (= ?x325 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x135 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x135 (_ bv1 32))))
 (let (($x260 (=> $x324 $x154)))
 (let (($x194 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x345 (= $x324 $x194)))
 (let (($x342 (= ?x135 (_ bv0 32))))
 (let (($x270 (=> $x342 $x307)))
 (let (($x215 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x264 (= $x342 $x215)))
 (let (($x344 (and (and (and $x264 $x270) $x345) $x260)))
 (let (($x337 (= $x344 true)))
 (let (($x311 (= ?x90 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x276 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x140 (ite $x276 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x140 (_ bv1 32))))
 (let (($x70 (=> $x108 $x311)))
 (let (($x43 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x108 $x43)))
 (let (($x200 (= ?x140 (_ bv0 32))))
 (let (($x301 (=> $x200 $x307)))
 (let (($x85 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x141 (= $x200 $x85)))
 (let (($x274 (and (and (and $x141 $x301) $x343) $x70)))
 (let (($x100 (= $x274 true)))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x322 (= ?x177 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x241 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x299 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x299 (_ bv1 32))))
 (let (($x178 (=> $x328 $x322)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x166 (= $x328 $x143)))
 (let (($x203 (= ?x299 (_ bv0 32))))
 (let (($x318 (=> $x203 $x307)))
 (let (($x321 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x65 (= $x203 $x321)))
 (let (($x92 (and (and (and $x65 $x318) $x166) $x178)))
 (let (($x40 (= $x92 true)))
 (let (($x106 (forall ((input.ind-%var3190X (_ BitVec 32)) )(let (($x300 (input.spec-%var-m-0.0.1 input.ind-%var3190X)))
 (= $x300 (and (bvule (_ bv0 32) input.ind-%var3190X) (bvult input.ind-%var3190X (_ bv100 32))))))
 ))
 (let (($x310 (forall ((input.ind-%var3191X (_ BitVec 32)) )(let ((?x364 (bvadd (bvmul input.ind-%var3191X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x110))))
 (let ((?x356 (input.spec-%var-m-0.1.1 input.ind-%var3191X)))
 (let (($x300 (input.spec-%var-m-0.0.1 input.ind-%var3191X)))
 (=> $x300 (= ?x356 ?x298))))))))
 ))
 (let (($x29 (and $x310 $x106)))
 (let (($x191 (= $x29 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x365 (concat ?x132 (concat ?x303 (concat ?x383 ?x52)))))
 (let (($x197 (= ?x365 input.dst.llvm-%m)))
 (let (($x13 (= $x197 true)))
 (let (($x35 (= $x13 true)))
 (let (($x256 (= (bvand ?x319 (_ bv4294967292 32)) ?x319)))
 (let (($x7 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x222 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x122 (and true $x222)))
 (let (($x137 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x28 (and $x137 $x122)))
 (let (($x292 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x319 (bvsub ?x319 (_ bv8 32))) (bvult ?x319 (bvsub ?x319 (_ bv8 32))))))
 (let (($x109 (and (and (and true $x292) $x28) $x7)))
 (let (($x334 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x230 (and true $x334)))
 (let (($x146 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x271 (and $x146 $x230)))
 (let (($x288 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x97 (and (and (and true $x146) $x288) $x271)))
 (let (($x161 (and (and $x97 $x109) $x256)))
 (let (($x277 (= $x161 true)))
 (let (($x350 (= $x277 true)))
 (let (($x82 (= $x350 true)))
 (let (($x14 (= $x97 true)))
 (let (($x78 (= $x14 true)))
 (let (($x237 (= $x78 true)))
 (let (($x245 (and $x109 $x256)))
 (let (($x114 (= $x245 true)))
 (let (($x127 (= $x114 true)))
 (let (($x111 (= $x127 true)))
 (let ((?x231 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x31 (= (_ bv0 32) ?x231)))
 (let ((?x258 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x221 $x210)))
 (let (($x320 (and $x240 $x31)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x294 $x320)))
 (let (($x326 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x326)))))))
 (let (($x251 (and $x33 $x199)))
 (let (($x167 (= $x251 true)))
 (let (($x116 (= $x167 true)))
 (let (($x198 (= $x116 true)))
 (let (($x224 (and $x198 $x111)))
 (let (($x180 (and $x224 $x237)))
 (let (($x366 (and $x180 $x82)))
 (let (($x211 (and $x366 $x35)))
 (let (($x67 (and $x211 $x191)))
 (let (($x15 (and $x67 $x40)))
 (let (($x69 (and $x15 $x100)))
 (let (($x55 (and $x69 $x337)))
 (let (($x348 (and $x55 $x190)))
 (let (($x234 (and $x324 $x375)))
 (let (($x333 (and $x108 $x234)))
 (let (($x158 (and $x203 $x333)))
 (let (($x107 (and $x158 $x348)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x46 (and $x182 $x107)))
 (let (($x363 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x86 (and $x363 $x46)))
 (let (($x359 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x155 (and $x359 $x86)))
 (let (($x378 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x91 (and $x378 $x155)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x361 (and $x159 $x91)))
 (let (($x148 (and $x307 $x361)))
 (let (($x54 (= ?x177 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x115 (and $x54 $x148)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x149 $x115)))
 (let (($x362 (and $x307 $x336)))
 (let (($x129 (= ?x90 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x176 (and $x129 $x362)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x313 (and $x157 $x176)))
 (let (($x89 (and $x307 $x313)))
 (let (($x183 (= ?x325 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x329 (and $x183 $x89)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x63 (and $x360 $x329)))
 (let (($x317 (and $x307 $x63)))
 (let (($x387 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x165 (and $x387 $x317)))
 (let (($x330 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x23 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x330)))))))
 (let (($x267 (bvugt ?x319 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x289 (=> (bvule ?x319 (bvsub (bvadd ?x319 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x267)))))))
 (let (($x142 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x304 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x295 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x304)))))))
 (let (($x19 (and $x295 $x262)))
 (let (($x257 (and $x19 $x289)))
 (let (($x229 (and $x257 $x23)))
 (let (($x42 (and $x229 $x165)))
 (let (($x168 (=> $x42 $x156)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x325 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x386 (bvmul (_ bv4294967295 32) ?x325)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x118 (bvadd ?x90 ?x386)))
 (let ((?x213 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x213 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x283 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x319 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x6 (bvadd ?x319 (_ bv3 32))))
 (let ((?x382 (concat (select input.dst.llvm-mem ?x6) (concat ?x283 ?x381))))
 (let ((?x358 (bvmul (_ bv4294967295 32) ?x382)))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x104 (concat ?x308 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x249 (bvadd ?x88 (_ bv3 32))))
 (let ((?x374 (concat (select input.dst.llvm-mem ?x249) (concat ?x189 ?x104))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x357 (concat ?x39 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x338 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x68 (bvadd ?x287 (_ bv3 32))))
 (let ((?x16 (concat (select input.dst.llvm-mem ?x68) (concat ?x338 ?x357))))
 (let ((?x369 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x369)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x259)))
 (let ((?x17 (bvadd (bvadd (bvadd ?x99 ?x16) ?x374) ?x358)))
 (let (($x297 (= ?x17 ?x118)))
 (let (($x185 (= $x297 true)))
 (let (($x156 (= $x185 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x296 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x373 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x227 (ite $x373 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x227 (_ bv1 32))))
 (let (($x34 (=> $x61 $x296)))
 (let (($x74 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x367 (= $x61 $x74)))
 (let (($x307 (= false false)))
 (let (($x375 (= ?x227 (_ bv0 32))))
 (let (($x150 (=> $x375 $x307)))
 (let (($x204 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x76 (= $x375 $x204)))
 (let (($x323 (and (and (and $x76 $x150) $x367) $x34)))
 (let (($x190 (= $x323 true)))
 (let (($x154 (= ?x325 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x135 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x324 (bvuge ?x135 (_ bv1 32))))
 (let (($x260 (=> $x324 $x154)))
 (let (($x194 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x345 (= $x324 $x194)))
 (let (($x342 (= ?x135 (_ bv0 32))))
 (let (($x270 (=> $x342 $x307)))
 (let (($x215 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x264 (= $x342 $x215)))
 (let (($x344 (and (and (and $x264 $x270) $x345) $x260)))
 (let (($x337 (= $x344 true)))
 (let (($x311 (= ?x90 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x276 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x140 (ite $x276 (_ bv1 32) (_ bv0 32))))
 (let (($x108 (bvuge ?x140 (_ bv1 32))))
 (let (($x70 (=> $x108 $x311)))
 (let (($x43 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x108 $x43)))
 (let (($x200 (= ?x140 (_ bv0 32))))
 (let (($x301 (=> $x200 $x307)))
 (let (($x85 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x141 (= $x200 $x85)))
 (let (($x274 (and (and (and $x141 $x301) $x343) $x70)))
 (let (($x100 (= $x274 true)))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x322 (= ?x177 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x241 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x299 (ite $x241 (_ bv1 32) (_ bv0 32))))
 (let (($x328 (bvuge ?x299 (_ bv1 32))))
 (let (($x178 (=> $x328 $x322)))
 (let (($x143 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x166 (= $x328 $x143)))
 (let (($x203 (= ?x299 (_ bv0 32))))
 (let (($x318 (=> $x203 $x307)))
 (let (($x321 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x65 (= $x203 $x321)))
 (let (($x92 (and (and (and $x65 $x318) $x166) $x178)))
 (let (($x40 (= $x92 true)))
 (let (($x106 (forall ((input.ind-%var3190X (_ BitVec 32)) )(let (($x300 (input.spec-%var-m-0.0.1 input.ind-%var3190X)))
 (= $x300 (and (bvule (_ bv0 32) input.ind-%var3190X) (bvult input.ind-%var3190X (_ bv100 32))))))
 ))
 (let (($x310 (forall ((input.ind-%var3191X (_ BitVec 32)) )(let ((?x364 (bvadd (bvmul input.ind-%var3191X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv1 32))) (select input.dst.llvm-mem ?x364))))
 (let ((?x298 (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x364 (_ bv2 32))) ?x110))))
 (let ((?x356 (input.spec-%var-m-0.1.1 input.ind-%var3191X)))
 (let (($x300 (input.spec-%var-m-0.0.1 input.ind-%var3191X)))
 (=> $x300 (= ?x356 ?x298))))))))
 ))
 (let (($x29 (and $x310 $x106)))
 (let (($x191 (= $x29 true)))
 (let ((?x52 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x383 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x365 (concat ?x132 (concat ?x303 (concat ?x383 ?x52)))))
 (let (($x197 (= ?x365 input.dst.llvm-%m)))
 (let (($x13 (= $x197 true)))
 (let (($x35 (= $x13 true)))
 (let (($x256 (= (bvand ?x319 (_ bv4294967292 32)) ?x319)))
 (let (($x7 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x222 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x122 (and true $x222)))
 (let (($x137 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x28 (and $x137 $x122)))
 (let (($x292 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x319 (bvsub ?x319 (_ bv8 32))) (bvult ?x319 (bvsub ?x319 (_ bv8 32))))))
 (let (($x109 (and (and (and true $x292) $x28) $x7)))
 (let (($x334 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x230 (and true $x334)))
 (let (($x146 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x271 (and $x146 $x230)))
 (let (($x288 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x97 (and (and (and true $x146) $x288) $x271)))
 (let (($x161 (and (and $x97 $x109) $x256)))
 (let (($x277 (= $x161 true)))
 (let (($x350 (= $x277 true)))
 (let (($x82 (= $x350 true)))
 (let (($x14 (= $x97 true)))
 (let (($x78 (= $x14 true)))
 (let (($x237 (= $x78 true)))
 (let (($x245 (and $x109 $x256)))
 (let (($x114 (= $x245 true)))
 (let (($x127 (= $x114 true)))
 (let (($x111 (= $x127 true)))
 (let ((?x231 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x31 (= (_ bv0 32) ?x231)))
 (let ((?x258 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x240 (and $x221 $x210)))
 (let (($x320 (and $x240 $x31)))
 (let (($x294 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x199 (and $x294 $x320)))
 (let (($x326 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x214 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x214 $x326)))))))
 (let (($x251 (and $x33 $x199)))
 (let (($x167 (= $x251 true)))
 (let (($x116 (= $x167 true)))
 (let (($x198 (= $x116 true)))
 (let (($x224 (and $x198 $x111)))
 (let (($x180 (and $x224 $x237)))
 (let (($x366 (and $x180 $x82)))
 (let (($x211 (and $x366 $x35)))
 (let (($x67 (and $x211 $x191)))
 (let (($x15 (and $x67 $x40)))
 (let (($x69 (and $x15 $x100)))
 (let (($x55 (and $x69 $x337)))
 (let (($x348 (and $x55 $x190)))
 (let (($x234 (and $x324 $x375)))
 (let (($x333 (and $x108 $x234)))
 (let (($x158 (and $x203 $x333)))
 (let (($x107 (and $x158 $x348)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x46 (and $x182 $x107)))
 (let (($x363 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x86 (and $x363 $x46)))
 (let (($x359 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x155 (and $x359 $x86)))
 (let (($x378 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x91 (and $x378 $x155)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x361 (and $x159 $x91)))
 (let (($x148 (and $x307 $x361)))
 (let (($x54 (= ?x177 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x115 (and $x54 $x148)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x149 $x115)))
 (let (($x362 (and $x307 $x336)))
 (let (($x129 (= ?x90 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x176 (and $x129 $x362)))
 (let (($x157 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x313 (and $x157 $x176)))
 (let (($x89 (and $x307 $x313)))
 (let (($x183 (= ?x325 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x329 (and $x183 $x89)))
 (let (($x360 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x63 (and $x360 $x329)))
 (let (($x317 (and $x307 $x63)))
 (let (($x387 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x165 (and $x387 $x317)))
 (let (($x330 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x249)))
 (let (($x23 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x330)))))))
 (let (($x267 (bvugt ?x319 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x223 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x6)))
 (let (($x289 (=> (bvule ?x319 (bvsub (bvadd ?x319 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x223 $x267)))))))
 (let (($x142 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x83 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x262 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x83 $x142)))))))
 (let (($x304 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x172 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x295 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x172 $x304)))))))
 (let (($x19 (and $x295 $x262)))
 (let (($x257 (and $x19 $x289)))
 (let (($x229 (and $x257 $x23)))
 (let (($x42 (and $x229 $x165)))
 (let (($x168 (=> $x42 $x156)))
 (not $x168)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x278 (bvadd ?x177 ?x47)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x174 (concat ?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x38 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x267 (bvadd ?x38 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x267) (concat ?x113 ?x174))))
 (let ((?x263 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x184 (concat ?x235 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x330 (bvadd ?x291 (_ bv3 32))))
 (let ((?x37 (concat (select input.dst.llvm-mem ?x330) (concat ?x302 ?x184))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x17 (concat ?x358 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x142 (bvadd ?x134 (_ bv3 32))))
 (let ((?x156 (concat (select input.dst.llvm-mem ?x142) (concat ?x118 ?x17))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x286)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x213)))
 (let ((?x128 (bvadd (bvadd (bvadd ?x381 ?x156) ?x37) ?x263)))
 (let (($x175 (= ?x128 ?x278)))
 (let (($x60 (= $x175 true)))
 (let (($x27 (= $x60 true)))
 (let (($x123 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x186 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x380 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x380 (_ bv1 32))))
 (let (($x266 (=> $x36 $x123)))
 (let (($x312 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x144 (= $x36 $x312)))
 (let (($x325 (= false false)))
 (let (($x329 (= ?x380 (_ bv0 32))))
 (let (($x42 (=> $x329 $x325)))
 (let (($x317 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x165 (= $x329 $x317)))
 (let (($x259 (and (and (and $x165 $x42) $x144) $x266)))
 (let (($x99 (= $x259 true)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x148 (= ?x90 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x333 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x158 (ite $x333 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x158 (_ bv1 32))))
 (let (($x115 (=> $x86 $x148)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x91 (= $x86 $x155)))
 (let (($x169 (= ?x158 (_ bv0 32))))
 (let (($x46 (=> $x169 $x325)))
 (let (($x348 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x107 (= $x169 $x348)))
 (let (($x176 (and (and (and $x107 $x46) $x91) $x115)))
 (let (($x313 (= $x176 true)))
 (let (($x74 (= ?x177 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x227 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x375 (ite $x227 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x375 (_ bv1 32))))
 (let (($x367 (=> $x234 $x74)))
 (let (($x150 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x261 (= $x234 $x150)))
 (let (($x337 (= ?x375 (_ bv0 32))))
 (let (($x76 (=> $x337 $x325)))
 (let (($x12 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x204 (= $x337 $x12)))
 (let (($x296 (and (and (and $x204 $x76) $x261) $x367)))
 (let (($x34 (= $x296 true)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x194 (= ?x285 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x324 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x324 (_ bv1 32))))
 (let (($x345 (=> $x215 $x194)))
 (let (($x264 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x270 (= $x215 $x264)))
 (let (($x373 (= ?x324 (_ bv0 32))))
 (let (($x236 (=> $x373 $x325)))
 (let (($x69 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x342 (= $x373 $x69)))
 (let (($x154 (and (and (and $x342 $x236) $x270) $x345)))
 (let (($x260 (= $x154 true)))
 (let (($x232 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var3222X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var3222X) (bvult input.ind-%var3222X (_ bv100 32))))))
 ))
 (let (($x92 (forall ((input.ind-%var3223X (_ BitVec 32)) )(let ((?x377 (bvadd (bvmul input.ind-%var3223X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x318))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3223X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var3223X)))
 (=> $x275 (= ?x384 ?x160))))))))
 ))
 (let (($x311 (and $x92 $x232)))
 (let (($x70 (= $x311 true)))
 (let ((?x365 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x364 (concat ?x164 (concat ?x370 (concat ?x13 ?x365)))))
 (let (($x209 (= ?x364 input.dst.llvm-%m)))
 (let (($x21 (= $x209 true)))
 (let (($x152 (= $x21 true)))
 (let (($x293 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x127 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x256 (and true $x207)))
 (let (($x28 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x245 (and $x28 $x256)))
 (let (($x290 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv8 32))) (bvult ?x38 (bvsub ?x38 (_ bv8 32))))))
 (let (($x32 (and (and (and true $x290) $x245) $x127)))
 (let (($x237 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x180 (and true $x237)))
 (let (($x170 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (and $x170 $x180)))
 (let (($x230 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x350 (and (and (and true $x170) $x230) $x193)))
 (let (($x372 (and (and $x350 $x32) $x293)))
 (let (($x303 (= $x372 true)))
 (let (($x233 (= $x303 true)))
 (let (($x383 (= $x233 true)))
 (let (($x82 (= $x350 true)))
 (let (($x366 (= $x82 true)))
 (let (($x226 (= $x366 true)))
 (let (($x205 (and $x32 $x293)))
 (let (($x309 (= $x205 true)))
 (let (($x171 (= $x309 true)))
 (let (($x219 (= $x171 true)))
 (let ((?x349 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x351 (= (_ bv0 32) ?x349)))
 (let ((?x167 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x251 $x116)))
 (let (($x10 (and $x198 $x351)))
 (let (($x340 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x340 $x10)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x221 $x258)))))))
 (let (($x292 (and $x199 $x49)))
 (let (($x66 (= $x292 true)))
 (let (($x244 (= $x66 true)))
 (let (($x151 (= $x244 true)))
 (let (($x288 (and $x151 $x219)))
 (let (($x353 (and $x288 $x226)))
 (let (($x52 (and $x353 $x383)))
 (let (($x280 (and $x52 $x152)))
 (let (($x274 (and $x280 $x70)))
 (let (($x344 (and $x274 $x260)))
 (let (($x323 (and $x344 $x34)))
 (let (($x89 (and $x323 $x313)))
 (let (($x77 (and $x89 $x99)))
 (let (($x214 (and $x169 $x36)))
 (let (($x326 (and $x234 $x214)))
 (let (($x352 (and $x373 $x326)))
 (let (($x51 (and $x352 $x77)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x338 (and $x140 $x51)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x282 (and $x203 $x338)))
 (let (($x241 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x39 (and $x241 $x282)))
 (let (($x228 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x9 (and $x228 $x39)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x357 (and $x265 $x9)))
 (let (($x216 (and $x325 $x357)))
 (let (($x8 (= ?x285 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x16 (and $x8 $x216)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x112 (and $x159 $x16)))
 (let (($x53 (and $x325 $x112)))
 (let (($x54 (= ?x177 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x54 $x53)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x189 (and $x149 $x347)))
 (let (($x268 (and $x325 $x189)))
 (let (($x129 (= ?x90 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x308 (and $x129 $x268)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x279 (and $x246 $x308)))
 (let (($x104 (and $x325 $x279)))
 (let (($x272 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x368 (and $x272 $x104)))
 (let (($x239 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x57 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x239)))))))
 (let (($x133 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x327 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x133)))))))
 (let (($x11 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x250 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x173 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x250)))))))
 (let (($x181 (and $x173 $x319)))
 (let (($x255 (and $x181 $x327)))
 (let (($x48 (and $x255 $x57)))
 (let (($x374 (and $x48 $x368)))
 (let (($x72 (=> $x374 $x27)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x278 (bvadd ?x177 ?x47)))
 (let ((?x5 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x174 (concat ?x5 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x38 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x267 (bvadd ?x38 (_ bv3 32))))
 (let ((?x314 (concat (select input.dst.llvm-mem ?x267) (concat ?x113 ?x174))))
 (let ((?x263 (bvmul (_ bv4294967295 32) ?x314)))
 (let ((?x235 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x184 (concat ?x235 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x302 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x330 (bvadd ?x291 (_ bv3 32))))
 (let ((?x37 (concat (select input.dst.llvm-mem ?x330) (concat ?x302 ?x184))))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x17 (concat ?x358 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x118 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x142 (bvadd ?x134 (_ bv3 32))))
 (let ((?x156 (concat (select input.dst.llvm-mem ?x142) (concat ?x118 ?x17))))
 (let ((?x286 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x286)))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x213)))
 (let ((?x128 (bvadd (bvadd (bvadd ?x381 ?x156) ?x37) ?x263)))
 (let (($x175 (= ?x128 ?x278)))
 (let (($x60 (= $x175 true)))
 (let (($x27 (= $x60 true)))
 (let (($x123 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x186 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x380 (ite $x186 (_ bv1 32) (_ bv0 32))))
 (let (($x36 (bvuge ?x380 (_ bv1 32))))
 (let (($x266 (=> $x36 $x123)))
 (let (($x312 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x144 (= $x36 $x312)))
 (let (($x325 (= false false)))
 (let (($x329 (= ?x380 (_ bv0 32))))
 (let (($x42 (=> $x329 $x325)))
 (let (($x317 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x165 (= $x329 $x317)))
 (let (($x259 (and (and (and $x165 $x42) $x144) $x266)))
 (let (($x99 (= $x259 true)))
 (let ((?x90 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x148 (= ?x90 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x333 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x158 (ite $x333 (_ bv1 32) (_ bv0 32))))
 (let (($x86 (bvuge ?x158 (_ bv1 32))))
 (let (($x115 (=> $x86 $x148)))
 (let (($x155 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x91 (= $x86 $x155)))
 (let (($x169 (= ?x158 (_ bv0 32))))
 (let (($x46 (=> $x169 $x325)))
 (let (($x348 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x107 (= $x169 $x348)))
 (let (($x176 (and (and (and $x107 $x46) $x91) $x115)))
 (let (($x313 (= $x176 true)))
 (let (($x74 (= ?x177 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x227 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x375 (ite $x227 (_ bv1 32) (_ bv0 32))))
 (let (($x234 (bvuge ?x375 (_ bv1 32))))
 (let (($x367 (=> $x234 $x74)))
 (let (($x150 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x261 (= $x234 $x150)))
 (let (($x337 (= ?x375 (_ bv0 32))))
 (let (($x76 (=> $x337 $x325)))
 (let (($x12 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x204 (= $x337 $x12)))
 (let (($x296 (and (and (and $x204 $x76) $x261) $x367)))
 (let (($x34 (= $x296 true)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x194 (= ?x285 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x108 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x324 (ite $x108 (_ bv1 32) (_ bv0 32))))
 (let (($x215 (bvuge ?x324 (_ bv1 32))))
 (let (($x345 (=> $x215 $x194)))
 (let (($x264 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x270 (= $x215 $x264)))
 (let (($x373 (= ?x324 (_ bv0 32))))
 (let (($x236 (=> $x373 $x325)))
 (let (($x69 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x342 (= $x373 $x69)))
 (let (($x154 (and (and (and $x342 $x236) $x270) $x345)))
 (let (($x260 (= $x154 true)))
 (let (($x232 (forall ((input.ind-%var3222X (_ BitVec 32)) )(let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var3222X)))
 (= $x275 (and (bvule (_ bv0 32) input.ind-%var3222X) (bvult input.ind-%var3222X (_ bv100 32))))))
 ))
 (let (($x92 (forall ((input.ind-%var3223X (_ BitVec 32)) )(let ((?x377 (bvadd (bvmul input.ind-%var3223X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv1 32))) (select input.dst.llvm-mem ?x377))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x377 (_ bv2 32))) ?x318))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3223X)))
 (let (($x275 (input.spec-%var-m-0.0.1 input.ind-%var3223X)))
 (=> $x275 (= ?x384 ?x160))))))))
 ))
 (let (($x311 (and $x92 $x232)))
 (let (($x70 (= $x311 true)))
 (let ((?x365 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x164 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x364 (concat ?x164 (concat ?x370 (concat ?x13 ?x365)))))
 (let (($x209 (= ?x364 input.dst.llvm-%m)))
 (let (($x21 (= $x209 true)))
 (let (($x152 (= $x21 true)))
 (let (($x293 (= (bvand ?x38 (_ bv4294967292 32)) ?x38)))
 (let (($x127 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x207 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x256 (and true $x207)))
 (let (($x28 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x245 (and $x28 $x256)))
 (let (($x290 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x38 (bvsub ?x38 (_ bv8 32))) (bvult ?x38 (bvsub ?x38 (_ bv8 32))))))
 (let (($x32 (and (and (and true $x290) $x245) $x127)))
 (let (($x237 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x180 (and true $x237)))
 (let (($x170 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x193 (and $x170 $x180)))
 (let (($x230 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x350 (and (and (and true $x170) $x230) $x193)))
 (let (($x372 (and (and $x350 $x32) $x293)))
 (let (($x303 (= $x372 true)))
 (let (($x233 (= $x303 true)))
 (let (($x383 (= $x233 true)))
 (let (($x82 (= $x350 true)))
 (let (($x366 (= $x82 true)))
 (let (($x226 (= $x366 true)))
 (let (($x205 (and $x32 $x293)))
 (let (($x309 (= $x205 true)))
 (let (($x171 (= $x309 true)))
 (let (($x219 (= $x171 true)))
 (let ((?x349 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x351 (= (_ bv0 32) ?x349)))
 (let ((?x167 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x167)))
 (let (($x251 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x198 (and $x251 $x116)))
 (let (($x10 (and $x198 $x351)))
 (let (($x340 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x49 (and $x340 $x10)))
 (let (($x258 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x199 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x221 $x258)))))))
 (let (($x292 (and $x199 $x49)))
 (let (($x66 (= $x292 true)))
 (let (($x244 (= $x66 true)))
 (let (($x151 (= $x244 true)))
 (let (($x288 (and $x151 $x219)))
 (let (($x353 (and $x288 $x226)))
 (let (($x52 (and $x353 $x383)))
 (let (($x280 (and $x52 $x152)))
 (let (($x274 (and $x280 $x70)))
 (let (($x344 (and $x274 $x260)))
 (let (($x323 (and $x344 $x34)))
 (let (($x89 (and $x323 $x313)))
 (let (($x77 (and $x89 $x99)))
 (let (($x214 (and $x169 $x36)))
 (let (($x326 (and $x234 $x214)))
 (let (($x352 (and $x373 $x326)))
 (let (($x51 (and $x352 $x77)))
 (let (($x140 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x338 (and $x140 $x51)))
 (let (($x203 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x282 (and $x203 $x338)))
 (let (($x241 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x39 (and $x241 $x282)))
 (let (($x228 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x9 (and $x228 $x39)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x357 (and $x265 $x9)))
 (let (($x216 (and $x325 $x357)))
 (let (($x8 (= ?x285 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x16 (and $x8 $x216)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x112 (and $x159 $x16)))
 (let (($x53 (and $x325 $x112)))
 (let (($x54 (= ?x177 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x347 (and $x54 $x53)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x189 (and $x149 $x347)))
 (let (($x268 (and $x325 $x189)))
 (let (($x129 (= ?x90 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x308 (and $x129 $x268)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x279 (and $x246 $x308)))
 (let (($x104 (and $x325 $x279)))
 (let (($x272 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x368 (and $x272 $x104)))
 (let (($x239 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x330)))
 (let (($x57 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x103 $x239)))))))
 (let (($x133 (bvugt ?x38 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x267)))
 (let (($x327 (=> (bvule ?x38 (bvsub (bvadd ?x38 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x133)))))))
 (let (($x11 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x142)))
 (let (($x319 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x22 $x11)))))))
 (let (($x250 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x304 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x95 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x304)))
 (let (($x173 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x95 $x250)))))))
 (let (($x181 (and $x173 $x319)))
 (let (($x255 (and $x181 $x327)))
 (let (($x48 (and $x255 $x57)))
 (let (($x374 (and $x48 $x368)))
 (let (($x72 (=> $x374 $x27)))
 (not $x72))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x25 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x133 (bvadd ?x6 (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x133) (concat ?x102 ?x25))))
 (let ((?x310 (bvmul (_ bv4294967295 32) ?x298)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x138 (concat ?x179 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x239 (bvadd ?x88 (_ bv3 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem ?x239) (concat ?x212 ?x138))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x128 (concat ?x263 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x11 (bvadd ?x206 (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x11) (concat ?x175 ?x128))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x269)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x5)))
 (let ((?x15 (bvadd (bvadd (bvadd ?x174 ?x72) ?x200) ?x310)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x141 (= ?x285 ?x15)))
 (let (($x301 (= $x141 true)))
 (let (($x29 (= $x301 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x354 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x320 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x320 (_ bv1 32))))
 (let (($x306 (=> $x374 $x354)))
 (let (($x315 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x283 (= $x374 $x315)))
 (let (($x90 (= false false)))
 (let (($x294 (= ?x320 (_ bv0 32))))
 (let (($x368 (=> $x294 $x90)))
 (let (($x279 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x104 (= $x294 $x279)))
 (let (($x213 (and (and (and $x104 $x368) $x283) $x306)))
 (let (($x381 (= $x213 true)))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x216 (= ?x177 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x326 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x352 (ite $x326 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x352 (_ bv1 32))))
 (let (($x16 (=> $x282 $x216)))
 (let (($x39 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x9 (= $x282 $x39)))
 (let (($x33 (= ?x352 (_ bv0 32))))
 (let (($x338 (=> $x33 $x90)))
 (let (($x77 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x51 (= $x33 $x77)))
 (let (($x347 (and (and (and $x51 $x338) $x9) $x16)))
 (let (($x189 (= $x347 true)))
 (let (($x312 (= ?x285 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x380 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x36 (ite $x380 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x36 (_ bv1 32))))
 (let (($x144 (=> $x214 $x312)))
 (let (($x165 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x42 (= $x214 $x165)))
 (let (($x313 (= ?x36 (_ bv0 32))))
 (let (($x317 (=> $x313 $x90)))
 (let (($x329 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x63 (= $x313 $x329)))
 (let (($x123 (and (and (and $x63 $x317) $x42) $x144)))
 (let (($x266 (= $x123 true)))
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x155 (= ?x363 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x234 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x169 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x169 (_ bv1 32))))
 (let (($x91 (=> $x107 $x155)))
 (let (($x46 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x336 (= $x107 $x46)))
 (let (($x186 (= ?x169 (_ bv0 32))))
 (let (($x348 (=> $x186 $x90)))
 (let (($x323 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x190 (= $x186 $x323)))
 (let (($x148 (and (and (and $x190 $x348) $x336) $x91)))
 (let (($x115 (= $x148 true)))
 (let (($x61 (forall ((input.ind-%var3254X (_ BitVec 32)) )(let (($x333 (input.spec-%var-m-0.0.1 input.ind-%var3254X)))
 (= $x333 (and (bvule (_ bv0 32) input.ind-%var3254X) (bvult input.ind-%var3254X (_ bv100 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var3255X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var3255X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x236))))
 (let ((?x162 (input.spec-%var-m-0.1.1 input.ind-%var3255X)))
 (let (($x333 (input.spec-%var-m-0.0.1 input.ind-%var3255X)))
 (=> $x333 (= ?x162 ?x87))))))))
 ))
 (let (($x74 (and $x154 $x61)))
 (let (($x367 (= $x74 true)))
 (let ((?x364 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x67 (concat ?x387 (concat ?x21 ?x364)))))
 (let (($x166 (= ?x377 input.dst.llvm-%m)))
 (let (($x252 (= $x166 true)))
 (let (($x248 (= $x252 true)))
 (let (($x161 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x171 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x293 (and true $x146)))
 (let (($x245 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x205 (and $x245 $x293)))
 (let (($x109 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x331 (and (and (and true $x109) $x205) $x171)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x353 (and true $x226)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and $x97 $x353)))
 (let (($x180 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x233 (and (and (and true $x97) $x180) $x132)))
 (let (($x211 (and (and $x233 $x331) $x161)))
 (let (($x370 (= $x211 true)))
 (let (($x197 (= $x370 true)))
 (let (($x13 (= $x197 true)))
 (let (($x383 (= $x233 true)))
 (let (($x52 (= $x383 true)))
 (let (($x281 (= $x52 true)))
 (let (($x84 (and $x331 $x161)))
 (let (($x119 (= $x84 true)))
 (let (($x218 (= $x119 true)))
 (let (($x334 (= $x218 true)))
 (let ((?x385 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x137 (= (_ bv0 32) ?x385)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x292 $x244)))
 (let (($x153 (and $x151 $x137)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x31 $x153)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x251 $x167)))))))
 (let (($x290 (and $x49 $x98)))
 (let (($x111 (= $x290 true)))
 (let (($x222 (= $x111 true)))
 (let (($x122 (= $x222 true)))
 (let (($x230 (and $x122 $x334)))
 (let (($x356 (and $x230 $x281)))
 (let (($x365 (and $x356 $x13)))
 (let (($x328 (and $x365 $x248)))
 (let (($x296 (and $x328 $x367)))
 (let (($x176 (and $x296 $x115)))
 (let (($x259 (and $x176 $x266)))
 (let (($x268 (and $x259 $x189)))
 (let (($x185 (and $x268 $x381)))
 (let (($x221 (and $x33 $x294)))
 (let (($x258 (and $x214 $x221)))
 (let (($x210 (and $x186 $x258)))
 (let (($x386 (and $x210 $x185)))
 (let (($x375 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x118 (and $x375 $x386)))
 (let (($x373 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x382 (and $x373 $x118)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x358 (and $x108 $x382)))
 (let (($x276 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x58 (and $x276 $x358)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x17 (and $x299 $x58)))
 (let (($x297 (and $x90 $x17)))
 (let (($x182 (= ?x363 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x156 (and $x182 $x297)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x201 (and $x265 $x156)))
 (let (($x101 (and $x90 $x201)))
 (let (($x8 (= ?x285 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x355 (and $x8 $x101)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x302 (and $x159 $x355)))
 (let (($x120 (and $x90 $x302)))
 (let (($x54 (= ?x177 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x235 (and $x54 $x120)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x168 (and $x44 $x235)))
 (let (($x184 (and $x90 $x168)))
 (let (($x157 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x130 (and $x157 $x184)))
 (let (($x126 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x360 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x126)))))))
 (let (($x125 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x249 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x117 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x38 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x208 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x250 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x68 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x208)))))))
 (let (($x83 (and $x68 $x38)))
 (let (($x223 (and $x83 $x249)))
 (let (($x243 (and $x223 $x360)))
 (let (($x37 (and $x243 $x130)))
 (let (($x379 (=> $x37 $x29)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x94 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x25 (concat ?x94 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x6 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x133 (bvadd ?x6 (_ bv3 32))))
 (let ((?x298 (concat (select input.dst.llvm-mem ?x133) (concat ?x102 ?x25))))
 (let ((?x310 (bvmul (_ bv4294967295 32) ?x298)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x138 (concat ?x179 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x212 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x239 (bvadd ?x88 (_ bv3 32))))
 (let ((?x200 (concat (select input.dst.llvm-mem ?x239) (concat ?x212 ?x138))))
 (let ((?x263 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x128 (concat ?x263 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x175 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x11 (bvadd ?x206 (_ bv3 32))))
 (let ((?x72 (concat (select input.dst.llvm-mem ?x11) (concat ?x175 ?x128))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x5 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x269)))
 (let ((?x174 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x5)))
 (let ((?x15 (bvadd (bvadd (bvadd ?x174 ?x72) ?x200) ?x310)))
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x141 (= ?x285 ?x15)))
 (let (($x301 (= $x141 true)))
 (let (($x29 (= $x301 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x354 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x163 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x320 (ite $x163 (_ bv1 32) (_ bv0 32))))
 (let (($x374 (bvuge ?x320 (_ bv1 32))))
 (let (($x306 (=> $x374 $x354)))
 (let (($x315 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x283 (= $x374 $x315)))
 (let (($x90 (= false false)))
 (let (($x294 (= ?x320 (_ bv0 32))))
 (let (($x368 (=> $x294 $x90)))
 (let (($x279 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x104 (= $x294 $x279)))
 (let (($x213 (and (and (and $x104 $x368) $x283) $x306)))
 (let (($x381 (= $x213 true)))
 (let ((?x177 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x216 (= ?x177 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x326 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x352 (ite $x326 (_ bv1 32) (_ bv0 32))))
 (let (($x282 (bvuge ?x352 (_ bv1 32))))
 (let (($x16 (=> $x282 $x216)))
 (let (($x39 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x9 (= $x282 $x39)))
 (let (($x33 (= ?x352 (_ bv0 32))))
 (let (($x338 (=> $x33 $x90)))
 (let (($x77 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x51 (= $x33 $x77)))
 (let (($x347 (and (and (and $x51 $x338) $x9) $x16)))
 (let (($x189 (= $x347 true)))
 (let (($x312 (= ?x285 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x380 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x36 (ite $x380 (_ bv1 32) (_ bv0 32))))
 (let (($x214 (bvuge ?x36 (_ bv1 32))))
 (let (($x144 (=> $x214 $x312)))
 (let (($x165 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x42 (= $x214 $x165)))
 (let (($x313 (= ?x36 (_ bv0 32))))
 (let (($x317 (=> $x313 $x90)))
 (let (($x329 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x63 (= $x313 $x329)))
 (let (($x123 (and (and (and $x63 $x317) $x42) $x144)))
 (let (($x266 (= $x123 true)))
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x155 (= ?x363 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x234 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x169 (ite $x234 (_ bv1 32) (_ bv0 32))))
 (let (($x107 (bvuge ?x169 (_ bv1 32))))
 (let (($x91 (=> $x107 $x155)))
 (let (($x46 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x336 (= $x107 $x46)))
 (let (($x186 (= ?x169 (_ bv0 32))))
 (let (($x348 (=> $x186 $x90)))
 (let (($x323 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x190 (= $x186 $x323)))
 (let (($x148 (and (and (and $x190 $x348) $x336) $x91)))
 (let (($x115 (= $x148 true)))
 (let (($x61 (forall ((input.ind-%var3254X (_ BitVec 32)) )(let (($x333 (input.spec-%var-m-0.0.1 input.ind-%var3254X)))
 (= $x333 (and (bvule (_ bv0 32) input.ind-%var3254X) (bvult input.ind-%var3254X (_ bv100 32))))))
 ))
 (let (($x154 (forall ((input.ind-%var3255X (_ BitVec 32)) )(let ((?x100 (bvadd (bvmul input.ind-%var3255X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x236 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv1 32))) (select input.dst.llvm-mem ?x100))))
 (let ((?x87 (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x100 (_ bv2 32))) ?x236))))
 (let ((?x162 (input.spec-%var-m-0.1.1 input.ind-%var3255X)))
 (let (($x333 (input.spec-%var-m-0.0.1 input.ind-%var3255X)))
 (=> $x333 (= ?x162 ?x87))))))))
 ))
 (let (($x74 (and $x154 $x61)))
 (let (($x367 (= $x74 true)))
 (let ((?x364 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x387 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x67 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x377 (concat ?x67 (concat ?x387 (concat ?x21 ?x364)))))
 (let (($x166 (= ?x377 input.dst.llvm-%m)))
 (let (($x252 (= $x166 true)))
 (let (($x248 (= $x252 true)))
 (let (($x161 (= (bvand ?x6 (_ bv4294967292 32)) ?x6)))
 (let (($x171 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x146 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x293 (and true $x146)))
 (let (($x245 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x205 (and $x245 $x293)))
 (let (($x109 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x6 (bvsub ?x6 (_ bv8 32))) (bvult ?x6 (bvsub ?x6 (_ bv8 32))))))
 (let (($x331 (and (and (and true $x109) $x205) $x171)))
 (let (($x226 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x353 (and true $x226)))
 (let (($x97 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x132 (and $x97 $x353)))
 (let (($x180 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x233 (and (and (and true $x97) $x180) $x132)))
 (let (($x211 (and (and $x233 $x331) $x161)))
 (let (($x370 (= $x211 true)))
 (let (($x197 (= $x370 true)))
 (let (($x13 (= $x197 true)))
 (let (($x383 (= $x233 true)))
 (let (($x52 (= $x383 true)))
 (let (($x281 (= $x52 true)))
 (let (($x84 (and $x331 $x161)))
 (let (($x119 (= $x84 true)))
 (let (($x218 (= $x119 true)))
 (let (($x334 (= $x218 true)))
 (let ((?x385 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x137 (= (_ bv0 32) ?x385)))
 (let ((?x66 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x244 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x66)))
 (let (($x292 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (and $x292 $x244)))
 (let (($x153 (and $x151 $x137)))
 (let (($x31 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x98 (and $x31 $x153)))
 (let (($x167 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x251 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x49 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x251 $x167)))))))
 (let (($x290 (and $x49 $x98)))
 (let (($x111 (= $x290 true)))
 (let (($x222 (= $x111 true)))
 (let (($x122 (= $x222 true)))
 (let (($x230 (and $x122 $x334)))
 (let (($x356 (and $x230 $x281)))
 (let (($x365 (and $x356 $x13)))
 (let (($x328 (and $x365 $x248)))
 (let (($x296 (and $x328 $x367)))
 (let (($x176 (and $x296 $x115)))
 (let (($x259 (and $x176 $x266)))
 (let (($x268 (and $x259 $x189)))
 (let (($x185 (and $x268 $x381)))
 (let (($x221 (and $x33 $x294)))
 (let (($x258 (and $x214 $x221)))
 (let (($x210 (and $x186 $x258)))
 (let (($x386 (and $x210 $x185)))
 (let (($x375 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x118 (and $x375 $x386)))
 (let (($x373 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x382 (and $x373 $x118)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x358 (and $x108 $x382)))
 (let (($x276 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x58 (and $x276 $x358)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x17 (and $x299 $x58)))
 (let (($x297 (and $x90 $x17)))
 (let (($x182 (= ?x363 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x156 (and $x182 $x297)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x201 (and $x265 $x156)))
 (let (($x101 (and $x90 $x201)))
 (let (($x8 (= ?x285 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x355 (and $x8 $x101)))
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x302 (and $x159 $x355)))
 (let (($x120 (and $x90 $x302)))
 (let (($x54 (= ?x177 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x235 (and $x54 $x120)))
 (let (($x44 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x168 (and $x44 $x235)))
 (let (($x184 (and $x90 $x168)))
 (let (($x157 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x130 (and $x157 $x184)))
 (let (($x126 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x239)))
 (let (($x360 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x62 $x126)))))))
 (let (($x125 (bvugt ?x6 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x133)))
 (let (($x249 (=> (bvule ?x6 (bvsub (bvadd ?x6 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x125)))))))
 (let (($x117 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x147 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x38 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x147 $x117)))))))
 (let (($x208 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x250 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x250)))
 (let (($x68 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x208)))))))
 (let (($x83 (and $x68 $x38)))
 (let (($x223 (and $x83 $x249)))
 (let (($x243 (and $x223 $x360)))
 (let (($x37 (and $x243 $x130)))
 (let (($x379 (=> $x37 $x29)))
 (not $x379)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x76 (bvmul (_ bv4294967295 32) ?x285)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x311 (bvadd ?x47 ?x76)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x43 (concat ?x50 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x267 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x125 (bvadd ?x267 (_ bv3 32))))
 (let ((?x92 (concat (select input.dst.llvm-mem ?x125) (concat ?x322 ?x43))))
 (let ((?x339 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x158 (concat ?x300 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x126 (bvadd ?x291 (_ bv3 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem ?x126) (concat ?x65 ?x158))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x15 (concat ?x310 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x117 (bvadd ?x287 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x117) (concat ?x301 ?x15))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x242)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x94)))
 (let ((?x204 (bvadd (bvadd (bvadd ?x25 ?x191) ?x12) ?x339)))
 (let (($x307 (= ?x204 ?x311)))
 (let (($x70 (= $x307 true)))
 (let (($x40 (= $x70 true)))
 (let (($x202 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x10 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x10 (_ bv1 32))))
 (let (($x253 (=> $x340 $x202)))
 (let (($x75 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x340 $x75)))
 (let (($x177 (= false false)))
 (let (($x235 (= ?x10 (_ bv0 32))))
 (let (($x37 (=> $x235 $x177)))
 (let (($x184 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x130 (= $x235 $x184)))
 (let (($x5 (and (and (and $x130 $x37) $x113) $x253)))
 (let (($x174 (= $x5 true)))
 (let (($x297 (= ?x285 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x258 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x210 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x210 (_ bv1 32))))
 (let (($x156 (=> $x199 $x297)))
 (let (($x358 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x58 (= $x199 $x358)))
 (let (($x381 (= ?x210 (_ bv0 32))))
 (let (($x382 (=> $x381 $x177)))
 (let (($x386 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x118 (= $x381 $x386)))
 (let (($x355 (and (and (and $x118 $x382) $x58) $x156)))
 (let (($x302 (= $x355 true)))
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x315 (= ?x363 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x294 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x294 (_ bv1 32))))
 (let (($x283 (=> $x104 $x315)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x71 (= $x104 $x368)))
 (let (($x221 (= ?x294 (_ bv0 32))))
 (let (($x279 (=> $x221 $x177)))
 (let (($x268 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x308 (= $x221 $x268)))
 (let (($x354 (and (and (and $x308 $x279) $x71) $x283)))
 (let (($x306 (= $x354 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x39 (= ?x203 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x214 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x33 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x33 (_ bv1 32))))
 (let (($x9 (=> $x51 $x39)))
 (let (($x338 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x112 (= $x51 $x338)))
 (let (($x163 (= ?x33 (_ bv0 32))))
 (let (($x77 (=> $x163 $x177)))
 (let (($x259 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x99 (= $x163 $x259)))
 (let (($x216 (and (and (and $x99 $x77) $x112) $x9)))
 (let (($x16 (= $x216 true)))
 (let (($x30 (forall ((input.ind-%var3286X (_ BitVec 32)) )(let (($x326 (input.spec-%var-m-0.0.1 input.ind-%var3286X)))
 (= $x326 (and (bvule (_ bv0 32) input.ind-%var3286X) (bvult input.ind-%var3286X (_ bv100 32))))))
 ))
 (let (($x148 (forall ((input.ind-%var3287X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var3287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x348))))
 (let ((?x124 (input.spec-%var-m-0.1.1 input.ind-%var3287X)))
 (let (($x326 (input.spec-%var-m-0.0.1 input.ind-%var3287X)))
 (=> $x326 (= ?x124 ?x86))))))))
 ))
 (let (($x312 (and $x148 $x30)))
 (let (($x144 (= $x312 true)))
 (let ((?x377 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x274 (concat ?x272 (concat ?x252 ?x377)))))
 (let (($x270 (= ?x100 input.dst.llvm-%m)))
 (let (($x316 (= $x270 true)))
 (let (($x139 (= $x316 true)))
 (let (($x372 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x218 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x161 (and true $x170)))
 (let (($x205 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x84 (and $x205 $x161)))
 (let (($x32 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv8 32))) (bvult ?x267 (bvsub ?x267 (_ bv8 32))))))
 (let (($x277 (and (and (and true $x32) $x84) $x218)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x356 (and true $x281)))
 (let (($x350 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x164 (and $x350 $x356)))
 (let (($x353 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x197 (and (and (and true $x350) $x353) $x164)))
 (let (($x280 (and (and $x197 $x277) $x372)))
 (let (($x387 (= $x280 true)))
 (let (($x209 (= $x387 true)))
 (let (($x21 (= $x209 true)))
 (let (($x13 (= $x197 true)))
 (let (($x365 (= $x13 true)))
 (let (($x35 (= $x365 true)))
 (let (($x14 (and $x277 $x372)))
 (let (($x271 (= $x14 true)))
 (let (($x78 (= $x271 true)))
 (let (($x237 (= $x78 true)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x28 (= (_ bv0 32) ?x195)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x290 $x222)))
 (let (($x18 (and $x122 $x28)))
 (let (($x351 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x351 $x18)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x66)))))))
 (let (($x109 (and $x98 $x7)))
 (let (($x219 (= $x109 true)))
 (let (($x207 (= $x219 true)))
 (let (($x256 (= $x207 true)))
 (let (($x180 (and $x256 $x237)))
 (let (($x384 (and $x180 $x35)))
 (let (($x364 (and $x384 $x21)))
 (let (($x215 (and $x364 $x139)))
 (let (($x123 (and $x215 $x144)))
 (let (($x347 (and $x123 $x16)))
 (let (($x213 (and $x347 $x306)))
 (let (($x120 (and $x213 $x302)))
 (let (($x27 (and $x120 $x174)))
 (let (($x251 (and $x199 $x340)))
 (let (($x167 (and $x221 $x251)))
 (let (($x116 (and $x163 $x167)))
 (let (($x278 (and $x116 $x27)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x175 (and $x36 $x278)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x314 (and $x186 $x175)))
 (let (($x234 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x263 (and $x234 $x314)))
 (let (($x227 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x26 (and $x227 $x263)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x128 (and $x324 $x26)))
 (let (($x60 (and $x177 $x128)))
 (let (($x140 (= ?x203 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x72 (and $x140 $x60)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x254 (and $x299 $x72)))
 (let (($x220 (and $x177 $x254)))
 (let (($x182 (= ?x363 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x135 (and $x182 $x220)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x212 (and $x265 $x135)))
 (let (($x56 (and $x177 $x212)))
 (let (($x8 (= ?x285 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x179 (and $x8 $x56)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x196 (and $x188 $x179)))
 (let (($x138 (and $x177 $x196)))
 (let (($x149 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x238 (and $x149 $x138)))
 (let (($x229 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x246 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x229)))))))
 (let (($x257 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x330 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x257)))))))
 (let (($x19 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x79 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x142 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x79)))))))
 (let (($x22 (and $x142 $x6)))
 (let (($x45 (and $x22 $x330)))
 (let (($x103 (and $x45 $x246)))
 (let (($x200 (and $x103 $x238)))
 (let (($x80 (=> $x200 $x40)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x285 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x76 (bvmul (_ bv4294967295 32) ?x285)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x311 (bvadd ?x47 ?x76)))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x43 (concat ?x50 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x267 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x125 (bvadd ?x267 (_ bv3 32))))
 (let ((?x92 (concat (select input.dst.llvm-mem ?x125) (concat ?x322 ?x43))))
 (let ((?x339 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x158 (concat ?x300 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x126 (bvadd ?x291 (_ bv3 32))))
 (let ((?x12 (concat (select input.dst.llvm-mem ?x126) (concat ?x65 ?x158))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x15 (concat ?x310 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x301 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x117 (bvadd ?x287 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x117) (concat ?x301 ?x15))))
 (let ((?x242 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x94 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x242)))
 (let ((?x25 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x94)))
 (let ((?x204 (bvadd (bvadd (bvadd ?x25 ?x191) ?x12) ?x339)))
 (let (($x307 (= ?x204 ?x311)))
 (let (($x70 (= $x307 true)))
 (let (($x40 (= $x70 true)))
 (let (($x202 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x24 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x10 (ite $x24 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x10 (_ bv1 32))))
 (let (($x253 (=> $x340 $x202)))
 (let (($x75 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x113 (= $x340 $x75)))
 (let (($x177 (= false false)))
 (let (($x235 (= ?x10 (_ bv0 32))))
 (let (($x37 (=> $x235 $x177)))
 (let (($x184 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x130 (= $x235 $x184)))
 (let (($x5 (and (and (and $x130 $x37) $x113) $x253)))
 (let (($x174 (= $x5 true)))
 (let (($x297 (= ?x285 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x258 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x210 (ite $x258 (_ bv1 32) (_ bv0 32))))
 (let (($x199 (bvuge ?x210 (_ bv1 32))))
 (let (($x156 (=> $x199 $x297)))
 (let (($x358 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x58 (= $x199 $x358)))
 (let (($x381 (= ?x210 (_ bv0 32))))
 (let (($x382 (=> $x381 $x177)))
 (let (($x386 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x118 (= $x381 $x386)))
 (let (($x355 (and (and (and $x118 $x382) $x58) $x156)))
 (let (($x302 (= $x355 true)))
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x315 (= ?x363 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x294 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x104 (bvuge ?x294 (_ bv1 32))))
 (let (($x283 (=> $x104 $x315)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x71 (= $x104 $x368)))
 (let (($x221 (= ?x294 (_ bv0 32))))
 (let (($x279 (=> $x221 $x177)))
 (let (($x268 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x308 (= $x221 $x268)))
 (let (($x354 (and (and (and $x308 $x279) $x71) $x283)))
 (let (($x306 (= $x354 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x39 (= ?x203 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x214 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x33 (ite $x214 (_ bv1 32) (_ bv0 32))))
 (let (($x51 (bvuge ?x33 (_ bv1 32))))
 (let (($x9 (=> $x51 $x39)))
 (let (($x338 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x112 (= $x51 $x338)))
 (let (($x163 (= ?x33 (_ bv0 32))))
 (let (($x77 (=> $x163 $x177)))
 (let (($x259 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x99 (= $x163 $x259)))
 (let (($x216 (and (and (and $x99 $x77) $x112) $x9)))
 (let (($x16 (= $x216 true)))
 (let (($x30 (forall ((input.ind-%var3286X (_ BitVec 32)) )(let (($x326 (input.spec-%var-m-0.0.1 input.ind-%var3286X)))
 (= $x326 (and (bvule (_ bv0 32) input.ind-%var3286X) (bvult input.ind-%var3286X (_ bv100 32))))))
 ))
 (let (($x148 (forall ((input.ind-%var3287X (_ BitVec 32)) )(let ((?x34 (bvadd (bvmul input.ind-%var3287X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x348 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv1 32))) (select input.dst.llvm-mem ?x34))))
 (let ((?x86 (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x34 (_ bv2 32))) ?x348))))
 (let ((?x124 (input.spec-%var-m-0.1.1 input.ind-%var3287X)))
 (let (($x326 (input.spec-%var-m-0.0.1 input.ind-%var3287X)))
 (=> $x326 (= ?x124 ?x86))))))))
 ))
 (let (($x312 (and $x148 $x30)))
 (let (($x144 (= $x312 true)))
 (let ((?x377 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x252 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x272 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x100 (concat ?x274 (concat ?x272 (concat ?x252 ?x377)))))
 (let (($x270 (= ?x100 input.dst.llvm-%m)))
 (let (($x316 (= $x270 true)))
 (let (($x139 (= $x316 true)))
 (let (($x372 (= (bvand ?x267 (_ bv4294967292 32)) ?x267)))
 (let (($x218 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x161 (and true $x170)))
 (let (($x205 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x84 (and $x205 $x161)))
 (let (($x32 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x267 (bvsub ?x267 (_ bv8 32))) (bvult ?x267 (bvsub ?x267 (_ bv8 32))))))
 (let (($x277 (and (and (and true $x32) $x84) $x218)))
 (let (($x281 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x356 (and true $x281)))
 (let (($x350 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x164 (and $x350 $x356)))
 (let (($x353 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x197 (and (and (and true $x350) $x353) $x164)))
 (let (($x280 (and (and $x197 $x277) $x372)))
 (let (($x387 (= $x280 true)))
 (let (($x209 (= $x387 true)))
 (let (($x21 (= $x209 true)))
 (let (($x13 (= $x197 true)))
 (let (($x365 (= $x13 true)))
 (let (($x35 (= $x365 true)))
 (let (($x14 (and $x277 $x372)))
 (let (($x271 (= $x14 true)))
 (let (($x78 (= $x271 true)))
 (let (($x237 (= $x78 true)))
 (let ((?x195 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x28 (= (_ bv0 32) ?x195)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x290 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x122 (and $x290 $x222)))
 (let (($x18 (and $x122 $x28)))
 (let (($x351 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x7 (and $x351 $x18)))
 (let (($x66 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x292 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x98 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x292 $x66)))))))
 (let (($x109 (and $x98 $x7)))
 (let (($x219 (= $x109 true)))
 (let (($x207 (= $x219 true)))
 (let (($x256 (= $x207 true)))
 (let (($x180 (and $x256 $x237)))
 (let (($x384 (and $x180 $x35)))
 (let (($x364 (and $x384 $x21)))
 (let (($x215 (and $x364 $x139)))
 (let (($x123 (and $x215 $x144)))
 (let (($x347 (and $x123 $x16)))
 (let (($x213 (and $x347 $x306)))
 (let (($x120 (and $x213 $x302)))
 (let (($x27 (and $x120 $x174)))
 (let (($x251 (and $x199 $x340)))
 (let (($x167 (and $x221 $x251)))
 (let (($x116 (and $x163 $x167)))
 (let (($x278 (and $x116 $x27)))
 (let (($x36 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x175 (and $x36 $x278)))
 (let (($x186 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x314 (and $x186 $x175)))
 (let (($x234 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x263 (and $x234 $x314)))
 (let (($x227 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x26 (and $x227 $x263)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x128 (and $x324 $x26)))
 (let (($x60 (and $x177 $x128)))
 (let (($x140 (= ?x203 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x72 (and $x140 $x60)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x254 (and $x299 $x72)))
 (let (($x220 (and $x177 $x254)))
 (let (($x182 (= ?x363 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x135 (and $x182 $x220)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x212 (and $x265 $x135)))
 (let (($x56 (and $x177 $x212)))
 (let (($x8 (= ?x285 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x179 (and $x8 $x56)))
 (let (($x188 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x196 (and $x188 $x179)))
 (let (($x138 (and $x177 $x196)))
 (let (($x149 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x238 (and $x149 $x138)))
 (let (($x229 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x126)))
 (let (($x246 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x229)))))))
 (let (($x257 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x289 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x125)))
 (let (($x330 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x289 $x257)))))))
 (let (($x19 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x6 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x262 $x19)))))))
 (let (($x79 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x208 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x295 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x208)))
 (let (($x142 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x295 $x79)))))))
 (let (($x22 (and $x142 $x6)))
 (let (($x45 (and $x22 $x330)))
 (let (($x103 (and $x45 $x246)))
 (let (($x200 (and $x103 $x238)))
 (let (($x80 (=> $x200 $x40)))
 (not $x80)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 239 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x176 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x261 (concat ?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x133 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x257 (bvadd ?x133 (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x257) (concat ?x150 ?x261))))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x345)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x198 (concat ?x59 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x229 (bvadd ?x88 (_ bv3 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem ?x229) (concat ?x352 ?x198))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x339 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x19 (bvadd ?x134 (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x19) (concat ?x311 ?x204))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x376)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x50)))
 (let ((?x61 (bvadd (bvadd (bvadd ?x43 ?x40) ?x69) ?x87)))
 (let (($x63 (= ?x61 ?x176)))
 (let (($x317 (= $x63 true)))
 (let (($x74 (= $x317 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x85 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x153 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x153 (_ bv1 32))))
 (let (($x20 (=> $x200 $x85)))
 (let (($x110 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x102 (= $x200 $x110)))
 (let (($x285 (= false false)))
 (let (($x31 (= ?x153 (_ bv0 32))))
 (let (($x238 (=> $x31 $x285)))
 (let (($x196 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x138 (= $x31 $x196)))
 (let (($x94 (and (and (and $x138 $x238) $x102) $x20)))
 (let (($x25 (= $x94 true)))
 (let (($x60 (= ?x363 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x116 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x116 (_ bv1 32))))
 (let (($x72 (=> $x49 $x60)))
 (let (($x263 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x26 (= $x49 $x263)))
 (let (($x174 (= ?x116 (_ bv0 32))))
 (let (($x314 (=> $x174 $x285)))
 (let (($x278 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x175 (= $x174 $x278)))
 (let (($x135 (and (and (and $x175 $x314) $x26) $x72)))
 (let (($x212 (= $x135 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x75 (= ?x203 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x10 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x340 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x340 (_ bv1 32))))
 (let (($x113 (=> $x184 $x75)))
 (let (($x130 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x37 (= $x184 $x130)))
 (let (($x251 (= ?x340 (_ bv0 32))))
 (let (($x168 (=> $x251 $x285)))
 (let (($x120 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x235 (= $x251 $x120)))
 (let (($x202 (and (and (and $x235 $x168) $x37) $x113)))
 (let (($x253 (= $x202 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x358 (= ?x373 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x221 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x199 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x199 (_ bv1 32))))
 (let (($x58 (=> $x386 $x358)))
 (let (($x118 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x382 (= $x386 $x118)))
 (let (($x24 (= ?x199 (_ bv0 32))))
 (let (($x185 (=> $x24 $x285)))
 (let (($x213 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x381 (= $x24 $x213)))
 (let (($x297 (and (and (and $x381 $x185) $x382) $x58)))
 (let (($x156 (= $x297 true)))
 (let (($x374 (forall ((input.ind-%var3318X (_ BitVec 32)) )(let (($x258 (input.spec-%var-m-0.0.1 input.ind-%var3318X)))
 (= $x258 (and (bvule (_ bv0 32) input.ind-%var3318X) (bvult input.ind-%var3318X (_ bv100 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var3319X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var3319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x77))))
 (let ((?x121 (input.spec-%var-m-0.1.1 input.ind-%var3319X)))
 (let (($x258 (input.spec-%var-m-0.0.1 input.ind-%var3319X)))
 (=> $x258 (= ?x121 ?x282))))))))
 ))
 (let (($x315 (and $x216 $x374)))
 (let (($x283 (= $x315 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x34 (concat ?x296 (concat ?x157 (concat ?x316 ?x100)))))
 (let (($x336 (= ?x34 input.dst.llvm-%m)))
 (let (($x361 (= $x336 true)))
 (let (($x362 (= $x361 true)))
 (let (($x211 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x78 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x372 (and true $x97)))
 (let (($x84 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x14 (and $x84 $x372)))
 (let (($x331 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv8 32))) (bvult ?x133 (bvsub ?x133 (_ bv8 32))))))
 (let (($x303 (and (and (and true $x331) $x14) $x78)))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x384 (and true $x35)))
 (let (($x233 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x67 (and $x233 $x384)))
 (let (($x356 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x209 (and (and (and true $x233) $x356) $x67)))
 (let (($x328 (and (and $x209 $x303) $x211)))
 (let (($x272 (= $x328 true)))
 (let (($x166 (= $x272 true)))
 (let (($x252 (= $x166 true)))
 (let (($x21 (= $x209 true)))
 (let (($x364 (= $x21 true)))
 (let (($x152 (= $x364 true)))
 (let (($x82 (and $x303 $x211)))
 (let (($x193 (= $x82 true)))
 (let (($x366 (= $x193 true)))
 (let (($x226 (= $x366 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x245 (= (_ bv0 32) ?x114)))
 (let ((?x219 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x109 $x207)))
 (let (($x224 (and $x256 $x245)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x137 $x224)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x290 $x111)))))))
 (let (($x32 (and $x7 $x127)))
 (let (($x334 (= $x32 true)))
 (let (($x146 (= $x334 true)))
 (let (($x293 (= $x146 true)))
 (let (($x353 (and $x293 $x226)))
 (let (($x162 (and $x353 $x152)))
 (let (($x377 (and $x162 $x252)))
 (let (($x107 (and $x377 $x362)))
 (let (($x354 (and $x107 $x283)))
 (let (($x355 (and $x354 $x156)))
 (let (($x5 (and $x355 $x253)))
 (let (($x56 (and $x5 $x212)))
 (let (($x379 (and $x56 $x25)))
 (let (($x292 (and $x49 $x31)))
 (let (($x66 (and $x251 $x292)))
 (let (($x244 (and $x24 $x66)))
 (let (($x141 (and $x244 $x379)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x301 (and $x294 $x141)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x298 (and $x163 $x301)))
 (let (($x214 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x310 (and $x214 $x298)))
 (let (($x380 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x145 (and $x380 $x310)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x15 (and $x169 $x145)))
 (let (($x29 (and $x285 $x15)))
 (let (($x375 (= ?x373 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x191 (and $x375 $x29)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x232 (and $x324 $x191)))
 (let (($x337 (and $x285 $x232)))
 (let (($x140 (= ?x203 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x183 (and $x140 $x337)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x65 (and $x299 $x183)))
 (let (($x240 (and $x285 $x65)))
 (let (($x182 (= ?x363 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x300 (and $x182 $x240)))
 (let (($x359 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x192 (and $x359 $x300)))
 (let (($x158 (and $x285 $x192)))
 (let (($x159 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x321 (and $x159 $x158)))
 (let (($x48 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x44 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x48)))))))
 (let (($x255 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x239 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x327 $x255)))))))
 (let (($x181 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x93 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x11 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x93)))))))
 (let (($x147 (and $x11 $x267)))
 (let (($x64 (and $x147 $x239)))
 (let (($x62 (and $x64 $x44)))
 (let (($x12 (and $x62 $x321)))
 (let (($x325 (=> $x12 $x74)))
 (not $x325))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x363 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x176 (bvmul (_ bv4294967295 32) ?x363)))
 (let ((?x264 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x261 (concat ?x264 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x150 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x133 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x257 (bvadd ?x133 (_ bv3 32))))
 (let ((?x345 (concat (select input.dst.llvm-mem ?x257) (concat ?x150 ?x261))))
 (let ((?x87 (bvmul (_ bv4294967295 32) ?x345)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x198 (concat ?x59 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x229 (bvadd ?x88 (_ bv3 32))))
 (let ((?x69 (concat (select input.dst.llvm-mem ?x229) (concat ?x352 ?x198))))
 (let ((?x339 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x204 (concat ?x339 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x311 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x134 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x19 (bvadd ?x134 (_ bv3 32))))
 (let ((?x40 (concat (select input.dst.llvm-mem ?x19) (concat ?x311 ?x204))))
 (let ((?x376 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x50 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x376)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x50)))
 (let ((?x61 (bvadd (bvadd (bvadd ?x43 ?x40) ?x69) ?x87)))
 (let (($x63 (= ?x61 ?x176)))
 (let (($x317 (= $x63 true)))
 (let (($x74 (= $x317 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x85 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x153 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x153 (_ bv1 32))))
 (let (($x20 (=> $x200 $x85)))
 (let (($x110 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x102 (= $x200 $x110)))
 (let (($x285 (= false false)))
 (let (($x31 (= ?x153 (_ bv0 32))))
 (let (($x238 (=> $x31 $x285)))
 (let (($x196 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x138 (= $x31 $x196)))
 (let (($x94 (and (and (and $x138 $x238) $x102) $x20)))
 (let (($x25 (= $x94 true)))
 (let (($x60 (= ?x363 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x116 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x49 (bvuge ?x116 (_ bv1 32))))
 (let (($x72 (=> $x49 $x60)))
 (let (($x263 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x26 (= $x49 $x263)))
 (let (($x174 (= ?x116 (_ bv0 32))))
 (let (($x314 (=> $x174 $x285)))
 (let (($x278 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x175 (= $x174 $x278)))
 (let (($x135 (and (and (and $x175 $x314) $x26) $x72)))
 (let (($x212 (= $x135 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x75 (= ?x203 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x10 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x340 (ite $x10 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x340 (_ bv1 32))))
 (let (($x113 (=> $x184 $x75)))
 (let (($x130 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x37 (= $x184 $x130)))
 (let (($x251 (= ?x340 (_ bv0 32))))
 (let (($x168 (=> $x251 $x285)))
 (let (($x120 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x235 (= $x251 $x120)))
 (let (($x202 (and (and (and $x235 $x168) $x37) $x113)))
 (let (($x253 (= $x202 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x358 (= ?x373 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x221 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x199 (ite $x221 (_ bv1 32) (_ bv0 32))))
 (let (($x386 (bvuge ?x199 (_ bv1 32))))
 (let (($x58 (=> $x386 $x358)))
 (let (($x118 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x382 (= $x386 $x118)))
 (let (($x24 (= ?x199 (_ bv0 32))))
 (let (($x185 (=> $x24 $x285)))
 (let (($x213 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x381 (= $x24 $x213)))
 (let (($x297 (and (and (and $x381 $x185) $x382) $x58)))
 (let (($x156 (= $x297 true)))
 (let (($x374 (forall ((input.ind-%var3318X (_ BitVec 32)) )(let (($x258 (input.spec-%var-m-0.0.1 input.ind-%var3318X)))
 (= $x258 (and (bvule (_ bv0 32) input.ind-%var3318X) (bvult input.ind-%var3318X (_ bv100 32))))))
 ))
 (let (($x216 (forall ((input.ind-%var3319X (_ BitVec 32)) )(let ((?x266 (bvadd (bvmul input.ind-%var3319X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x77 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv1 32))) (select input.dst.llvm-mem ?x266))))
 (let ((?x282 (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x266 (_ bv2 32))) ?x77))))
 (let ((?x121 (input.spec-%var-m-0.1.1 input.ind-%var3319X)))
 (let (($x258 (input.spec-%var-m-0.0.1 input.ind-%var3319X)))
 (=> $x258 (= ?x121 ?x282))))))))
 ))
 (let (($x315 (and $x216 $x374)))
 (let (($x283 (= $x315 true)))
 (let ((?x100 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x316 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x157 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x34 (concat ?x296 (concat ?x157 (concat ?x316 ?x100)))))
 (let (($x336 (= ?x34 input.dst.llvm-%m)))
 (let (($x361 (= $x336 true)))
 (let (($x362 (= $x361 true)))
 (let (($x211 (= (bvand ?x133 (_ bv4294967292 32)) ?x133)))
 (let (($x78 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x97 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x372 (and true $x97)))
 (let (($x84 (= (bvand ?x134 (_ bv4294967292 32)) ?x134)))
 (let (($x14 (and $x84 $x372)))
 (let (($x331 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x133 (bvsub ?x133 (_ bv8 32))) (bvult ?x133 (bvsub ?x133 (_ bv8 32))))))
 (let (($x303 (and (and (and true $x331) $x14) $x78)))
 (let (($x35 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x384 (and true $x35)))
 (let (($x233 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x67 (and $x233 $x384)))
 (let (($x356 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x134 (bvsub ?x134 (_ bv12 32))) (bvult ?x134 (bvsub ?x134 (_ bv12 32))))))
 (let (($x209 (and (and (and true $x233) $x356) $x67)))
 (let (($x328 (and (and $x209 $x303) $x211)))
 (let (($x272 (= $x328 true)))
 (let (($x166 (= $x272 true)))
 (let (($x252 (= $x166 true)))
 (let (($x21 (= $x209 true)))
 (let (($x364 (= $x21 true)))
 (let (($x152 (= $x364 true)))
 (let (($x82 (and $x303 $x211)))
 (let (($x193 (= $x82 true)))
 (let (($x366 (= $x193 true)))
 (let (($x226 (= $x366 true)))
 (let ((?x114 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x245 (= (_ bv0 32) ?x114)))
 (let ((?x219 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x207 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x219)))
 (let (($x109 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x256 (and $x109 $x207)))
 (let (($x224 (and $x256 $x245)))
 (let (($x137 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x137 $x224)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x290 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x7 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x290 $x111)))))))
 (let (($x32 (and $x7 $x127)))
 (let (($x334 (= $x32 true)))
 (let (($x146 (= $x334 true)))
 (let (($x293 (= $x146 true)))
 (let (($x353 (and $x293 $x226)))
 (let (($x162 (and $x353 $x152)))
 (let (($x377 (and $x162 $x252)))
 (let (($x107 (and $x377 $x362)))
 (let (($x354 (and $x107 $x283)))
 (let (($x355 (and $x354 $x156)))
 (let (($x5 (and $x355 $x253)))
 (let (($x56 (and $x5 $x212)))
 (let (($x379 (and $x56 $x25)))
 (let (($x292 (and $x49 $x31)))
 (let (($x66 (and $x251 $x292)))
 (let (($x244 (and $x24 $x66)))
 (let (($x141 (and $x244 $x379)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x301 (and $x294 $x141)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x298 (and $x163 $x301)))
 (let (($x214 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x310 (and $x214 $x298)))
 (let (($x380 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x145 (and $x380 $x310)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x15 (and $x169 $x145)))
 (let (($x29 (and $x285 $x15)))
 (let (($x375 (= ?x373 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x191 (and $x375 $x29)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x232 (and $x324 $x191)))
 (let (($x337 (and $x285 $x232)))
 (let (($x140 (= ?x203 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x183 (and $x140 $x337)))
 (let (($x299 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x65 (and $x299 $x183)))
 (let (($x240 (and $x285 $x65)))
 (let (($x182 (= ?x363 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x300 (and $x182 $x240)))
 (let (($x359 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x192 (and $x359 $x300)))
 (let (($x158 (and $x285 $x192)))
 (let (($x159 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x321 (and $x159 $x158)))
 (let (($x48 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x57 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x229)))
 (let (($x44 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x57 $x48)))))))
 (let (($x255 (bvugt ?x133 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x327 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x257)))
 (let (($x239 (=> (bvule ?x133 (bvsub (bvadd ?x133 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x327 $x255)))))))
 (let (($x181 (bvugt ?x134 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x267 (=> (bvule ?x134 (bvsub (bvadd ?x134 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x181)))))))
 (let (($x93 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x173 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x11 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x173 $x93)))))))
 (let (($x147 (and $x11 $x267)))
 (let (($x64 (and $x147 $x239)))
 (let (($x62 (and $x64 $x44)))
 (let (($x12 (and $x62 $x321)))
 (let (($x325 (=> $x12 $x74)))
 (not $x325))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 238 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x273 (concat ?x42 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x125 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x255 (bvadd ?x125 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x255) (concat ?x89 ?x273))))
 (let ((?x148 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x333 (concat ?x151 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x48 (bvadd ?x291 (_ bv3 32))))
 (let ((?x189 (concat (select input.dst.llvm-mem ?x48) (concat ?x54 ?x333))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x61 (concat ?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x181 (bvadd ?x206 (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x181) (concat ?x63 ?x61))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x41)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x264)))
 (let ((?x347 (bvadd (bvadd (bvadd ?x261 ?x325) ?x189) ?x148)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x279 (= ?x47 ?x347)))
 (let (($x286 (= $x279 true)))
 (let (($x312 (= $x286 true)))
 (let (($x318 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x349 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x18 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x18 (_ bv1 32))))
 (let (($x160 (=> $x351 $x318)))
 (let (($x143 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x322 (= $x351 $x143)))
 (let (($x363 (= false false)))
 (let (($x300 (= ?x18 (_ bv0 32))))
 (let (($x12 (=> $x300 $x363)))
 (let (($x158 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x321 (= $x300 $x158)))
 (let (($x50 (and (and (and $x321 $x12) $x322) $x160)))
 (let (($x43 (= $x50 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x29 (= ?x203 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x66 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x244 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x244 (_ bv1 32))))
 (let (($x191 (=> $x298 $x29)))
 (let (($x310 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x145 (= $x298 $x310)))
 (let (($x98 (= ?x244 (_ bv0 32))))
 (let (($x301 (=> $x98 $x363)))
 (let (($x379 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x141 (= $x98 $x379)))
 (let (($x183 (and (and (and $x141 $x301) $x145) $x191)))
 (let (($x65 (= $x183 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x110 (= ?x373 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x31 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x31 (_ bv1 32))))
 (let (($x102 (=> $x138 $x110)))
 (let (($x238 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x106 (= $x138 $x238)))
 (let (($x292 (= ?x31 (_ bv0 32))))
 (let (($x196 (=> $x292 $x363)))
 (let (($x56 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x179 (= $x292 $x56)))
 (let (($x85 (and (and (and $x179 $x196) $x106) $x102)))
 (let (($x20 (= $x85 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x263 (= ?x186 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x251 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x49 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x49 (_ bv1 32))))
 (let (($x26 (=> $x278 $x263)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x314 (= $x278 $x175)))
 (let (($x231 (= ?x49 (_ bv0 32))))
 (let (($x27 (=> $x231 $x363)))
 (let (($x5 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x174 (= $x231 $x5)))
 (let (($x60 (and (and (and $x174 $x27) $x314) $x26)))
 (let (($x72 (= $x60 true)))
 (let (($x332 (forall ((input.ind-%var3350X (_ BitVec 32)) )(let (($x167 (input.spec-%var-m-0.0.1 input.ind-%var3350X)))
 (= $x167 (and (bvule (_ bv0 32) input.ind-%var3350X) (bvult input.ind-%var3350X (_ bv100 32))))))
 ))
 (let (($x297 (forall ((input.ind-%var3351X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var3351X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x185))))
 (let ((?x378 (input.spec-%var-m-0.1.1 input.ind-%var3351X)))
 (let (($x167 (input.spec-%var-m-0.0.1 input.ind-%var3351X)))
 (=> $x167 (= ?x378 ?x201))))))))
 ))
 (let (($x75 (and $x297 $x332)))
 (let (($x113 (= $x75 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x266 (concat ?x123 (concat ?x149 (concat ?x361 ?x34)))))
 (let (($x112 (= ?x266 input.dst.llvm-%m)))
 (let (($x357 (= $x112 true)))
 (let (($x53 (= $x357 true)))
 (let (($x280 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x366 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x350 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x211 (and true $x350)))
 (let (($x14 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x82 (and $x14 $x211)))
 (let (($x277 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv8 32))) (bvult ?x125 (bvsub ?x125 (_ bv8 32))))))
 (let (($x370 (and (and (and true $x277) $x82) $x366)))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x162 (and true $x152)))
 (let (($x197 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x274 (and $x197 $x162)))
 (let (($x384 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x166 (and (and (and true $x197) $x384) $x274)))
 (let (($x215 (and (and $x166 $x370) $x280)))
 (let (($x157 (= $x215 true)))
 (let (($x270 (= $x157 true)))
 (let (($x316 (= $x270 true)))
 (let (($x252 (= $x166 true)))
 (let (($x377 (= $x252 true)))
 (let (($x248 (= $x377 true)))
 (let (($x383 (and $x370 $x280)))
 (let (($x132 (= $x383 true)))
 (let (($x52 (= $x132 true)))
 (let (($x281 (= $x52 true)))
 (let ((?x309 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x205 (= (_ bv0 32) ?x309)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x334)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x32 $x146)))
 (let (($x288 (and $x293 $x205)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x28 $x288)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x219)))))))
 (let (($x331 (and $x127 $x171)))
 (let (($x237 (= $x331 true)))
 (let (($x170 (= $x237 true)))
 (let (($x161 (= $x170 true)))
 (let (($x356 (and $x161 $x281)))
 (let (($x124 (and $x356 $x248)))
 (let (($x100 (and $x124 $x316)))
 (let (($x51 (and $x100 $x53)))
 (let (($x202 (and $x51 $x113)))
 (let (($x135 (and $x202 $x72)))
 (let (($x94 (and $x135 $x20)))
 (let (($x240 (and $x94 $x65)))
 (let (($x70 (and $x240 $x43)))
 (let (($x290 (and $x98 $x351)))
 (let (($x111 (and $x292 $x290)))
 (let (($x222 (and $x231 $x111)))
 (let (($x76 (and $x222 $x70)))
 (let (($x340 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x311 (and $x340 $x76)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x92 (and $x24 $x311)))
 (let (($x221 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x339 (and $x221 $x92)))
 (let (($x320 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x178 (and $x320 $x339)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x204 (and $x33 $x178)))
 (let (($x307 (and $x363 $x204)))
 (let (($x36 (= ?x186 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x40 (and $x36 $x307)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x154 (and $x169 $x40)))
 (let (($x342 (and $x363 $x154)))
 (let (($x375 (= ?x373 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x275 (and $x375 $x342)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x352 (and $x324 $x275)))
 (let (($x136 (and $x363 $x352)))
 (let (($x140 (= ?x203 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x59 (and $x140 $x136)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x80 (and $x241 $x59)))
 (let (($x198 (and $x363 $x80)))
 (let (($x265 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x129 (and $x265 $x198)))
 (let (($x243 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x188 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x360 $x243)))))))
 (let (($x223 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x126 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x83 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x131 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x117 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x131)))))))
 (let (($x262 (and $x117 $x133)))
 (let (($x289 (and $x262 $x126)))
 (let (($x23 (and $x289 $x188)))
 (let (($x69 (and $x23 $x129)))
 (let (($x90 (=> $x69 $x312)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x273 (concat ?x42 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x125 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x255 (bvadd ?x125 (_ bv3 32))))
 (let ((?x86 (concat (select input.dst.llvm-mem ?x255) (concat ?x89 ?x273))))
 (let ((?x148 (bvmul (_ bv4294967295 32) ?x86)))
 (let ((?x151 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x333 (concat ?x151 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x54 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x291 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x48 (bvadd ?x291 (_ bv3 32))))
 (let ((?x189 (concat (select input.dst.llvm-mem ?x48) (concat ?x54 ?x333))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x61 (concat ?x87 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x206 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x181 (bvadd ?x206 (_ bv3 32))))
 (let ((?x325 (concat (select input.dst.llvm-mem ?x181) (concat ?x63 ?x61))))
 (let ((?x41 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x264 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x41)))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x264)))
 (let ((?x347 (bvadd (bvadd (bvadd ?x261 ?x325) ?x189) ?x148)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x279 (= ?x47 ?x347)))
 (let (($x286 (= $x279 true)))
 (let (($x312 (= $x286 true)))
 (let (($x318 (= ?x47 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x349 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x18 (ite $x349 (_ bv1 32) (_ bv0 32))))
 (let (($x351 (bvuge ?x18 (_ bv1 32))))
 (let (($x160 (=> $x351 $x318)))
 (let (($x143 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x322 (= $x351 $x143)))
 (let (($x363 (= false false)))
 (let (($x300 (= ?x18 (_ bv0 32))))
 (let (($x12 (=> $x300 $x363)))
 (let (($x158 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x321 (= $x300 $x158)))
 (let (($x50 (and (and (and $x321 $x12) $x322) $x160)))
 (let (($x43 (= $x50 true)))
 (let ((?x203 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x29 (= ?x203 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x66 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x244 (ite $x66 (_ bv1 32) (_ bv0 32))))
 (let (($x298 (bvuge ?x244 (_ bv1 32))))
 (let (($x191 (=> $x298 $x29)))
 (let (($x310 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x145 (= $x298 $x310)))
 (let (($x98 (= ?x244 (_ bv0 32))))
 (let (($x301 (=> $x98 $x363)))
 (let (($x379 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x141 (= $x98 $x379)))
 (let (($x183 (and (and (and $x141 $x301) $x145) $x191)))
 (let (($x65 (= $x183 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x110 (= ?x373 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x153 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x31 (ite $x153 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x31 (_ bv1 32))))
 (let (($x102 (=> $x138 $x110)))
 (let (($x238 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x106 (= $x138 $x238)))
 (let (($x292 (= ?x31 (_ bv0 32))))
 (let (($x196 (=> $x292 $x363)))
 (let (($x56 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x179 (= $x292 $x56)))
 (let (($x85 (and (and (and $x179 $x196) $x106) $x102)))
 (let (($x20 (= $x85 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x263 (= ?x186 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x251 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x49 (ite $x251 (_ bv1 32) (_ bv0 32))))
 (let (($x278 (bvuge ?x49 (_ bv1 32))))
 (let (($x26 (=> $x278 $x263)))
 (let (($x175 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x314 (= $x278 $x175)))
 (let (($x231 (= ?x49 (_ bv0 32))))
 (let (($x27 (=> $x231 $x363)))
 (let (($x5 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x174 (= $x231 $x5)))
 (let (($x60 (and (and (and $x174 $x27) $x314) $x26)))
 (let (($x72 (= $x60 true)))
 (let (($x332 (forall ((input.ind-%var3350X (_ BitVec 32)) )(let (($x167 (input.spec-%var-m-0.0.1 input.ind-%var3350X)))
 (= $x167 (and (bvule (_ bv0 32) input.ind-%var3350X) (bvult input.ind-%var3350X (_ bv100 32))))))
 ))
 (let (($x297 (forall ((input.ind-%var3351X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var3351X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x185))))
 (let ((?x378 (input.spec-%var-m-0.1.1 input.ind-%var3351X)))
 (let (($x167 (input.spec-%var-m-0.0.1 input.ind-%var3351X)))
 (=> $x167 (= ?x378 ?x201))))))))
 ))
 (let (($x75 (and $x297 $x332)))
 (let (($x113 (= $x75 true)))
 (let ((?x34 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x361 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x149 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x266 (concat ?x123 (concat ?x149 (concat ?x361 ?x34)))))
 (let (($x112 (= ?x266 input.dst.llvm-%m)))
 (let (($x357 (= $x112 true)))
 (let (($x53 (= $x357 true)))
 (let (($x280 (= (bvand ?x125 (_ bv4294967292 32)) ?x125)))
 (let (($x366 (= (bvand ?x291 (_ bv4294967292 32)) ?x291)))
 (let (($x350 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x291 (bvsub ?x291 (_ bv4 32))) (bvult ?x291 (bvsub ?x291 (_ bv4 32))))))
 (let (($x211 (and true $x350)))
 (let (($x14 (= (bvand ?x206 (_ bv4294967292 32)) ?x206)))
 (let (($x82 (and $x14 $x211)))
 (let (($x277 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x125 (bvsub ?x125 (_ bv8 32))) (bvult ?x125 (bvsub ?x125 (_ bv8 32))))))
 (let (($x370 (and (and (and true $x277) $x82) $x366)))
 (let (($x152 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x162 (and true $x152)))
 (let (($x197 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x274 (and $x197 $x162)))
 (let (($x384 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x206 (bvsub ?x206 (_ bv12 32))) (bvult ?x206 (bvsub ?x206 (_ bv12 32))))))
 (let (($x166 (and (and (and true $x197) $x384) $x274)))
 (let (($x215 (and (and $x166 $x370) $x280)))
 (let (($x157 (= $x215 true)))
 (let (($x270 (= $x157 true)))
 (let (($x316 (= $x270 true)))
 (let (($x252 (= $x166 true)))
 (let (($x377 (= $x252 true)))
 (let (($x248 (= $x377 true)))
 (let (($x383 (and $x370 $x280)))
 (let (($x132 (= $x383 true)))
 (let (($x52 (= $x132 true)))
 (let (($x281 (= $x52 true)))
 (let ((?x309 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x205 (= (_ bv0 32) ?x309)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x334)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x32 $x146)))
 (let (($x288 (and $x293 $x205)))
 (let (($x28 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x28 $x288)))
 (let (($x219 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x109 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x109 $x219)))))))
 (let (($x331 (and $x127 $x171)))
 (let (($x237 (= $x331 true)))
 (let (($x170 (= $x237 true)))
 (let (($x161 (= $x170 true)))
 (let (($x356 (and $x161 $x281)))
 (let (($x124 (and $x356 $x248)))
 (let (($x100 (and $x124 $x316)))
 (let (($x51 (and $x100 $x53)))
 (let (($x202 (and $x51 $x113)))
 (let (($x135 (and $x202 $x72)))
 (let (($x94 (and $x135 $x20)))
 (let (($x240 (and $x94 $x65)))
 (let (($x70 (and $x240 $x43)))
 (let (($x290 (and $x98 $x351)))
 (let (($x111 (and $x292 $x290)))
 (let (($x222 (and $x231 $x111)))
 (let (($x76 (and $x222 $x70)))
 (let (($x340 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x311 (and $x340 $x76)))
 (let (($x24 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x92 (and $x24 $x311)))
 (let (($x221 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x339 (and $x221 $x92)))
 (let (($x320 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x178 (and $x320 $x339)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x204 (and $x33 $x178)))
 (let (($x307 (and $x363 $x204)))
 (let (($x36 (= ?x186 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x40 (and $x36 $x307)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x154 (and $x169 $x40)))
 (let (($x342 (and $x363 $x154)))
 (let (($x375 (= ?x373 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x275 (and $x375 $x342)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x352 (and $x324 $x275)))
 (let (($x136 (and $x363 $x352)))
 (let (($x140 (= ?x203 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x59 (and $x140 $x136)))
 (let (($x241 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x80 (and $x241 $x59)))
 (let (($x198 (and $x363 $x80)))
 (let (($x265 (= ?x47 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x129 (and $x265 $x198)))
 (let (($x243 (bvugt ?x291 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x360 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x188 (=> (bvule ?x291 (bvsub (bvadd ?x291 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x360 $x243)))))))
 (let (($x223 (bvugt ?x125 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x255)))
 (let (($x126 (=> (bvule ?x125 (bvsub (bvadd ?x125 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x223)))))))
 (let (($x83 (bvugt ?x206 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x181)))
 (let (($x133 (=> (bvule ?x206 (bvsub (bvadd ?x206 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x83)))))))
 (let (($x131 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x93 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x93)))
 (let (($x117 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x131)))))))
 (let (($x262 (and $x117 $x133)))
 (let (($x289 (and $x262 $x126)))
 (let (($x23 (and $x289 $x188)))
 (let (($x69 (and $x23 $x129)))
 (let (($x90 (=> $x69 $x312)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x368 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x257 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x223 (bvadd ?x257 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x223) (concat ?x39 ?x368))))
 (let ((?x104 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x116 (concat ?x326 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x243 (bvadd ?x88 (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x243) (concat ?x99 ?x116))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x347 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x83 (bvadd ?x287 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x83) (concat ?x286 ?x347))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x165)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x42)))
 (let ((?x168 (bvadd (bvadd (bvadd ?x273 ?x144) ?x235) ?x104)))
 (let (($x269 (= (_ bv0 32) ?x168)))
 (let (($x315 (= $x269 true)))
 (let (($x177 (= $x315 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x313 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x385 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x224 (ite $x385 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x224 (_ bv1 32))))
 (let (($x194 (=> $x69 $x313)))
 (let (($x329 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x150 (= $x69 $x329)))
 (let (($x203 (= false false)))
 (let (($x137 (= ?x224 (_ bv0 32))))
 (let (($x129 (=> $x137 $x203)))
 (let (($x80 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x198 (= $x137 $x80)))
 (let (($x264 (and (and (and $x198 $x129) $x150) $x194)))
 (let (($x261 (= $x264 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x307 (= ?x373 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x222 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x222 (_ bv1 32))))
 (let (($x40 (=> $x92 $x307)))
 (let (($x339 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x178 (= $x92 $x339)))
 (let (($x7 (= ?x222 (_ bv0 32))))
 (let (($x311 (=> $x7 $x203)))
 (let (($x70 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x76 (= $x7 $x70)))
 (let (($x275 (and (and (and $x76 $x311) $x178) $x40)))
 (let (($x352 (= $x275 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x186 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x18 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x351 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x351 (_ bv1 32))))
 (let (($x322 (=> $x158 $x143)))
 (let (($x321 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x12 (= $x158 $x321)))
 (let (($x290 (= ?x351 (_ bv0 32))))
 (let (($x192 (=> $x290 $x203)))
 (let (($x240 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x300 (= $x290 $x240)))
 (let (($x318 (and (and (and $x300 $x192) $x12) $x322)))
 (let (($x160 (= $x318 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x310 (= ?x163 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x98 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x98 (_ bv1 32))))
 (let (($x145 (=> $x141 $x310)))
 (let (($x301 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x232 (= $x141 $x301)))
 (let (($x349 (= ?x98 (_ bv0 32))))
 (let (($x379 (=> $x349 $x203)))
 (let (($x94 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x25 (= $x349 $x94)))
 (let (($x29 (and (and (and $x25 $x379) $x232) $x145)))
 (let (($x191 (= $x29 true)))
 (let (($x200 (forall ((input.ind-%var3382X (_ BitVec 32)) )(let (($x66 (input.spec-%var-m-0.0.1 input.ind-%var3382X)))
 (= $x66 (and (bvule (_ bv0 32) input.ind-%var3382X) (bvult input.ind-%var3382X (_ bv100 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3383X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3383X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x27))))
 (let ((?x228 (input.spec-%var-m-0.1.1 input.ind-%var3383X)))
 (let (($x66 (input.spec-%var-m-0.0.1 input.ind-%var3383X)))
 (=> $x66 (= ?x228 ?x254))))))))
 ))
 (let (($x110 (and $x60 $x200)))
 (let (($x102 (= $x110 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x354 (concat ?x159 (concat ?x357 ?x266)))))
 (let (($x382 (= ?x306 input.dst.llvm-%m)))
 (let (($x17 (= $x382 true)))
 (let (($x101 (= $x17 true)))
 (let (($x328 (= (bvand ?x257 (_ bv4294967292 32)) ?x257)))
 (let (($x52 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x233 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x280 (and true $x233)))
 (let (($x82 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x383 (and $x82 $x280)))
 (let (($x303 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x257 (bvsub ?x257 (_ bv8 32))) (bvult ?x257 (bvsub ?x257 (_ bv8 32))))))
 (let (($x387 (and (and (and true $x303) $x383) $x52)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x124 (and true $x248)))
 (let (($x209 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x296 (and $x209 $x124)))
 (let (($x162 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x270 (and (and (and true $x209) $x162) $x296)))
 (let (($x107 (and (and $x270 $x387) $x328)))
 (let (($x149 (= $x107 true)))
 (let (($x336 (= $x149 true)))
 (let (($x361 (= $x336 true)))
 (let (($x316 (= $x270 true)))
 (let (($x100 (= $x316 true)))
 (let (($x139 (= $x100 true)))
 (let (($x13 (and $x387 $x328)))
 (let (($x164 (= $x13 true)))
 (let (($x365 (= $x164 true)))
 (let (($x35 (= $x365 true)))
 (let ((?x119 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x119)))
 (let ((?x237 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x331 $x170)))
 (let (($x230 (and $x161 $x84)))
 (let (($x245 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x245 $x230)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x334)))))))
 (let (($x277 (and $x171 $x218)))
 (let (($x226 (= $x277 true)))
 (let (($x97 (= $x226 true)))
 (let (($x372 (= $x97 true)))
 (let (($x384 (and $x372 $x35)))
 (let (($x121 (and $x384 $x139)))
 (let (($x34 (and $x121 $x361)))
 (let (($x386 (and $x34 $x101)))
 (let (($x85 (and $x386 $x102)))
 (let (($x183 (and $x85 $x191)))
 (let (($x50 (and $x183 $x160)))
 (let (($x136 (and $x50 $x352)))
 (let (($x74 (and $x136 $x261)))
 (let (($x109 (and $x7 $x137)))
 (let (($x219 (and $x290 $x109)))
 (let (($x207 (and $x349 $x219)))
 (let (($x176 (and $x207 $x74)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x63 (and $x31 $x176)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x345 (and $x231 $x63)))
 (let (($x251 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x87 (and $x251 $x345)))
 (let (($x10 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x55 (and $x10 $x87)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x61 (and $x199 $x55)))
 (let (($x317 (and $x203 $x61)))
 (let (($x294 (= ?x163 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x325 (and $x294 $x317)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x369 (and $x33 $x325)))
 (let (($x323 (and $x203 $x369)))
 (let (($x36 (= ?x186 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x210 (and $x36 $x323)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x54 (and $x169 $x210)))
 (let (($x304 (and $x203 $x54)))
 (let (($x375 (= ?x373 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x151 (and $x375 $x304)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x367 (and $x108 $x151)))
 (let (($x333 (and $x203 $x367)))
 (let (($x299 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x190 (and $x299 $x333)))
 (let (($x103 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x243)))
 (let (($x359 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x103)))))))
 (let (($x45 (bvugt ?x257 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x229 (=> (bvule ?x257 (bvsub (bvadd ?x257 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x330 $x45)))))))
 (let (($x22 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x105 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x19 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x105)))))))
 (let (($x319 (and $x19 $x125)))
 (let (($x327 (and $x319 $x229)))
 (let (($x57 (and $x327 $x359)))
 (let (($x189 (and $x57 $x190)))
 (let (($x283 (=> $x189 $x177)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x368 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x257 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x223 (bvadd ?x257 (_ bv3 32))))
 (let ((?x216 (concat (select input.dst.llvm-mem ?x223) (concat ?x39 ?x368))))
 (let ((?x104 (bvmul (_ bv4294967295 32) ?x216)))
 (let ((?x326 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x116 (concat ?x326 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x99 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x88 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x243 (bvadd ?x88 (_ bv3 32))))
 (let ((?x235 (concat (select input.dst.llvm-mem ?x243) (concat ?x99 ?x116))))
 (let ((?x148 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x347 (concat ?x148 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x287 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x83 (bvadd ?x287 (_ bv3 32))))
 (let ((?x144 (concat (select input.dst.llvm-mem ?x83) (concat ?x286 ?x347))))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x165)))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x42)))
 (let ((?x168 (bvadd (bvadd (bvadd ?x273 ?x144) ?x235) ?x104)))
 (let (($x269 (= (_ bv0 32) ?x168)))
 (let (($x315 (= $x269 true)))
 (let (($x177 (= $x315 true)))
 (let ((?x284 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x313 (= ?x284 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x385 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x224 (ite $x385 (_ bv1 32) (_ bv0 32))))
 (let (($x69 (bvuge ?x224 (_ bv1 32))))
 (let (($x194 (=> $x69 $x313)))
 (let (($x329 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x150 (= $x69 $x329)))
 (let (($x203 (= false false)))
 (let (($x137 (= ?x224 (_ bv0 32))))
 (let (($x129 (=> $x137 $x203)))
 (let (($x80 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x198 (= $x137 $x80)))
 (let (($x264 (and (and (and $x198 $x129) $x150) $x194)))
 (let (($x261 (= $x264 true)))
 (let ((?x373 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x307 (= ?x373 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x222 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x222 (_ bv1 32))))
 (let (($x40 (=> $x92 $x307)))
 (let (($x339 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x178 (= $x92 $x339)))
 (let (($x7 (= ?x222 (_ bv0 32))))
 (let (($x311 (=> $x7 $x203)))
 (let (($x70 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x76 (= $x7 $x70)))
 (let (($x275 (and (and (and $x76 $x311) $x178) $x40)))
 (let (($x352 (= $x275 true)))
 (let ((?x186 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x143 (= ?x186 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x18 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x351 (ite $x18 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x351 (_ bv1 32))))
 (let (($x322 (=> $x158 $x143)))
 (let (($x321 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x12 (= $x158 $x321)))
 (let (($x290 (= ?x351 (_ bv0 32))))
 (let (($x192 (=> $x290 $x203)))
 (let (($x240 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x300 (= $x290 $x240)))
 (let (($x318 (and (and (and $x300 $x192) $x12) $x322)))
 (let (($x160 (= $x318 true)))
 (let ((?x163 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x310 (= ?x163 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x98 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x141 (bvuge ?x98 (_ bv1 32))))
 (let (($x145 (=> $x141 $x310)))
 (let (($x301 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x232 (= $x141 $x301)))
 (let (($x349 (= ?x98 (_ bv0 32))))
 (let (($x379 (=> $x349 $x203)))
 (let (($x94 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x25 (= $x349 $x94)))
 (let (($x29 (and (and (and $x25 $x379) $x232) $x145)))
 (let (($x191 (= $x29 true)))
 (let (($x200 (forall ((input.ind-%var3382X (_ BitVec 32)) )(let (($x66 (input.spec-%var-m-0.0.1 input.ind-%var3382X)))
 (= $x66 (and (bvule (_ bv0 32) input.ind-%var3382X) (bvult input.ind-%var3382X (_ bv100 32))))))
 ))
 (let (($x60 (forall ((input.ind-%var3383X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3383X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x254 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x27))))
 (let ((?x228 (input.spec-%var-m-0.1.1 input.ind-%var3383X)))
 (let (($x66 (input.spec-%var-m-0.0.1 input.ind-%var3383X)))
 (=> $x66 (= ?x228 ?x254))))))))
 ))
 (let (($x110 (and $x60 $x200)))
 (let (($x102 (= $x110 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x159 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x354 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x306 (concat ?x354 (concat ?x159 (concat ?x357 ?x266)))))
 (let (($x382 (= ?x306 input.dst.llvm-%m)))
 (let (($x17 (= $x382 true)))
 (let (($x101 (= $x17 true)))
 (let (($x328 (= (bvand ?x257 (_ bv4294967292 32)) ?x257)))
 (let (($x52 (= (bvand ?x88 (_ bv4294967292 32)) ?x88)))
 (let (($x233 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x88 (bvsub ?x88 (_ bv4 32))) (bvult ?x88 (bvsub ?x88 (_ bv4 32))))))
 (let (($x280 (and true $x233)))
 (let (($x82 (= (bvand ?x287 (_ bv4294967292 32)) ?x287)))
 (let (($x383 (and $x82 $x280)))
 (let (($x303 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x257 (bvsub ?x257 (_ bv8 32))) (bvult ?x257 (bvsub ?x257 (_ bv8 32))))))
 (let (($x387 (and (and (and true $x303) $x383) $x52)))
 (let (($x248 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x124 (and true $x248)))
 (let (($x209 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x296 (and $x209 $x124)))
 (let (($x162 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x287 (bvsub ?x287 (_ bv12 32))) (bvult ?x287 (bvsub ?x287 (_ bv12 32))))))
 (let (($x270 (and (and (and true $x209) $x162) $x296)))
 (let (($x107 (and (and $x270 $x387) $x328)))
 (let (($x149 (= $x107 true)))
 (let (($x336 (= $x149 true)))
 (let (($x361 (= $x336 true)))
 (let (($x316 (= $x270 true)))
 (let (($x100 (= $x316 true)))
 (let (($x139 (= $x100 true)))
 (let (($x13 (and $x387 $x328)))
 (let (($x164 (= $x13 true)))
 (let (($x365 (= $x164 true)))
 (let (($x35 (= $x365 true)))
 (let ((?x119 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x84 (= (_ bv0 32) ?x119)))
 (let ((?x237 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x237)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x161 (and $x331 $x170)))
 (let (($x230 (and $x161 $x84)))
 (let (($x245 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x218 (and $x245 $x230)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x171 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x32 $x334)))))))
 (let (($x277 (and $x171 $x218)))
 (let (($x226 (= $x277 true)))
 (let (($x97 (= $x226 true)))
 (let (($x372 (= $x97 true)))
 (let (($x384 (and $x372 $x35)))
 (let (($x121 (and $x384 $x139)))
 (let (($x34 (and $x121 $x361)))
 (let (($x386 (and $x34 $x101)))
 (let (($x85 (and $x386 $x102)))
 (let (($x183 (and $x85 $x191)))
 (let (($x50 (and $x183 $x160)))
 (let (($x136 (and $x50 $x352)))
 (let (($x74 (and $x136 $x261)))
 (let (($x109 (and $x7 $x137)))
 (let (($x219 (and $x290 $x109)))
 (let (($x207 (and $x349 $x219)))
 (let (($x176 (and $x207 $x74)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x63 (and $x31 $x176)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x345 (and $x231 $x63)))
 (let (($x251 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x87 (and $x251 $x345)))
 (let (($x10 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x55 (and $x10 $x87)))
 (let (($x199 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x61 (and $x199 $x55)))
 (let (($x317 (and $x203 $x61)))
 (let (($x294 (= ?x163 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x325 (and $x294 $x317)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x369 (and $x33 $x325)))
 (let (($x323 (and $x203 $x369)))
 (let (($x36 (= ?x186 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x210 (and $x36 $x323)))
 (let (($x169 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x54 (and $x169 $x210)))
 (let (($x304 (and $x203 $x54)))
 (let (($x375 (= ?x373 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x151 (and $x375 $x304)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x367 (and $x108 $x151)))
 (let (($x333 (and $x203 $x367)))
 (let (($x299 (= ?x284 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x190 (and $x299 $x333)))
 (let (($x103 (bvugt ?x88 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x246 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x243)))
 (let (($x359 (=> (bvule ?x88 (bvsub (bvadd ?x88 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x246 $x103)))))))
 (let (($x45 (bvugt ?x257 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x330 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x223)))
 (let (($x229 (=> (bvule ?x257 (bvsub (bvadd ?x257 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x330 $x45)))))))
 (let (($x22 (bvugt ?x287 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x83)))
 (let (($x125 (=> (bvule ?x287 (bvsub (bvadd ?x287 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x6 $x22)))))))
 (let (($x105 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x131 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x142 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x131)))
 (let (($x19 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x142 $x105)))))))
 (let (($x319 (and $x19 $x125)))
 (let (($x327 (and $x319 $x229)))
 (let (($x57 (and $x327 $x359)))
 (let (($x189 (and $x57 $x190)))
 (let (($x283 (=> $x189 $x177)))
 (not $x283)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 237 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1510108/query
