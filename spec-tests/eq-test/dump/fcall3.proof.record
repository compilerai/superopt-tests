==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x84 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x83 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x78 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x77 (bvugt input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x73 (or (bvugt input.memlabel-mem--arg.1_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.1_end))))
 (let (($x67 (or (bvugt input.memlabel-mem--arg.0_begin ?x64) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x86 (and (and (and (and true $x67) $x73) (or $x77 $x78)) (or $x83 $x84))))
 (let (($x90 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false $x86)))))
 (let (($x52 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x53 (and $x51 $x52)))
 (let ((?x47 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x48 (= ?x47 (_ bv0 32))))
 (let ((?x43 (bvand input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32))))
 (let (($x45 (= ?x43 (_ bv0 32))))
 (let (($x49 (and $x45 $x48)))
 (let (($x34 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x33 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x35 (and $x33 $x34)))
 (let (($x36 (not $x35)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x30 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x30 $x31)))
 (let (($x38 (and (not $x32) $x36)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x26 (and $x24 $x25)))
 (let (($x27 (not $x26)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x21 $x22)))
 (let (($x29 (and (not $x23) $x27)))
 (let (($x39 (and $x29 $x38)))
 (let ((?x8 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x18 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x13 (bvadd input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x13)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (and $x9 $x12)))
 (let (($x17 (and $x6 $x16)))
 (let (($x20 (and $x17 $x19)))
 (let (($x40 (and $x20 $x39)))
 (let (($x50 (and $x40 $x49)))
 (let (($x54 (and $x50 $x53)))
 (and $x54 $x90)))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.1_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin #b11111111111000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ #b11111111111000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin #b11111111100000000000000000000000)
(= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ #b11111111100000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end #b11111111100000000000000000000011)
(= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end #b11111111111000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x61e31000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x61e31003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6de35f8f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6de35f8c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x61e31000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.1_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x7b97677f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6314253b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x63142538)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x7b97677c)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.1_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x253 (= true false)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var71X)))
 (let ((?x127 (input.spec-%var-m2-1.1.1 input.ind-%var71X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var71X)))
 (=> $x112 (= ?x127 ?x243))))))
 ))
 (let (($x238 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var70X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var70X)))
 (= $x112 $x234))))
 ))
 (let (($x250 (and $x238 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x227 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var63X)))
 (let ((?x176 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x165 (= ?x176 ?x221))))))
 ))
 (let (($x216 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var62X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x165 $x212))))
 ))
 (let (($x228 (and $x216 $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x205 (forall ((input.ind-%var55X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var55X (_ bv4 32))))
 (let ((?x192 (bvadd ?x145 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x176 (input.spec-%var-m1-1.1.1 input.ind-%var55X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var55X)))
 (=> $x165 (= ?x176 ?x202)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var54X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var54X) (bvult input.ind-%var54X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var54X)))
 (= $x165 $x121))))
 ))
 (let (($x206 (and $x172 $x205)))
 (let (($x207 (= $x206 true)))
 (let (($x159 (forall ((input.ind-%var47X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var47X (_ bv4 32))))
 (let ((?x146 (bvadd ?x145 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x150))))
 (let ((?x127 (input.spec-%var-m2-1.1.1 input.ind-%var47X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var47X)))
 (=> $x112 (= ?x127 ?x156)))))))))
 ))
 (let (($x123 (forall ((input.ind-%var46X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var46X) (bvult input.ind-%var46X (_ bv100 32)))))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var46X)))
 (= $x112 $x121))))
 ))
 (let (($x160 (and $x123 $x159)))
 (let (($x161 (= $x160 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x98 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x102 input.dst.llvm-%m2)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x84 (concat ?x63 ?x60)))))
 (let (($x58 (= ?x88 input.dst.llvm-%m1)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let ((?x61 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x61)))
 (let ((?x69 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x56 (= (_ bv0 32) ?x69)))
 (let ((?x89 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x70 $x68)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x28 $x25)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x81 $x54)))
 (let (($x23 (not $x9)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x64 $x72)))
 (let (($x55 (and (not $x51) $x23)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x8 $x29)))
 (let (($x7 (not $x44)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x15 $x16)))
 (let (($x73 (and (not $x65) $x7)))
 (let (($x77 (and (and (and (and (and (and $x73 $x55) $x74) $x39) $x47) $x46) $x56)))
 (let (($x36 (and $x77 $x80)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x41 (or false (or false (and (and true (or $x52 $x53)) (or $x76 $x6))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x37 (and $x83 $x36)))
 (let (($x33 (= $x37 true)))
 (let (($x21 (= $x33 true)))
 (let (($x42 (= $x21 true)))
 (let (($x91 (and $x42 $x59)))
 (let (($x107 (and $x91 $x106)))
 (let (($x162 (and $x107 $x161)))
 (let (($x208 (and $x162 $x207)))
 (let (($x230 (and $x208 $x229)))
 (let (($x252 (and $x230 $x251)))
 (let (($x255 (=> $x252 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x253 (= true false)))
 (let (($x254 (= $x253 true)))
 (let (($x249 (forall ((input.ind-%var71X (_ BitVec 32)) )(let ((?x243 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var71X)))
 (let ((?x127 (input.spec-%var-m2-1.1.1 input.ind-%var71X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var71X)))
 (=> $x112 (= ?x127 ?x243))))))
 ))
 (let (($x238 (forall ((input.ind-%var70X (_ BitVec 32)) )(let (($x234 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var70X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var70X)))
 (= $x112 $x234))))
 ))
 (let (($x250 (and $x238 $x249)))
 (let (($x251 (= $x250 true)))
 (let (($x227 (forall ((input.ind-%var63X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var63X)))
 (let ((?x176 (input.spec-%var-m1-1.1.1 input.ind-%var63X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var63X)))
 (=> $x165 (= ?x176 ?x221))))))
 ))
 (let (($x216 (forall ((input.ind-%var62X (_ BitVec 32)) )(let (($x212 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var62X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var62X)))
 (= $x165 $x212))))
 ))
 (let (($x228 (and $x216 $x227)))
 (let (($x229 (= $x228 true)))
 (let (($x205 (forall ((input.ind-%var55X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var55X (_ bv4 32))))
 (let ((?x192 (bvadd ?x145 input.dst.llvm-%m1)))
 (let ((?x196 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x202 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x196))))
 (let ((?x176 (input.spec-%var-m1-1.1.1 input.ind-%var55X)))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var55X)))
 (=> $x165 (= ?x176 ?x202)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var54X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var54X) (bvult input.ind-%var54X (_ bv100 32)))))
 (let (($x165 (input.spec-%var-m1-1.0.1 input.ind-%var54X)))
 (= $x165 $x121))))
 ))
 (let (($x206 (and $x172 $x205)))
 (let (($x207 (= $x206 true)))
 (let (($x159 (forall ((input.ind-%var47X (_ BitVec 32)) )(let ((?x145 (bvmul input.ind-%var47X (_ bv4 32))))
 (let ((?x146 (bvadd ?x145 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv1 32))) (select input.dst.llvm-mem ?x146))))
 (let ((?x156 (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x146 (_ bv2 32))) ?x150))))
 (let ((?x127 (input.spec-%var-m2-1.1.1 input.ind-%var47X)))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var47X)))
 (=> $x112 (= ?x127 ?x156)))))))))
 ))
 (let (($x123 (forall ((input.ind-%var46X (_ BitVec 32)) )(let (($x121 (and (bvule (_ bv0 32) input.ind-%var46X) (bvult input.ind-%var46X (_ bv100 32)))))
 (let (($x112 (input.spec-%var-m2-1.0.1 input.ind-%var46X)))
 (= $x112 $x121))))
 ))
 (let (($x160 (and $x123 $x159)))
 (let (($x161 (= $x160 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x98 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x101 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x101 (concat ?x98 (concat ?x95 ?x93)))))
 (let (($x104 (= ?x102 input.dst.llvm-%m2)))
 (let (($x105 (= $x104 true)))
 (let (($x106 (= $x105 true)))
 (let ((?x60 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x84 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x87 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x88 (concat ?x87 (concat ?x84 (concat ?x63 ?x60)))))
 (let (($x58 (= ?x88 input.dst.llvm-%m1)))
 (let (($x57 (= $x58 true)))
 (let (($x59 (= $x57 true)))
 (let ((?x61 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x80 (= (_ bv0 32) ?x61)))
 (let ((?x69 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x56 (= (_ bv0 32) ?x69)))
 (let ((?x89 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x89)))
 (let ((?x22 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x22)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x70 $x68)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x47 (and $x28 $x25)))
 (let (($x39 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x74 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x9 (and $x81 $x54)))
 (let (($x23 (not $x9)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x64 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (and $x64 $x72)))
 (let (($x55 (and (not $x51) $x23)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x8 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x44 (and $x8 $x29)))
 (let (($x7 (not $x44)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x15 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x65 (and $x15 $x16)))
 (let (($x73 (and (not $x65) $x7)))
 (let (($x77 (and (and (and (and (and (and $x73 $x55) $x74) $x39) $x47) $x46) $x56)))
 (let (($x36 (and $x77 $x80)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x43 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x43)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x43)))
 (let (($x41 (or false (or false (and (and true (or $x52 $x53)) (or $x76 $x6))))))
 (let (($x83 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x37 (and $x83 $x36)))
 (let (($x33 (= $x37 true)))
 (let (($x21 (= $x33 true)))
 (let (($x42 (= $x21 true)))
 (let (($x91 (and $x42 $x59)))
 (let (($x107 (and $x91 $x106)))
 (let (($x162 (and $x107 $x161)))
 (let (($x208 (and $x162 $x207)))
 (let (($x230 (and $x208 $x229)))
 (let (($x252 (and $x230 $x251)))
 (let (($x255 (=> $x252 $x254)))
 (not $x255))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x80000003)
                                   (k!0 #x80000002)
                                   (k!0 #x80000001)
                                   (k!0 #x80000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x3db941bc)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc1bd84c0)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xba6ff07c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdfff7df7)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc1bd84c3)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x3db941bf)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc1bd84c0)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x3db941bc)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xc1bd84c3) #xdf
    (ite (= x!0 #x3db941bd) #xf0
    (ite (= x!0 #xc1bd84c0) #xf7
    (ite (= x!0 #x3db941bf) #xba
    (ite (= x!0 #x3db941bc) #x7c
    (ite (= x!0 #x3db941be) #x6f
    (ite (= x!0 #xc1bd84c2) #xff
    (ite (= x!0 #xc1bd84c1) #x7d
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xc1bd84c3)
                                      (k!11 #xc1bd84c2)
                                      (k!11 #xc1bd84c1)
                                      (k!11 #xc1bd84c0))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x3db941bf)
                                      (k!11 #x3db941be)
                                      (k!11 #x3db941bd)
                                      (k!11 #x3db941bc))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(assert
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x41)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x63)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x97 $x60)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x45 $x100)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x12 $x52)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x88 (and (and (and (and (and (and $x23 $x67) $x91) $x71) $x51) $x16) $x25)))
 (let (($x37 (and $x88 $x19)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x87 (or false (or false (and (and true (or $x35 $x53)) (or $x39 $x70))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x258 (and $x73 $x37)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let (($x240 (forall ((input.ind-%var127X (_ BitVec 32)) )(let ((?x191 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var127X)))
 (let ((?x161 (input.spec-%var-m2-1.1.1 input.ind-%var127X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var127X)))
 (=> $x146 (= ?x161 ?x191))))))
 ))
 (let (($x125 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var126X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var126X)))
 (= $x146 $x118))))
 ))
 (let (($x246 (and $x125 $x240)))
 (let (($x109 (= $x246 true)))
 (let (($x235 (forall ((input.ind-%var121X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var121X)))
 (let ((?x92 (input.spec-%var-m1-1.1.1 input.ind-%var121X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var121X)))
 (=> $x248 (= ?x92 ?x222))))))
 ))
 (let (($x186 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x181 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var120X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var120X)))
 (= $x248 $x181))))
 ))
 (let (($x210 (and $x186 $x235)))
 (let (($x244 (= $x210 true)))
 (let (($x168 (forall ((input.ind-%var115X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var115X (_ bv4 32))))
 (let ((?x135 (bvadd ?x204 input.dst.llvm-%m1)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x142))))
 (let ((?x92 (input.spec-%var-m1-1.1.1 input.ind-%var115X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var115X)))
 (=> $x248 (= ?x92 ?x175)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var114X) (bvult input.ind-%var114X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var114X)))
 (= $x248 $x153))))
 ))
 (let (($x178 (and $x255 $x168)))
 (let (($x179 (= $x178 true)))
 (let (($x230 (forall ((input.ind-%var109X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var109X (_ bv4 32))))
 (let ((?x205 (bvadd ?x204 input.dst.llvm-%m2)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x212))))
 (let ((?x161 (input.spec-%var-m2-1.1.1 input.ind-%var109X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var109X)))
 (=> $x146 (= ?x161 ?x227)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var108X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var108X) (bvult input.ind-%var108X (_ bv100 32)))))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var108X)))
 (= $x146 $x153))))
 ))
 (let (($x234 (and $x157 $x230)))
 (let (($x237 (= $x234 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x96 (concat ?x94 ?x69)))))
 (let (($x105 (= input.dst.llvm-%m2 ?x104)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x28 (concat ?x61 (concat ?x24 ?x77)))))
 (let (($x82 (= input.dst.llvm-%m1 ?x58)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x84 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x111 (and (and (and $x84 $x15) $x82) $x105)))
 (let (($x115 (and (and (and $x73 true) $x37) $x111)))
 (let (($x119 (and true $x115)))
 (let (($x121 (= $x119 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x238 (and $x123 $x237)))
 (let (($x187 (and $x238 $x179)))
 (let (($x241 (and $x187 $x244)))
 (let (($x257 (and $x241 $x109)))
 (let (($x261 (=> $x257 $x260)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(assert
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x41)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x63)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x101)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x86)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x97 $x60)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x51 (and $x45 $x100)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x52 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x12 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x12 $x52)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x88 (and (and (and (and (and (and $x23 $x67) $x91) $x71) $x51) $x16) $x25)))
 (let (($x37 (and $x88 $x19)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x39 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x53 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x35 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x87 (or false (or false (and (and true (or $x35 $x53)) (or $x39 $x70))))))
 (let (($x73 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x87)))
 (let (($x258 (and $x73 $x37)))
 (let (($x259 (= $x258 true)))
 (let (($x260 (= $x259 true)))
 (let (($x240 (forall ((input.ind-%var127X (_ BitVec 32)) )(let ((?x191 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var127X)))
 (let ((?x161 (input.spec-%var-m2-1.1.1 input.ind-%var127X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var127X)))
 (=> $x146 (= ?x161 ?x191))))))
 ))
 (let (($x125 (forall ((input.ind-%var126X (_ BitVec 32)) )(let (($x118 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var126X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var126X)))
 (= $x146 $x118))))
 ))
 (let (($x246 (and $x125 $x240)))
 (let (($x109 (= $x246 true)))
 (let (($x235 (forall ((input.ind-%var121X (_ BitVec 32)) )(let ((?x222 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var121X)))
 (let ((?x92 (input.spec-%var-m1-1.1.1 input.ind-%var121X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var121X)))
 (=> $x248 (= ?x92 ?x222))))))
 ))
 (let (($x186 (forall ((input.ind-%var120X (_ BitVec 32)) )(let (($x181 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var120X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var120X)))
 (= $x248 $x181))))
 ))
 (let (($x210 (and $x186 $x235)))
 (let (($x244 (= $x210 true)))
 (let (($x168 (forall ((input.ind-%var115X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var115X (_ bv4 32))))
 (let ((?x135 (bvadd ?x204 input.dst.llvm-%m1)))
 (let ((?x142 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem ?x135))))
 (let ((?x175 (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x135 (_ bv2 32))) ?x142))))
 (let ((?x92 (input.spec-%var-m1-1.1.1 input.ind-%var115X)))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var115X)))
 (=> $x248 (= ?x92 ?x175)))))))))
 ))
 (let (($x255 (forall ((input.ind-%var114X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var114X) (bvult input.ind-%var114X (_ bv100 32)))))
 (let (($x248 (input.spec-%var-m1-1.0.1 input.ind-%var114X)))
 (= $x248 $x153))))
 ))
 (let (($x178 (and $x255 $x168)))
 (let (($x179 (= $x178 true)))
 (let (($x230 (forall ((input.ind-%var109X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var109X (_ bv4 32))))
 (let ((?x205 (bvadd ?x204 input.dst.llvm-%m2)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem ?x205))))
 (let ((?x227 (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x205 (_ bv2 32))) ?x212))))
 (let ((?x161 (input.spec-%var-m2-1.1.1 input.ind-%var109X)))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var109X)))
 (=> $x146 (= ?x161 ?x227)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var108X (_ BitVec 32)) )(let (($x153 (and (bvule (_ bv0 32) input.ind-%var108X) (bvult input.ind-%var108X (_ bv100 32)))))
 (let (($x146 (input.spec-%var-m2-1.0.1 input.ind-%var108X)))
 (= $x146 $x153))))
 ))
 (let (($x234 (and $x157 $x230)))
 (let (($x237 (= $x234 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x104 (concat ?x103 (concat ?x96 (concat ?x94 ?x69)))))
 (let (($x105 (= input.dst.llvm-%m2 ?x104)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x58 (concat ?x28 (concat ?x61 (concat ?x24 ?x77)))))
 (let (($x82 (= input.dst.llvm-%m1 ?x58)))
 (let (($x15 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x84 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x111 (and (and (and $x84 $x15) $x82) $x105)))
 (let (($x115 (and (and (and $x73 true) $x37) $x111)))
 (let (($x119 (and true $x115)))
 (let (($x121 (= $x119 true)))
 (let (($x122 (= $x121 true)))
 (let (($x123 (= $x122 true)))
 (let (($x238 (and $x123 $x237)))
 (let (($x187 (and $x238 $x179)))
 (let (($x241 (and $x187 $x244)))
 (let (($x257 (and $x241 $x109)))
 (let (($x261 (=> $x257 $x260)))
 (not $x261)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x236 (= $x209 true)))
 (let (($x134 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var151X)))
 (let ((?x227 (input.spec-%var-m2-1.1.1 input.ind-%var151X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var151X)))
 (=> $x156 (= ?x227 ?x253))))))
 ))
 (let (($x174 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var150X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var150X)))
 (= $x156 $x169))))
 ))
 (let (($x219 (and $x174 $x134)))
 (let (($x232 (= $x219 true)))
 (let (($x132 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var145X)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var145X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var145X)))
 (=> $x118 (= ?x259 ?x116))))))
 ))
 (let (($x130 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var144X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var144X)))
 (= $x118 $x243))))
 ))
 (let (($x137 (and $x130 $x132)))
 (let (($x164 (= $x137 true)))
 (let (($x201 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x133 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x189 (bvadd ?x133 input.dst.llvm-%m1)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x155))))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var139X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var139X)))
 (=> $x118 (= ?x259 ?x198)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var138X)))
 (= $x118 $x216))))
 ))
 (let (($x192 (and $x246 $x201)))
 (let (($x197 (= $x192 true)))
 (let (($x211 (forall ((input.ind-%var133X (_ BitVec 32)) )(let ((?x133 (bvmul input.ind-%var133X (_ bv4 32))))
 (let ((?x142 (bvadd ?x133 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x167))))
 (let ((?x227 (input.spec-%var-m2-1.1.1 input.ind-%var133X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var133X)))
 (=> $x156 (= ?x227 ?x183)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var132X) (bvult input.ind-%var132X (_ bv100 32)))))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var132X)))
 (= $x156 $x216))))
 ))
 (let (($x220 (and $x208 $x211)))
 (let (($x235 (= $x220 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x95 (concat ?x57 (concat ?x103 ?x107)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x62 (concat ?x68 (concat ?x28 ?x65)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x115 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x16 (= (_ bv0 32) ?x101)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x36 (= (_ bv0 32) ?x51)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x71 $x97)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x7 $x72)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x26)))
 (let (($x22 (not $x32)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x22)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x81)))
 (let (($x75 (not $x54)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x48)))
 (let (($x23 (and (not $x50) $x75)))
 (let (($x19 (and (and (and (and (and (and $x23 $x67) $x31) $x85) $x86) $x100) $x36)))
 (let (($x37 (and $x19 $x16)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x112 (or false (or false (and (and true (or $x20 $x10)) (or $x64 $x11))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x122 (and (and (and $x52 true) $x37) $x115)))
 (let (($x123 (and true $x122)))
 (let (($x145 (= $x123 true)))
 (let (($x146 (= $x145 true)))
 (let (($x150 (= $x146 true)))
 (let (($x210 (and $x150 $x235)))
 (let (($x195 (and $x210 $x197)))
 (let (($x247 (and $x195 $x164)))
 (let (($x213 (and $x247 $x232)))
 (let (($x190 (=> $x213 $x236)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x236 (= $x209 true)))
 (let (($x134 (forall ((input.ind-%var151X (_ BitVec 32)) )(let ((?x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var151X)))
 (let ((?x227 (input.spec-%var-m2-1.1.1 input.ind-%var151X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var151X)))
 (=> $x156 (= ?x227 ?x253))))))
 ))
 (let (($x174 (forall ((input.ind-%var150X (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var150X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var150X)))
 (= $x156 $x169))))
 ))
 (let (($x219 (and $x174 $x134)))
 (let (($x232 (= $x219 true)))
 (let (($x132 (forall ((input.ind-%var145X (_ BitVec 32)) )(let ((?x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var145X)))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var145X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var145X)))
 (=> $x118 (= ?x259 ?x116))))))
 ))
 (let (($x130 (forall ((input.ind-%var144X (_ BitVec 32)) )(let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var144X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var144X)))
 (= $x118 $x243))))
 ))
 (let (($x137 (and $x130 $x132)))
 (let (($x164 (= $x137 true)))
 (let (($x201 (forall ((input.ind-%var139X (_ BitVec 32)) )(let ((?x133 (bvmul input.ind-%var139X (_ bv4 32))))
 (let ((?x189 (bvadd ?x133 input.dst.llvm-%m1)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem ?x189))))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x189 (_ bv2 32))) ?x155))))
 (let ((?x259 (input.spec-%var-m1-1.1.1 input.ind-%var139X)))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var139X)))
 (=> $x118 (= ?x259 ?x198)))))))))
 ))
 (let (($x246 (forall ((input.ind-%var138X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var138X) (bvult input.ind-%var138X (_ bv100 32)))))
 (let (($x118 (input.spec-%var-m1-1.0.1 input.ind-%var138X)))
 (= $x118 $x216))))
 ))
 (let (($x192 (and $x246 $x201)))
 (let (($x197 (= $x192 true)))
 (let (($x211 (forall ((input.ind-%var133X (_ BitVec 32)) )(let ((?x133 (bvmul input.ind-%var133X (_ bv4 32))))
 (let ((?x142 (bvadd ?x133 input.dst.llvm-%m2)))
 (let ((?x167 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv1 32))) (select input.dst.llvm-mem ?x142))))
 (let ((?x183 (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x142 (_ bv2 32))) ?x167))))
 (let ((?x227 (input.spec-%var-m2-1.1.1 input.ind-%var133X)))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var133X)))
 (=> $x156 (= ?x227 ?x183)))))))))
 ))
 (let (($x208 (forall ((input.ind-%var132X (_ BitVec 32)) )(let (($x216 (and (bvule (_ bv0 32) input.ind-%var132X) (bvult input.ind-%var132X (_ bv100 32)))))
 (let (($x156 (input.spec-%var-m2-1.0.1 input.ind-%var132X)))
 (= $x156 $x216))))
 ))
 (let (($x220 (and $x208 $x211)))
 (let (($x235 (= $x220 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x95 (concat ?x57 (concat ?x103 ?x107)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x65 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x62 (concat ?x68 (concat ?x28 ?x65)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x115 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x16 (= (_ bv0 32) ?x101)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x36 (= (_ bv0 32) ?x51)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x60)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x97 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x71 $x97)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x86 (and $x7 $x72)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x26)))
 (let (($x22 (not $x32)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x22)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x81)))
 (let (($x75 (not $x54)))
 (let (($x48 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x48)))
 (let (($x23 (and (not $x50) $x75)))
 (let (($x19 (and (and (and (and (and (and $x23 $x67) $x31) $x85) $x86) $x100) $x36)))
 (let (($x37 (and $x19 $x16)))
 (let (($x11 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x53 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x53)))
 (let (($x10 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x20 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x53)))
 (let (($x112 (or false (or false (and (and true (or $x20 $x10)) (or $x64 $x11))))))
 (let (($x52 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x112)))
 (let (($x122 (and (and (and $x52 true) $x37) $x115)))
 (let (($x123 (and true $x122)))
 (let (($x145 (= $x123 true)))
 (let (($x146 (= $x145 true)))
 (let (($x150 (= $x146 true)))
 (let (($x210 (and $x150 $x235)))
 (let (($x195 (and $x210 $x197)))
 (let (($x247 (and $x195 $x164)))
 (let (($x213 (and $x247 $x232)))
 (let (($x190 (=> $x213 $x236)))
 (not $x190))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0000000c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20202020)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x20202000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0000000f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0000000c)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000008) #x00
      #x20))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000f)
                                   (k!0 #x0000000e)
                                   (k!0 #x0000000d)
                                   (k!0 #x0000000c)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000f)
                                   (k!0 #x0000000e)
                                   (k!0 #x0000000d)
                                   (k!0 #x0000000c)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000f)
                                   (k!0 #x0000000e)
                                   (k!0 #x0000000d)
                                   (k!0 #x0000000c)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000f)
                                   (k!0 #x0000000e)
                                   (k!0 #x0000000d)
                                   (k!0 #x0000000c))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x0000000b)
                                   (k!0 #x0000000a)
                                   (k!0 #x00000009)
                                   (k!0 #x00000008))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9edd2720)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc9ae8b44)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x02804008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xaecddd00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc9ae8b47)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9edd2723)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc9ae8b44)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9edd2720)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x9edd2721) #x40
    (ite (= x!0 #xc9ae8b47) #xae
    (ite (= x!0 #x9edd2723) #x02
    (ite (= x!0 #x9edd2720) #x08
    (ite (= x!0 #x9edd2722) #x80
    (ite (= x!0 #xc9ae8b46) #xcd
    (ite (= x!0 #xc9ae8b45) #xdd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc9ae8b47)
                                      (k!11 #xc9ae8b46)
                                      (k!11 #xc9ae8b45)
                                      (k!11 #xc9ae8b44)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc9ae8b47)
                                      (k!11 #xc9ae8b46)
                                      (k!11 #xc9ae8b45)
                                      (k!11 #xc9ae8b44)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xc9ae8b47)
                                      (k!11 #xc9ae8b46)
                                      (k!11 #xc9ae8b45)
                                      (k!11 #xc9ae8b44)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xc9ae8b47)
                                      (k!11 #xc9ae8b46)
                                      (k!11 #xc9ae8b45)
                                      (k!11 #xc9ae8b44))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9edd2723)
                                      (k!11 #x9edd2722)
                                      (k!11 #x9edd2721)
                                      (k!11 #x9edd2720)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9edd2723)
                                      (k!11 #x9edd2722)
                                      (k!11 #x9edd2721)
                                      (k!11 #x9edd2720)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9edd2723)
                                      (k!11 #x9edd2722)
                                      (k!11 #x9edd2721)
                                      (k!11 #x9edd2720)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x9edd2723)
                                      (k!11 #x9edd2722)
                                      (k!11 #x9edd2721)
                                      (k!11 #x9edd2720))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x203 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x149 (= (_ bv0 8) ?x203)))
 (let (($x138 (= $x149 true)))
 (let (($x126 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var207X)))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var207X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var207X)))
 (=> $x208 (= ?x186 ?x212))))))
 ))
 (let (($x256 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var206X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var206X)))
 (= $x208 $x224))))
 ))
 (let (($x231 (and $x256 $x126)))
 (let (($x128 (= $x231 true)))
 (let (($x217 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var201X)))
 (let ((?x190 (input.spec-%var-m1-1.1.1 input.ind-%var201X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var201X)))
 (=> $x242 (= ?x190 ?x162))))))
 ))
 (let (($x205 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x125 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var200X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var200X)))
 (= $x242 $x125))))
 ))
 (let (($x140 (and $x205 $x217)))
 (let (($x199 (= $x140 true)))
 (let (($x238 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x155 (bvmul input.ind-%var195X (_ bv4 32))))
 (let ((?x206 (bvadd ?x155 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x204))))
 (let ((?x190 (input.spec-%var-m1-1.1.1 input.ind-%var195X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var195X)))
 (=> $x242 (= ?x190 ?x135)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X (_ bv100 32)))))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var194X)))
 (= $x242 $x175))))
 ))
 (let (($x255 (and $x232 $x238)))
 (let (($x177 (= $x255 true)))
 (let (($x114 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x155 (bvmul input.ind-%var189X (_ bv4 32))))
 (let ((?x176 (bvadd ?x155 input.dst.llvm-%m2)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x201))))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var189X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var189X)))
 (=> $x208 (= ?x186 ?x130)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var188X) (bvult input.ind-%var188X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var188X)))
 (= $x208 $x175))))
 ))
 (let (($x132 (and $x117 $x114)))
 (let (($x137 (= $x132 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x94 (concat ?x103 (concat ?x96 ?x69)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x24 (concat ?x28 (concat ?x80 ?x77)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x123 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x60)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x86)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x85 $x71)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x91 $x18)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x6 $x44)))
 (let (($x32 (not $x26)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x17 $x9)))
 (let (($x54 (not $x81)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x5)))
 (let (($x23 (and (not $x50) $x54)))
 (let (($x16 (and (and (and (and (and (and $x23 $x67) $x21) $x63) $x45) $x72) $x88)))
 (let (($x37 (and $x16 $x100)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x119 (or false (or false (and (and true (or $x76 $x39)) (or $x74 $x87))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x150 (and (and (and $x48 true) $x37) $x123)))
 (let (($x153 (and true $x150)))
 (let (($x156 (= $x153 true)))
 (let (($x215 (= $x156 true)))
 (let (($x171 (= $x215 true)))
 (let (($x164 (and $x171 $x137)))
 (let (($x110 (and $x164 $x177)))
 (let (($x38 (and $x110 $x199)))
 (let (($x108 (and $x38 $x128)))
 (let (($x144 (=> $x108 $x138)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x203 ((_ extract 7 0) input.dst.llvm-%m1)))
 (let (($x149 (= (_ bv0 8) ?x203)))
 (let (($x138 (= $x149 true)))
 (let (($x126 (forall ((input.ind-%var207X (_ BitVec 32)) )(let ((?x212 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var207X)))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var207X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var207X)))
 (=> $x208 (= ?x186 ?x212))))))
 ))
 (let (($x256 (forall ((input.ind-%var206X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var206X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var206X)))
 (= $x208 $x224))))
 ))
 (let (($x231 (and $x256 $x126)))
 (let (($x128 (= $x231 true)))
 (let (($x217 (forall ((input.ind-%var201X (_ BitVec 32)) )(let ((?x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var201X)))
 (let ((?x190 (input.spec-%var-m1-1.1.1 input.ind-%var201X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var201X)))
 (=> $x242 (= ?x190 ?x162))))))
 ))
 (let (($x205 (forall ((input.ind-%var200X (_ BitVec 32)) )(let (($x125 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var200X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var200X)))
 (= $x242 $x125))))
 ))
 (let (($x140 (and $x205 $x217)))
 (let (($x199 (= $x140 true)))
 (let (($x238 (forall ((input.ind-%var195X (_ BitVec 32)) )(let ((?x155 (bvmul input.ind-%var195X (_ bv4 32))))
 (let ((?x206 (bvadd ?x155 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv1 32))) (select input.dst.llvm-mem ?x206))))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x206 (_ bv2 32))) ?x204))))
 (let ((?x190 (input.spec-%var-m1-1.1.1 input.ind-%var195X)))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var195X)))
 (=> $x242 (= ?x190 ?x135)))))))))
 ))
 (let (($x232 (forall ((input.ind-%var194X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var194X) (bvult input.ind-%var194X (_ bv100 32)))))
 (let (($x242 (input.spec-%var-m1-1.0.1 input.ind-%var194X)))
 (= $x242 $x175))))
 ))
 (let (($x255 (and $x232 $x238)))
 (let (($x177 (= $x255 true)))
 (let (($x114 (forall ((input.ind-%var189X (_ BitVec 32)) )(let ((?x155 (bvmul input.ind-%var189X (_ bv4 32))))
 (let ((?x176 (bvadd ?x155 input.dst.llvm-%m2)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv1 32))) (select input.dst.llvm-mem ?x176))))
 (let ((?x130 (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x176 (_ bv2 32))) ?x201))))
 (let ((?x186 (input.spec-%var-m2-1.1.1 input.ind-%var189X)))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var189X)))
 (=> $x208 (= ?x186 ?x130)))))))))
 ))
 (let (($x117 (forall ((input.ind-%var188X (_ BitVec 32)) )(let (($x175 (and (bvule (_ bv0 32) input.ind-%var188X) (bvult input.ind-%var188X (_ bv100 32)))))
 (let (($x208 (input.spec-%var-m2-1.0.1 input.ind-%var188X)))
 (= $x208 $x175))))
 ))
 (let (($x132 (and $x117 $x114)))
 (let (($x137 (= $x132 true)))
 (let ((?x69 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x94 (concat ?x103 (concat ?x96 ?x69)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x77 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x24 (concat ?x28 (concat ?x80 ?x77)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x123 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x60 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x60)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x86)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x97)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x7)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x85 $x71)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x45 (and $x91 $x18)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x6 $x44)))
 (let (($x32 (not $x26)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x17 $x9)))
 (let (($x54 (not $x81)))
 (let (($x5 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x5)))
 (let (($x23 (and (not $x50) $x54)))
 (let (($x16 (and (and (and (and (and (and $x23 $x67) $x21) $x63) $x45) $x72) $x88)))
 (let (($x37 (and $x16 $x100)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x10 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x74 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x10)))
 (let (($x39 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x10)))
 (let (($x119 (or false (or false (and (and true (or $x76 $x39)) (or $x74 $x87))))))
 (let (($x48 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x119)))
 (let (($x150 (and (and (and $x48 true) $x37) $x123)))
 (let (($x153 (and true $x150)))
 (let (($x156 (= $x153 true)))
 (let (($x215 (= $x156 true)))
 (let (($x171 (= $x215 true)))
 (let (($x164 (and $x171 $x137)))
 (let (($x110 (and $x164 $x177)))
 (let (($x38 (and $x110 $x199)))
 (let (($x108 (and $x38 $x128)))
 (let (($x144 (=> $x108 $x138)))
 (not $x144)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000040) #x04
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000043)
                                   (k!0 #x00000042)
                                   (k!0 #x00000041)
                                   (k!0 #x00000040))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x9a5fae04)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x21e9cf50)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xbffc3700)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xdf7dfd10)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x21e9cf53)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x9a5fae07)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x21e9cf50)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x9a5fae04)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x21e9cf50) #x10
    (ite (= x!0 #x9a5fae05) #x37
    (ite (= x!0 #x21e9cf53) #xdf
    (ite (= x!0 #x9a5fae07) #xbf
    (ite (= x!0 #x9a5fae06) #xfc
    (ite (= x!0 #x21e9cf52) #x7d
    (ite (= x!0 #x21e9cf51) #xfd
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x21e9cf53)
                                      (k!11 #x21e9cf52)
                                      (k!11 #x21e9cf51)
                                      (k!11 #x21e9cf50))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x9a5fae07)
                                      (k!11 #x9a5fae06)
                                      (k!11 #x9a5fae05)
                                      (k!11 #x9a5fae04))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x143 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x136 (= (_ bv0 3) ?x143)))
 (let (($x251 (= $x136 true)))
 (let (($x148 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var263X)))
 (let ((?x116 (input.spec-%var-m2-1.1.1 input.ind-%var263X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var263X)))
 (=> $x117 (= ?x116 ?x134))))))
 ))
 (let (($x245 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var262X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var262X)))
 (= $x117 $x169))))
 ))
 (let (($x46 (and $x245 $x148)))
 (let (($x185 (= $x46 true)))
 (let (($x260 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var257X)))
 (let ((?x149 (input.spec-%var-m1-1.1.1 input.ind-%var257X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var257X)))
 (=> $x233 (= ?x149 ?x228))))))
 ))
 (let (($x216 (forall ((input.ind-%var256X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var256X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var256X)))
 (= $x233 $x247))))
 ))
 (let (($x214 (and $x216 $x260)))
 (let (($x182 (= $x214 true)))
 (let (($x246 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x262 (bvadd ?x204 input.dst.llvm-%m1)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x230))))
 (let ((?x149 (input.spec-%var-m1-1.1.1 input.ind-%var251X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var251X)))
 (=> $x233 (= ?x149 ?x189)))))))))
 ))
 (let (($x128 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var250X)))
 (= $x233 $x194))))
 ))
 (let (($x118 (and $x128 $x246)))
 (let (($x259 (= $x118 true)))
 (let (($x249 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var245X (_ bv4 32))))
 (let ((?x173 (bvadd ?x204 input.dst.llvm-%m2)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x238))))
 (let ((?x116 (input.spec-%var-m2-1.1.1 input.ind-%var245X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var245X)))
 (=> $x117 (= ?x116 ?x205)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X (_ bv100 32)))))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var244X)))
 (= $x117 $x194))))
 ))
 (let (($x217 (and $x198 $x249)))
 (let (($x140 (= $x217 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x107 (concat ?x96 (concat ?x102 ?x93)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x65 (concat ?x80 (concat ?x68 ?x42)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x153 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x97)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x19 (= (_ bv0 32) ?x45)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x63 $x85)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x31 $x25)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x22 $x6)))
 (let (($x26 (not $x44)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x75 $x17)))
 (let (($x81 (not $x9)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x30)))
 (let (($x23 (and (not $x50) $x81)))
 (let (($x100 (and (and (and (and (and (and $x23 $x67) $x90) $x51) $x7) $x18) $x19)))
 (let (($x37 (and $x100 $x72)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x145 (or false (or false (and (and true (or $x40 $x64)) (or $x73 $x112))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x171 (and (and (and $x5 true) $x37) $x153)))
 (let (($x207 (and true $x171)))
 (let (($x208 (= $x207 true)))
 (let (($x178 (= $x208 true)))
 (let (($x133 (= $x178 true)))
 (let (($x199 (and $x133 $x140)))
 (let (($x196 (and $x199 $x259)))
 (let (($x109 (and $x196 $x182)))
 (let (($x78 (and $x109 $x185)))
 (let (($x184 (=> $x78 $x251)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x143 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x136 (= (_ bv0 3) ?x143)))
 (let (($x251 (= $x136 true)))
 (let (($x148 (forall ((input.ind-%var263X (_ BitVec 32)) )(let ((?x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var263X)))
 (let ((?x116 (input.spec-%var-m2-1.1.1 input.ind-%var263X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var263X)))
 (=> $x117 (= ?x116 ?x134))))))
 ))
 (let (($x245 (forall ((input.ind-%var262X (_ BitVec 32)) )(let (($x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var262X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var262X)))
 (= $x117 $x169))))
 ))
 (let (($x46 (and $x245 $x148)))
 (let (($x185 (= $x46 true)))
 (let (($x260 (forall ((input.ind-%var257X (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var257X)))
 (let ((?x149 (input.spec-%var-m1-1.1.1 input.ind-%var257X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var257X)))
 (=> $x233 (= ?x149 ?x228))))))
 ))
 (let (($x216 (forall ((input.ind-%var256X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var256X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var256X)))
 (= $x233 $x247))))
 ))
 (let (($x214 (and $x216 $x260)))
 (let (($x182 (= $x214 true)))
 (let (($x246 (forall ((input.ind-%var251X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var251X (_ bv4 32))))
 (let ((?x262 (bvadd ?x204 input.dst.llvm-%m1)))
 (let ((?x230 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv1 32))) (select input.dst.llvm-mem ?x262))))
 (let ((?x189 (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x262 (_ bv2 32))) ?x230))))
 (let ((?x149 (input.spec-%var-m1-1.1.1 input.ind-%var251X)))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var251X)))
 (=> $x233 (= ?x149 ?x189)))))))))
 ))
 (let (($x128 (forall ((input.ind-%var250X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var250X) (bvult input.ind-%var250X (_ bv100 32)))))
 (let (($x233 (input.spec-%var-m1-1.0.1 input.ind-%var250X)))
 (= $x233 $x194))))
 ))
 (let (($x118 (and $x128 $x246)))
 (let (($x259 (= $x118 true)))
 (let (($x249 (forall ((input.ind-%var245X (_ BitVec 32)) )(let ((?x204 (bvmul input.ind-%var245X (_ bv4 32))))
 (let ((?x173 (bvadd ?x204 input.dst.llvm-%m2)))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv1 32))) (select input.dst.llvm-mem ?x173))))
 (let ((?x205 (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x173 (_ bv2 32))) ?x238))))
 (let ((?x116 (input.spec-%var-m2-1.1.1 input.ind-%var245X)))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var245X)))
 (=> $x117 (= ?x116 ?x205)))))))))
 ))
 (let (($x198 (forall ((input.ind-%var244X (_ BitVec 32)) )(let (($x194 (and (bvule (_ bv0 32) input.ind-%var244X) (bvult input.ind-%var244X (_ bv100 32)))))
 (let (($x117 (input.spec-%var-m2-1.0.1 input.ind-%var244X)))
 (= $x117 $x194))))
 ))
 (let (($x217 (and $x198 $x249)))
 (let (($x140 (= $x217 true)))
 (let ((?x93 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x107 (concat ?x96 (concat ?x102 ?x93)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x42 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x65 (concat ?x80 (concat ?x68 ?x42)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x47 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x153 (and (and (and $x47 $x83) $x58) $x104)))
 (let ((?x97 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x72 (= (_ bv0 32) ?x97)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x19 (= (_ bv0 32) ?x45)))
 (let ((?x71 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x71)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x25 (and $x63 $x85)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x31 $x25)))
 (let (($x51 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x22 $x6)))
 (let (($x26 (not $x44)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x75 $x17)))
 (let (($x81 (not $x9)))
 (let (($x30 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x30)))
 (let (($x23 (and (not $x50) $x81)))
 (let (($x100 (and (and (and (and (and (and $x23 $x67) $x90) $x51) $x7) $x18) $x19)))
 (let (($x37 (and $x100 $x72)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x39 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x39)))
 (let (($x64 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x40 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x39)))
 (let (($x145 (or false (or false (and (and true (or $x40 $x64)) (or $x73 $x112))))))
 (let (($x5 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x171 (and (and (and $x5 true) $x37) $x153)))
 (let (($x207 (and true $x171)))
 (let (($x208 (= $x207 true)))
 (let (($x178 (= $x208 true)))
 (let (($x133 (= $x178 true)))
 (let (($x199 (and $x133 $x140)))
 (let (($x196 (and $x199 $x259)))
 (let (($x109 (and $x196 $x182)))
 (let (($x78 (and $x109 $x185)))
 (let (($x184 (=> $x78 $x251)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x04040404)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x04040400)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000083)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000080) #x00
      #x04))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000083)
                                   (k!0 #x00000082)
                                   (k!0 #x00000081)
                                   (k!0 #x00000080))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x69215b54)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd6cddce8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xffdfbe04)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xd7dd7900)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd6cddceb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x69215b57)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd6cddce8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x69215b54)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x69215b55) #xbe
    (ite (= x!0 #xd6cddceb) #xd7
    (ite (= x!0 #x69215b57) #xff
    (ite (= x!0 #x69215b54) #x04
    (ite (= x!0 #x69215b56) #xdf
    (ite (= x!0 #xd6cddcea) #xdd
    (ite (= x!0 #xd6cddce9) #x79
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xd6cddceb)
                                      (k!11 #xd6cddcea)
                                      (k!11 #xd6cddce9)
                                      (k!11 #xd6cddce8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x69215b57)
                                      (k!11 #x69215b56)
                                      (k!11 #x69215b55)
                                      (k!11 #x69215b54))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 6
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x106 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x158 (= (_ bv0 2) ?x106)))
 (let (($x181 (= $x158 true)))
 (let (($x211 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x154 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var319X)))
 (let ((?x162 (input.spec-%var-m2-1.1.1 input.ind-%var319X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var319X)))
 (=> $x198 (= ?x162 ?x154))))))
 ))
 (let (($x188 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x127 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var318X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var318X)))
 (= $x198 $x127))))
 ))
 (let (($x139 (and $x188 $x211)))
 (let (($x82 (= $x139 true)))
 (let (($x15 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var313X)))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var313X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var313X)))
 (=> $x241 (= ?x136 ?x191))))))
 ))
 (let (($x144 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var312X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var312X)))
 (= $x241 $x203))))
 ))
 (let (($x174 (and $x144 $x15)))
 (let (($x43 (= $x174 true)))
 (let (($x219 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var307X (_ bv4 32))))
 (let ((?x179 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x168))))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var307X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var307X)))
 (=> $x241 (= ?x136 ?x237)))))))))
 ))
 (let (($x185 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var306X) (bvult input.ind-%var306X (_ bv100 32)))))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var306X)))
 (= $x241 $x248))))
 ))
 (let (($x232 (and $x185 $x219)))
 (let (($x242 (= $x232 true)))
 (let (($x157 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var301X (_ bv4 32))))
 (let ((?x210 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x246))))
 (let ((?x162 (input.spec-%var-m2-1.1.1 input.ind-%var301X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var301X)))
 (=> $x198 (= ?x162 ?x216)))))))))
 ))
 (let (($x135 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X (_ bv100 32)))))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var300X)))
 (= $x198 $x248))))
 ))
 (let (($x260 (and $x135 $x157)))
 (let (($x214 (= $x260 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x69 (concat ?x102 (concat ?x95 ?x57)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x77 (concat ?x68 (concat ?x28 ?x61)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x207 (and (and (and $x56 $x83) $x58) $x104)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x18 (= (_ bv0 32) ?x71)))
 (let ((?x7 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x16 (= (_ bv0 32) ?x7)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x51 $x63)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x21 $x36)))
 (let (($x86 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x32 $x22)))
 (let (($x44 (not $x6)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x44)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x54 $x75)))
 (let (($x9 (not $x17)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x84)))
 (let (($x23 (and (not $x50) $x9)))
 (let (($x72 (and (and (and (and (and (and $x23 $x67) $x41) $x86) $x91) $x25) $x16)))
 (let (($x37 (and $x72 $x18)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x156 (or false (or false (and (and true (or $x70 $x74)) (or $x52 $x119))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x133 (and (and (and $x30 true) $x37) $x207)))
 (let (($x163 (and true $x133)))
 (let (($x117 (= $x163 true)))
 (let (($x197 (= $x117 true)))
 (let (($x155 (= $x197 true)))
 (let (($x182 (and $x155 $x214)))
 (let (($x190 (and $x182 $x242)))
 (let (($x250 (and $x190 $x43)))
 (let (($x141 (and $x250 $x82)))
 (let (($x159 (=> $x141 $x181)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x106 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x158 (= (_ bv0 2) ?x106)))
 (let (($x181 (= $x158 true)))
 (let (($x211 (forall ((input.ind-%var319X (_ BitVec 32)) )(let ((?x154 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var319X)))
 (let ((?x162 (input.spec-%var-m2-1.1.1 input.ind-%var319X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var319X)))
 (=> $x198 (= ?x162 ?x154))))))
 ))
 (let (($x188 (forall ((input.ind-%var318X (_ BitVec 32)) )(let (($x127 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var318X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var318X)))
 (= $x198 $x127))))
 ))
 (let (($x139 (and $x188 $x211)))
 (let (($x82 (= $x139 true)))
 (let (($x15 (forall ((input.ind-%var313X (_ BitVec 32)) )(let ((?x191 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var313X)))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var313X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var313X)))
 (=> $x241 (= ?x136 ?x191))))))
 ))
 (let (($x144 (forall ((input.ind-%var312X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var312X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var312X)))
 (= $x241 $x203))))
 ))
 (let (($x174 (and $x144 $x15)))
 (let (($x43 (= $x174 true)))
 (let (($x219 (forall ((input.ind-%var307X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var307X (_ bv4 32))))
 (let ((?x179 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem ?x179))))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x179 (_ bv2 32))) ?x168))))
 (let ((?x136 (input.spec-%var-m1-1.1.1 input.ind-%var307X)))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var307X)))
 (=> $x241 (= ?x136 ?x237)))))))))
 ))
 (let (($x185 (forall ((input.ind-%var306X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var306X) (bvult input.ind-%var306X (_ bv100 32)))))
 (let (($x241 (input.spec-%var-m1-1.0.1 input.ind-%var306X)))
 (= $x241 $x248))))
 ))
 (let (($x232 (and $x185 $x219)))
 (let (($x242 (= $x232 true)))
 (let (($x157 (forall ((input.ind-%var301X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var301X (_ bv4 32))))
 (let ((?x210 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x246 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv1 32))) (select input.dst.llvm-mem ?x210))))
 (let ((?x216 (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x210 (_ bv2 32))) ?x246))))
 (let ((?x162 (input.spec-%var-m2-1.1.1 input.ind-%var301X)))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var301X)))
 (=> $x198 (= ?x162 ?x216)))))))))
 ))
 (let (($x135 (forall ((input.ind-%var300X (_ BitVec 32)) )(let (($x248 (and (bvule (_ bv0 32) input.ind-%var300X) (bvult input.ind-%var300X (_ bv100 32)))))
 (let (($x198 (input.spec-%var-m2-1.0.1 input.ind-%var300X)))
 (= $x198 $x248))))
 ))
 (let (($x260 (and $x135 $x157)))
 (let (($x214 (= $x260 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x99 (concat ?x69 (concat ?x102 (concat ?x95 ?x57)))))
 (let (($x104 (= input.dst.llvm-%m2 ?x99)))
 (let ((?x61 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x33 (concat ?x77 (concat ?x68 (concat ?x28 ?x61)))))
 (let (($x58 (= input.dst.llvm-%m1 ?x33)))
 (let (($x83 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x207 (and (and (and $x56 $x83) $x58) $x104)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x18 (= (_ bv0 32) ?x71)))
 (let ((?x7 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x16 (= (_ bv0 32) ?x7)))
 (let ((?x85 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x85)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (and $x51 $x63)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (and $x21 $x36)))
 (let (($x86 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x32 $x22)))
 (let (($x44 (not $x6)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x44)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x54 $x75)))
 (let (($x9 (not $x17)))
 (let (($x84 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x84)))
 (let (($x23 (and (not $x50) $x9)))
 (let (($x72 (and (and (and (and (and (and $x23 $x67) $x41) $x86) $x91) $x25) $x16)))
 (let (($x37 (and $x72 $x18)))
 (let (($x119 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x64 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x52 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x64)))
 (let (($x74 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x64)))
 (let (($x156 (or false (or false (and (and true (or $x70 $x74)) (or $x52 $x119))))))
 (let (($x30 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x156)))
 (let (($x133 (and (and (and $x30 true) $x37) $x207)))
 (let (($x163 (and true $x133)))
 (let (($x117 (= $x163 true)))
 (let (($x197 (= $x117 true)))
 (let (($x155 (= $x197 true)))
 (let (($x182 (and $x155 $x214)))
 (let (($x190 (and $x182 $x242)))
 (let (($x250 (and $x190 $x43)))
 (let (($x141 (and $x250 $x82)))
 (let (($x159 (=> $x141 $x181)))
 (not $x159)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 7
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x195 (= (_ bv0 2) ?x120)))
 (let (($x213 (= $x195 true)))
 (let (($x129 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var343X)))
 (let ((?x216 (input.spec-%var-m2-1.1.1 input.ind-%var343X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var343X)))
 (=> $x254 (= ?x216 ?x236))))))
 ))
 (let (($x131 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var342X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var342X)))
 (= $x254 $x113))))
 ))
 (let (($x14 (and $x131 $x129)))
 (let (($x222 (= $x14 true)))
 (let (($x122 (forall ((input.ind-%var337X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var337X)))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var337X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var337X)))
 (=> $x127 (= ?x106 ?x138))))))
 ))
 (let (($x184 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var336X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var336X)))
 (= $x127 $x143))))
 ))
 (let (($x124 (and $x184 $x122)))
 (let (($x253 (= $x124 true)))
 (let (($x231 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x187 (bvmul input.ind-%var331X (_ bv4 32))))
 (let ((?x126 (bvadd ?x187 input.dst.llvm-%m1)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x192))))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var331X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var331X)))
 (=> $x127 (= ?x106 ?x235)))))))))
 ))
 (let (($x139 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var330X)))
 (= $x127 $x259))))
 ))
 (let (($x128 (and $x139 $x231)))
 (let (($x233 (= $x128 true)))
 (let (($x111 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x187 (bvmul input.ind-%var325X (_ bv4 32))))
 (let ((?x168 (bvadd ?x187 input.dst.llvm-%m2)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x166))))
 (let ((?x216 (input.spec-%var-m2-1.1.1 input.ind-%var325X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var325X)))
 (=> $x254 (= ?x216 ?x257)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var324X)))
 (= $x254 $x259))))
 ))
 (let (($x53 (and $x240 $x111)))
 (let (($x15 (= $x53 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x96 (concat ?x107 (concat ?x69 ?x171)))))
 (let (($x99 (= input.dst.llvm-%m2 ?x93)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x62 (concat ?x65 (concat ?x77 ?x123)))))
 (let (($x33 (= input.dst.llvm-%m1 ?x42)))
 (let (($x66 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x27 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x133 (and (and (and $x27 $x66) $x33) $x99)))
 (let ((?x85 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x25 (= (_ bv0 32) ?x85)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x91)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x86 $x51)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x90 $x88)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x165)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x18 (and (and (and (and (and (and $x23 $x67) $x101) $x45) $x31) $x36) $x100)))
 (let (($x37 (and $x18 $x25)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x208 (or false (or false (and (and true (or $x11 $x73)) (or $x48 $x145))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x197 (and (and (and $x84 true) $x37) $x133)))
 (let (($x155 (and true $x197)))
 (let (($x200 (= $x155 true)))
 (let (($x198 (= $x200 true)))
 (let (($x177 (= $x198 true)))
 (let (($x174 (and $x177 $x15)))
 (let (($x149 (and $x174 $x233)))
 (let (($x239 (and $x149 $x253)))
 (let (($x223 (and $x239 $x222)))
 (let (($x221 (=> $x223 $x213)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x195 (= (_ bv0 2) ?x120)))
 (let (($x213 (= $x195 true)))
 (let (($x129 (forall ((input.ind-%var343X (_ BitVec 32)) )(let ((?x236 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var343X)))
 (let ((?x216 (input.spec-%var-m2-1.1.1 input.ind-%var343X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var343X)))
 (=> $x254 (= ?x216 ?x236))))))
 ))
 (let (($x131 (forall ((input.ind-%var342X (_ BitVec 32)) )(let (($x113 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var342X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var342X)))
 (= $x254 $x113))))
 ))
 (let (($x14 (and $x131 $x129)))
 (let (($x222 (= $x14 true)))
 (let (($x122 (forall ((input.ind-%var337X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var337X)))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var337X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var337X)))
 (=> $x127 (= ?x106 ?x138))))))
 ))
 (let (($x184 (forall ((input.ind-%var336X (_ BitVec 32)) )(let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var336X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var336X)))
 (= $x127 $x143))))
 ))
 (let (($x124 (and $x184 $x122)))
 (let (($x253 (= $x124 true)))
 (let (($x231 (forall ((input.ind-%var331X (_ BitVec 32)) )(let ((?x187 (bvmul input.ind-%var331X (_ bv4 32))))
 (let ((?x126 (bvadd ?x187 input.dst.llvm-%m1)))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv1 32))) (select input.dst.llvm-mem ?x126))))
 (let ((?x235 (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x126 (_ bv2 32))) ?x192))))
 (let ((?x106 (input.spec-%var-m1-1.1.1 input.ind-%var331X)))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var331X)))
 (=> $x127 (= ?x106 ?x235)))))))))
 ))
 (let (($x139 (forall ((input.ind-%var330X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var330X) (bvult input.ind-%var330X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m1-1.0.1 input.ind-%var330X)))
 (= $x127 $x259))))
 ))
 (let (($x128 (and $x139 $x231)))
 (let (($x233 (= $x128 true)))
 (let (($x111 (forall ((input.ind-%var325X (_ BitVec 32)) )(let ((?x187 (bvmul input.ind-%var325X (_ bv4 32))))
 (let ((?x168 (bvadd ?x187 input.dst.llvm-%m2)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv1 32))) (select input.dst.llvm-mem ?x168))))
 (let ((?x257 (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x168 (_ bv2 32))) ?x166))))
 (let ((?x216 (input.spec-%var-m2-1.1.1 input.ind-%var325X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var325X)))
 (=> $x254 (= ?x216 ?x257)))))))))
 ))
 (let (($x240 (forall ((input.ind-%var324X (_ BitVec 32)) )(let (($x259 (and (bvule (_ bv0 32) input.ind-%var324X) (bvult input.ind-%var324X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var324X)))
 (= $x254 $x259))))
 ))
 (let (($x53 (and $x240 $x111)))
 (let (($x15 (= $x53 true)))
 (let ((?x171 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x69 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x96 (concat ?x107 (concat ?x69 ?x171)))))
 (let (($x99 (= input.dst.llvm-%m2 ?x93)))
 (let ((?x123 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x77 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x42 (concat ?x62 (concat ?x65 (concat ?x77 ?x123)))))
 (let (($x33 (= input.dst.llvm-%m1 ?x42)))
 (let (($x66 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x27 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x133 (and (and (and $x27 $x66) $x33) $x99)))
 (let ((?x85 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x25 (= (_ bv0 32) ?x85)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x100 (= (_ bv0 32) ?x91)))
 (let ((?x63 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x36 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x63)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x51 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x86 $x51)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (and $x90 $x88)))
 (let (($x45 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x165 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x165)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x18 (and (and (and (and (and (and $x23 $x67) $x101) $x45) $x31) $x36) $x100)))
 (let (($x37 (and $x18 $x25)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x74 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x48 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x74)))
 (let (($x73 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x74)))
 (let (($x208 (or false (or false (and (and true (or $x11 $x73)) (or $x48 $x145))))))
 (let (($x84 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x197 (and (and (and $x84 true) $x37) $x133)))
 (let (($x155 (and true $x197)))
 (let (($x200 (= $x155 true)))
 (let (($x198 (= $x200 true)))
 (let (($x177 (= $x198 true)))
 (let (($x174 (and $x177 $x15)))
 (let (($x149 (and $x174 $x233)))
 (let (($x239 (and $x149 $x253)))
 (let (($x223 (and $x239 $x222)))
 (let (($x221 (=> $x223 $x213)))
 (not $x221)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 8
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x283 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var373X (_ bv4 32))))
 (let ((?x192 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x152))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var373X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var373X)))
 (=> $x193 (= ?x257 ?x261)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var372X) (bvult input.ind-%var372X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var372X)))
 (= $x193 $x232))))
 ))
 (let (($x284 (and $x265 $x283)))
 (let (($x125 (= true true)))
 (let (($x285 (and $x125 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x141 (forall ((input.ind-%var367X (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var367X)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var367X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var367X)))
 (=> $x193 (= ?x257 ?x108))))))
 ))
 (let (($x218 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var366X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var366X)))
 (= $x193 $x147))))
 ))
 (let (($x224 (and $x218 $x141)))
 (let (($x186 (= $x224 true)))
 (let (($x150 (forall ((input.ind-%var361X (_ BitVec 32)) )(let ((?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var361X)))
 (let ((?x120 (input.spec-%var-m1-1.1.1 input.ind-%var361X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var361X)))
 (=> $x113 (= ?x120 ?x251))))))
 ))
 (let (($x181 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var360X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var360X)))
 (= $x113 $x13))))
 ))
 (let (($x89 (and $x181 $x150)))
 (let (($x38 (= $x89 true)))
 (let (($x241 (forall ((input.ind-%var355X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var355X (_ bv4 32))))
 (let ((?x148 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x204))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 input.ind-%var355X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var355X)))
 (=> $x113 (= ?x120 ?x220)))))))))
 ))
 (let (($x14 (forall ((input.ind-%var354X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var354X) (bvult input.ind-%var354X (_ bv100 32)))))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var354X)))
 (= $x113 $x232))))
 ))
 (let (($x46 (and $x14 $x241)))
 (let (($x182 (= $x46 true)))
 (let (($x35 (forall ((input.ind-%var349X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var349X (_ bv4 32))))
 (let ((?x192 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x152))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var349X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var349X)))
 (=> $x193 (= ?x257 ?x261)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var348X) (bvult input.ind-%var348X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var348X)))
 (= $x193 $x232))))
 ))
 (let (($x114 (and $x206 $x35)))
 (let (($x122 (= $x114 true)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x103 (concat ?x96 ?x207)))))
 (let (($x93 (= input.dst.llvm-%m2 ?x95)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x80 (concat ?x79 (concat ?x62 ?x83)))))
 (let (($x42 (= input.dst.llvm-%m1 ?x28)))
 (let (($x47 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x146 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x197 (and (and (and $x146 $x47) $x42) $x93)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x36 (= (_ bv0 32) ?x63)))
 (let ((?x31 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x72 (= (_ bv0 32) ?x31)))
 (let ((?x51 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x45 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x41 $x19)))
 (let (($x7 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x26)))
 (let (($x22 (not $x32)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x22)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x81)))
 (let (($x75 (not $x54)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x76)))
 (let (($x23 (and (not $x50) $x75)))
 (let (($x25 (and (and (and (and (and (and $x23 $x67) $x60) $x7) $x21) $x88) $x72)))
 (let (($x37 (and $x25 $x36)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x163 (or false (or false (and (and true (or $x87 $x52)) (or $x5 $x156))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x198 (and (and (and $x165 true) $x37) $x197)))
 (let (($x177 (and true $x198)))
 (let (($x248 (= $x177 true)))
 (let (($x254 (= $x248 true)))
 (let (($x118 (= $x254 true)))
 (let (($x124 (and $x118 $x122)))
 (let (($x185 (and $x124 $x182)))
 (let (($x263 (and $x185 $x38)))
 (let (($x209 (and $x263 $x186)))
 (let (($x287 (=> $x209 $x286)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x283 (forall ((input.ind-%var373X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var373X (_ bv4 32))))
 (let ((?x192 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x152))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var373X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var373X)))
 (=> $x193 (= ?x257 ?x261)))))))))
 ))
 (let (($x265 (forall ((input.ind-%var372X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var372X) (bvult input.ind-%var372X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var372X)))
 (= $x193 $x232))))
 ))
 (let (($x284 (and $x265 $x283)))
 (let (($x125 (= true true)))
 (let (($x285 (and $x125 $x284)))
 (let (($x286 (= $x285 true)))
 (let (($x141 (forall ((input.ind-%var367X (_ BitVec 32)) )(let ((?x108 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var367X)))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var367X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var367X)))
 (=> $x193 (= ?x257 ?x108))))))
 ))
 (let (($x218 (forall ((input.ind-%var366X (_ BitVec 32)) )(let (($x147 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var366X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var366X)))
 (= $x193 $x147))))
 ))
 (let (($x224 (and $x218 $x141)))
 (let (($x186 (= $x224 true)))
 (let (($x150 (forall ((input.ind-%var361X (_ BitVec 32)) )(let ((?x251 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var361X)))
 (let ((?x120 (input.spec-%var-m1-1.1.1 input.ind-%var361X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var361X)))
 (=> $x113 (= ?x120 ?x251))))))
 ))
 (let (($x181 (forall ((input.ind-%var360X (_ BitVec 32)) )(let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var360X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var360X)))
 (= $x113 $x13))))
 ))
 (let (($x89 (and $x181 $x150)))
 (let (($x38 (= $x89 true)))
 (let (($x241 (forall ((input.ind-%var355X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var355X (_ bv4 32))))
 (let ((?x148 (bvadd ?x175 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv1 32))) (select input.dst.llvm-mem ?x148))))
 (let ((?x220 (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x148 (_ bv2 32))) ?x204))))
 (let ((?x120 (input.spec-%var-m1-1.1.1 input.ind-%var355X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var355X)))
 (=> $x113 (= ?x120 ?x220)))))))))
 ))
 (let (($x14 (forall ((input.ind-%var354X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var354X) (bvult input.ind-%var354X (_ bv100 32)))))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var354X)))
 (= $x113 $x232))))
 ))
 (let (($x46 (and $x14 $x241)))
 (let (($x182 (= $x46 true)))
 (let (($x35 (forall ((input.ind-%var349X (_ BitVec 32)) )(let ((?x175 (bvmul input.ind-%var349X (_ bv4 32))))
 (let ((?x192 (bvadd ?x175 input.dst.llvm-%m2)))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem ?x192))))
 (let ((?x261 (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x192 (_ bv2 32))) ?x152))))
 (let ((?x257 (input.spec-%var-m2-1.1.1 input.ind-%var349X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var349X)))
 (=> $x193 (= ?x257 ?x261)))))))))
 ))
 (let (($x206 (forall ((input.ind-%var348X (_ BitVec 32)) )(let (($x232 (and (bvule (_ bv0 32) input.ind-%var348X) (bvult input.ind-%var348X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var348X)))
 (= $x193 $x232))))
 ))
 (let (($x114 (and $x206 $x35)))
 (let (($x122 (= $x114 true)))
 (let ((?x207 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x94 (concat ?x103 (concat ?x96 ?x207)))))
 (let (($x93 (= input.dst.llvm-%m2 ?x95)))
 (let ((?x83 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x62 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x28 (concat ?x80 (concat ?x79 (concat ?x62 ?x83)))))
 (let (($x42 (= input.dst.llvm-%m1 ?x28)))
 (let (($x47 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x146 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x197 (and (and (and $x146 $x47) $x42) $x93)))
 (let ((?x63 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x36 (= (_ bv0 32) ?x63)))
 (let ((?x31 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x72 (= (_ bv0 32) ?x31)))
 (let ((?x51 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x51)))
 (let ((?x90 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x90)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x45 $x86)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x41 $x19)))
 (let (($x7 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (and $x44 $x26)))
 (let (($x22 (not $x32)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x22)))
 (let (($x81 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x9 $x81)))
 (let (($x75 (not $x54)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x76)))
 (let (($x23 (and (not $x50) $x75)))
 (let (($x25 (and (and (and (and (and (and $x23 $x67) $x60) $x7) $x21) $x88) $x72)))
 (let (($x37 (and $x25 $x36)))
 (let (($x156 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x5 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x52 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x73)))
 (let (($x163 (or false (or false (and (and true (or $x87 $x52)) (or $x5 $x156))))))
 (let (($x165 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x163)))
 (let (($x198 (and (and (and $x165 true) $x37) $x197)))
 (let (($x177 (and true $x198)))
 (let (($x248 (= $x177 true)))
 (let (($x254 (= $x248 true)))
 (let (($x118 (= $x254 true)))
 (let (($x124 (and $x118 $x122)))
 (let (($x185 (and $x124 $x182)))
 (let (($x263 (and $x185 $x38)))
 (let (($x209 (and $x263 $x186)))
 (let (($x287 (=> $x209 $x286)))
 (not $x287))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 9
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x183 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var403X (_ bv4 32))))
 (let ((?x115 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x137))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var403X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var403X)))
 (=> $x147 (= ?x265 ?x15)))))))))
 ))
 (let (($x280 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var402X)))
 (= $x147 $x128))))
 ))
 (let (($x130 (and $x280 $x183)))
 (let (($x275 (= true true)))
 (let (($x281 (and $x275 $x130)))
 (let (($x267 (= $x281 true)))
 (let (($x269 (forall ((input.ind-%var397X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var397X)))
 (let ((?x261 (input.spec-%var-m2-1.1.1 input.ind-%var397X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var397X)))
 (=> $x237 (= ?x261 ?x176))))))
 ))
 (let (($x239 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var396X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var396X)))
 (= $x237 $x82))))
 ))
 (let (($x270 (and $x239 $x269)))
 (let (($x278 (= $x270 true)))
 (let (($x121 (forall ((input.ind-%var391X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var391X)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var391X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var391X)))
 (=> $x147 (= ?x265 ?x221))))))
 ))
 (let (($x131 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x173 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var390X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var390X)))
 (= $x147 $x173))))
 ))
 (let (($x258 (and $x131 $x121)))
 (let (($x58 (= $x258 true)))
 (let (($x106 (forall ((input.ind-%var385X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var385X (_ bv4 32))))
 (let ((?x115 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x137))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var385X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var385X)))
 (=> $x147 (= ?x265 ?x15)))))))))
 ))
 (let (($x224 (forall ((input.ind-%var384X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var384X) (bvult input.ind-%var384X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var384X)))
 (= $x147 $x128))))
 ))
 (let (($x126 (and $x224 $x106)))
 (let (($x127 (= $x126 true)))
 (let (($x20 (forall ((input.ind-%var379X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var379X (_ bv4 32))))
 (let ((?x204 (bvadd ?x194 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x179))))
 (let ((?x261 (input.spec-%var-m2-1.1.1 input.ind-%var379X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var379X)))
 (=> $x237 (= ?x261 ?x154)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var378X) (bvult input.ind-%var378X (_ bv100 32)))))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var378X)))
 (= $x237 $x128))))
 ))
 (let (($x225 (and $x262 $x20)))
 (let (($x150 (= $x225 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x102 (concat ?x57 (concat ?x94 ?x133)))))
 (let (($x95 (= input.dst.llvm-%m2 ?x69)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x24 (concat ?x61 (concat ?x80 ?x66)))))
 (let (($x28 (= input.dst.llvm-%m1 ?x77)))
 (let (($x56 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x215 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x198 (and (and (and $x215 $x56) $x28) $x95)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x51)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x18 (= (_ bv0 32) ?x21)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x7 $x45)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x101 $x16)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x6 $x44)))
 (let (($x32 (not $x26)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x17 $x9)))
 (let (($x54 (not $x81)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x40)))
 (let (($x23 (and (not $x50) $x54)))
 (let (($x36 (and (and (and (and (and (and $x23 $x67) $x97) $x91) $x90) $x19) $x18)))
 (let (($x37 (and $x36 $x88)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x155 (or false (or false (and (and true (or $x112 $x48)) (or $x30 $x208))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x254 (and (and (and $x76 true) $x37) $x198)))
 (let (($x118 (and true $x254)))
 (let (($x259 (= $x118 true)))
 (let (($x193 (= $x259 true)))
 (let (($x219 (= $x193 true)))
 (let (($x89 (and $x219 $x150)))
 (let (($x211 (and $x89 $x127)))
 (let (($x228 (and $x211 $x58)))
 (let (($x279 (and $x228 $x278)))
 (let (($x282 (=> $x279 $x267)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x183 (forall ((input.ind-%var403X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var403X (_ bv4 32))))
 (let ((?x115 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x137))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var403X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var403X)))
 (=> $x147 (= ?x265 ?x15)))))))))
 ))
 (let (($x280 (forall ((input.ind-%var402X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var402X) (bvult input.ind-%var402X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var402X)))
 (= $x147 $x128))))
 ))
 (let (($x130 (and $x280 $x183)))
 (let (($x275 (= true true)))
 (let (($x281 (and $x275 $x130)))
 (let (($x267 (= $x281 true)))
 (let (($x269 (forall ((input.ind-%var397X (_ BitVec 32)) )(let ((?x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var397X)))
 (let ((?x261 (input.spec-%var-m2-1.1.1 input.ind-%var397X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var397X)))
 (=> $x237 (= ?x261 ?x176))))))
 ))
 (let (($x239 (forall ((input.ind-%var396X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var396X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var396X)))
 (= $x237 $x82))))
 ))
 (let (($x270 (and $x239 $x269)))
 (let (($x278 (= $x270 true)))
 (let (($x121 (forall ((input.ind-%var391X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var391X)))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var391X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var391X)))
 (=> $x147 (= ?x265 ?x221))))))
 ))
 (let (($x131 (forall ((input.ind-%var390X (_ BitVec 32)) )(let (($x173 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var390X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var390X)))
 (= $x147 $x173))))
 ))
 (let (($x258 (and $x131 $x121)))
 (let (($x58 (= $x258 true)))
 (let (($x106 (forall ((input.ind-%var385X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var385X (_ bv4 32))))
 (let ((?x115 (bvadd ?x194 input.dst.llvm-%m1)))
 (let ((?x137 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv1 32))) (select input.dst.llvm-mem ?x115))))
 (let ((?x15 (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x115 (_ bv2 32))) ?x137))))
 (let ((?x265 (input.spec-%var-m1-1.1.1 input.ind-%var385X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var385X)))
 (=> $x147 (= ?x265 ?x15)))))))))
 ))
 (let (($x224 (forall ((input.ind-%var384X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var384X) (bvult input.ind-%var384X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var384X)))
 (= $x147 $x128))))
 ))
 (let (($x126 (and $x224 $x106)))
 (let (($x127 (= $x126 true)))
 (let (($x20 (forall ((input.ind-%var379X (_ BitVec 32)) )(let ((?x194 (bvmul input.ind-%var379X (_ bv4 32))))
 (let ((?x204 (bvadd ?x194 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv1 32))) (select input.dst.llvm-mem ?x204))))
 (let ((?x154 (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x204 (_ bv2 32))) ?x179))))
 (let ((?x261 (input.spec-%var-m2-1.1.1 input.ind-%var379X)))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var379X)))
 (=> $x237 (= ?x261 ?x154)))))))))
 ))
 (let (($x262 (forall ((input.ind-%var378X (_ BitVec 32)) )(let (($x128 (and (bvule (_ bv0 32) input.ind-%var378X) (bvult input.ind-%var378X (_ bv100 32)))))
 (let (($x237 (input.spec-%var-m2-1.0.1 input.ind-%var378X)))
 (= $x237 $x128))))
 ))
 (let (($x225 (and $x262 $x20)))
 (let (($x150 (= $x225 true)))
 (let ((?x133 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x94 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x102 (concat ?x57 (concat ?x94 ?x133)))))
 (let (($x95 (= input.dst.llvm-%m2 ?x69)))
 (let ((?x66 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x80 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x77 (concat ?x24 (concat ?x61 (concat ?x80 ?x66)))))
 (let (($x28 (= input.dst.llvm-%m1 ?x77)))
 (let (($x56 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x215 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x198 (and (and (and $x215 $x56) $x28) $x95)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x51)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x18 (= (_ bv0 32) ?x21)))
 (let ((?x86 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x86)))
 (let ((?x41 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x41)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x16 (and $x7 $x45)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x90 (and $x101 $x16)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x26 (and $x6 $x44)))
 (let (($x32 (not $x26)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x32)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x17 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x81 (and $x17 $x9)))
 (let (($x54 (not $x81)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x40)))
 (let (($x23 (and (not $x50) $x54)))
 (let (($x36 (and (and (and (and (and (and $x23 $x67) $x97) $x91) $x90) $x19) $x18)))
 (let (($x37 (and $x36 $x88)))
 (let (($x208 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x52 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x30 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x52)))
 (let (($x48 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x52)))
 (let (($x155 (or false (or false (and (and true (or $x112 $x48)) (or $x30 $x208))))))
 (let (($x76 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x155)))
 (let (($x254 (and (and (and $x76 true) $x37) $x198)))
 (let (($x118 (and true $x254)))
 (let (($x259 (= $x118 true)))
 (let (($x193 (= $x259 true)))
 (let (($x219 (= $x193 true)))
 (let (($x89 (and $x219 $x150)))
 (let (($x211 (and $x89 $x127)))
 (let (($x228 (and $x211 $x58)))
 (let (($x279 (and $x228 $x278)))
 (let (($x282 (=> $x279 $x267)))
 (not $x282))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 10
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x246 (forall ((input.ind-%var433X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var433X (_ bv4 32))))
 (let ((?x137 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x132))))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var433X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var433X)))
 (=> $x82 (= ?x280 ?x253)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var432X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var432X) (bvult input.ind-%var432X (_ bv100 32)))))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var432X)))
 (= $x82 $x46))))
 ))
 (let (($x238 (and $x10 $x246)))
 (let (($x223 (= true true)))
 (let (($x264 (and $x223 $x238)))
 (let (($x266 (= $x264 true)))
 (let (($x110 (forall ((input.ind-%var427X (_ BitVec 32)) )(let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var427X)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 input.ind-%var427X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var427X)))
 (=> $x235 (= ?x154 ?x139))))))
 ))
 (let (($x263 (forall ((input.ind-%var426X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var426X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var426X)))
 (= $x235 $x199))))
 ))
 (let (($x202 (and $x263 $x110)))
 (let (($x252 (= $x202 true)))
 (let (($x288 (forall ((input.ind-%var421X (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var421X)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var421X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var421X)))
 (=> $x82 (= ?x280 ?x285))))))
 ))
 (let (($x218 (forall ((input.ind-%var420X (_ BitVec 32)) )(let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var420X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var420X)))
 (= $x82 $x230))))
 ))
 (let (($x286 (and $x218 $x288)))
 (let (($x64 (= $x286 true)))
 (let (($x120 (forall ((input.ind-%var415X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var415X (_ bv4 32))))
 (let ((?x244 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x140))))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var415X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var415X)))
 (=> $x82 (= ?x280 ?x122)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var414X) (bvult input.ind-%var414X (_ bv100 32)))))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var414X)))
 (= $x82 $x46))))
 ))
 (let (($x148 (and $x270 $x120)))
 (let (($x113 (= $x148 true)))
 (let (($x135 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var409X (_ bv4 32))))
 (let ((?x137 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x132))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 input.ind-%var409X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var409X)))
 (=> $x235 (= ?x154 ?x253)))))))))
 ))
 (let (($x136 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var408X) (bvult input.ind-%var408X (_ bv100 32)))))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var408X)))
 (= $x235 $x46))))
 ))
 (let (($x39 (and $x136 $x135)))
 (let (($x121 (= $x39 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x107 (concat ?x171 (concat ?x102 ?x197)))))
 (let (($x69 (= input.dst.llvm-%m2 ?x96)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x68 (concat ?x123 (concat ?x24 ?x47)))))
 (let (($x77 (= input.dst.llvm-%m1 ?x62)))
 (let (($x27 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x178 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x254 (and (and (and $x178 $x27) $x77) $x69)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x86)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x90)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x91 $x7)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x60 $x100)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x22 $x6)))
 (let (($x26 (not $x44)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x75 $x17)))
 (let (($x81 (not $x9)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x70)))
 (let (($x23 (and (not $x50) $x81)))
 (let (($x88 (and (and (and (and (and (and $x23 $x67) $x71) $x31) $x41) $x16) $x25)))
 (let (($x37 (and $x88 $x19)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x177 (or false (or false (and (and true (or $x119 $x5)) (or $x84 $x163))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x193 (and (and (and $x40 true) $x37) $x254)))
 (let (($x219 (and true $x193)))
 (let (($x232 (= $x219 true)))
 (let (($x237 (= $x232 true)))
 (let (($x231 (= $x237 true)))
 (let (($x258 (and $x231 $x121)))
 (let (($x129 (and $x258 $x113)))
 (let (($x104 (and $x129 $x64)))
 (let (($x210 (and $x104 $x252)))
 (let (($x289 (=> $x210 $x266)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x246 (forall ((input.ind-%var433X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var433X (_ bv4 32))))
 (let ((?x137 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x132))))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var433X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var433X)))
 (=> $x82 (= ?x280 ?x253)))))))))
 ))
 (let (($x10 (forall ((input.ind-%var432X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var432X) (bvult input.ind-%var432X (_ bv100 32)))))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var432X)))
 (= $x82 $x46))))
 ))
 (let (($x238 (and $x10 $x246)))
 (let (($x223 (= true true)))
 (let (($x264 (and $x223 $x238)))
 (let (($x266 (= $x264 true)))
 (let (($x110 (forall ((input.ind-%var427X (_ BitVec 32)) )(let ((?x139 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var427X)))
 (let ((?x154 (input.spec-%var-m2-1.1.1 input.ind-%var427X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var427X)))
 (=> $x235 (= ?x154 ?x139))))))
 ))
 (let (($x263 (forall ((input.ind-%var426X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var426X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var426X)))
 (= $x235 $x199))))
 ))
 (let (($x202 (and $x263 $x110)))
 (let (($x252 (= $x202 true)))
 (let (($x288 (forall ((input.ind-%var421X (_ BitVec 32)) )(let ((?x285 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var421X)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var421X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var421X)))
 (=> $x82 (= ?x280 ?x285))))))
 ))
 (let (($x218 (forall ((input.ind-%var420X (_ BitVec 32)) )(let (($x230 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var420X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var420X)))
 (= $x82 $x230))))
 ))
 (let (($x286 (and $x218 $x288)))
 (let (($x64 (= $x286 true)))
 (let (($x120 (forall ((input.ind-%var415X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var415X (_ bv4 32))))
 (let ((?x244 (bvadd ?x250 input.dst.llvm-%m1)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem ?x244))))
 (let ((?x122 (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x244 (_ bv2 32))) ?x140))))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var415X)))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var415X)))
 (=> $x82 (= ?x280 ?x122)))))))))
 ))
 (let (($x270 (forall ((input.ind-%var414X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var414X) (bvult input.ind-%var414X (_ bv100 32)))))
 (let (($x82 (input.spec-%var-m1-1.0.1 input.ind-%var414X)))
 (= $x82 $x46))))
 ))
 (let (($x148 (and $x270 $x120)))
 (let (($x113 (= $x148 true)))
 (let (($x135 (forall ((input.ind-%var409X (_ BitVec 32)) )(let ((?x250 (bvmul input.ind-%var409X (_ bv4 32))))
 (let ((?x137 (bvadd ?x250 input.dst.llvm-%m2)))
 (let ((?x132 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x132))))
 (let ((?x154 (input.spec-%var-m2-1.1.1 input.ind-%var409X)))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var409X)))
 (=> $x235 (= ?x154 ?x253)))))))))
 ))
 (let (($x136 (forall ((input.ind-%var408X (_ BitVec 32)) )(let (($x46 (and (bvule (_ bv0 32) input.ind-%var408X) (bvult input.ind-%var408X (_ bv100 32)))))
 (let (($x235 (input.spec-%var-m2-1.0.1 input.ind-%var408X)))
 (= $x235 $x46))))
 ))
 (let (($x39 (and $x136 $x135)))
 (let (($x121 (= $x39 true)))
 (let ((?x197 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x96 (concat ?x107 (concat ?x171 (concat ?x102 ?x197)))))
 (let (($x69 (= input.dst.llvm-%m2 ?x96)))
 (let ((?x47 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x24 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x62 (concat ?x68 (concat ?x123 (concat ?x24 ?x47)))))
 (let (($x77 (= input.dst.llvm-%m1 ?x62)))
 (let (($x27 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x178 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x254 (and (and (and $x178 $x27) $x77) $x69)))
 (let ((?x86 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x19 (= (_ bv0 32) ?x86)))
 (let ((?x90 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x90)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x45)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x7 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x101)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (and $x91 $x7)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x60 $x100)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x44 (and $x22 $x6)))
 (let (($x26 (not $x44)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x26)))
 (let (($x17 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x75 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x9 (and $x75 $x17)))
 (let (($x81 (not $x9)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x70)))
 (let (($x23 (and (not $x50) $x81)))
 (let (($x88 (and (and (and (and (and (and $x23 $x67) $x71) $x31) $x41) $x16) $x25)))
 (let (($x37 (and $x88 $x19)))
 (let (($x163 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x48 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x84 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x48)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x48)))
 (let (($x177 (or false (or false (and (and true (or $x119 $x5)) (or $x84 $x163))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x177)))
 (let (($x193 (and (and (and $x40 true) $x37) $x254)))
 (let (($x219 (and true $x193)))
 (let (($x232 (= $x219 true)))
 (let (($x237 (= $x232 true)))
 (let (($x231 (= $x237 true)))
 (let (($x258 (and $x231 $x121)))
 (let (($x129 (and $x258 $x113)))
 (let (($x104 (and $x129 $x64)))
 (let (($x210 (and $x104 $x252)))
 (let (($x289 (=> $x210 $x266)))
 (not $x289))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var432X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x22489004)
  (define-fun input.ind-%var433X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x48982400)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00c00028)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x13046000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x48982403)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x22489007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x48982400)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x22489004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x48982402) #x04
    (ite (= x!0 #x22489004) #x28
    (ite (= x!0 #x48982401) #x60
    (ite (= x!0 #x13046002) #x40
    (ite (= x!0 #x22489006) #xc0
    (ite (= x!0 #x48982403) #x13
      #x00)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x22489007)
                                     (k!2 #x22489006)
                                     (k!2 #x22489005)
                                     (k!2 #x22489004))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00400000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x48982403)
                                     (k!2 #x48982402)
                                     (k!2 #x48982401)
                                     (k!2 #x48982400))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00400000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x15c0ff9c)
  (define-fun input.ind-%var432X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var433X!1 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x26c17db8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xbb99fdc8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xcf9bbb00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x26c17dbb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x15c0ff9f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x26c17db8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x15c0ff9c)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x15c0ff9d) #xfd
    (ite (= x!0 #x15c0ff9f) #xbb
    (ite (= x!0 #x26c17dbb) #xcf
    (ite (= x!0 #x15c0ff9c) #xc8
    (ite (= x!0 #xbb99fddb) #x04
    (ite (= x!0 #x15c0ff9e) #x99
    (ite (= x!0 #x26c17dba) #x9b
    (ite (= x!0 #x26c17db9) #xbb
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x26c17dbb)
                                     (k!2 #x26c17dba)
                                     (k!2 #x26c17db9)
                                     (k!2 #x26c17db8)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x26c17dbb)
                                     (k!2 #x26c17dba)
                                     (k!2 #x26c17db9)
                                     (k!2 #x26c17db8)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x26c17dbb)
                                     (k!2 #x26c17dba)
                                     (k!2 #x26c17db9)
                                     (k!2 #x26c17db8)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x26c17dbb)
                                     (k!2 #x26c17dba)
                                     (k!2 #x26c17db9)
                                     (k!2 #x26c17db8))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000004) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000004 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000004)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000004) true
      false)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000004) true
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x04000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x15c0ff9f)
                                     (k!2 #x15c0ff9e)
                                     (k!2 #x15c0ff9d)
                                     (k!2 #x15c0ff9c)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x15c0ff9f)
                                     (k!2 #x15c0ff9e)
                                     (k!2 #x15c0ff9d)
                                     (k!2 #x15c0ff9c)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x15c0ff9f)
                                     (k!2 #x15c0ff9e)
                                     (k!2 #x15c0ff9d)
                                     (k!2 #x15c0ff9c)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x15c0ff9f)
                                     (k!2 #x15c0ff9e)
                                     (k!2 #x15c0ff9d)
                                     (k!2 #x15c0ff9c))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000004) #x04000000
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 11
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x109 (forall ((input.ind-%var495X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var495X (_ bv4 32))))
 (let ((?x183 (bvadd ?x245 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x212))))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var495X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var495X)))
 (=> $x220 (= ?x253 ?x194)))))))))
 ))
 (let (($x243 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var494X) (bvult input.ind-%var494X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var494X)))
 (= $x220 $x126))))
 ))
 (let (($x273 (and $x243 $x109)))
 (let (($x226 (= true true)))
 (let (($x34 (and $x226 $x273)))
 (let (($x189 (= $x34 true)))
 (let (($x166 (forall ((input.ind-%var489X (_ BitVec 32)) )(let ((?x174 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var489X)))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var489X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var489X)))
 (=> $x220 (= ?x253 ?x174))))))
 ))
 (let (($x227 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var488X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var488X)))
 (= $x220 $x203))))
 ))
 (let (($x229 (and $x227 $x166)))
 (let (($x272 (= $x229 true)))
 (let (($x42 (forall ((input.ind-%var483X (_ BitVec 32)) )(let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var483X)))
 (let ((?x10 (input.spec-%var-m1-1.1.1 input.ind-%var483X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var483X)))
 (=> $x199 (= ?x10 ?x143))))))
 ))
 (let (($x275 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var482X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var482X)))
 (= $x199 $x224))))
 ))
 (let (($x282 (and $x275 $x42)))
 (let (($x161 (= $x282 true)))
 (let (($x53 (forall ((input.ind-%var477X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var477X (_ bv4 32))))
 (let ((?x183 (bvadd ?x245 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x212))))
 (let ((?x10 (input.spec-%var-m1-1.1.1 input.ind-%var477X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var477X)))
 (=> $x199 (= ?x10 ?x194)))))))))
 ))
 (let (($x202 (forall ((input.ind-%var476X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var476X) (bvult input.ind-%var476X (_ bv100 32)))))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var476X)))
 (= $x199 $x126))))
 ))
 (let (($x242 (and $x202 $x53)))
 (let (($x265 (= $x242 true)))
 (let (($x33 (forall ((input.ind-%var471X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var471X (_ bv4 32))))
 (let ((?x140 (bvadd ?x245 input.dst.llvm-%m2)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x162))))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var471X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var471X)))
 (=> $x220 (= ?x253 ?x38)))))))))
 ))
 (let (($x142 (forall ((input.ind-%var470X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var470X) (bvult input.ind-%var470X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var470X)))
 (= $x220 $x126))))
 ))
 (let (($x287 (and $x142 $x33)))
 (let (($x288 (= $x287 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x103 (concat ?x207 (concat ?x107 ?x198)))))
 (let (($x96 (= input.dst.llvm-%m2 ?x94)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x65 (concat ?x83 (concat ?x68 ?x56)))))
 (let (($x62 (= input.dst.llvm-%m1 ?x80)))
 (let (($x146 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x117 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and (and (and $x117 $x146) $x62) $x96)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x16 (= (_ bv0 32) ?x45)))
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x31 $x91)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x97 $x72)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x32 $x22)))
 (let (($x44 (not $x6)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x44)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x54 $x75)))
 (let (($x9 (not $x17)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x11)))
 (let (($x23 (and (not $x50) $x9)))
 (let (($x19 (and (and (and (and (and (and $x23 $x67) $x85) $x21) $x101) $x100) $x36)))
 (let (($x37 (and $x19 $x16)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x118 (or false (or false (and (and true (or $x145 $x30)) (or $x165 $x155))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x237 (and (and (and $x70 true) $x37) $x193)))
 (let (($x231 (and true $x237)))
 (let (($x128 (= $x231 true)))
 (let (($x235 (= $x128 true)))
 (let (($x241 (= $x235 true)))
 (let (($x286 (and $x241 $x288)))
 (let (($x115 (and $x286 $x265)))
 (let (($x267 (and $x115 $x161)))
 (let (($x274 (and $x267 $x272)))
 (let (($x277 (=> $x274 $x189)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x109 (forall ((input.ind-%var495X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var495X (_ bv4 32))))
 (let ((?x183 (bvadd ?x245 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x212))))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var495X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var495X)))
 (=> $x220 (= ?x253 ?x194)))))))))
 ))
 (let (($x243 (forall ((input.ind-%var494X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var494X) (bvult input.ind-%var494X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var494X)))
 (= $x220 $x126))))
 ))
 (let (($x273 (and $x243 $x109)))
 (let (($x226 (= true true)))
 (let (($x34 (and $x226 $x273)))
 (let (($x189 (= $x34 true)))
 (let (($x166 (forall ((input.ind-%var489X (_ BitVec 32)) )(let ((?x174 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var489X)))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var489X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var489X)))
 (=> $x220 (= ?x253 ?x174))))))
 ))
 (let (($x227 (forall ((input.ind-%var488X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var488X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var488X)))
 (= $x220 $x203))))
 ))
 (let (($x229 (and $x227 $x166)))
 (let (($x272 (= $x229 true)))
 (let (($x42 (forall ((input.ind-%var483X (_ BitVec 32)) )(let ((?x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var483X)))
 (let ((?x10 (input.spec-%var-m1-1.1.1 input.ind-%var483X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var483X)))
 (=> $x199 (= ?x10 ?x143))))))
 ))
 (let (($x275 (forall ((input.ind-%var482X (_ BitVec 32)) )(let (($x224 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var482X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var482X)))
 (= $x199 $x224))))
 ))
 (let (($x282 (and $x275 $x42)))
 (let (($x161 (= $x282 true)))
 (let (($x53 (forall ((input.ind-%var477X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var477X (_ bv4 32))))
 (let ((?x183 (bvadd ?x245 input.dst.llvm-%m1)))
 (let ((?x212 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv1 32))) (select input.dst.llvm-mem ?x183))))
 (let ((?x194 (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x183 (_ bv2 32))) ?x212))))
 (let ((?x10 (input.spec-%var-m1-1.1.1 input.ind-%var477X)))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var477X)))
 (=> $x199 (= ?x10 ?x194)))))))))
 ))
 (let (($x202 (forall ((input.ind-%var476X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var476X) (bvult input.ind-%var476X (_ bv100 32)))))
 (let (($x199 (input.spec-%var-m1-1.0.1 input.ind-%var476X)))
 (= $x199 $x126))))
 ))
 (let (($x242 (and $x202 $x53)))
 (let (($x265 (= $x242 true)))
 (let (($x33 (forall ((input.ind-%var471X (_ BitVec 32)) )(let ((?x245 (bvmul input.ind-%var471X (_ bv4 32))))
 (let ((?x140 (bvadd ?x245 input.dst.llvm-%m2)))
 (let ((?x162 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv1 32))) (select input.dst.llvm-mem ?x140))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x140 (_ bv2 32))) ?x162))))
 (let ((?x253 (input.spec-%var-m2-1.1.1 input.ind-%var471X)))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var471X)))
 (=> $x220 (= ?x253 ?x38)))))))))
 ))
 (let (($x142 (forall ((input.ind-%var470X (_ BitVec 32)) )(let (($x126 (and (bvule (_ bv0 32) input.ind-%var470X) (bvult input.ind-%var470X (_ bv100 32)))))
 (let (($x220 (input.spec-%var-m2-1.0.1 input.ind-%var470X)))
 (= $x220 $x126))))
 ))
 (let (($x287 (and $x142 $x33)))
 (let (($x288 (= $x287 true)))
 (let ((?x198 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x107 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x207 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x94 (concat ?x103 (concat ?x207 (concat ?x107 ?x198)))))
 (let (($x96 (= input.dst.llvm-%m2 ?x94)))
 (let ((?x56 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x80 (concat ?x65 (concat ?x83 (concat ?x68 ?x56)))))
 (let (($x62 (= input.dst.llvm-%m1 ?x80)))
 (let (($x146 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x117 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x193 (and (and (and $x117 $x146) $x62) $x96)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x16 (= (_ bv0 32) ?x45)))
 (let ((?x41 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x36 (= (_ bv0 32) ?x41)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x100 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x31 $x91)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (and $x97 $x72)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x85 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x6 (and $x32 $x22)))
 (let (($x44 (not $x6)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x44)))
 (let (($x75 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x17 (and $x54 $x75)))
 (let (($x9 (not $x17)))
 (let (($x11 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x59 $x11)))
 (let (($x23 (and (not $x50) $x9)))
 (let (($x19 (and (and (and (and (and (and $x23 $x67) $x85) $x21) $x101) $x100) $x36)))
 (let (($x37 (and $x19 $x16)))
 (let (($x155 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x5 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x165 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x5)))
 (let (($x30 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x5)))
 (let (($x118 (or false (or false (and (and true (or $x145 $x30)) (or $x165 $x155))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x118)))
 (let (($x237 (and (and (and $x70 true) $x37) $x193)))
 (let (($x231 (and true $x237)))
 (let (($x128 (= $x231 true)))
 (let (($x235 (= $x128 true)))
 (let (($x241 (= $x235 true)))
 (let (($x286 (and $x241 $x288)))
 (let (($x115 (and $x286 $x265)))
 (let (($x267 (and $x115 $x161)))
 (let (($x274 (and $x267 $x272)))
 (let (($x277 (=> $x274 $x189)))
 (not $x277))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var495X!1 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x0d488e08)
  (define-fun input.ind-%var494X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x6f232624)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x68022100)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x20010018)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x6f232627)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x0d488e0b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x6f232624)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x0d488e08)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x6f232626) #x01
    (ite (= x!0 #x20010021) #x80
    (ite (= x!0 #x6f232624) #x18
    (ite (= x!0 #x0d488e09) #x21
    (ite (= x!0 #x0d488e0a) #x02
    (ite (= x!0 #x6f232627) #x20
    (ite (= x!0 #x0d488e0b) #x68
      #x00))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00008000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x6f232627)
                                     (k!2 #x6f232626)
                                     (k!2 #x6f232625)
                                     (k!2 #x6f232624))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x0d488e0b)
                                     (k!2 #x0d488e0a)
                                     (k!2 #x0d488e09)
                                     (k!2 #x0d488e08))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000002) #x00008000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000002) true
      (input.spec-%var-m1-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf7f2e718)
  (define-fun input.ind-%var494X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7792e724)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var495X!1 () (_ BitVec 32)
    #x00000052)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x77efbe00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xb25b6fb0)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7792e727)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf7f2e71b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7792e724)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf7f2e718)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xb25b70f9) #x01
    (ite (= x!0 #x7792e724) #xb0
    (ite (= x!0 #x7792e727) #xb2
    (ite (= x!0 #xf7f2e719) #xbe
    (ite (= x!0 #xf7f2e71b) #x77
    (ite (= x!0 #x7792e726) #x5b
    (ite (= x!0 #x7792e725) #x6f
    (ite (= x!0 #xf7f2e71a) #xef
      #x00)))))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000052) #x00000100
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x7792e727)
                                     (k!2 #x7792e726)
                                     (k!2 #x7792e725)
                                     (k!2 #x7792e724)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x7792e727)
                                     (k!2 #x7792e726)
                                     (k!2 #x7792e725)
                                     (k!2 #x7792e724)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #x7792e727)
                                     (k!2 #x7792e726)
                                     (k!2 #x7792e725)
                                     (k!2 #x7792e724)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #x7792e727)
                                     (k!2 #x7792e726)
                                     (k!2 #x7792e725)
                                     (k!2 #x7792e724))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000052) #x00000100
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!4 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000052) true
      false)))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000052 x!0)
         (ite (bvule #x00000064 x!0)
              (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
              #x00000052)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000052) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000052) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!2 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7f2e71b)
                                     (k!2 #xf7f2e71a)
                                     (k!2 #xf7f2e719)
                                     (k!2 #xf7f2e718)))))
            (a!2 (k!2 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7f2e71b)
                                     (k!2 #xf7f2e71a)
                                     (k!2 #xf7f2e719)
                                     (k!2 #xf7f2e718)))))
            (a!3 (k!2 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7f2e71b)
                                     (k!2 #xf7f2e71a)
                                     (k!2 #xf7f2e719)
                                     (k!2 #xf7f2e718)))))
            (a!4 (k!2 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!2 #xf7f2e71b)
                                     (k!2 #xf7f2e71a)
                                     (k!2 #xf7f2e719)
                                     (k!2 #xf7f2e718))))))
        (concat a!1 a!2 a!3 a!4)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000052) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 12
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x222 (= false true)))
 (let (($x144 (= $x222 true)))
 (let (($x196 (forall ((input.ind-%var551X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var551X)))
 (let ((?x38 (input.spec-%var-m2-1.1.1 input.ind-%var551X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var551X)))
 (=> $x15 (= ?x38 ?x92))))))
 ))
 (let (($x164 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var550X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var550X)))
 (= $x15 $x176))))
 ))
 (let (($x99 (and $x164 $x196)))
 (let (($x180 (= $x99 true)))
 (let (($x73 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var545X)))
 (let ((?x243 (input.spec-%var-m1-1.1.1 input.ind-%var545X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var545X)))
 (=> $x203 (= ?x243 ?x13))))))
 ))
 (let (($x223 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var544X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var544X)))
 (= $x203 $x270))))
 ))
 (let (($x264 (and $x223 $x73)))
 (let (($x266 (= $x264 true)))
 (let (($x114 (forall ((input.ind-%var539X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var539X (_ bv4 32))))
 (let ((?x172 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x201))))
 (let ((?x243 (input.spec-%var-m1-1.1.1 input.ind-%var539X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var539X)))
 (=> $x203 (= ?x243 ?x250)))))))))
 ))
 (let (($x229 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var538X) (bvult input.ind-%var538X (_ bv100 32)))))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var538X)))
 (= $x203 $x148))))
 ))
 (let (($x233 (and $x229 $x114)))
 (let (($x280 (= $x233 true)))
 (let (($x184 (forall ((input.ind-%var533X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var533X (_ bv4 32))))
 (let ((?x212 (bvadd ?x186 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x150))))
 (let ((?x38 (input.spec-%var-m2-1.1.1 input.ind-%var533X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var533X)))
 (=> $x15 (= ?x38 ?x278)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var532X) (bvult input.ind-%var532X (_ bv100 32)))))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var532X)))
 (= $x15 $x148))))
 ))
 (let (($x55 (and $x234 $x184)))
 (let (($x42 (= $x55 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x57 (concat ?x133 (concat ?x103 ?x254)))))
 (let (($x94 (= input.dst.llvm-%m2 ?x102)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x79 (concat ?x66 (concat ?x65 ?x27)))))
 (let (($x80 (= input.dst.llvm-%m1 ?x24)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x200 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x237 (and (and (and $x200 $x215) $x80) $x94)))
 (let ((?x7 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x7)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x101)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x21 $x31)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x71 $x18)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x87)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x16 (and (and (and (and (and (and $x23 $x67) $x63) $x90) $x60) $x72) $x88)))
 (let (($x37 (and $x16 $x100)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x219 (or false (or false (and (and true (or $x156 $x84)) (or $x76 $x177))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x235 (and (and (and $x11 true) $x37) $x237)))
 (let (($x241 (and true $x235)))
 (let (($x46 (= $x241 true)))
 (let (($x220 (= $x46 true)))
 (let (($x106 (= $x220 true)))
 (let (($x282 (and $x106 $x42)))
 (let (($x244 (and $x282 $x280)))
 (let (($x238 (and $x244 $x266)))
 (let (($x78 (and $x238 $x180)))
 (let (($x283 (=> $x78 $x144)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x222 (= false true)))
 (let (($x144 (= $x222 true)))
 (let (($x196 (forall ((input.ind-%var551X (_ BitVec 32)) )(let ((?x92 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var551X)))
 (let ((?x38 (input.spec-%var-m2-1.1.1 input.ind-%var551X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var551X)))
 (=> $x15 (= ?x38 ?x92))))))
 ))
 (let (($x164 (forall ((input.ind-%var550X (_ BitVec 32)) )(let (($x176 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var550X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var550X)))
 (= $x15 $x176))))
 ))
 (let (($x99 (and $x164 $x196)))
 (let (($x180 (= $x99 true)))
 (let (($x73 (forall ((input.ind-%var545X (_ BitVec 32)) )(let ((?x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var545X)))
 (let ((?x243 (input.spec-%var-m1-1.1.1 input.ind-%var545X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var545X)))
 (=> $x203 (= ?x243 ?x13))))))
 ))
 (let (($x223 (forall ((input.ind-%var544X (_ BitVec 32)) )(let (($x270 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var544X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var544X)))
 (= $x203 $x270))))
 ))
 (let (($x264 (and $x223 $x73)))
 (let (($x266 (= $x264 true)))
 (let (($x114 (forall ((input.ind-%var539X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var539X (_ bv4 32))))
 (let ((?x172 (bvadd ?x186 input.dst.llvm-%m1)))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv1 32))) (select input.dst.llvm-mem ?x172))))
 (let ((?x250 (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x172 (_ bv2 32))) ?x201))))
 (let ((?x243 (input.spec-%var-m1-1.1.1 input.ind-%var539X)))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var539X)))
 (=> $x203 (= ?x243 ?x250)))))))))
 ))
 (let (($x229 (forall ((input.ind-%var538X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var538X) (bvult input.ind-%var538X (_ bv100 32)))))
 (let (($x203 (input.spec-%var-m1-1.0.1 input.ind-%var538X)))
 (= $x203 $x148))))
 ))
 (let (($x233 (and $x229 $x114)))
 (let (($x280 (= $x233 true)))
 (let (($x184 (forall ((input.ind-%var533X (_ BitVec 32)) )(let ((?x186 (bvmul input.ind-%var533X (_ bv4 32))))
 (let ((?x212 (bvadd ?x186 input.dst.llvm-%m2)))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv1 32))) (select input.dst.llvm-mem ?x212))))
 (let ((?x278 (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x212 (_ bv2 32))) ?x150))))
 (let ((?x38 (input.spec-%var-m2-1.1.1 input.ind-%var533X)))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var533X)))
 (=> $x15 (= ?x38 ?x278)))))))))
 ))
 (let (($x234 (forall ((input.ind-%var532X (_ BitVec 32)) )(let (($x148 (and (bvule (_ bv0 32) input.ind-%var532X) (bvult input.ind-%var532X (_ bv100 32)))))
 (let (($x15 (input.spec-%var-m2-1.0.1 input.ind-%var532X)))
 (= $x15 $x148))))
 ))
 (let (($x55 (and $x234 $x184)))
 (let (($x42 (= $x55 true)))
 (let ((?x254 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x102 (concat ?x57 (concat ?x133 (concat ?x103 ?x254)))))
 (let (($x94 (= input.dst.llvm-%m2 ?x102)))
 (let ((?x27 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x65 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x24 (concat ?x79 (concat ?x66 (concat ?x65 ?x27)))))
 (let (($x80 (= input.dst.llvm-%m1 ?x24)))
 (let (($x215 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x200 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x237 (and (and (and $x200 $x215) $x80) $x94)))
 (let ((?x7 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x100 (= (_ bv0 32) ?x7)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x101)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x97)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x21 $x31)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (and $x71 $x18)))
 (let (($x90 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x22 (and $x26 $x32)))
 (let (($x6 (not $x22)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x98 $x8)))
 (let (($x67 (and (not $x29) $x6)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x81 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x75 (and $x81 $x54)))
 (let (($x17 (not $x75)))
 (let (($x87 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x49 $x87)))
 (let (($x23 (and (not $x50) $x17)))
 (let (($x16 (and (and (and (and (and (and $x23 $x67) $x63) $x90) $x60) $x72) $x88)))
 (let (($x37 (and $x16 $x100)))
 (let (($x177 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x30 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x76 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x30)))
 (let (($x84 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x30)))
 (let (($x219 (or false (or false (and (and true (or $x156 $x84)) (or $x76 $x177))))))
 (let (($x11 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x219)))
 (let (($x235 (and (and (and $x11 true) $x37) $x237)))
 (let (($x241 (and true $x235)))
 (let (($x46 (= $x241 true)))
 (let (($x220 (= $x46 true)))
 (let (($x106 (= $x220 true)))
 (let (($x282 (and $x106 $x42)))
 (let (($x244 (and $x282 $x280)))
 (let (($x238 (and $x244 $x266)))
 (let (($x78 (and $x238 $x180)))
 (let (($x283 (=> $x78 $x144)))
 (not $x283))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x40000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x00000007)
                                   (k!0 #x00000006)
                                   (k!0 #x00000005)
                                   (k!0 #x00000004))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (k!0 (bvadd #x00000003
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!2 (k!0 (bvadd #x00000002
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!3 (k!0 (bvadd #x00000001
                           (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000)))))
          (a!4 (k!0 (bvadd (bvmul #x00000004 x!0)
                           (concat (k!0 #x40000003)
                                   (k!0 #x40000002)
                                   (k!0 #x40000001)
                                   (k!0 #x40000000))))))
      (concat a!1 a!2 a!3 a!4)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x465a908c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xcf33c3d8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xdce9ee00)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x3ffedf00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xcf33c3db)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x465a908f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xcf33c3d8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x465a908c)
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x465a908d) #xee
    (ite (= x!0 #xcf33c3db) #x3f
    (ite (= x!0 #x465a908f) #xdc
    (ite (= x!0 #x465a908e) #xe9
    (ite (= x!0 #xcf33c3da) #xfe
    (ite (= x!0 #xcf33c3d9) #xdf
      #x00)))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #xcf33c3db)
                                      (k!11 #xcf33c3da)
                                      (k!11 #xcf33c3d9)
                                      (k!11 #xcf33c3d8))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (k!11 (bvadd #x00000003
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!2 (k!11 (bvadd #x00000002
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!3 (k!11 (bvadd #x00000001
                              (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c)))))
            (a!4 (k!11 (bvadd (bvmul #x00000004 x!0)
                              (concat (k!11 #x465a908f)
                                      (k!11 #x465a908e)
                                      (k!11 #x465a908d)
                                      (k!11 #x465a908c))))))
        (concat a!1 a!2 a!3 a!4))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 13
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x82 (= true false)))
 (let (($x258 (= $x82 true)))
 (let (($x277 (forall ((input.ind-%var607X (_ BitVec 32)) )(let ((?x95 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var607X)))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var607X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var607X)))
 (=> $x58 (= ?x233 ?x95))))))
 ))
 (let (($x116 (forall ((input.ind-%var606X (_ BitVec 32)) )(let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var606X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var606X)))
 (= $x58 $x226))))
 ))
 (let (($x138 (and $x116 $x277)))
 (let (($x136 (= $x138 true)))
 (let (($x199 (forall ((input.ind-%var601X (_ BitVec 32)) )(let ((?x287 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var601X)))
 (let ((?x235 (input.spec-%var-m1-1.1.1 input.ind-%var601X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var601X)))
 (=> $x24 (= ?x235 ?x287))))))
 ))
 (let (($x257 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x137 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var600X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var600X)))
 (= $x24 $x137))))
 ))
 (let (($x110 (and $x257 $x199)))
 (let (($x286 (= $x110 true)))
 (let (($x62 (forall ((input.ind-%var595X (_ BitVec 32)) )(let ((?x242 (bvmul input.ind-%var595X (_ bv4 32))))
 (let ((?x92 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x99))))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var595X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var595X)))
 (=> $x58 (= ?x233 ?x125)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var594X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var594X) (bvult input.ind-%var594X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var594X)))
 (= $x58 $x254))))
 ))
 (let (($x69 (and $x250 $x62)))
 (let (($x142 (= $x69 true)))
 (let (($x166 (forall ((input.ind-%var589X (_ BitVec 32)) )(let ((?x242 (bvmul input.ind-%var589X (_ bv4 32))))
 (let ((?x194 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x265))))
 (let ((?x235 (input.spec-%var-m1-1.1.1 input.ind-%var589X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var589X)))
 (=> $x24 (= ?x235 ?x42)))))))))
 ))
 (let (($x107 (forall ((input.ind-%var588X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var588X) (bvult input.ind-%var588X (_ bv100 32)))))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var588X)))
 (= $x24 $x254))))
 ))
 (let (($x229 (and $x107 $x166)))
 (let (($x243 (= $x229 true)))
 (let ((?x248 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x248)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x259 (= (_ bv0 32) ?x232)))
 (let ((?x37 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x45 $x16)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x72 $x7)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x36 $x71)))
 (let (($x25 (not $x21)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x41 $x85)))
 (let (($x31 (and (not $x90) $x25)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x22 $x6)))
 (let (($x86 (not $x67)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x177 $x40)))
 (let (($x63 (and (not $x32) $x86)))
 (let (($x56 (and (and (and (and (and (and $x63 $x31) $x60) $x91) $x100) $x128) $x259)))
 (let (($x79 (and $x56 $x200)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x29 (or false (or false (and (and true (or $x49 $x87)) (or $x75 $x17))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x123 (and $x26 $x79)))
 (let (($x83 (= $x123 true)))
 (let (($x66 (= $x83 true)))
 (let (($x47 (= $x66 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x156 (= (_ bv0 2) ?x30)))
 (let (($x12 (= $x156 true)))
 (let (($x84 (= $x12 true)))
 (let ((?x285 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x5 (= (_ bv0 2) ?x285)))
 (let (($x59 (= $x5 true)))
 (let (($x112 (= $x59 true)))
 (let (($x208 (and $x112 $x84)))
 (let (($x65 (and $x208 $x47)))
 (let (($x172 (and $x65 $x243)))
 (let (($x218 (and $x172 $x142)))
 (let (($x202 (and $x218 $x286)))
 (let (($x139 (and $x202 $x136)))
 (let (($x151 (=> $x139 $x258)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x82 (= true false)))
 (let (($x258 (= $x82 true)))
 (let (($x277 (forall ((input.ind-%var607X (_ BitVec 32)) )(let ((?x95 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var607X)))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var607X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var607X)))
 (=> $x58 (= ?x233 ?x95))))))
 ))
 (let (($x116 (forall ((input.ind-%var606X (_ BitVec 32)) )(let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var606X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var606X)))
 (= $x58 $x226))))
 ))
 (let (($x138 (and $x116 $x277)))
 (let (($x136 (= $x138 true)))
 (let (($x199 (forall ((input.ind-%var601X (_ BitVec 32)) )(let ((?x287 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var601X)))
 (let ((?x235 (input.spec-%var-m1-1.1.1 input.ind-%var601X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var601X)))
 (=> $x24 (= ?x235 ?x287))))))
 ))
 (let (($x257 (forall ((input.ind-%var600X (_ BitVec 32)) )(let (($x137 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var600X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var600X)))
 (= $x24 $x137))))
 ))
 (let (($x110 (and $x257 $x199)))
 (let (($x286 (= $x110 true)))
 (let (($x62 (forall ((input.ind-%var595X (_ BitVec 32)) )(let ((?x242 (bvmul input.ind-%var595X (_ bv4 32))))
 (let ((?x92 (bvadd ?x242 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv1 32))) (select input.dst.llvm-mem ?x92))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x92 (_ bv2 32))) ?x99))))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var595X)))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var595X)))
 (=> $x58 (= ?x233 ?x125)))))))))
 ))
 (let (($x250 (forall ((input.ind-%var594X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var594X) (bvult input.ind-%var594X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m2-1.0.1 input.ind-%var594X)))
 (= $x58 $x254))))
 ))
 (let (($x69 (and $x250 $x62)))
 (let (($x142 (= $x69 true)))
 (let (($x166 (forall ((input.ind-%var589X (_ BitVec 32)) )(let ((?x242 (bvmul input.ind-%var589X (_ bv4 32))))
 (let ((?x194 (bvadd ?x242 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv1 32))) (select input.dst.llvm-mem ?x194))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x194 (_ bv2 32))) ?x265))))
 (let ((?x235 (input.spec-%var-m1-1.1.1 input.ind-%var589X)))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var589X)))
 (=> $x24 (= ?x235 ?x42)))))))))
 ))
 (let (($x107 (forall ((input.ind-%var588X (_ BitVec 32)) )(let (($x254 (and (bvule (_ bv0 32) input.ind-%var588X) (bvult input.ind-%var588X (_ bv100 32)))))
 (let (($x24 (input.spec-%var-m1-1.0.1 input.ind-%var588X)))
 (= $x24 $x254))))
 ))
 (let (($x229 (and $x107 $x166)))
 (let (($x243 (= $x229 true)))
 (let ((?x248 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x248)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x259 (= (_ bv0 32) ?x232)))
 (let ((?x37 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x37)))
 (let ((?x88 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x88)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (and $x45 $x16)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (and $x72 $x7)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x36 $x71)))
 (let (($x25 (not $x21)))
 (let (($x85 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (and $x41 $x85)))
 (let (($x31 (and (not $x90) $x25)))
 (let (($x6 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x22 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x22 $x6)))
 (let (($x86 (not $x67)))
 (let (($x40 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x177 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x32 (and $x177 $x40)))
 (let (($x63 (and (not $x32) $x86)))
 (let (($x56 (and (and (and (and (and (and $x63 $x31) $x60) $x91) $x100) $x128) $x259)))
 (let (($x79 (and $x56 $x200)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x231 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x231)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x231)))
 (let (($x29 (or false (or false (and (and true (or $x49 $x87)) (or $x75 $x17))))))
 (let (($x26 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x123 (and $x26 $x79)))
 (let (($x83 (= $x123 true)))
 (let (($x66 (= $x83 true)))
 (let (($x47 (= $x66 true)))
 (let ((?x30 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x156 (= (_ bv0 2) ?x30)))
 (let (($x12 (= $x156 true)))
 (let (($x84 (= $x12 true)))
 (let ((?x285 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x5 (= (_ bv0 2) ?x285)))
 (let (($x59 (= $x5 true)))
 (let (($x112 (= $x59 true)))
 (let (($x208 (and $x112 $x84)))
 (let (($x65 (and $x208 $x47)))
 (let (($x172 (and $x65 $x243)))
 (let (($x218 (and $x172 $x142)))
 (let (($x202 (and $x218 $x286)))
 (let (($x139 (and $x202 $x136)))
 (let (($x151 (=> $x139 $x258)))
 (not $x151))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10e5871c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd5459e10)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd5459e13)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10e5871f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd5459e10)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10e5871c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 14
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var709X (_ bv4 32))))
 (let ((?x137 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x10))))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var709X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var709X)))
 (=> $x139 (= ?x241 ?x226)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var708X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var708X)))
 (= $x139 $x282))))
 ))
 (let (($x195 (and $x157 $x209)))
 (let (($x129 (= true true)))
 (let (($x132 (and $x129 $x195)))
 (let (($x236 (= $x132 true)))
 (let (($x289 (forall ((input.ind-%var703X (_ BitVec 32)) )(let ((?x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var703X)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var703X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var703X)))
 (=> $x139 (= ?x241 ?x52))))))
 ))
 (let (($x164 (forall ((input.ind-%var702X (_ BitVec 32)) )(let (($x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var702X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var702X)))
 (= $x139 $x53))))
 ))
 (let (($x262 (and $x164 $x289)))
 (let (($x74 (= $x262 true)))
 (let (($x77 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var697X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var697X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var697X)))
 (=> $x122 (= ?x58 ?x245))))))
 ))
 (let (($x264 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x223 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var696X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var696X)))
 (= $x122 $x223))))
 ))
 (let (($x276 (and $x264 $x77)))
 (let (($x133 (= $x276 true)))
 (let (($x61 (forall ((input.ind-%var691X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var691X (_ bv4 32))))
 (let ((?x38 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x148))))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var691X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var691X)))
 (=> $x139 (= ?x241 ?x204)))))))))
 ))
 (let (($x155 (forall ((input.ind-%var690X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var690X) (bvult input.ind-%var690X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var690X)))
 (= $x139 $x282))))
 ))
 (let (($x207 (and $x155 $x61)))
 (let (($x270 (= $x207 true)))
 (let (($x95 (forall ((input.ind-%var685X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var685X (_ bv4 32))))
 (let ((?x137 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x10))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var685X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var685X)))
 (=> $x122 (= ?x58 ?x226)))))))))
 ))
 (let (($x166 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var684X) (bvult input.ind-%var684X (_ bv100 32)))))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var684X)))
 (= $x122 $x282))))
 ))
 (let (($x189 (and $x166 $x95)))
 (let (($x273 (= $x189 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x235 (= (_ bv0 2) ?x107)))
 (let (($x46 (= $x235 true)))
 (let (($x106 (= $x46 true)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x65 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x65 $x24)))
 (let (($x198 (= $x103 true)))
 (let (($x197 (= $x198 true)))
 (let (($x254 (= $x197 true)))
 (let ((?x16 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x7 (= (_ bv0 32) ?x16)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x101)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x178 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x18 $x19)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x117 $x91)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x63 $x41)))
 (let (($x90 (not $x85)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x6 $x67)))
 (let (($x36 (and (not $x86) $x90)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x26 $x177)))
 (let (($x32 (not $x40)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x49 $x285)))
 (let (($x22 (and (not $x29) $x32)))
 (let (($x232 (and (and (and (and (and (and $x22 $x36) $x21) $x31) $x215) $x45) $x88)))
 (let (($x259 (and $x232 $x7)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x23 (or false (or false (and (and true (or $x118 $x70)) (or $x9 $x81))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x56 (and $x8 $x259)))
 (let (($x248 (= $x56 true)))
 (let (($x200 (= $x248 true)))
 (let (($x79 (= $x200 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x12 (= (_ bv0 2) ?x219)))
 (let (($x76 (= $x12 true)))
 (let (($x221 (= $x76 true)))
 (let (($x123 (and $x221 $x79)))
 (let (($x171 (and $x123 $x254)))
 (let (($x242 (and $x171 $x106)))
 (let (($x277 (and $x242 $x273)))
 (let (($x266 (and $x277 $x270)))
 (let (($x224 (and $x266 $x133)))
 (let (($x269 (and $x224 $x74)))
 (let (($x181 (=> $x269 $x236)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x209 (forall ((input.ind-%var709X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var709X (_ bv4 32))))
 (let ((?x137 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x10))))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var709X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var709X)))
 (=> $x139 (= ?x241 ?x226)))))))))
 ))
 (let (($x157 (forall ((input.ind-%var708X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var708X) (bvult input.ind-%var708X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var708X)))
 (= $x139 $x282))))
 ))
 (let (($x195 (and $x157 $x209)))
 (let (($x129 (= true true)))
 (let (($x132 (and $x129 $x195)))
 (let (($x236 (= $x132 true)))
 (let (($x289 (forall ((input.ind-%var703X (_ BitVec 32)) )(let ((?x52 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var703X)))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var703X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var703X)))
 (=> $x139 (= ?x241 ?x52))))))
 ))
 (let (($x164 (forall ((input.ind-%var702X (_ BitVec 32)) )(let (($x53 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var702X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var702X)))
 (= $x139 $x53))))
 ))
 (let (($x262 (and $x164 $x289)))
 (let (($x74 (= $x262 true)))
 (let (($x77 (forall ((input.ind-%var697X (_ BitVec 32)) )(let ((?x245 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var697X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var697X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var697X)))
 (=> $x122 (= ?x58 ?x245))))))
 ))
 (let (($x264 (forall ((input.ind-%var696X (_ BitVec 32)) )(let (($x223 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var696X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var696X)))
 (= $x122 $x223))))
 ))
 (let (($x276 (and $x264 $x77)))
 (let (($x133 (= $x276 true)))
 (let (($x61 (forall ((input.ind-%var691X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var691X (_ bv4 32))))
 (let ((?x38 (bvadd ?x218 input.dst.llvm-%m2)))
 (let ((?x148 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv1 32))) (select input.dst.llvm-mem ?x38))))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x38 (_ bv2 32))) ?x148))))
 (let ((?x241 (input.spec-%var-m2-1.1.1 input.ind-%var691X)))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var691X)))
 (=> $x139 (= ?x241 ?x204)))))))))
 ))
 (let (($x155 (forall ((input.ind-%var690X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var690X) (bvult input.ind-%var690X (_ bv100 32)))))
 (let (($x139 (input.spec-%var-m2-1.0.1 input.ind-%var690X)))
 (= $x139 $x282))))
 ))
 (let (($x207 (and $x155 $x61)))
 (let (($x270 (= $x207 true)))
 (let (($x95 (forall ((input.ind-%var685X (_ BitVec 32)) )(let ((?x218 (bvmul input.ind-%var685X (_ bv4 32))))
 (let ((?x137 (bvadd ?x218 input.dst.llvm-%m1)))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv1 32))) (select input.dst.llvm-mem ?x137))))
 (let ((?x226 (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x137 (_ bv2 32))) ?x10))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var685X)))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var685X)))
 (=> $x122 (= ?x58 ?x226)))))))))
 ))
 (let (($x166 (forall ((input.ind-%var684X (_ BitVec 32)) )(let (($x282 (and (bvule (_ bv0 32) input.ind-%var684X) (bvult input.ind-%var684X (_ bv100 32)))))
 (let (($x122 (input.spec-%var-m1-1.0.1 input.ind-%var684X)))
 (= $x122 $x282))))
 ))
 (let (($x189 (and $x166 $x95)))
 (let (($x273 (= $x189 true)))
 (let ((?x107 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x235 (= (_ bv0 2) ?x107)))
 (let (($x46 (= $x235 true)))
 (let (($x106 (= $x46 true)))
 (let (($x24 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x65 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x65 $x24)))
 (let (($x198 (= $x103 true)))
 (let (($x197 (= $x198 true)))
 (let (($x254 (= $x197 true)))
 (let ((?x16 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x7 (= (_ bv0 32) ?x16)))
 (let ((?x101 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x88 (= (_ bv0 32) ?x101)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x45 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x178 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x178)))
 (let (($x18 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (and $x18 $x19)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x117 $x91)))
 (let (($x31 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x85 (and $x63 $x41)))
 (let (($x90 (not $x85)))
 (let (($x67 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x6 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x86 (and $x6 $x67)))
 (let (($x36 (and (not $x86) $x90)))
 (let (($x177 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x40 (and $x26 $x177)))
 (let (($x32 (not $x40)))
 (let (($x285 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x49 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x29 (and $x49 $x285)))
 (let (($x22 (and (not $x29) $x32)))
 (let (($x232 (and (and (and (and (and (and $x22 $x36) $x21) $x31) $x215) $x45) $x88)))
 (let (($x259 (and $x232 $x7)))
 (let (($x81 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x59 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x59)))
 (let (($x23 (or false (or false (and (and true (or $x118 $x70)) (or $x9 $x81))))))
 (let (($x8 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x23)))
 (let (($x56 (and $x8 $x259)))
 (let (($x248 (= $x56 true)))
 (let (($x200 (= $x248 true)))
 (let (($x79 (= $x200 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x12 (= (_ bv0 2) ?x219)))
 (let (($x76 (= $x12 true)))
 (let (($x221 (= $x76 true)))
 (let (($x123 (and $x221 $x79)))
 (let (($x171 (and $x123 $x254)))
 (let (($x242 (and $x171 $x106)))
 (let (($x277 (and $x242 $x273)))
 (let (($x266 (and $x277 $x270)))
 (let (($x224 (and $x266 $x133)))
 (let (($x269 (and $x224 $x74)))
 (let (($x181 (=> $x269 $x236)))
 (not $x181)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.ind-%var708X!0 () (_ BitVec 32)
    #x04000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x51000040)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xbfffff00)
  (define-fun input.ind-%var709X!1 () (_ BitVec 32)
    #x00000040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xd0000804)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xd0000807)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x51000043)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xd0000804)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x51000040)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x00000100) #x10
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #xbfffff03 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff02 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff01 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #xbfffff00 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000040) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x04000000 x!0) #x04000000 #x00000065)
              #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!6 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x04000000) false
      (input.spec-%var-m1-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000040) true
      false))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0)
              (ite (bvule #x04000000 x!0) #x04000000 #x00000065)
              #x00000064)
         #x00000040))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!5 (k!4 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000010
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000040) #x00000010
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x04000000) false
    (ite (= x!0 #x00000040) true
      (input.spec-%var-m2-1.0.1 x!0))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.ind-%var708X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x10840404)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x82108040)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var709X!1 () (_ BitVec 32)
    #x00000050)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x08e07080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x82108043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x10840407)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x82108040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x10840404)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (not (bvule #x00000064 x!0))))
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x08e071c0) #x80
      #x00))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000050) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000050) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000050) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000080
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x08e07083 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07082 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07081 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x08e07080 (bvmul #x00000004 x!0)))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000050) #x00000080
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 15
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x205 (= false true)))
 (let (($x255 (= $x205 true)))
 (let (($x162 (forall ((input.ind-%var773X (_ BitVec 32)) )(let ((?x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var773X)))
 (let ((?x269 (input.spec-%var-m2-1.1.1 input.ind-%var773X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var773X)))
 (=> $x133 (= ?x269 ?x94))))))
 ))
 (let (($x261 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x192 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var772X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var772X)))
 (= $x133 $x192))))
 ))
 (let (($x201 (and $x261 $x162)))
 (let (($x89 (= $x201 true)))
 (let (($x193 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var767X)))
 (let ((?x287 (input.spec-%var-m1-1.1.1 input.ind-%var767X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var767X)))
 (=> $x143 (= ?x287 ?x184))))))
 ))
 (let (($x80 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x196 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var766X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var766X)))
 (= $x143 $x196))))
 ))
 (let (($x113 (and $x80 $x193)))
 (let (($x102 (= $x113 true)))
 (let (($x48 (forall ((input.ind-%var761X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var761X (_ bv4 32))))
 (let ((?x127 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x140))))
 (let ((?x269 (input.spec-%var-m2-1.1.1 input.ind-%var761X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var761X)))
 (=> $x133 (= ?x269 ?x150)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var760X) (bvult input.ind-%var760X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var760X)))
 (= $x133 $x286))))
 ))
 (let (($x251 (and $x169 $x48)))
 (let (($x99 (= $x251 true)))
 (let (($x264 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var755X (_ bv4 32))))
 (let ((?x120 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x204))))
 (let ((?x287 (input.spec-%var-m1-1.1.1 input.ind-%var755X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var755X)))
 (=> $x143 (= ?x287 ?x266)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X (_ bv100 32)))))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var754X)))
 (= $x143 $x286))))
 ))
 (let (($x245 (and $x213 $x264)))
 (let (($x111 (= $x245 true)))
 (let ((?x65 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x68 (= (_ bv0 32) ?x65)))
 (let ((?x66 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x47 (= (_ bv0 32) ?x66)))
 (let ((?x123 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x7 $x248)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x16 $x200)))
 (let (($x232 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (and $x19 $x91)))
 (let (($x128 (not $x215)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x18 $x60)))
 (let (($x45 (and (not $x178) $x128)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x21 $x96)))
 (let (($x31 (not $x25)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x23 $x8)))
 (let (($x117 (and (not $x71) $x31)))
 (let (($x171 (and (and (and (and (and (and $x117 $x45) $x101) $x232) $x79) $x83) $x47)))
 (let (($x107 (and $x171 $x68)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x90 (or false (or false (and (and true (or $x177 $x40)) (or $x86 $x97))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x235 (and $x100 $x107)))
 (let (($x46 (= $x235 true)))
 (let (($x106 (= $x46 true)))
 (let (($x242 (= $x106 true)))
 (let (($x70 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x118 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x118 $x70)))
 (let (($x11 (= $x44 true)))
 (let (($x87 (= $x11 true)))
 (let (($x9 (= $x87 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x119 (= (_ bv0 2) ?x145)))
 (let (($x163 (= $x119 true)))
 (let (($x112 (= $x163 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x219)))
 (let (($x76 (= $x233 true)))
 (let (($x30 (= $x76 true)))
 (let (($x98 (and $x30 $x112)))
 (let (($x50 (and $x98 $x9)))
 (let (($x55 (and $x50 $x242)))
 (let (($x272 (and $x55 $x111)))
 (let (($x222 (and $x272 $x99)))
 (let (($x190 (and $x222 $x102)))
 (let (($x263 (and $x190 $x89)))
 (let (($x158 (=> $x263 $x255)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x205 (= false true)))
 (let (($x255 (= $x205 true)))
 (let (($x162 (forall ((input.ind-%var773X (_ BitVec 32)) )(let ((?x94 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var773X)))
 (let ((?x269 (input.spec-%var-m2-1.1.1 input.ind-%var773X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var773X)))
 (=> $x133 (= ?x269 ?x94))))))
 ))
 (let (($x261 (forall ((input.ind-%var772X (_ BitVec 32)) )(let (($x192 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var772X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var772X)))
 (= $x133 $x192))))
 ))
 (let (($x201 (and $x261 $x162)))
 (let (($x89 (= $x201 true)))
 (let (($x193 (forall ((input.ind-%var767X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var767X)))
 (let ((?x287 (input.spec-%var-m1-1.1.1 input.ind-%var767X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var767X)))
 (=> $x143 (= ?x287 ?x184))))))
 ))
 (let (($x80 (forall ((input.ind-%var766X (_ BitVec 32)) )(let (($x196 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var766X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var766X)))
 (= $x143 $x196))))
 ))
 (let (($x113 (and $x80 $x193)))
 (let (($x102 (= $x113 true)))
 (let (($x48 (forall ((input.ind-%var761X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var761X (_ bv4 32))))
 (let ((?x127 (bvadd ?x230 input.dst.llvm-%m2)))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv1 32))) (select input.dst.llvm-mem ?x127))))
 (let ((?x150 (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x127 (_ bv2 32))) ?x140))))
 (let ((?x269 (input.spec-%var-m2-1.1.1 input.ind-%var761X)))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var761X)))
 (=> $x133 (= ?x269 ?x150)))))))))
 ))
 (let (($x169 (forall ((input.ind-%var760X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var760X) (bvult input.ind-%var760X (_ bv100 32)))))
 (let (($x133 (input.spec-%var-m2-1.0.1 input.ind-%var760X)))
 (= $x133 $x286))))
 ))
 (let (($x251 (and $x169 $x48)))
 (let (($x99 (= $x251 true)))
 (let (($x264 (forall ((input.ind-%var755X (_ BitVec 32)) )(let ((?x230 (bvmul input.ind-%var755X (_ bv4 32))))
 (let ((?x120 (bvadd ?x230 input.dst.llvm-%m1)))
 (let ((?x204 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv1 32))) (select input.dst.llvm-mem ?x120))))
 (let ((?x266 (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x120 (_ bv2 32))) ?x204))))
 (let ((?x287 (input.spec-%var-m1-1.1.1 input.ind-%var755X)))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var755X)))
 (=> $x143 (= ?x287 ?x266)))))))))
 ))
 (let (($x213 (forall ((input.ind-%var754X (_ BitVec 32)) )(let (($x286 (and (bvule (_ bv0 32) input.ind-%var754X) (bvult input.ind-%var754X (_ bv100 32)))))
 (let (($x143 (input.spec-%var-m1-1.0.1 input.ind-%var754X)))
 (= $x143 $x286))))
 ))
 (let (($x245 (and $x213 $x264)))
 (let (($x111 (= $x245 true)))
 (let ((?x65 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x68 (= (_ bv0 32) ?x65)))
 (let ((?x66 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x47 (= (_ bv0 32) ?x66)))
 (let ((?x123 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x123)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x248 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x200 (and $x7 $x248)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x79 (and $x16 $x200)))
 (let (($x232 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (and $x19 $x91)))
 (let (($x128 (not $x215)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (and $x18 $x60)))
 (let (($x45 (and (not $x178) $x128)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x21 $x96)))
 (let (($x31 (not $x25)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x23 $x8)))
 (let (($x117 (and (not $x71) $x31)))
 (let (($x171 (and (and (and (and (and (and $x117 $x45) $x101) $x232) $x79) $x83) $x47)))
 (let (($x107 (and $x171 $x68)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x26 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x26)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x177 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x26)))
 (let (($x90 (or false (or false (and (and true (or $x177 $x40)) (or $x86 $x97))))))
 (let (($x100 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x90)))
 (let (($x235 (and $x100 $x107)))
 (let (($x46 (= $x235 true)))
 (let (($x106 (= $x46 true)))
 (let (($x242 (= $x106 true)))
 (let (($x70 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x118 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x44 (and $x118 $x70)))
 (let (($x11 (= $x44 true)))
 (let (($x87 (= $x11 true)))
 (let (($x9 (= $x87 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x119 (= (_ bv0 2) ?x145)))
 (let (($x163 (= $x119 true)))
 (let (($x112 (= $x163 true)))
 (let ((?x219 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x233 (= (_ bv0 2) ?x219)))
 (let (($x76 (= $x233 true)))
 (let (($x30 (= $x76 true)))
 (let (($x98 (and $x30 $x112)))
 (let (($x50 (and $x98 $x9)))
 (let (($x55 (and $x50 $x242)))
 (let (($x272 (and $x55 $x111)))
 (let (($x222 (and $x272 $x99)))
 (let (($x190 (and $x222 $x102)))
 (let (($x263 (and $x190 $x89)))
 (let (($x158 (=> $x263 $x255)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!0))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000008)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x8000000b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000008)
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun k!0 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1 x!0))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!0 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!0 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!0 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m1-1.1.1 x!0))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x92325d8c)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xac325fa8)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!11))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xac325fab)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x92325d8f)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xac325fa8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x92325d8c)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun k!11 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!12 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m1-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1!14 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!11 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!11 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!11 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m1-1.1.1 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!14 (k!13 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 16
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x212 (= $x142 true)))
 (let (($x220 (forall ((input.ind-%var843X (_ BitVec 32)) )(let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var843X)))
 (let ((?x166 (input.spec-%var-m2-1.1.1 input.ind-%var843X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var843X)))
 (=> $x254 (= ?x166 ?x28))))))
 ))
 (let (($x136 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var842X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var842X)))
 (= $x254 $x73))))
 ))
 (let (($x191 (and $x136 $x220)))
 (let (($x168 (= $x191 true)))
 (let (($x199 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var837X)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 input.ind-%var837X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var837X)))
 (=> $x58 (= ?x241 ?x184))))))
 ))
 (let (($x164 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var836X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var836X)))
 (= $x58 $x172))))
 ))
 (let (($x115 (and $x164 $x199)))
 (let (($x147 (= $x115 true)))
 (let (($x132 (forall ((input.ind-%var831X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var831X (_ bv4 32))))
 (let ((?x205 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x81)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x129)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 input.ind-%var831X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var831X)))
 (=> $x58 (= ?x241 ?x125))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var830X) (bvult input.ind-%var830X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var830X)))
 (= $x58 $x106))))
 ))
 (let (($x217 (and $x189 $x132)))
 (let (($x82 (= $x217 true)))
 (let (($x108 (forall ((input.ind-%var825X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var825X (_ bv4 32))))
 (let ((?x205 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x81)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x129)))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var825X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var825X)))
 (=> $x172 (= ?x184 ?x125))))))))))
 ))
 (let (($x222 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var824X) (bvult input.ind-%var824X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var824X)))
 (= $x172 $x106))))
 ))
 (let (($x138 (and $x222 $x108)))
 (let (($x183 (= $x138 true)))
 (let (($x176 (forall ((input.ind-%var819X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var819X (_ bv4 32))))
 (let ((?x223 (bvadd ?x266 input.dst.llvm-%m2)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x223))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv2 32))) ?x111)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv3 32))) ?x267)))
 (let ((?x166 (input.spec-%var-m2-1.1.1 input.ind-%var819X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var819X)))
 (=> $x254 (= ?x166 ?x127))))))))))
 ))
 (let (($x55 (forall ((input.ind-%var818X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var818X) (bvult input.ind-%var818X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var818X)))
 (= $x254 $x106))))
 ))
 (let (($x229 (and $x55 $x176)))
 (let (($x109 (= $x229 true)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x146 (= (_ bv0 32) ?x24)))
 (let ((?x128 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x45 (= (_ bv0 32) ?x128)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x117 $x178)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x31 $x72)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x85 $x90)))
 (let (($x23 (not $x100)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x97 $x63)))
 (let (($x71 (and (not $x41) $x23)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x40 $x32)))
 (let (($x6 (not $x22)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x163 $x112)))
 (let (($x67 (and (not $x51) $x6)))
 (let (($x16 (and (and (and (and (and (and $x67 $x71) $x21) $x25) $x19) $x215) $x45)))
 (let (($x7 (and $x16 $x146)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x29 (or false (or false (and (and true (or $x70 $x44)) (or $x75 $x54))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x259 (and $x177 $x7)))
 (let (($x56 (= $x259 true)))
 (let (($x248 (= $x56 true)))
 (let (($x200 (= $x248 true)))
 (let ((?x233 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x76 (= (_ bv0 2) ?x233)))
 (let (($x12 (= $x76 true)))
 (let (($x219 (= $x12 true)))
 (let (($x79 (and $x219 $x200)))
 (let (($x130 (and $x79 $x109)))
 (let (($x257 (and $x130 $x183)))
 (let (($x151 (and $x257 $x82)))
 (let (($x62 (and $x151 $x147)))
 (let (($x243 (and $x62 $x168)))
 (let (($x252 (=> $x243 $x212)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x142 (= true false)))
 (let (($x212 (= $x142 true)))
 (let (($x220 (forall ((input.ind-%var843X (_ BitVec 32)) )(let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var843X)))
 (let ((?x166 (input.spec-%var-m2-1.1.1 input.ind-%var843X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var843X)))
 (=> $x254 (= ?x166 ?x28))))))
 ))
 (let (($x136 (forall ((input.ind-%var842X (_ BitVec 32)) )(let (($x73 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var842X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var842X)))
 (= $x254 $x73))))
 ))
 (let (($x191 (and $x136 $x220)))
 (let (($x168 (= $x191 true)))
 (let (($x199 (forall ((input.ind-%var837X (_ BitVec 32)) )(let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var837X)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 input.ind-%var837X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var837X)))
 (=> $x58 (= ?x241 ?x184))))))
 ))
 (let (($x164 (forall ((input.ind-%var836X (_ BitVec 32)) )(let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var836X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var836X)))
 (= $x58 $x172))))
 ))
 (let (($x115 (and $x164 $x199)))
 (let (($x147 (= $x115 true)))
 (let (($x132 (forall ((input.ind-%var831X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var831X (_ bv4 32))))
 (let ((?x205 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x81)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x129)))
 (let ((?x241 (input.spec-%var-m1-1.1.1 input.ind-%var831X)))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var831X)))
 (=> $x58 (= ?x241 ?x125))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var830X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var830X) (bvult input.ind-%var830X (_ bv100 32)))))
 (let (($x58 (input.spec-%var-m1-1.0.1 input.ind-%var830X)))
 (= $x58 $x106))))
 ))
 (let (($x217 (and $x189 $x132)))
 (let (($x82 (= $x217 true)))
 (let (($x108 (forall ((input.ind-%var825X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var825X (_ bv4 32))))
 (let ((?x205 (bvadd ?x266 input.dst.llvm-%m1)))
 (let ((?x81 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x129 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x81)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x129)))
 (let ((?x184 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var825X)))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var825X)))
 (=> $x172 (= ?x184 ?x125))))))))))
 ))
 (let (($x222 (forall ((input.ind-%var824X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var824X) (bvult input.ind-%var824X (_ bv100 32)))))
 (let (($x172 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var824X)))
 (= $x172 $x106))))
 ))
 (let (($x138 (and $x222 $x108)))
 (let (($x183 (= $x138 true)))
 (let (($x176 (forall ((input.ind-%var819X (_ BitVec 32)) )(let ((?x266 (bvmul input.ind-%var819X (_ bv4 32))))
 (let ((?x223 (bvadd ?x266 input.dst.llvm-%m2)))
 (let ((?x111 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x223))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv2 32))) ?x111)))
 (let ((?x127 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x223 (_ bv3 32))) ?x267)))
 (let ((?x166 (input.spec-%var-m2-1.1.1 input.ind-%var819X)))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var819X)))
 (=> $x254 (= ?x166 ?x127))))))))))
 ))
 (let (($x55 (forall ((input.ind-%var818X (_ BitVec 32)) )(let (($x106 (and (bvule (_ bv0 32) input.ind-%var818X) (bvult input.ind-%var818X (_ bv100 32)))))
 (let (($x254 (input.spec-%var-m2-1.0.1 input.ind-%var818X)))
 (= $x254 $x106))))
 ))
 (let (($x229 (and $x55 $x176)))
 (let (($x109 (= $x229 true)))
 (let ((?x24 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x146 (= (_ bv0 32) ?x24)))
 (let ((?x128 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x45 (= (_ bv0 32) ?x128)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x91)))
 (let ((?x60 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x178 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x60)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (and $x117 $x178)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (and $x31 $x72)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x100 (and $x85 $x90)))
 (let (($x23 (not $x100)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x41 (and $x97 $x63)))
 (let (($x71 (and (not $x41) $x23)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x40 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x22 (and $x40 $x32)))
 (let (($x6 (not $x22)))
 (let (($x112 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x51 (and $x163 $x112)))
 (let (($x67 (and (not $x51) $x6)))
 (let (($x16 (and (and (and (and (and (and $x67 $x71) $x21) $x25) $x19) $x215) $x45)))
 (let (($x7 (and $x16 $x146)))
 (let (($x54 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x156 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x75 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x156)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x156)))
 (let (($x29 (or false (or false (and (and true (or $x70 $x44)) (or $x75 $x54))))))
 (let (($x177 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x259 (and $x177 $x7)))
 (let (($x56 (= $x259 true)))
 (let (($x248 (= $x56 true)))
 (let (($x200 (= $x248 true)))
 (let ((?x233 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x76 (= (_ bv0 2) ?x233)))
 (let (($x12 (= $x76 true)))
 (let (($x219 (= $x12 true)))
 (let (($x79 (and $x219 $x200)))
 (let (($x130 (and $x79 $x109)))
 (let (($x257 (and $x130 $x183)))
 (let (($x151 (and $x257 $x82)))
 (let (($x62 (and $x151 $x147)))
 (let (($x243 (and $x62 $x168)))
 (let (($x252 (=> $x243 $x212)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x430fbb79)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc135ce73)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb60c3a17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb60c3a14)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 17
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x247 (=> $x269 true)))
 (let (($x281 (= $x247 true)))
 (let (($x214 (= $x281 true)))
 (let (($x256 (forall ((input.ind-%var905X (_ BitVec 32)) )(let ((?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var905X)))
 (let ((?x17 (input.spec-%var-m2-1.1.1 input.ind-%var905X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var905X)))
 (=> $x127 (= ?x17 ?x187))))))
 ))
 (let (($x20 (forall ((input.ind-%var904X (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var904X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var904X)))
 (= $x127 $x33))))
 ))
 (let (($x211 (and $x20 $x256)))
 (let (($x173 (= $x211 true)))
 (let (($x181 (forall ((input.ind-%var899X (_ BitVec 32)) )(let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var899X)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var899X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var899X)))
 (=> $x94 (= ?x38 ?x35))))))
 ))
 (let (($x204 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var898X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var898X)))
 (= $x94 $x168))))
 ))
 (let (($x271 (and $x204 $x181)))
 (let (($x95 (= $x271 true)))
 (let (($x43 (forall ((input.ind-%var893X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var893X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x196)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var893X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var893X)))
 (=> $x94 (= ?x38 ?x144))))))))))
 ))
 (let (($x273 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var892X) (bvult input.ind-%var892X (_ bv100 32)))))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var892X)))
 (= $x94 $x222))))
 ))
 (let (($x141 (and $x273 $x43)))
 (let (($x203 (= $x141 true)))
 (let (($x123 (forall ((input.ind-%var887X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var887X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x196)))
 (let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var887X)))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var887X)))
 (=> $x168 (= ?x35 ?x144))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var886X) (bvult input.ind-%var886X (_ bv100 32)))))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var886X)))
 (= $x168 $x222))))
 ))
 (let (($x68 (and $x119 $x123)))
 (let (($x113 (= $x68 true)))
 (let (($x136 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x217 (bvadd ?x132 input.dst.llvm-%m2)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x217))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv2 32))) ?x164)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv3 32))) ?x199)))
 (let ((?x17 (input.spec-%var-m2-1.1.1 input.ind-%var881X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var881X)))
 (=> $x127 (= ?x17 ?x62))))))))))
 ))
 (let (($x193 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var880X)))
 (= $x127 $x222))))
 ))
 (let (($x28 (and $x193 $x136)))
 (let (($x265 (= $x28 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let (($x133 (= $x272 true)))
 (let ((?x200 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x200)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x56)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (and $x198 $x16)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x215 $x24)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x88 $x31)))
 (let (($x18 (not $x117)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x103 $x96)))
 (let (($x178 (and (not $x25) $x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x100 $x23)))
 (let (($x101 (not $x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x50 $x54)))
 (let (($x21 (and (not $x90) $x101)))
 (let (($x106 (and (and (and (and (and (and $x21 $x178) $x19) $x91) $x146) $x259) $x248)))
 (let (($x242 (and $x106 $x79)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x41 (or false (or false (and (and true (or $x163 $x112)) (or $x22 $x6))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x55 (and $x85 $x242)))
 (let (($x166 (= $x55 true)))
 (let (($x286 (= $x166 true)))
 (let (($x213 (= $x286 true)))
 (let (($x26 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x98 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x98 $x26)))
 (let (($x156 (= $x59 true)))
 (let (($x70 (= $x156 true)))
 (let (($x118 (= $x70 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x12 (= (_ bv0 2) ?x76)))
 (let (($x233 (= $x12 true)))
 (let (($x208 (= $x233 true)))
 (let (($x44 (and $x208 $x118)))
 (let (($x266 (and $x44 $x213)))
 (let (($x264 (and $x266 $x133)))
 (let (($x245 (and $x264 $x133)))
 (let (($x69 (and $x245 $x265)))
 (let (($x105 (and $x69 $x113)))
 (let (($x114 (and $x105 $x203)))
 (let (($x209 (and $x114 $x95)))
 (let (($x210 (and $x209 $x173)))
 (let (($x239 (=> $x210 $x214)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x247 (=> $x269 true)))
 (let (($x281 (= $x247 true)))
 (let (($x214 (= $x281 true)))
 (let (($x256 (forall ((input.ind-%var905X (_ BitVec 32)) )(let ((?x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var905X)))
 (let ((?x17 (input.spec-%var-m2-1.1.1 input.ind-%var905X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var905X)))
 (=> $x127 (= ?x17 ?x187))))))
 ))
 (let (($x20 (forall ((input.ind-%var904X (_ BitVec 32)) )(let (($x33 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var904X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var904X)))
 (= $x127 $x33))))
 ))
 (let (($x211 (and $x20 $x256)))
 (let (($x173 (= $x211 true)))
 (let (($x181 (forall ((input.ind-%var899X (_ BitVec 32)) )(let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var899X)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var899X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var899X)))
 (=> $x94 (= ?x38 ?x35))))))
 ))
 (let (($x204 (forall ((input.ind-%var898X (_ BitVec 32)) )(let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var898X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var898X)))
 (= $x94 $x168))))
 ))
 (let (($x271 (and $x204 $x181)))
 (let (($x95 (= $x271 true)))
 (let (($x43 (forall ((input.ind-%var893X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var893X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x196)))
 (let ((?x38 (input.spec-%var-m1-1.1.1 input.ind-%var893X)))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var893X)))
 (=> $x94 (= ?x38 ?x144))))))))))
 ))
 (let (($x273 (forall ((input.ind-%var892X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var892X) (bvult input.ind-%var892X (_ bv100 32)))))
 (let (($x94 (input.spec-%var-m1-1.0.1 input.ind-%var892X)))
 (= $x94 $x222))))
 ))
 (let (($x141 (and $x273 $x43)))
 (let (($x203 (= $x141 true)))
 (let (($x123 (forall ((input.ind-%var887X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var887X (_ bv4 32))))
 (let ((?x124 (bvadd ?x132 input.dst.llvm-%m1)))
 (let ((?x207 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x124))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv2 32))) ?x207)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x124 (_ bv3 32))) ?x196)))
 (let ((?x35 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var887X)))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var887X)))
 (=> $x168 (= ?x35 ?x144))))))))))
 ))
 (let (($x119 (forall ((input.ind-%var886X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var886X) (bvult input.ind-%var886X (_ bv100 32)))))
 (let (($x168 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var886X)))
 (= $x168 $x222))))
 ))
 (let (($x68 (and $x119 $x123)))
 (let (($x113 (= $x68 true)))
 (let (($x136 (forall ((input.ind-%var881X (_ BitVec 32)) )(let ((?x132 (bvmul input.ind-%var881X (_ bv4 32))))
 (let ((?x217 (bvadd ?x132 input.dst.llvm-%m2)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x217))))
 (let ((?x199 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv2 32))) ?x164)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x217 (_ bv3 32))) ?x199)))
 (let ((?x17 (input.spec-%var-m2-1.1.1 input.ind-%var881X)))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var881X)))
 (=> $x127 (= ?x17 ?x62))))))))))
 ))
 (let (($x193 (forall ((input.ind-%var880X (_ BitVec 32)) )(let (($x222 (and (bvule (_ bv0 32) input.ind-%var880X) (bvult input.ind-%var880X (_ bv100 32)))))
 (let (($x127 (input.spec-%var-m2-1.0.1 input.ind-%var880X)))
 (= $x127 $x222))))
 ))
 (let (($x28 (and $x193 $x136)))
 (let (($x265 (= $x28 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let (($x133 (= $x272 true)))
 (let ((?x200 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x200)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x56)))
 (let ((?x7 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x259 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x7)))
 (let ((?x45 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x16 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x45)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (and $x198 $x16)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x215 $x24)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (and $x88 $x31)))
 (let (($x18 (not $x117)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x25 (and $x103 $x96)))
 (let (($x178 (and (not $x25) $x18)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (and $x100 $x23)))
 (let (($x101 (not $x71)))
 (let (($x54 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x90 (and $x50 $x54)))
 (let (($x21 (and (not $x90) $x101)))
 (let (($x106 (and (and (and (and (and (and $x21 $x178) $x19) $x91) $x146) $x259) $x248)))
 (let (($x242 (and $x106 $x79)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x177 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x22 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x177)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x177)))
 (let (($x41 (or false (or false (and (and true (or $x163 $x112)) (or $x22 $x6))))))
 (let (($x85 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x41)))
 (let (($x55 (and $x85 $x242)))
 (let (($x166 (= $x55 true)))
 (let (($x286 (= $x166 true)))
 (let (($x213 (= $x286 true)))
 (let (($x26 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x98 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x59 (and $x98 $x26)))
 (let (($x156 (= $x59 true)))
 (let (($x70 (= $x156 true)))
 (let (($x118 (= $x70 true)))
 (let ((?x76 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x12 (= (_ bv0 2) ?x76)))
 (let (($x233 (= $x12 true)))
 (let (($x208 (= $x233 true)))
 (let (($x44 (and $x208 $x118)))
 (let (($x266 (and $x44 $x213)))
 (let (($x264 (and $x266 $x133)))
 (let (($x245 (and $x264 $x133)))
 (let (($x69 (and $x245 $x265)))
 (let (($x105 (and $x69 $x113)))
 (let (($x114 (and $x105 $x203)))
 (let (($x209 (and $x114 $x95)))
 (let (($x210 (and $x209 $x173)))
 (let (($x239 (=> $x210 $x214)))
 (not $x239))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 18
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x260 (= false true)))
 (let (($x89 (= $x260 true)))
 (let (($x139 (forall ((input.ind-%var935X (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var935X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var935X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var935X)))
 (=> $x267 (= ?x138 ?x280))))))
 ))
 (let (($x253 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var934X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var934X)))
 (= $x267 $x175))))
 ))
 (let (($x236 (and $x253 $x139)))
 (let (($x180 (= $x236 true)))
 (let (($x268 (forall ((input.ind-%var929X (_ BitVec 32)) )(let ((?x271 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var929X)))
 (let ((?x174 (input.spec-%var-m1-1.1.1 input.ind-%var929X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var929X)))
 (=> $x155 (= ?x174 ?x271))))))
 ))
 (let (($x77 (forall ((input.ind-%var928X (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var928X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var928X)))
 (= $x155 $x78))))
 ))
 (let (($x278 (and $x77 $x268)))
 (let (($x143 (= $x278 true)))
 (let (($x277 (forall ((input.ind-%var923X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var923X (_ bv4 32))))
 (let ((?x239 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x194)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x289)))
 (let ((?x174 (input.spec-%var-m1-1.1.1 input.ind-%var923X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var923X)))
 (=> $x155 (= ?x174 ?x179))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var922X) (bvult input.ind-%var922X (_ bv100 32)))))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var922X)))
 (= $x155 $x158))))
 ))
 (let (($x116 (and $x108 $x277)))
 (let (($x162 (= $x116 true)))
 (let (($x64 (forall ((input.ind-%var917X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var917X (_ bv4 32))))
 (let ((?x239 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x194)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x289)))
 (let ((?x271 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var917X)))
 (let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var917X)))
 (=> $x78 (= ?x271 ?x179))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var916X) (bvult input.ind-%var916X (_ bv100 32)))))
 (let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var916X)))
 (= $x78 $x158))))
 ))
 (let (($x93 (and $x204 $x64)))
 (let (($x275 (= $x93 true)))
 (let (($x113 (forall ((input.ind-%var911X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var911X (_ bv4 32))))
 (let ((?x13 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x13))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv2 32))) ?x226)))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv3 32))) ?x196)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var911X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var911X)))
 (=> $x267 (= ?x138 ?x27))))))))))
 ))
 (let (($x132 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var910X) (bvult input.ind-%var910X (_ bv100 32)))))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var910X)))
 (= $x267 $x158))))
 ))
 (let (($x105 (and $x132 $x113)))
 (let (($x94 (= $x105 true)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x106)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x56)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x24 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x45 $x146)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x128 $x171)))
 (let (($x198 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x178 $x83)))
 (let (($x19 (not $x72)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x31 $x117)))
 (let (($x232 (and (not $x18) $x19)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x103)))
 (let (($x25 (not $x96)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x163 $x29)))
 (let (($x88 (and (not $x101) $x25)))
 (let (($x213 (and (and (and (and (and (and $x88 $x232) $x46) $x198) $x7) $x235) $x248)))
 (let (($x266 (and $x213 $x200)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x100 (or false (or false (and (and true (or $x32 $x6)) (or $x85 $x50))))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x223 (and $x71 $x266)))
 (let (($x169 (= $x223 true)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x44 (= (_ bv0 2) ?x118)))
 (let (($x87 (= $x44 true)))
 (let (($x9 (= $x87 true)))
 (let (($x98 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x221 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x76 (and $x221 $x145)))
 (let (($x84 (and $x76 $x98)))
 (let (($x26 (= $x84 true)))
 (let (($x59 (= $x26 true)))
 (let (($x156 (= $x59 true)))
 (let (($x49 (and $x156 $x9)))
 (let (($x272 (and $x49 $x270)))
 (let (($x201 (and $x272 $x94)))
 (let (($x229 (and $x201 $x275)))
 (let (($x192 (and $x229 $x162)))
 (let (($x262 (and $x192 $x143)))
 (let (($x122 (and $x262 $x180)))
 (let (($x274 (=> $x122 $x89)))
 (not $x274)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x260 (= false true)))
 (let (($x89 (= $x260 true)))
 (let (($x139 (forall ((input.ind-%var935X (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var935X)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var935X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var935X)))
 (=> $x267 (= ?x138 ?x280))))))
 ))
 (let (($x253 (forall ((input.ind-%var934X (_ BitVec 32)) )(let (($x175 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var934X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var934X)))
 (= $x267 $x175))))
 ))
 (let (($x236 (and $x253 $x139)))
 (let (($x180 (= $x236 true)))
 (let (($x268 (forall ((input.ind-%var929X (_ BitVec 32)) )(let ((?x271 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var929X)))
 (let ((?x174 (input.spec-%var-m1-1.1.1 input.ind-%var929X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var929X)))
 (=> $x155 (= ?x174 ?x271))))))
 ))
 (let (($x77 (forall ((input.ind-%var928X (_ BitVec 32)) )(let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var928X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var928X)))
 (= $x155 $x78))))
 ))
 (let (($x278 (and $x77 $x268)))
 (let (($x143 (= $x278 true)))
 (let (($x277 (forall ((input.ind-%var923X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var923X (_ bv4 32))))
 (let ((?x239 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x194)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x289)))
 (let ((?x174 (input.spec-%var-m1-1.1.1 input.ind-%var923X)))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var923X)))
 (=> $x155 (= ?x174 ?x179))))))))))
 ))
 (let (($x108 (forall ((input.ind-%var922X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var922X) (bvult input.ind-%var922X (_ bv100 32)))))
 (let (($x155 (input.spec-%var-m1-1.0.1 input.ind-%var922X)))
 (= $x155 $x158))))
 ))
 (let (($x116 (and $x108 $x277)))
 (let (($x162 (= $x116 true)))
 (let (($x64 (forall ((input.ind-%var917X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var917X (_ bv4 32))))
 (let ((?x239 (bvadd ?x80 input.dst.llvm-%m1)))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x239))))
 (let ((?x289 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv2 32))) ?x194)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x239 (_ bv3 32))) ?x289)))
 (let ((?x271 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var917X)))
 (let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var917X)))
 (=> $x78 (= ?x271 ?x179))))))))))
 ))
 (let (($x204 (forall ((input.ind-%var916X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var916X) (bvult input.ind-%var916X (_ bv100 32)))))
 (let (($x78 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var916X)))
 (= $x78 $x158))))
 ))
 (let (($x93 (and $x204 $x64)))
 (let (($x275 (= $x93 true)))
 (let (($x113 (forall ((input.ind-%var911X (_ BitVec 32)) )(let ((?x80 (bvmul input.ind-%var911X (_ bv4 32))))
 (let ((?x13 (bvadd ?x80 input.dst.llvm-%m2)))
 (let ((?x226 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x13))))
 (let ((?x196 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv2 32))) ?x226)))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x13 (_ bv3 32))) ?x196)))
 (let ((?x138 (input.spec-%var-m2-1.1.1 input.ind-%var911X)))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var911X)))
 (=> $x267 (= ?x138 ?x27))))))))))
 ))
 (let (($x132 (forall ((input.ind-%var910X (_ BitVec 32)) )(let (($x158 (and (bvule (_ bv0 32) input.ind-%var910X) (bvult input.ind-%var910X (_ bv100 32)))))
 (let (($x267 (input.spec-%var-m2-1.0.1 input.ind-%var910X)))
 (= $x267 $x158))))
 ))
 (let (($x105 (and $x132 $x113)))
 (let (($x94 (= $x105 true)))
 (let ((?x106 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x106)))
 (let ((?x56 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x248 (= (_ bv0 32) ?x56)))
 (let ((?x259 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x259)))
 (let ((?x24 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x146 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x24)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (and $x45 $x146)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x7 (and $x128 $x171)))
 (let (($x198 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (and $x178 $x83)))
 (let (($x19 (not $x72)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x18 (and $x31 $x117)))
 (let (($x232 (and (not $x18) $x19)))
 (let (($x103 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (and $x21 $x103)))
 (let (($x25 (not $x96)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x101 (and $x163 $x29)))
 (let (($x88 (and (not $x101) $x25)))
 (let (($x213 (and (and (and (and (and (and $x88 $x232) $x46) $x198) $x7) $x235) $x248)))
 (let (($x266 (and $x213 $x200)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x22 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x85 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x22)))
 (let (($x6 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x22)))
 (let (($x100 (or false (or false (and (and true (or $x32 $x6)) (or $x85 $x50))))))
 (let (($x71 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x100)))
 (let (($x223 (and $x71 $x266)))
 (let (($x169 (= $x223 true)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let ((?x118 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x44 (= (_ bv0 2) ?x118)))
 (let (($x87 (= $x44 true)))
 (let (($x9 (= $x87 true)))
 (let (($x98 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x145 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x221 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x76 (and $x221 $x145)))
 (let (($x84 (and $x76 $x98)))
 (let (($x26 (= $x84 true)))
 (let (($x59 (= $x26 true)))
 (let (($x156 (= $x59 true)))
 (let (($x49 (and $x156 $x9)))
 (let (($x272 (and $x49 $x270)))
 (let (($x201 (and $x272 $x94)))
 (let (($x229 (and $x201 $x275)))
 (let (($x192 (and $x229 $x162)))
 (let (($x262 (and $x192 $x143)))
 (let (($x122 (and $x262 $x180)))
 (let (($x274 (=> $x122 $x89)))
 (not $x274)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdffe4d03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x64d6c787)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0230db03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80017a13)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 19
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x130 (= $x159 true)))
 (let (($x231 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var997X)))
 (let ((?x120 (input.spec-%var-m2-1.1.1 input.ind-%var997X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var997X)))
 (=> $x193 (= ?x120 ?x263))))))
 ))
 (let (($x114 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x140 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var996X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var996X)))
 (= $x193 $x140))))
 ))
 (let (($x92 (and $x114 $x231)))
 (let (($x250 (= $x92 true)))
 (let (($x5 (forall ((input.ind-%var991X (_ BitVec 32)) )(let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var991X)))
 (let ((?x209 (input.spec-%var-m1-1.1.1 input.ind-%var991X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var991X)))
 (=> $x62 (= ?x209 ?x186))))))
 ))
 (let (($x111 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var990X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var990X)))
 (= $x62 $x162))))
 ))
 (let (($x195 (and $x111 $x5)))
 (let (($x129 (= $x195 true)))
 (let (($x257 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var985X (_ bv4 32))))
 (let ((?x57 (bvadd ?x11 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x95)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x157)))
 (let ((?x209 (input.spec-%var-m1-1.1.1 input.ind-%var985X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var985X)))
 (=> $x62 (= ?x209 ?x133))))))))))
 ))
 (let (($x181 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X (_ bv100 32)))))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var984X)))
 (= $x62 $x144))))
 ))
 (let (($x142 (and $x181 $x257)))
 (let (($x38 (= $x142 true)))
 (let (($x82 (forall ((input.ind-%var979X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var979X (_ bv4 32))))
 (let ((?x57 (bvadd ?x11 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x95)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x157)))
 (let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var979X)))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var979X)))
 (=> $x162 (= ?x186 ?x133))))))))))
 ))
 (let (($x278 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var978X) (bvult input.ind-%var978X (_ bv100 32)))))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var978X)))
 (= $x162 $x144))))
 ))
 (let (($x164 (and $x278 $x82)))
 (let (($x168 (= $x164 true)))
 (let (($x108 (forall ((input.ind-%var973X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var973X (_ bv4 32))))
 (let ((?x75 (bvadd ?x11 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x179)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x64)))
 (let ((?x120 (input.spec-%var-m2-1.1.1 input.ind-%var973X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var973X)))
 (=> $x193 (= ?x120 ?x229))))))))))
 ))
 (let (($x136 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var972X) (bvult input.ind-%var972X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var972X)))
 (= $x193 $x144))))
 ))
 (let (($x174 (and $x136 $x108)))
 (let (($x65 (= $x174 true)))
 (let (($x223 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x213 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x106 (and $x56 $x213)))
 (let (($x169 (and $x106 $x223)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x91)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x79 (= (_ bv0 32) ?x232)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x31 $x254)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x88 $x178)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x54 $x90)))
 (let (($x60 (and (not $x37) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x208 $x98)))
 (let (($x50 (and (not $x6) $x85)))
 (let (($x45 (and (and (and (and (and (and $x50 $x60) $x103) $x25) $x83) $x19) $x79)))
 (let (($x16 (and $x45 $x46)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x22 (or false (or false (and (and true (or $x118 $x44)) (or $x36 $x112))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x24 (and $x40 $x16)))
 (let (($x146 (= $x24 true)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x221)))
 (let (($x12 (= $x202 true)))
 (let (($x219 (= $x12 true)))
 (let (($x166 (and $x219 $x7)))
 (let (($x245 (and $x166 $x272)))
 (let (($x148 (and $x245 $x65)))
 (let (($x30 (and $x148 $x168)))
 (let (($x203 (and $x30 $x38)))
 (let (($x225 (and $x203 $x129)))
 (let (($x74 (and $x225 $x250)))
 (let (($x39 (=> $x74 $x130)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x159 (= (_ bv0 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x130 (= $x159 true)))
 (let (($x231 (forall ((input.ind-%var997X (_ BitVec 32)) )(let ((?x263 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var997X)))
 (let ((?x120 (input.spec-%var-m2-1.1.1 input.ind-%var997X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var997X)))
 (=> $x193 (= ?x120 ?x263))))))
 ))
 (let (($x114 (forall ((input.ind-%var996X (_ BitVec 32)) )(let (($x140 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var996X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var996X)))
 (= $x193 $x140))))
 ))
 (let (($x92 (and $x114 $x231)))
 (let (($x250 (= $x92 true)))
 (let (($x5 (forall ((input.ind-%var991X (_ BitVec 32)) )(let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var991X)))
 (let ((?x209 (input.spec-%var-m1-1.1.1 input.ind-%var991X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var991X)))
 (=> $x62 (= ?x209 ?x186))))))
 ))
 (let (($x111 (forall ((input.ind-%var990X (_ BitVec 32)) )(let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var990X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var990X)))
 (= $x62 $x162))))
 ))
 (let (($x195 (and $x111 $x5)))
 (let (($x129 (= $x195 true)))
 (let (($x257 (forall ((input.ind-%var985X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var985X (_ bv4 32))))
 (let ((?x57 (bvadd ?x11 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x95)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x157)))
 (let ((?x209 (input.spec-%var-m1-1.1.1 input.ind-%var985X)))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var985X)))
 (=> $x62 (= ?x209 ?x133))))))))))
 ))
 (let (($x181 (forall ((input.ind-%var984X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var984X) (bvult input.ind-%var984X (_ bv100 32)))))
 (let (($x62 (input.spec-%var-m1-1.0.1 input.ind-%var984X)))
 (= $x62 $x144))))
 ))
 (let (($x142 (and $x181 $x257)))
 (let (($x38 (= $x142 true)))
 (let (($x82 (forall ((input.ind-%var979X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var979X (_ bv4 32))))
 (let ((?x57 (bvadd ?x11 input.dst.llvm-%m1)))
 (let ((?x95 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x57))))
 (let ((?x157 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv2 32))) ?x95)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x57 (_ bv3 32))) ?x157)))
 (let ((?x186 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var979X)))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var979X)))
 (=> $x162 (= ?x186 ?x133))))))))))
 ))
 (let (($x278 (forall ((input.ind-%var978X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var978X) (bvult input.ind-%var978X (_ bv100 32)))))
 (let (($x162 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var978X)))
 (= $x162 $x144))))
 ))
 (let (($x164 (and $x278 $x82)))
 (let (($x168 (= $x164 true)))
 (let (($x108 (forall ((input.ind-%var973X (_ BitVec 32)) )(let ((?x11 (bvmul input.ind-%var973X (_ bv4 32))))
 (let ((?x75 (bvadd ?x11 input.dst.llvm-%m2)))
 (let ((?x179 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x75))))
 (let ((?x64 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv2 32))) ?x179)))
 (let ((?x229 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x75 (_ bv3 32))) ?x64)))
 (let ((?x120 (input.spec-%var-m2-1.1.1 input.ind-%var973X)))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var973X)))
 (=> $x193 (= ?x120 ?x229))))))))))
 ))
 (let (($x136 (forall ((input.ind-%var972X (_ BitVec 32)) )(let (($x144 (and (bvule (_ bv0 32) input.ind-%var972X) (bvult input.ind-%var972X (_ bv100 32)))))
 (let (($x193 (input.spec-%var-m2-1.0.1 input.ind-%var972X)))
 (= $x193 $x144))))
 ))
 (let (($x174 (and $x136 $x108)))
 (let (($x65 (= $x174 true)))
 (let (($x223 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x213 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x106 (and $x56 $x213)))
 (let (($x169 (and $x106 $x223)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x91)))
 (let ((?x232 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x79 (= (_ bv0 32) ?x232)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x72)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x18)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (and $x31 $x254)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x83 (and $x88 $x178)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x54 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x54 $x90)))
 (let (($x60 (and (not $x37) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x208 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x208 $x98)))
 (let (($x50 (and (not $x6) $x85)))
 (let (($x45 (and (and (and (and (and (and $x50 $x60) $x103) $x25) $x83) $x19) $x79)))
 (let (($x16 (and $x45 $x46)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x44 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x22 (or false (or false (and (and true (or $x118 $x44)) (or $x36 $x112))))))
 (let (($x40 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x24 (and $x40 $x16)))
 (let (($x146 (= $x24 true)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x221)))
 (let (($x12 (= $x202 true)))
 (let (($x219 (= $x12 true)))
 (let (($x166 (and $x219 $x7)))
 (let (($x245 (and $x166 $x272)))
 (let (($x148 (and $x245 $x65)))
 (let (($x30 (and $x148 $x168)))
 (let (($x203 (and $x30 $x38)))
 (let (($x225 (and $x203 $x129)))
 (let (($x74 (and $x225 $x250)))
 (let (($x39 (=> $x74 $x130)))
 (not $x39)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xda7ffff8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x7a7ffffc)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x7a7fffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xda7ffffb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x7a7ffffc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xda7ffff8)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!20 (k!17 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!15 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 (k!17 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!14))
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x01080004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x01080007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000003)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x01080004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!17 (k!15 x!0)))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!14 (bvmul #x00000004 x!0))))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!14 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!14 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!14 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!14 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!14 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 20
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x252 (bvneg ?x124)))
 (let (($x161 (= ?x252 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x165 (= $x161 true)))
 (let (($x182 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x262 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1059X)))
 (let ((?x206 (input.spec-%var-m2-1.1.1 input.ind-%var1059X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1059X)))
 (=> $x144 (= ?x206 ?x262))))))
 ))
 (let (($x121 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1058X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1058X)))
 (= $x144 $x47))))
 ))
 (let (($x35 (and $x121 $x182)))
 (let (($x15 (= $x35 true)))
 (let (($x197 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1053X)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var1053X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1053X)))
 (=> $x105 (= ?x280 ?x114))))))
 ))
 (let (($x210 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1052X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1052X)))
 (= $x105 $x203))))
 ))
 (let (($x281 (and $x210 $x197)))
 (let (($x265 (= $x281 true)))
 (let (($x290 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1047X (_ bv4 32))))
 (let ((?x244 (bvadd ?x288 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x244))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv2 32))) ?x253)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv3 32))) ?x109)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var1047X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1047X)))
 (=> $x105 (= ?x280 ?x267))))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1046X) (bvult input.ind-%var1046X (_ bv100 32)))))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1046X)))
 (= $x105 $x275))))
 ))
 (let (($x222 (and $x175 $x290)))
 (let (($x116 (= $x222 true)))
 (let (($x123 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x244 (bvadd ?x288 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x244))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv2 32))) ?x253)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv3 32))) ?x109)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1041X)))
 (let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1041X)))
 (=> $x203 (= ?x114 ?x267))))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1040X)))
 (= $x203 $x275))))
 ))
 (let (($x68 (and $x129 $x123)))
 (let (($x239 (= $x68 true)))
 (let (($x209 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1035X (_ bv4 32))))
 (let ((?x189 (bvadd ?x288 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x189))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv2 32))) ?x99)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv3 32))) ?x164)))
 (let ((?x206 (input.spec-%var-m2-1.1.1 input.ind-%var1035X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1035X)))
 (=> $x144 (= ?x206 ?x62))))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X (_ bv100 32)))))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1034X)))
 (= $x144 $x275))))
 ))
 (let (($x81 (and $x34 $x209)))
 (let (($x183 (= $x81 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x248 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x248 $x106)))
 (let (($x270 (and $x266 $x269)))
 (let (($x272 (= $x270 true)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x128 (= (_ bv0 32) ?x19)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x72 (= (_ bv0 32) ?x55)))
 (let ((?x178 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x198 $x117)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x25 $x18)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x90 $x37)))
 (let (($x242 (and (not $x101) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x26 $x32)))
 (let (($x54 (and (not $x41) $x85)))
 (let (($x16 (and (and (and (and (and (and $x54 $x242) $x103) $x96) $x254) $x83) $x72)))
 (let (($x24 (and $x16 $x128)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x208 (or false (or false (and (and true (or $x87 $x9)) (or $x51 $x23))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x146 (and $x6 $x24)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x221)))
 (let (($x188 (= $x202 true)))
 (let (($x200 (= $x188 true)))
 (let (($x259 (and $x200 $x166)))
 (let (($x193 (and $x259 $x176)))
 (let (($x257 (and $x193 $x183)))
 (let (($x243 (and $x257 $x239)))
 (let (($x42 (and $x243 $x116)))
 (let (($x69 (and $x42 $x265)))
 (let (($x53 (and $x69 $x15)))
 (let (($x131 (=> $x53 $x165)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x124 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x252 (bvneg ?x124)))
 (let (($x161 (= ?x252 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x165 (= $x161 true)))
 (let (($x182 (forall ((input.ind-%var1059X (_ BitVec 32)) )(let ((?x262 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1059X)))
 (let ((?x206 (input.spec-%var-m2-1.1.1 input.ind-%var1059X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1059X)))
 (=> $x144 (= ?x206 ?x262))))))
 ))
 (let (($x121 (forall ((input.ind-%var1058X (_ BitVec 32)) )(let (($x47 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1058X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1058X)))
 (= $x144 $x47))))
 ))
 (let (($x35 (and $x121 $x182)))
 (let (($x15 (= $x35 true)))
 (let (($x197 (forall ((input.ind-%var1053X (_ BitVec 32)) )(let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1053X)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var1053X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1053X)))
 (=> $x105 (= ?x280 ?x114))))))
 ))
 (let (($x210 (forall ((input.ind-%var1052X (_ BitVec 32)) )(let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1052X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1052X)))
 (= $x105 $x203))))
 ))
 (let (($x281 (and $x210 $x197)))
 (let (($x265 (= $x281 true)))
 (let (($x290 (forall ((input.ind-%var1047X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1047X (_ bv4 32))))
 (let ((?x244 (bvadd ?x288 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x244))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv2 32))) ?x253)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv3 32))) ?x109)))
 (let ((?x280 (input.spec-%var-m1-1.1.1 input.ind-%var1047X)))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1047X)))
 (=> $x105 (= ?x280 ?x267))))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1046X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1046X) (bvult input.ind-%var1046X (_ bv100 32)))))
 (let (($x105 (input.spec-%var-m1-1.0.1 input.ind-%var1046X)))
 (= $x105 $x275))))
 ))
 (let (($x222 (and $x175 $x290)))
 (let (($x116 (= $x222 true)))
 (let (($x123 (forall ((input.ind-%var1041X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1041X (_ bv4 32))))
 (let ((?x244 (bvadd ?x288 input.dst.llvm-%m1)))
 (let ((?x253 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x244))))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv2 32))) ?x253)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x244 (_ bv3 32))) ?x109)))
 (let ((?x114 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1041X)))
 (let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1041X)))
 (=> $x203 (= ?x114 ?x267))))))))))
 ))
 (let (($x129 (forall ((input.ind-%var1040X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1040X) (bvult input.ind-%var1040X (_ bv100 32)))))
 (let (($x203 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1040X)))
 (= $x203 $x275))))
 ))
 (let (($x68 (and $x129 $x123)))
 (let (($x239 (= $x68 true)))
 (let (($x209 (forall ((input.ind-%var1035X (_ BitVec 32)) )(let ((?x288 (bvmul input.ind-%var1035X (_ bv4 32))))
 (let ((?x189 (bvadd ?x288 input.dst.llvm-%m2)))
 (let ((?x99 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x189))))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv2 32))) ?x99)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x189 (_ bv3 32))) ?x164)))
 (let ((?x206 (input.spec-%var-m2-1.1.1 input.ind-%var1035X)))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1035X)))
 (=> $x144 (= ?x206 ?x62))))))))))
 ))
 (let (($x34 (forall ((input.ind-%var1034X (_ BitVec 32)) )(let (($x275 (and (bvule (_ bv0 32) input.ind-%var1034X) (bvult input.ind-%var1034X (_ bv100 32)))))
 (let (($x144 (input.spec-%var-m2-1.0.1 input.ind-%var1034X)))
 (= $x144 $x275))))
 ))
 (let (($x81 (and $x34 $x209)))
 (let (($x183 (= $x81 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x248 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x248 $x106)))
 (let (($x270 (and $x266 $x269)))
 (let (($x272 (= $x270 true)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let ((?x19 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x128 (= (_ bv0 32) ?x19)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x72 (= (_ bv0 32) ?x55)))
 (let ((?x178 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x178)))
 (let ((?x31 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x117 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x31)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (and $x198 $x117)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x25 $x18)))
 (let (($x96 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x90 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x101 (and $x90 $x37)))
 (let (($x242 (and (not $x101) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x41 (and $x26 $x32)))
 (let (($x54 (and (not $x41) $x85)))
 (let (($x16 (and (and (and (and (and (and $x54 $x242) $x103) $x96) $x254) $x83) $x72)))
 (let (($x24 (and $x16 $x128)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x9 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x87 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x208 (or false (or false (and (and true (or $x87 $x9)) (or $x51 $x23))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x208)))
 (let (($x146 (and $x6 $x24)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let ((?x221 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x202 (= (_ bv0 2) ?x221)))
 (let (($x188 (= $x202 true)))
 (let (($x200 (= $x188 true)))
 (let (($x259 (and $x200 $x166)))
 (let (($x193 (and $x259 $x176)))
 (let (($x257 (and $x193 $x183)))
 (let (($x243 (and $x257 $x239)))
 (let (($x42 (and $x243 $x116)))
 (let (($x69 (and $x42 $x265)))
 (let (($x53 (and $x69 $x15)))
 (let (($x131 (=> $x53 $x165)))
 (not $x131)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 21
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x173 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x258 (bvneg ?x173)))
 (let (($x58 (= ?x258 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (= $x58 true)))
 (let (($x20 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1089X)))
 (let ((?x133 (input.spec-%var-m2-1.1.1 input.ind-%var1089X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1089X)))
 (=> $x75 (= ?x133 ?x220))))))
 ))
 (let (($x11 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x104 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1088X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1088X)))
 (= $x75 $x104))))
 ))
 (let (($x48 (and $x11 $x20)))
 (let (($x141 (= $x48 true)))
 (let (($x256 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1083X)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1083X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1083X)))
 (=> $x147 (= ?x142 ?x261))))))
 ))
 (let (($x89 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1082X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1082X)))
 (= $x147 $x116))))
 ))
 (let (($x33 (and $x89 $x256)))
 (let (($x211 (= $x33 true)))
 (let (($x77 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1077X (_ bv4 32))))
 (let ((?x219 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x219))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x94)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x263)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1077X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1077X)))
 (=> $x147 (= ?x142 ?x170))))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1076X)))
 (= $x147 $x168))))
 ))
 (let (($x107 (and $x57 $x77)))
 (let (($x113 (= $x107 true)))
 (let (($x13 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1071X (_ bv4 32))))
 (let ((?x219 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x219))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x94)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x263)))
 (let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1071X)))
 (let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1071X)))
 (=> $x116 (= ?x261 ?x170))))))))))
 ))
 (let (($x281 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1070X) (bvult input.ind-%var1070X (_ bv100 32)))))
 (let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1070X)))
 (= $x116 $x168))))
 ))
 (let (($x136 (and $x281 $x13)))
 (let (($x226 (= $x136 true)))
 (let (($x175 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1065X (_ bv4 32))))
 (let ((?x192 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x192))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv2 32))) ?x267)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv3 32))) ?x123)))
 (let ((?x133 (input.spec-%var-m2-1.1.1 input.ind-%var1065X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1065X)))
 (=> $x75 (= ?x133 ?x243))))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1064X) (bvult input.ind-%var1064X (_ bv100 32)))))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1064X)))
 (= $x75 $x168))))
 ))
 (let (($x280 (and $x268 $x175)))
 (let (($x28 (= $x280 true)))
 (let (($x270 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x223 (and $x213 $x266)))
 (let (($x272 (and $x223 $x270)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let (($x193 (= $x176 true)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x83)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x178 (= (_ bv0 32) ?x91)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x198 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x45 $x88)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x96 $x31)))
 (let (($x215 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x37 $x101)))
 (let (($x232 (and (not $x60) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x70 $x98)))
 (let (($x90 (and (not $x50) $x85)))
 (let (($x24 (and (and (and (and (and (and $x90 $x232) $x103) $x215) $x117) $x254) $x178)))
 (let (($x146 (and $x24 $x46)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x26 (or false (or false (and (and true (or $x49 $x36)) (or $x86 $x22))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x171 (and $x41 $x146)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let (($x259 (= $x166 true)))
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x188 (= (_ bv0 2) ?x202)))
 (let (($x12 (= $x188 true)))
 (let (($x221 (= $x12 true)))
 (let (($x235 (and $x221 $x259)))
 (let (($x80 (and $x235 $x193)))
 (let (($x199 (and $x80 $x28)))
 (let (($x125 (and $x199 $x226)))
 (let (($x201 (and $x125 $x113)))
 (let (($x279 (and $x201 $x211)))
 (let (($x247 (and $x279 $x141)))
 (let (($x287 (=> $x247 $x190)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x173 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x258 (bvneg ?x173)))
 (let (($x58 (= ?x258 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x190 (= $x58 true)))
 (let (($x20 (forall ((input.ind-%var1089X (_ BitVec 32)) )(let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1089X)))
 (let ((?x133 (input.spec-%var-m2-1.1.1 input.ind-%var1089X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1089X)))
 (=> $x75 (= ?x133 ?x220))))))
 ))
 (let (($x11 (forall ((input.ind-%var1088X (_ BitVec 32)) )(let (($x104 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1088X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1088X)))
 (= $x75 $x104))))
 ))
 (let (($x48 (and $x11 $x20)))
 (let (($x141 (= $x48 true)))
 (let (($x256 (forall ((input.ind-%var1083X (_ BitVec 32)) )(let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1083X)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1083X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1083X)))
 (=> $x147 (= ?x142 ?x261))))))
 ))
 (let (($x89 (forall ((input.ind-%var1082X (_ BitVec 32)) )(let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1082X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1082X)))
 (= $x147 $x116))))
 ))
 (let (($x33 (and $x89 $x256)))
 (let (($x211 (= $x33 true)))
 (let (($x77 (forall ((input.ind-%var1077X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1077X (_ bv4 32))))
 (let ((?x219 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x219))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x94)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x263)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1077X)))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1077X)))
 (=> $x147 (= ?x142 ?x170))))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1076X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1076X) (bvult input.ind-%var1076X (_ bv100 32)))))
 (let (($x147 (input.spec-%var-m1-1.0.1 input.ind-%var1076X)))
 (= $x147 $x168))))
 ))
 (let (($x107 (and $x57 $x77)))
 (let (($x113 (= $x107 true)))
 (let (($x13 (forall ((input.ind-%var1071X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1071X (_ bv4 32))))
 (let ((?x219 (bvadd ?x264 input.dst.llvm-%m1)))
 (let ((?x94 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x219))))
 (let ((?x263 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv2 32))) ?x94)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x219 (_ bv3 32))) ?x263)))
 (let ((?x261 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1071X)))
 (let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1071X)))
 (=> $x116 (= ?x261 ?x170))))))))))
 ))
 (let (($x281 (forall ((input.ind-%var1070X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1070X) (bvult input.ind-%var1070X (_ bv100 32)))))
 (let (($x116 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1070X)))
 (= $x116 $x168))))
 ))
 (let (($x136 (and $x281 $x13)))
 (let (($x226 (= $x136 true)))
 (let (($x175 (forall ((input.ind-%var1065X (_ BitVec 32)) )(let ((?x264 (bvmul input.ind-%var1065X (_ bv4 32))))
 (let ((?x192 (bvadd ?x264 input.dst.llvm-%m2)))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x192))))
 (let ((?x123 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv2 32))) ?x267)))
 (let ((?x243 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x192 (_ bv3 32))) ?x123)))
 (let ((?x133 (input.spec-%var-m2-1.1.1 input.ind-%var1065X)))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1065X)))
 (=> $x75 (= ?x133 ?x243))))))))))
 ))
 (let (($x268 (forall ((input.ind-%var1064X (_ BitVec 32)) )(let (($x168 (and (bvule (_ bv0 32) input.ind-%var1064X) (bvult input.ind-%var1064X (_ bv100 32)))))
 (let (($x75 (input.spec-%var-m2-1.0.1 input.ind-%var1064X)))
 (= $x75 $x168))))
 ))
 (let (($x280 (and $x268 $x175)))
 (let (($x28 (= $x280 true)))
 (let (($x270 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x266 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x223 (and $x213 $x266)))
 (let (($x272 (and $x223 $x270)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let (($x193 (= $x176 true)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x83)))
 (let ((?x91 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x178 (= (_ bv0 32) ?x91)))
 (let ((?x18 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x254 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x18)))
 (let ((?x198 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x198)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (and $x45 $x88)))
 (let (($x96 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x117 (and $x96 $x31)))
 (let (($x215 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x103 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x100 $x71)))
 (let (($x29 (not $x163)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x37 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x37 $x101)))
 (let (($x232 (and (not $x60) $x29)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x85 (not $x63)))
 (let (($x98 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x70 $x98)))
 (let (($x90 (and (not $x50) $x85)))
 (let (($x24 (and (and (and (and (and (and $x90 $x232) $x103) $x215) $x117) $x254) $x178)))
 (let (($x146 (and $x24 $x46)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x9 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x86 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x36 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x49 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x9)))
 (let (($x26 (or false (or false (and (and true (or $x49 $x36)) (or $x86 $x22))))))
 (let (($x41 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x26)))
 (let (($x171 (and $x41 $x146)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let (($x259 (= $x166 true)))
 (let ((?x202 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x188 (= (_ bv0 2) ?x202)))
 (let (($x12 (= $x188 true)))
 (let (($x221 (= $x12 true)))
 (let (($x235 (and $x221 $x259)))
 (let (($x80 (and $x235 $x193)))
 (let (($x199 (and $x80 $x28)))
 (let (($x125 (and $x199 $x226)))
 (let (($x201 (and $x125 $x113)))
 (let (($x279 (and $x201 $x211)))
 (let (($x247 (and $x279 $x141)))
 (let (($x287 (=> $x247 $x190)))
 (not $x287)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 22
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x236 (= $x119 true)))
 (let (($x240 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1119X)))
 (let ((?x230 (input.spec-%var-m2-1.1.1 input.ind-%var1119X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1119X)))
 (=> $x238 (= ?x230 ?x214))))))
 ))
 (let (($x155 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x177 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1118X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1118X)))
 (= $x238 $x177))))
 ))
 (let (($x225 (and $x155 $x240)))
 (let (($x39 (= $x225 true)))
 (let (($x251 (forall ((input.ind-%var1113X (_ BitVec 32)) )(let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1113X)))
 (let ((?x167 (input.spec-%var-m1-1.1.1 input.ind-%var1113X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1113X)))
 (=> $x113 (= ?x167 ?x109))))))
 ))
 (let (($x250 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1112X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1112X)))
 (= $x113 $x288))))
 ))
 (let (($x52 (and $x250 $x251)))
 (let (($x191 (= $x52 true)))
 (let (($x61 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1107X (_ bv4 32))))
 (let ((?x64 (bvadd ?x283 input.dst.llvm-%m2)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x64))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv2 32))) ?x53)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv3 32))) ?x35)))
 (let ((?x230 (input.spec-%var-m2-1.1.1 input.ind-%var1107X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1107X)))
 (=> $x238 (= ?x230 ?x124))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1106X) (bvult input.ind-%var1106X (_ bv100 32)))))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1106X)))
 (= $x238 $x68))))
 ))
 (let (($x108 (and $x206 $x61)))
 (let (($x186 (= $x108 true)))
 (let (($x275 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1101X (_ bv4 32))))
 (let ((?x179 (bvadd ?x283 input.dst.llvm-%m1)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x170)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x13)))
 (let ((?x167 (input.spec-%var-m1-1.1.1 input.ind-%var1101X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1101X)))
 (=> $x113 (= ?x167 ?x125))))))))))
 ))
 (let (($x33 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1100X) (bvult input.ind-%var1100X (_ bv100 32)))))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1100X)))
 (= $x113 $x68))))
 ))
 (let (($x95 (and $x33 $x275)))
 (let (($x278 (= $x95 true)))
 (let (($x57 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1095X (_ bv4 32))))
 (let ((?x179 (bvadd ?x283 input.dst.llvm-%m1)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x170)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x13)))
 (let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1095X)))
 (let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1095X)))
 (=> $x288 (= ?x109 ?x125))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1094X) (bvult input.ind-%var1094X (_ bv100 32)))))
 (let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1094X)))
 (= $x288 $x68))))
 ))
 (let (($x142 (and $x203 $x57)))
 (let (($x233 (= $x142 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x176 (= (_ bv0 2) ?x245)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let (($x106 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x56 (and $x166 $x286)))
 (let (($x266 (and $x56 $x106)))
 (let (($x223 (= $x266 true)))
 (let (($x169 (= $x223 true)))
 (let (($x269 (= $x169 true)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x198)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x45)))
 (let ((?x16 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x55 $x72)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x232 $x79)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x242 (and (not $x63) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x229 $x202)))
 (let (($x54 (and (not $x6) $x98)))
 (let (($x128 (and (and (and (and (and (and $x54 $x242) $x71) $x29) $x215) $x96) $x25)))
 (let (($x91 (and $x128 $x88)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x22 (or false (or false (and (and true (or $x32 $x87)) (or $x8 $x51))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x178 (and $x208 $x91)))
 (let (($x24 (= $x178 true)))
 (let (($x83 (= $x24 true)))
 (let (($x46 (= $x83 true)))
 (let (($x270 (and $x46 $x269)))
 (let (($x120 (and $x270 $x80)))
 (let (($x277 (and $x120 $x233)))
 (let (($x111 (and $x277 $x278)))
 (let (($x65 (and $x111 $x186)))
 (let (($x122 (and $x65 $x191)))
 (let (($x274 (and $x122 $x39)))
 (let (($x260 (=> $x274 $x236)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x119 (= (_ bv0 32) input.dst.llvm-%m2)))
 (let (($x236 (= $x119 true)))
 (let (($x240 (forall ((input.ind-%var1119X (_ BitVec 32)) )(let ((?x214 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1119X)))
 (let ((?x230 (input.spec-%var-m2-1.1.1 input.ind-%var1119X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1119X)))
 (=> $x238 (= ?x230 ?x214))))))
 ))
 (let (($x155 (forall ((input.ind-%var1118X (_ BitVec 32)) )(let (($x177 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1118X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1118X)))
 (= $x238 $x177))))
 ))
 (let (($x225 (and $x155 $x240)))
 (let (($x39 (= $x225 true)))
 (let (($x251 (forall ((input.ind-%var1113X (_ BitVec 32)) )(let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1113X)))
 (let ((?x167 (input.spec-%var-m1-1.1.1 input.ind-%var1113X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1113X)))
 (=> $x113 (= ?x167 ?x109))))))
 ))
 (let (($x250 (forall ((input.ind-%var1112X (_ BitVec 32)) )(let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1112X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1112X)))
 (= $x113 $x288))))
 ))
 (let (($x52 (and $x250 $x251)))
 (let (($x191 (= $x52 true)))
 (let (($x61 (forall ((input.ind-%var1107X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1107X (_ bv4 32))))
 (let ((?x64 (bvadd ?x283 input.dst.llvm-%m2)))
 (let ((?x53 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x64))))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv2 32))) ?x53)))
 (let ((?x124 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x64 (_ bv3 32))) ?x35)))
 (let ((?x230 (input.spec-%var-m2-1.1.1 input.ind-%var1107X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1107X)))
 (=> $x238 (= ?x230 ?x124))))))))))
 ))
 (let (($x206 (forall ((input.ind-%var1106X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1106X) (bvult input.ind-%var1106X (_ bv100 32)))))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var1106X)))
 (= $x238 $x68))))
 ))
 (let (($x108 (and $x206 $x61)))
 (let (($x186 (= $x108 true)))
 (let (($x275 (forall ((input.ind-%var1101X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1101X (_ bv4 32))))
 (let ((?x179 (bvadd ?x283 input.dst.llvm-%m1)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x170)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x13)))
 (let ((?x167 (input.spec-%var-m1-1.1.1 input.ind-%var1101X)))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1101X)))
 (=> $x113 (= ?x167 ?x125))))))))))
 ))
 (let (($x33 (forall ((input.ind-%var1100X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1100X) (bvult input.ind-%var1100X (_ bv100 32)))))
 (let (($x113 (input.spec-%var-m1-1.0.1 input.ind-%var1100X)))
 (= $x113 $x68))))
 ))
 (let (($x95 (and $x33 $x275)))
 (let (($x278 (= $x95 true)))
 (let (($x57 (forall ((input.ind-%var1095X (_ BitVec 32)) )(let ((?x283 (bvmul input.ind-%var1095X (_ bv4 32))))
 (let ((?x179 (bvadd ?x283 input.dst.llvm-%m1)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x179))))
 (let ((?x13 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv2 32))) ?x170)))
 (let ((?x125 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x179 (_ bv3 32))) ?x13)))
 (let ((?x109 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1095X)))
 (let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1095X)))
 (=> $x288 (= ?x109 ?x125))))))))))
 ))
 (let (($x203 (forall ((input.ind-%var1094X (_ BitVec 32)) )(let (($x68 (and (bvule (_ bv0 32) input.ind-%var1094X) (bvult input.ind-%var1094X (_ bv100 32)))))
 (let (($x288 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1094X)))
 (= $x288 $x68))))
 ))
 (let (($x142 (and $x203 $x57)))
 (let (($x233 (= $x142 true)))
 (let ((?x245 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x176 (= (_ bv0 2) ?x245)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let (($x106 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x166 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x56 (and $x166 $x286)))
 (let (($x266 (and $x56 $x106)))
 (let (($x223 (= $x266 true)))
 (let (($x169 (= $x223 true)))
 (let (($x269 (= $x169 true)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x198)))
 (let ((?x45 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x25 (= (_ bv0 32) ?x45)))
 (let ((?x16 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x96 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x16)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x103)))
 (let (($x55 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (and $x55 $x72)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x232 $x79)))
 (let (($x29 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x97 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x67 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x63 (and $x67 $x97)))
 (let (($x242 (and (not $x63) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x202 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x229 $x202)))
 (let (($x54 (and (not $x6) $x98)))
 (let (($x128 (and (and (and (and (and (and $x54 $x242) $x71) $x29) $x215) $x96) $x25)))
 (let (($x91 (and $x128 $x88)))
 (let (($x51 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x8 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x87 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x32 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x44)))
 (let (($x22 (or false (or false (and (and true (or $x32 $x87)) (or $x8 $x51))))))
 (let (($x208 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x22)))
 (let (($x178 (and $x208 $x91)))
 (let (($x24 (= $x178 true)))
 (let (($x83 (= $x24 true)))
 (let (($x46 (= $x83 true)))
 (let (($x270 (and $x46 $x269)))
 (let (($x120 (and $x270 $x80)))
 (let (($x277 (and $x120 $x233)))
 (let (($x111 (and $x277 $x278)))
 (let (($x65 (and $x111 $x186)))
 (let (($x122 (and $x65 $x191)))
 (let (($x274 (and $x122 $x39)))
 (let (($x260 (=> $x274 $x236)))
 (not $x260)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd0001440)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0003404)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0003407)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd0001443)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0003404)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd0001440)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x80000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x80000000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x40000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00001a80)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00001a83)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00001a80)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x40000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000001 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x40000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 23
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x204 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 30) ?x204)))
 (let (($x282 (= $x69 true)))
 (let (($x132 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1181X)))
 (let ((?x280 (input.spec-%var-m2-1.1.1 input.ind-%var1181X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1181X)))
 (=> $x255 (= ?x280 ?x279))))))
 ))
 (let (($x285 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1180X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1180X)))
 (= $x255 $x222))))
 ))
 (let (($x194 (and $x285 $x132)))
 (let (($x159 (= $x194 true)))
 (let (($x137 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1175X)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1175X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1175X)))
 (=> $x65 (= ?x155 ?x84))))))
 ))
 (let (($x209 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1174X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1174X)))
 (= $x65 $x68))))
 ))
 (let (($x237 (and $x209 $x137)))
 (let (($x121 (= $x237 true)))
 (let (($x172 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1169X (_ bv4 32))))
 (let ((?x58 (bvadd ?x238 input.dst.llvm-%m2)))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x48)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x173)))
 (let ((?x280 (input.spec-%var-m2-1.1.1 input.ind-%var1169X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1169X)))
 (=> $x255 (= ?x280 ?x244))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1168X) (bvult input.ind-%var1168X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1168X)))
 (= $x255 $x226))))
 ))
 (let (($x129 (and $x219 $x172)))
 (let (($x107 (= $x129 true)))
 (let (($x11 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1163X (_ bv4 32))))
 (let ((?x78 (bvadd ?x238 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x66)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x182)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1163X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1163X)))
 (=> $x65 (= ?x155 ?x43))))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X (_ bv100 32)))))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1162X)))
 (= $x65 $x226))))
 ))
 (let (($x168 (and $x191 $x11)))
 (let (($x73 (= $x168 true)))
 (let (($x124 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1157X (_ bv4 32))))
 (let ((?x78 (bvadd ?x238 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x66)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x182)))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1157X)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1157X)))
 (=> $x68 (= ?x84 ?x43))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1156X) (bvult input.ind-%var1156X (_ bv100 32)))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1156X)))
 (= $x68 $x226))))
 ))
 (let (($x165 (and $x205 $x124)))
 (let (($x160 (= $x165 true)))
 (let ((?x193 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x80 (= (_ bv0 2) ?x193)))
 (let (($x120 (= $x80 true)))
 (let (($x34 (= $x120 true)))
 (let (($x223 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x248 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x235 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x213 (and $x235 $x248)))
 (let (($x169 (and $x213 $x223)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x96)))
 (let ((?x18 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x16 (= (_ bv0 32) ?x18)))
 (let ((?x79 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x19 $x21)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x29 $x103)))
 (let (($x163 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x97 $x63)))
 (let (($x31 (and (not $x60) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x188 $x221)))
 (let (($x67 (and (not $x50) $x98)))
 (let (($x91 (and (and (and (and (and (and $x67 $x31) $x71) $x163) $x72) $x215) $x16)))
 (let (($x178 (and $x91 $x254)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x229 (or false (or false (and (and true (or $x9 $x49)) (or $x112 $x86))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x24 (and $x6 $x178)))
 (let (($x83 (= $x24 true)))
 (let (($x46 (= $x83 true)))
 (let (($x146 (= $x46 true)))
 (let (($x245 (and $x146 $x272)))
 (let (($x288 (and $x245 $x34)))
 (let (($x61 (and $x288 $x160)))
 (let (($x271 (and $x61 $x73)))
 (let (($x218 (and $x271 $x107)))
 (let (($x157 (and $x218 $x121)))
 (let (($x234 (and $x157 $x159)))
 (let (($x126 (=> $x234 $x282)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x204 ((_ extract 29 0) input.dst.llvm-%m2)))
 (let (($x69 (= (_ bv0 30) ?x204)))
 (let (($x282 (= $x69 true)))
 (let (($x132 (forall ((input.ind-%var1181X (_ BitVec 32)) )(let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1181X)))
 (let ((?x280 (input.spec-%var-m2-1.1.1 input.ind-%var1181X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1181X)))
 (=> $x255 (= ?x280 ?x279))))))
 ))
 (let (($x285 (forall ((input.ind-%var1180X (_ BitVec 32)) )(let (($x222 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1180X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1180X)))
 (= $x255 $x222))))
 ))
 (let (($x194 (and $x285 $x132)))
 (let (($x159 (= $x194 true)))
 (let (($x137 (forall ((input.ind-%var1175X (_ BitVec 32)) )(let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1175X)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1175X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1175X)))
 (=> $x65 (= ?x155 ?x84))))))
 ))
 (let (($x209 (forall ((input.ind-%var1174X (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1174X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1174X)))
 (= $x65 $x68))))
 ))
 (let (($x237 (and $x209 $x137)))
 (let (($x121 (= $x237 true)))
 (let (($x172 (forall ((input.ind-%var1169X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1169X (_ bv4 32))))
 (let ((?x58 (bvadd ?x238 input.dst.llvm-%m2)))
 (let ((?x48 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x173 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x48)))
 (let ((?x244 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x173)))
 (let ((?x280 (input.spec-%var-m2-1.1.1 input.ind-%var1169X)))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1169X)))
 (=> $x255 (= ?x280 ?x244))))))))))
 ))
 (let (($x219 (forall ((input.ind-%var1168X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1168X) (bvult input.ind-%var1168X (_ bv100 32)))))
 (let (($x255 (input.spec-%var-m2-1.0.1 input.ind-%var1168X)))
 (= $x255 $x226))))
 ))
 (let (($x129 (and $x219 $x172)))
 (let (($x107 (= $x129 true)))
 (let (($x11 (forall ((input.ind-%var1163X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1163X (_ bv4 32))))
 (let ((?x78 (bvadd ?x238 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x66)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x182)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1163X)))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1163X)))
 (=> $x65 (= ?x155 ?x43))))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1162X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1162X) (bvult input.ind-%var1162X (_ bv100 32)))))
 (let (($x65 (input.spec-%var-m1-1.0.1 input.ind-%var1162X)))
 (= $x65 $x226))))
 ))
 (let (($x168 (and $x191 $x11)))
 (let (($x73 (= $x168 true)))
 (let (($x124 (forall ((input.ind-%var1157X (_ BitVec 32)) )(let ((?x238 (bvmul input.ind-%var1157X (_ bv4 32))))
 (let ((?x78 (bvadd ?x238 input.dst.llvm-%m1)))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x78))))
 (let ((?x182 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv2 32))) ?x66)))
 (let ((?x43 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x78 (_ bv3 32))) ?x182)))
 (let ((?x84 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1157X)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1157X)))
 (=> $x68 (= ?x84 ?x43))))))))))
 ))
 (let (($x205 (forall ((input.ind-%var1156X (_ BitVec 32)) )(let (($x226 (and (bvule (_ bv0 32) input.ind-%var1156X) (bvult input.ind-%var1156X (_ bv100 32)))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1156X)))
 (= $x68 $x226))))
 ))
 (let (($x165 (and $x205 $x124)))
 (let (($x160 (= $x165 true)))
 (let ((?x193 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x80 (= (_ bv0 2) ?x193)))
 (let (($x120 (= $x80 true)))
 (let (($x34 (= $x120 true)))
 (let (($x223 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x248 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x235 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x213 (and $x235 $x248)))
 (let (($x169 (and $x213 $x223)))
 (let (($x269 (= $x169 true)))
 (let (($x270 (= $x269 true)))
 (let (($x272 (= $x270 true)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x96)))
 (let ((?x18 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x16 (= (_ bv0 32) ?x18)))
 (let ((?x79 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x79)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x103 (and $x19 $x21)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (and $x29 $x103)))
 (let (($x163 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x63 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x97 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x60 (and $x97 $x63)))
 (let (($x31 (and (not $x60) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x221 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x188 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (and $x188 $x221)))
 (let (($x67 (and (not $x50) $x98)))
 (let (($x91 (and (and (and (and (and (and $x67 $x31) $x71) $x163) $x72) $x215) $x16)))
 (let (($x178 (and $x91 $x254)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x87 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x112 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x87)))
 (let (($x49 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x87)))
 (let (($x229 (or false (or false (and (and true (or $x9 $x49)) (or $x112 $x86))))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x24 (and $x6 $x178)))
 (let (($x83 (= $x24 true)))
 (let (($x46 (= $x83 true)))
 (let (($x146 (= $x46 true)))
 (let (($x245 (and $x146 $x272)))
 (let (($x288 (and $x245 $x34)))
 (let (($x61 (and $x288 $x160)))
 (let (($x271 (and $x61 $x73)))
 (let (($x218 (and $x271 $x107)))
 (let (($x157 (and $x218 $x121)))
 (let (($x234 (and $x157 $x159)))
 (let (($x126 (=> $x234 $x282)))
 (not $x126))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x20000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xc0000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc4000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc4000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xc0000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc4000000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xc0000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x20000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000001 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x20000000 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00020000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00020003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00020000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 24
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x27 ((_ extract 16 0) input.dst.llvm-%m2)))
 (let (($x262 (= (_ bv0 17) ?x27)))
 (let (($x10 (= $x262 true)))
 (let (($x197 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1243X)))
 (let ((?x33 (input.spec-%var-m2-1.1.1 input.ind-%var1243X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1243X)))
 (=> $x115 (= ?x33 ?x151))))))
 ))
 (let (($x278 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1242X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1242X)))
 (= $x115 $x82))))
 ))
 (let (($x258 (and $x278 $x197)))
 (let (($x210 (= $x258 true)))
 (let (($x81 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x206 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1237X)))
 (let ((?x285 (input.spec-%var-m1-1.1.1 input.ind-%var1237X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1237X)))
 (=> $x218 (= ?x285 ?x206))))))
 ))
 (let (($x77 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1236X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1236X)))
 (= $x218 $x226))))
 ))
 (let (($x187 (and $x77 $x81)))
 (let (($x47 (= $x187 true)))
 (let (($x131 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1231X (_ bv4 32))))
 (let ((?x74 (bvadd ?x255 input.dst.llvm-%m2)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x74))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv2 32))) ?x236)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv3 32))) ?x240)))
 (let ((?x33 (input.spec-%var-m2-1.1.1 input.ind-%var1231X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1231X)))
 (=> $x115 (= ?x33 ?x164))))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1230X) (bvult input.ind-%var1230X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1230X)))
 (= $x115 $x161))))
 ))
 (let (($x75 (and $x162 $x131)))
 (let (($x30 (= $x75 true)))
 (let (($x28 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1225X (_ bv4 32))))
 (let ((?x143 (bvadd ?x255 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x190)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x141)))
 (let ((?x285 (input.spec-%var-m1-1.1.1 input.ind-%var1225X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1225X)))
 (=> $x218 (= ?x285 ?x247))))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X (_ bv100 32)))))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1224X)))
 (= $x218 $x161))))
 ))
 (let (($x92 (and $x121 $x28)))
 (let (($x214 (= $x92 true)))
 (let (($x244 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1219X (_ bv4 32))))
 (let ((?x143 (bvadd ?x255 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x190)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x141)))
 (let ((?x206 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1219X)))
 (let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1219X)))
 (=> $x226 (= ?x206 ?x247))))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X (_ bv100 32)))))
 (let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1218X)))
 (= $x226 $x161))))
 ))
 (let (($x42 (and $x15 $x244)))
 (let (($x139 (= $x42 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 2) ?x120)))
 (let (($x288 (= $x34 true)))
 (let (($x264 (= $x288 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x56 $x106)))
 (let (($x270 (and $x266 $x269)))
 (let (($x272 (= $x270 true)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x215)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x79 (= (_ bv0 32) ?x198)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x128 $x232)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x163 $x55)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x63 $x60)))
 (let (($x45 (and (not $x242) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x145 $x76)))
 (let (($x97 (and (not $x54) $x98)))
 (let (($x178 (and (and (and (and (and (and $x97 $x45) $x71) $x117) $x21) $x72) $x79)))
 (let (($x24 (and $x178 $x88)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x188 (or false (or false (and (and true (or $x156 $x8)) (or $x23 $x22))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x188)))
 (let (($x83 (and $x50 $x24)))
 (let (($x46 (= $x83 true)))
 (let (($x146 (= $x46 true)))
 (let (($x171 (= $x146 true)))
 (let (($x193 (and $x171 $x176)))
 (let (($x68 (and $x193 $x264)))
 (let (($x172 (and $x68 $x139)))
 (let (($x239 (and $x172 $x214)))
 (let (($x175 (and $x239 $x30)))
 (let (($x287 (and $x175 $x47)))
 (let (($x17 (and $x287 $x210)))
 (let (($x241 (=> $x17 $x10)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x27 ((_ extract 16 0) input.dst.llvm-%m2)))
 (let (($x262 (= (_ bv0 17) ?x27)))
 (let (($x10 (= $x262 true)))
 (let (($x197 (forall ((input.ind-%var1243X (_ BitVec 32)) )(let ((?x151 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1243X)))
 (let ((?x33 (input.spec-%var-m2-1.1.1 input.ind-%var1243X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1243X)))
 (=> $x115 (= ?x33 ?x151))))))
 ))
 (let (($x278 (forall ((input.ind-%var1242X (_ BitVec 32)) )(let (($x82 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1242X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1242X)))
 (= $x115 $x82))))
 ))
 (let (($x258 (and $x278 $x197)))
 (let (($x210 (= $x258 true)))
 (let (($x81 (forall ((input.ind-%var1237X (_ BitVec 32)) )(let ((?x206 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1237X)))
 (let ((?x285 (input.spec-%var-m1-1.1.1 input.ind-%var1237X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1237X)))
 (=> $x218 (= ?x285 ?x206))))))
 ))
 (let (($x77 (forall ((input.ind-%var1236X (_ BitVec 32)) )(let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1236X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1236X)))
 (= $x218 $x226))))
 ))
 (let (($x187 (and $x77 $x81)))
 (let (($x47 (= $x187 true)))
 (let (($x131 (forall ((input.ind-%var1231X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1231X (_ bv4 32))))
 (let ((?x74 (bvadd ?x255 input.dst.llvm-%m2)))
 (let ((?x236 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x74))))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv2 32))) ?x236)))
 (let ((?x164 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv3 32))) ?x240)))
 (let ((?x33 (input.spec-%var-m2-1.1.1 input.ind-%var1231X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1231X)))
 (=> $x115 (= ?x33 ?x164))))))))))
 ))
 (let (($x162 (forall ((input.ind-%var1230X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1230X) (bvult input.ind-%var1230X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1230X)))
 (= $x115 $x161))))
 ))
 (let (($x75 (and $x162 $x131)))
 (let (($x30 (= $x75 true)))
 (let (($x28 (forall ((input.ind-%var1225X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1225X (_ bv4 32))))
 (let ((?x143 (bvadd ?x255 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x190)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x141)))
 (let ((?x285 (input.spec-%var-m1-1.1.1 input.ind-%var1225X)))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1225X)))
 (=> $x218 (= ?x285 ?x247))))))))))
 ))
 (let (($x121 (forall ((input.ind-%var1224X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1224X) (bvult input.ind-%var1224X (_ bv100 32)))))
 (let (($x218 (input.spec-%var-m1-1.0.1 input.ind-%var1224X)))
 (= $x218 $x161))))
 ))
 (let (($x92 (and $x121 $x28)))
 (let (($x214 (= $x92 true)))
 (let (($x244 (forall ((input.ind-%var1219X (_ BitVec 32)) )(let ((?x255 (bvmul input.ind-%var1219X (_ bv4 32))))
 (let ((?x143 (bvadd ?x255 input.dst.llvm-%m1)))
 (let ((?x190 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x143))))
 (let ((?x141 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv2 32))) ?x190)))
 (let ((?x247 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x143 (_ bv3 32))) ?x141)))
 (let ((?x206 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1219X)))
 (let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1219X)))
 (=> $x226 (= ?x206 ?x247))))))))))
 ))
 (let (($x15 (forall ((input.ind-%var1218X (_ BitVec 32)) )(let (($x161 (and (bvule (_ bv0 32) input.ind-%var1218X) (bvult input.ind-%var1218X (_ bv100 32)))))
 (let (($x226 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1218X)))
 (= $x226 $x161))))
 ))
 (let (($x42 (and $x15 $x244)))
 (let (($x139 (= $x42 true)))
 (let ((?x120 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x34 (= (_ bv0 2) ?x120)))
 (let (($x288 (= $x34 true)))
 (let (($x264 (= $x288 true)))
 (let (($x269 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x106 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x56 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x266 (and $x56 $x106)))
 (let (($x270 (and $x266 $x269)))
 (let (($x272 (= $x270 true)))
 (let (($x245 (= $x272 true)))
 (let (($x176 (= $x245 true)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x215)))
 (let ((?x198 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x79 (= (_ bv0 32) ?x198)))
 (let ((?x103 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x103)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x19)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x55 (and $x128 $x232)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x21 (and $x163 $x55)))
 (let (($x117 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x60 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x63 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x242 (and $x63 $x60)))
 (let (($x45 (and (not $x242) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x76 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x145 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (and $x145 $x76)))
 (let (($x97 (and (not $x54) $x98)))
 (let (($x178 (and (and (and (and (and (and $x97 $x45) $x71) $x117) $x21) $x72) $x79)))
 (let (($x24 (and $x178 $x88)))
 (let (($x22 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x49 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x49)))
 (let (($x8 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x156 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x49)))
 (let (($x188 (or false (or false (and (and true (or $x156 $x8)) (or $x23 $x22))))))
 (let (($x50 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x188)))
 (let (($x83 (and $x50 $x24)))
 (let (($x46 (= $x83 true)))
 (let (($x146 (= $x46 true)))
 (let (($x171 (= $x146 true)))
 (let (($x193 (and $x171 $x176)))
 (let (($x68 (and $x193 $x264)))
 (let (($x172 (and $x68 $x139)))
 (let (($x239 (and $x172 $x214)))
 (let (($x175 (and $x239 $x30)))
 (let (($x287 (and $x175 $x47)))
 (let (($x17 (and $x287 $x210)))
 (let (($x241 (=> $x17 $x10)))
 (not $x241))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000080)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000a03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000083 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000082 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000081 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000080 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00004000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00004003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00004000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 25
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x89 ((_ extract 6 0) input.dst.llvm-%m2)))
 (let (($x177 (= (_ bv0 7) ?x89)))
 (let (($x251 (= $x177 true)))
 (let (($x59 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1305X)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1305X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1305X)))
 (=> $x105 (= ?x191 ?x125))))))
 ))
 (let (($x73 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1304X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1304X)))
 (= $x105 $x5))))
 ))
 (let (($x243 (and $x73 $x59)))
 (let (($x104 (= $x243 true)))
 (let (($x186 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x219 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1299X)))
 (let ((?x278 (input.spec-%var-m1-1.1.1 input.ind-%var1299X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1299X)))
 (=> $x175 (= ?x278 ?x219))))))
 ))
 (let (($x122 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1298X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1298X)))
 (= $x175 $x161))))
 ))
 (let (($x199 (and $x122 $x186)))
 (let (($x261 (= $x199 true)))
 (let (($x170 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1293X (_ bv4 32))))
 (let ((?x93 (bvadd ?x115 input.dst.llvm-%m2)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x93))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv2 32))) ?x204)))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv3 32))) ?x132)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1293X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1293X)))
 (=> $x105 (= ?x191 ?x140))))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1292X) (bvult input.ind-%var1292X (_ bv100 32)))))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1292X)))
 (= $x105 $x20))))
 ))
 (let (($x289 (and $x35 $x170)))
 (let (($x263 (= $x289 true)))
 (let (($x167 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1287X (_ bv4 32))))
 (let ((?x267 (bvadd ?x115 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x274)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x39)))
 (let ((?x278 (input.spec-%var-m1-1.1.1 input.ind-%var1287X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1287X)))
 (=> $x175 (= ?x278 ?x150))))))))))
 ))
 (let (($x47 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1286X)))
 (= $x175 $x20))))
 ))
 (let (($x265 (and $x47 $x167)))
 (let (($x279 (= $x265 true)))
 (let (($x164 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1281X (_ bv4 32))))
 (let ((?x267 (bvadd ?x115 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x274)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x39)))
 (let ((?x219 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1281X)))
 (let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1281X)))
 (=> $x161 (= ?x219 ?x150))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1280X) (bvult input.ind-%var1280X (_ bv100 32)))))
 (let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1280X)))
 (= $x161 $x20))))
 ))
 (let (($x276 (and $x216 $x164)))
 (let (($x281 (= $x276 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x264 (= (_ bv0 2) ?x288)))
 (let (($x68 (= $x264 true)))
 (let (($x179 (= $x68 true)))
 (let (($x272 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x223 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x169 (and $x213 $x223)))
 (let (($x245 (and $x169 $x272)))
 (let (($x176 (= $x245 true)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let ((?x72 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x72)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x103 (= (_ bv0 32) ?x96)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x91 $x29)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x117 $x19)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x60 $x242)))
 (let (($x18 (and (not $x31) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x44 $x32)))
 (let (($x63 (and (not $x67) $x98)))
 (let (($x24 (and (and (and (and (and (and $x63 $x18) $x71) $x25) $x232) $x21) $x103)))
 (let (($x83 (and $x24 $x254)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x145 (or false (or false (and (and true (or $x36 $x112)) (or $x208 $x229))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x46 (and $x54 $x83)))
 (let (($x146 (= $x46 true)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x120 (and $x7 $x80)))
 (let (($x226 (and $x120 $x179)))
 (let (($x131 (and $x226 $x281)))
 (let (($x116 (and $x131 $x279)))
 (let (($x233 (and $x116 $x263)))
 (let (($x94 (and $x233 $x261)))
 (let (($x290 (and $x94 $x104)))
 (let (($x110 (=> $x290 $x251)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x89 ((_ extract 6 0) input.dst.llvm-%m2)))
 (let (($x177 (= (_ bv0 7) ?x89)))
 (let (($x251 (= $x177 true)))
 (let (($x59 (forall ((input.ind-%var1305X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1305X)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1305X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1305X)))
 (=> $x105 (= ?x191 ?x125))))))
 ))
 (let (($x73 (forall ((input.ind-%var1304X (_ BitVec 32)) )(let (($x5 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1304X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1304X)))
 (= $x105 $x5))))
 ))
 (let (($x243 (and $x73 $x59)))
 (let (($x104 (= $x243 true)))
 (let (($x186 (forall ((input.ind-%var1299X (_ BitVec 32)) )(let ((?x219 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1299X)))
 (let ((?x278 (input.spec-%var-m1-1.1.1 input.ind-%var1299X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1299X)))
 (=> $x175 (= ?x278 ?x219))))))
 ))
 (let (($x122 (forall ((input.ind-%var1298X (_ BitVec 32)) )(let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1298X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1298X)))
 (= $x175 $x161))))
 ))
 (let (($x199 (and $x122 $x186)))
 (let (($x261 (= $x199 true)))
 (let (($x170 (forall ((input.ind-%var1293X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1293X (_ bv4 32))))
 (let ((?x93 (bvadd ?x115 input.dst.llvm-%m2)))
 (let ((?x204 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x93))))
 (let ((?x132 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv2 32))) ?x204)))
 (let ((?x140 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x93 (_ bv3 32))) ?x132)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1293X)))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1293X)))
 (=> $x105 (= ?x191 ?x140))))))))))
 ))
 (let (($x35 (forall ((input.ind-%var1292X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1292X) (bvult input.ind-%var1292X (_ bv100 32)))))
 (let (($x105 (input.spec-%var-m2-1.0.1 input.ind-%var1292X)))
 (= $x105 $x20))))
 ))
 (let (($x289 (and $x35 $x170)))
 (let (($x263 (= $x289 true)))
 (let (($x167 (forall ((input.ind-%var1287X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1287X (_ bv4 32))))
 (let ((?x267 (bvadd ?x115 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x274)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x39)))
 (let ((?x278 (input.spec-%var-m1-1.1.1 input.ind-%var1287X)))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1287X)))
 (=> $x175 (= ?x278 ?x150))))))))))
 ))
 (let (($x47 (forall ((input.ind-%var1286X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1286X) (bvult input.ind-%var1286X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m1-1.0.1 input.ind-%var1286X)))
 (= $x175 $x20))))
 ))
 (let (($x265 (and $x47 $x167)))
 (let (($x279 (= $x265 true)))
 (let (($x164 (forall ((input.ind-%var1281X (_ BitVec 32)) )(let ((?x115 (bvmul input.ind-%var1281X (_ bv4 32))))
 (let ((?x267 (bvadd ?x115 input.dst.llvm-%m1)))
 (let ((?x274 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x267))))
 (let ((?x39 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv2 32))) ?x274)))
 (let ((?x150 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x267 (_ bv3 32))) ?x39)))
 (let ((?x219 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1281X)))
 (let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1281X)))
 (=> $x161 (= ?x219 ?x150))))))))))
 ))
 (let (($x216 (forall ((input.ind-%var1280X (_ BitVec 32)) )(let (($x20 (and (bvule (_ bv0 32) input.ind-%var1280X) (bvult input.ind-%var1280X (_ bv100 32)))))
 (let (($x161 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1280X)))
 (= $x161 $x20))))
 ))
 (let (($x276 (and $x216 $x164)))
 (let (($x281 (= $x276 true)))
 (let ((?x288 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x264 (= (_ bv0 2) ?x288)))
 (let (($x68 (= $x264 true)))
 (let (($x179 (= $x68 true)))
 (let (($x272 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x223 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x213 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x169 (and $x213 $x223)))
 (let (($x245 (and $x169 $x272)))
 (let (($x176 (= $x245 true)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let ((?x72 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x72)))
 (let ((?x96 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x103 (= (_ bv0 32) ?x96)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x55)))
 (let ((?x128 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x128)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (and $x91 $x29)))
 (let (($x117 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x232 (and $x117 $x19)))
 (let (($x25 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x242 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x31 (and $x60 $x242)))
 (let (($x18 (and (not $x31) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x32 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x67 (and $x44 $x32)))
 (let (($x63 (and (not $x67) $x98)))
 (let (($x24 (and (and (and (and (and (and $x63 $x18) $x71) $x25) $x232) $x21) $x103)))
 (let (($x83 (and $x24 $x254)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x8 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x208 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x8)))
 (let (($x112 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x8)))
 (let (($x145 (or false (or false (and (and true (or $x36 $x112)) (or $x208 $x229))))))
 (let (($x54 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x145)))
 (let (($x46 (and $x54 $x83)))
 (let (($x146 (= $x46 true)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x120 (and $x7 $x80)))
 (let (($x226 (and $x120 $x179)))
 (let (($x131 (and $x226 $x281)))
 (let (($x116 (and $x131 $x279)))
 (let (($x233 (and $x116 $x263)))
 (let (($x94 (and $x233 $x261)))
 (let (($x290 (and $x94 $x104)))
 (let (($x110 (=> $x290 $x251)))
 (not $x110))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000010)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x40000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc0000a03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x40000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc0000a00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x40000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000013 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000012 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000011 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000010 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000008)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x10000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xb7c0bc5f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xf4c17ebb)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xb7c0bc5c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xf4c17eb8)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x10000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x10000000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x0000000b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x0000000a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000009 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000008 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 26
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x222 (= (_ bv0 3) ?x108)))
 (let (($x137 (= $x222 true)))
 (let (($x201 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let ((?x43 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1367X)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1367X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1367X)))
 (=> $x203 (= ?x121 ?x43))))))
 ))
 (let (($x214 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x196 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1366X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1366X)))
 (= $x203 $x196))))
 ))
 (let (($x147 (and $x214 $x201)))
 (let (($x95 (= $x147 true)))
 (let (($x107 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1361X)))
 (let ((?x238 (input.spec-%var-m1-1.1.1 input.ind-%var1361X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1361X)))
 (=> $x263 (= ?x238 ?x74))))))
 ))
 (let (($x157 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1360X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1360X)))
 (= $x263 $x143))))
 ))
 (let (($x277 (and $x157 $x107)))
 (let (($x142 (= $x277 true)))
 (let (($x66 (forall ((input.ind-%var1355X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1355X (_ bv4 32))))
 (let ((?x135 (bvadd ?x116 input.dst.llvm-%m2)))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x135))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv2 32))) ?x27)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv3 32))) ?x197)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1355X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1355X)))
 (=> $x203 (= ?x121 ?x184))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1354X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1354X) (bvult input.ind-%var1354X (_ bv100 32)))))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1354X)))
 (= $x203 $x123))))
 ))
 (let (($x185 (and $x173 $x66)))
 (let (($x64 (= $x185 true)))
 (let (($x155 (forall ((input.ind-%var1349X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1349X (_ bv4 32))))
 (let ((?x105 (bvadd ?x116 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x93)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x194)))
 (let ((?x238 (input.spec-%var-m1-1.1.1 input.ind-%var1349X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1349X)))
 (=> $x263 (= ?x238 ?x174))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var1348X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1348X) (bvult input.ind-%var1348X (_ bv100 32)))))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1348X)))
 (= $x263 $x123))))
 ))
 (let (($x189 (and $x199 $x155)))
 (let (($x151 (= $x189 true)))
 (let (($x132 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1343X (_ bv4 32))))
 (let ((?x105 (bvadd ?x116 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x93)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x194)))
 (let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1343X)))
 (let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1343X)))
 (=> $x143 (= ?x74 ?x174))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1342X) (bvult input.ind-%var1342X (_ bv100 32)))))
 (let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1342X)))
 (= $x143 $x123))))
 ))
 (let (($x140 (and $x237 $x132)))
 (let (($x57 (= $x140 true)))
 (let ((?x264 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x264)))
 (let (($x179 (= $x68 true)))
 (let (($x226 (= $x179 true)))
 (let (($x245 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x169 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x106 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x269 (and $x106 $x169)))
 (let (($x176 (and $x269 $x245)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let (($x120 (= $x80 true)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x21)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x55 (= (_ bv0 32) ?x215)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x178 $x163)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x25 $x128)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x242 $x31)))
 (let (($x198 (and (not $x45) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x221 $x9)))
 (let (($x60 (and (not $x97) $x98)))
 (let (($x83 (and (and (and (and (and (and $x60 $x198) $x71) $x16) $x29) $x232) $x55)))
 (let (($x46 (and $x83 $x88)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x44 (or false (or false (and (and true (or $x51 $x23)) (or $x6 $x188))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x146 (and $x67 $x46)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let (($x34 (and $x166 $x120)))
 (let (($x78 (and $x34 $x226)))
 (let (($x275 (and $x78 $x57)))
 (let (($x256 (and $x275 $x151)))
 (let (($x160 (and $x256 $x64)))
 (let (($x230 (and $x160 $x142)))
 (let (($x231 (and $x230 $x95)))
 (let (($x12 (=> $x231 $x137)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x108 ((_ extract 2 0) input.dst.llvm-%m2)))
 (let (($x222 (= (_ bv0 3) ?x108)))
 (let (($x137 (= $x222 true)))
 (let (($x201 (forall ((input.ind-%var1367X (_ BitVec 32)) )(let ((?x43 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1367X)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1367X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1367X)))
 (=> $x203 (= ?x121 ?x43))))))
 ))
 (let (($x214 (forall ((input.ind-%var1366X (_ BitVec 32)) )(let (($x196 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1366X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1366X)))
 (= $x203 $x196))))
 ))
 (let (($x147 (and $x214 $x201)))
 (let (($x95 (= $x147 true)))
 (let (($x107 (forall ((input.ind-%var1361X (_ BitVec 32)) )(let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1361X)))
 (let ((?x238 (input.spec-%var-m1-1.1.1 input.ind-%var1361X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1361X)))
 (=> $x263 (= ?x238 ?x74))))))
 ))
 (let (($x157 (forall ((input.ind-%var1360X (_ BitVec 32)) )(let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1360X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1360X)))
 (= $x263 $x143))))
 ))
 (let (($x277 (and $x157 $x107)))
 (let (($x142 (= $x277 true)))
 (let (($x66 (forall ((input.ind-%var1355X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1355X (_ bv4 32))))
 (let ((?x135 (bvadd ?x116 input.dst.llvm-%m2)))
 (let ((?x27 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x135))))
 (let ((?x197 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv2 32))) ?x27)))
 (let ((?x184 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x135 (_ bv3 32))) ?x197)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1355X)))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1355X)))
 (=> $x203 (= ?x121 ?x184))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1354X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1354X) (bvult input.ind-%var1354X (_ bv100 32)))))
 (let (($x203 (input.spec-%var-m2-1.0.1 input.ind-%var1354X)))
 (= $x203 $x123))))
 ))
 (let (($x185 (and $x173 $x66)))
 (let (($x64 (= $x185 true)))
 (let (($x155 (forall ((input.ind-%var1349X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1349X (_ bv4 32))))
 (let ((?x105 (bvadd ?x116 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x93)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x194)))
 (let ((?x238 (input.spec-%var-m1-1.1.1 input.ind-%var1349X)))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1349X)))
 (=> $x263 (= ?x238 ?x174))))))))))
 ))
 (let (($x199 (forall ((input.ind-%var1348X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1348X) (bvult input.ind-%var1348X (_ bv100 32)))))
 (let (($x263 (input.spec-%var-m1-1.0.1 input.ind-%var1348X)))
 (= $x263 $x123))))
 ))
 (let (($x189 (and $x199 $x155)))
 (let (($x151 (= $x189 true)))
 (let (($x132 (forall ((input.ind-%var1343X (_ BitVec 32)) )(let ((?x116 (bvmul input.ind-%var1343X (_ bv4 32))))
 (let ((?x105 (bvadd ?x116 input.dst.llvm-%m1)))
 (let ((?x93 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x105))))
 (let ((?x194 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv2 32))) ?x93)))
 (let ((?x174 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x105 (_ bv3 32))) ?x194)))
 (let ((?x74 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1343X)))
 (let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1343X)))
 (=> $x143 (= ?x74 ?x174))))))))))
 ))
 (let (($x237 (forall ((input.ind-%var1342X (_ BitVec 32)) )(let (($x123 (and (bvule (_ bv0 32) input.ind-%var1342X) (bvult input.ind-%var1342X (_ bv100 32)))))
 (let (($x143 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1342X)))
 (= $x143 $x123))))
 ))
 (let (($x140 (and $x237 $x132)))
 (let (($x57 (= $x140 true)))
 (let ((?x264 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x68 (= (_ bv0 2) ?x264)))
 (let (($x179 (= $x68 true)))
 (let (($x226 (= $x179 true)))
 (let (($x245 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x169 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x106 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x269 (and $x106 $x169)))
 (let (($x176 (and $x269 $x245)))
 (let (($x193 (= $x176 true)))
 (let (($x80 (= $x193 true)))
 (let (($x120 (= $x80 true)))
 (let ((?x21 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x21)))
 (let ((?x215 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x55 (= (_ bv0 32) ?x215)))
 (let ((?x19 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x232 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x19)))
 (let ((?x91 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x91)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (and $x178 $x163)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (and $x25 $x128)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x71 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x90 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x85 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (and $x85 $x90)))
 (let (($x101 (not $x37)))
 (let (($x31 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x242 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x45 (and $x242 $x31)))
 (let (($x198 (and (not $x45) $x101)))
 (let (($x41 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x26 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x26 $x41)))
 (let (($x98 (not $x70)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x221 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x97 (and $x221 $x9)))
 (let (($x60 (and (not $x97) $x98)))
 (let (($x83 (and (and (and (and (and (and $x60 $x198) $x71) $x16) $x29) $x232) $x55)))
 (let (($x46 (and $x83 $x88)))
 (let (($x188 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x112 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x6 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x112)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x51 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x112)))
 (let (($x44 (or false (or false (and (and true (or $x51 $x23)) (or $x6 $x188))))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x44)))
 (let (($x146 (and $x67 $x46)))
 (let (($x171 (= $x146 true)))
 (let (($x7 (= $x171 true)))
 (let (($x166 (= $x7 true)))
 (let (($x34 (and $x166 $x120)))
 (let (($x78 (and $x34 $x226)))
 (let (($x275 (and $x78 $x57)))
 (let (($x256 (and $x275 $x151)))
 (let (($x160 (and $x256 $x64)))
 (let (($x230 (and $x160 $x142)))
 (let (($x231 (and $x230 $x95)))
 (let (($x12 (=> $x231 $x137)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0000a000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000a003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0000a000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000004)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000007 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000006 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000005 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000004 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00400004)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x4c448598)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xfc8521cc)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xfc8521cf)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x4c44859b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xfc8521cc)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x4c448598)
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!14 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!15 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00400007 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400006 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400005 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00400004 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!14 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 27
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1435X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1435X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1435X)))
 (=> $x115 (= ?x191 ?x260))))))))))
 ))
 (let (($x227 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1434X) (bvult input.ind-%var1434X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1434X)))
 (= $x115 $x159))))
 ))
 (let (($x302 (and $x227 $x301)))
 (let (($x65 (= true true)))
 (let (($x303 (and $x65 $x302)))
 (let (($x304 (= $x303 true)))
 (let (($x253 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1429X)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1429X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1429X)))
 (=> $x115 (= ?x191 ?x138))))))
 ))
 (let (($x265 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1428X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1428X)))
 (= $x115 $x62))))
 ))
 (let (($x53 (and $x265 $x253)))
 (let (($x168 (= $x53 true)))
 (let (($x30 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1423X)))
 (let ((?x130 (input.spec-%var-m1-1.1.1 input.ind-%var1423X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1423X)))
 (=> $x187 (= ?x130 ?x255))))))
 ))
 (let (($x287 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1422X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1422X)))
 (= $x187 $x64))))
 ))
 (let (($x61 (and $x287 $x30)))
 (let (($x165 (= $x61 true)))
 (let (($x190 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1417X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x130 (input.spec-%var-m1-1.1.1 input.ind-%var1417X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1417X)))
 (=> $x187 (= ?x130 ?x260))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X (_ bv100 32)))))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1416X)))
 (= $x187 $x159))))
 ))
 (let (($x273 (and $x167 $x190)))
 (let (($x58 (= $x273 true)))
 (let (($x52 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1411X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1411X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1411X)))
 (=> $x64 (= ?x255 ?x260))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1410X) (bvult input.ind-%var1410X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1410X)))
 (= $x64 $x159))))
 ))
 (let (($x219 (and $x277 $x52)))
 (let (($x236 (= $x219 true)))
 (let (($x197 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1405X (_ bv4 32))))
 (let ((?x203 (bvadd ?x256 input.dst.llvm-%m2)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x203))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv2 32))) ?x135)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv3 32))) ?x258)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1405X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1405X)))
 (=> $x115 (= ?x191 ?x183))))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1404X) (bvult input.ind-%var1404X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1404X)))
 (= $x115 $x159))))
 ))
 (let (($x184 (and $x175 $x197)))
 (let (($x124 (= $x184 true)))
 (let (($x264 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x176 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x120 (and $x176 $x80)))
 (let (($x68 (and $x120 $x264)))
 (let (($x179 (= $x68 true)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x88)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x83)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x128 $x19)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x163 $x232)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x100 $x71)))
 (let (($x79 (not $x103)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x101 $x198)))
 (let (($x24 (and (not $x96) $x79)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x31 $x45)))
 (let (($x85 (not $x18)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x23 $x86)))
 (let (($x37 (and (not $x242) $x85)))
 (let (($x56 (and (and (and (and (and (and $x37 $x24) $x178) $x91) $x254) $x55) $x21)))
 (let (($x213 (and $x56 $x46)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x70 (or false (or false (and (and true (or $x50 $x145)) (or $x9 $x97))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x106 (and $x60 $x213)))
 (let (($x266 (= $x106 true)))
 (let (($x223 (= $x266 true)))
 (let (($x169 (= $x223 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x32 (= (_ bv0 2) ?x8)))
 (let (($x76 (= $x32 true)))
 (let (($x156 (= $x76 true)))
 (let (($x269 (and $x156 $x169)))
 (let (($x206 (and $x269 $x78)))
 (let (($x11 (and $x206 $x124)))
 (let (($x240 (and $x11 $x236)))
 (let (($x139 (and $x240 $x58)))
 (let (($x280 (and $x139 $x165)))
 (let (($x212 (and $x280 $x168)))
 (let (($x305 (=> $x212 $x304)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x301 (forall ((input.ind-%var1435X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1435X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1435X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1435X)))
 (=> $x115 (= ?x191 ?x260))))))))))
 ))
 (let (($x227 (forall ((input.ind-%var1434X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1434X) (bvult input.ind-%var1434X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1434X)))
 (= $x115 $x159))))
 ))
 (let (($x302 (and $x227 $x301)))
 (let (($x65 (= true true)))
 (let (($x303 (and $x65 $x302)))
 (let (($x304 (= $x303 true)))
 (let (($x253 (forall ((input.ind-%var1429X (_ BitVec 32)) )(let ((?x138 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1429X)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1429X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1429X)))
 (=> $x115 (= ?x191 ?x138))))))
 ))
 (let (($x265 (forall ((input.ind-%var1428X (_ BitVec 32)) )(let (($x62 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1428X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1428X)))
 (= $x115 $x62))))
 ))
 (let (($x53 (and $x265 $x253)))
 (let (($x168 (= $x53 true)))
 (let (($x30 (forall ((input.ind-%var1423X (_ BitVec 32)) )(let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1423X)))
 (let ((?x130 (input.spec-%var-m1-1.1.1 input.ind-%var1423X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1423X)))
 (=> $x187 (= ?x130 ?x255))))))
 ))
 (let (($x287 (forall ((input.ind-%var1422X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1422X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1422X)))
 (= $x187 $x64))))
 ))
 (let (($x61 (and $x287 $x30)))
 (let (($x165 (= $x61 true)))
 (let (($x190 (forall ((input.ind-%var1417X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1417X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x130 (input.spec-%var-m1-1.1.1 input.ind-%var1417X)))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1417X)))
 (=> $x187 (= ?x130 ?x260))))))))))
 ))
 (let (($x167 (forall ((input.ind-%var1416X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1416X) (bvult input.ind-%var1416X (_ bv100 32)))))
 (let (($x187 (input.spec-%var-m1-1.0.1 input.ind-%var1416X)))
 (= $x187 $x159))))
 ))
 (let (($x273 (and $x167 $x190)))
 (let (($x58 (= $x273 true)))
 (let (($x52 (forall ((input.ind-%var1411X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1411X (_ bv4 32))))
 (let ((?x87 (bvadd ?x256 input.dst.llvm-%m1)))
 (let ((?x73 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x87))))
 (let ((?x271 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv2 32))) ?x73)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x87 (_ bv3 32))) ?x271)))
 (let ((?x255 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1411X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1411X)))
 (=> $x64 (= ?x255 ?x260))))))))))
 ))
 (let (($x277 (forall ((input.ind-%var1410X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1410X) (bvult input.ind-%var1410X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1410X)))
 (= $x64 $x159))))
 ))
 (let (($x219 (and $x277 $x52)))
 (let (($x236 (= $x219 true)))
 (let (($x197 (forall ((input.ind-%var1405X (_ BitVec 32)) )(let ((?x256 (bvmul input.ind-%var1405X (_ bv4 32))))
 (let ((?x203 (bvadd ?x256 input.dst.llvm-%m2)))
 (let ((?x135 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x203))))
 (let ((?x258 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv2 32))) ?x135)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x203 (_ bv3 32))) ?x258)))
 (let ((?x191 (input.spec-%var-m2-1.1.1 input.ind-%var1405X)))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1405X)))
 (=> $x115 (= ?x191 ?x183))))))))))
 ))
 (let (($x175 (forall ((input.ind-%var1404X (_ BitVec 32)) )(let (($x159 (and (bvule (_ bv0 32) input.ind-%var1404X) (bvult input.ind-%var1404X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m2-1.0.1 input.ind-%var1404X)))
 (= $x115 $x159))))
 ))
 (let (($x184 (and $x175 $x197)))
 (let (($x124 (= $x184 true)))
 (let (($x264 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x80 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x176 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x120 (and $x176 $x80)))
 (let (($x68 (and $x120 $x264)))
 (let (($x179 (= $x68 true)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x88)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x83)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x72 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x72)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x128 $x19)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (and $x163 $x232)))
 (let (($x91 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x71 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x100 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x103 (and $x100 $x71)))
 (let (($x79 (not $x103)))
 (let (($x198 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x96 (and $x101 $x198)))
 (let (($x24 (and (not $x96) $x79)))
 (let (($x45 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x31 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x18 (and $x31 $x45)))
 (let (($x85 (not $x18)))
 (let (($x86 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x242 (and $x23 $x86)))
 (let (($x37 (and (not $x242) $x85)))
 (let (($x56 (and (and (and (and (and (and $x37 $x24) $x178) $x91) $x254) $x55) $x21)))
 (let (($x213 (and $x56 $x46)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x188 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x188)))
 (let (($x145 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x50 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x188)))
 (let (($x70 (or false (or false (and (and true (or $x50 $x145)) (or $x9 $x97))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x106 (and $x60 $x213)))
 (let (($x266 (= $x106 true)))
 (let (($x223 (= $x266 true)))
 (let (($x169 (= $x223 true)))
 (let ((?x8 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x32 (= (_ bv0 2) ?x8)))
 (let (($x76 (= $x32 true)))
 (let (($x156 (= $x76 true)))
 (let (($x269 (and $x156 $x169)))
 (let (($x206 (and $x269 $x78)))
 (let (($x11 (and $x206 $x124)))
 (let (($x240 (and $x11 $x236)))
 (let (($x139 (and $x240 $x58)))
 (let (($x280 (and $x139 $x165)))
 (let (($x212 (and $x280 $x168)))
 (let (($x305 (=> $x212 $x304)))
 (not $x305)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.ind-%var1435X!1 () (_ BitVec 32)
    #x00000003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x390d0010)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!2))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x26240024)
  (define-fun input.ind-%var1434X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x61a29144)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x26240027)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x390d0013)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x26240024)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x390d0010)
  (define-fun k!2 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x61a29152) #x02
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00020000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x61a29147 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29146 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29145 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x61a29144 (bvmul #x00000004 x!0)))))))
  (define-fun k!3 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000003))
  (define-fun input.spec-%var-m1-1.0.1!5 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!4 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000003))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000003) true
      (not (bvule #x00000064 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000003) true
      (input.spec-%var-m2-1.0.1 x!0))))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00000000
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!2 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!2 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!2 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (input.spec-%var-m2-1.1.1 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!4 (k!3 x!0)))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!5 (k!3 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000003) #x00020000
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!2 (bvadd #x61a29147 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29146 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29145 (bvmul #x00000004 x!0)))
                         (k!2 (bvadd #x61a29144 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1)))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb7a00600)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x661bddb8)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!16))
  (define-fun input.ind-%var1435X!1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.ind-%var1434X!0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbff00004)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbff00007)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb7a00603)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbff00004)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb7a00600)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (concat (k!16 (bvadd #x661bddbb (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddba (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddb9 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x661bddb8 (bvmul #x00000004 x!0))))))
  (define-fun k!18 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!21 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!21 (k!18 x!0)))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x661bddb9) #x40
      #x00))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00004000
      (let ((a!1 (concat (k!16 (bvadd #x661bddbb (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddba (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddb9 (bvmul #x00000004 x!0)))
                         (k!16 (bvadd #x661bddb8 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-m2-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!20 (k!17 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!16 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!16 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!16 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 (k!18 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 28
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x153 (= false true)))
 (let (($x249 (= $x153 true)))
 (let (($x294 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1497X)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1497X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1497X)))
 (=> $x116 (= ?x121 ?x129))))))
 ))
 (let (($x111 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x136 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1496X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1496X)))
 (= $x116 $x136))))
 ))
 (let (($x295 (and $x111 $x294)))
 (let (($x291 (= $x295 true)))
 (let (($x251 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let ((?x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1491X)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1491X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1491X)))
 (=> $x282 (= ?x155 ?x48))))))
 ))
 (let (($x181 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1490X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1490X)))
 (= $x282 $x58))))
 ))
 (let (($x59 (and $x181 $x251)))
 (let (($x104 (= $x59 true)))
 (let (($x108 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1485X (_ bv4 32))))
 (let ((?x304 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x118)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x47)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1485X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1485X)))
 (=> $x282 (= ?x155 ?x214))))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1484X) (bvult input.ind-%var1484X (_ bv100 32)))))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1484X)))
 (= $x282 $x210))))
 ))
 (let (($x12 (and $x57 $x108)))
 (let (($x261 (= $x12 true)))
 (let (($x283 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1479X (_ bv4 32))))
 (let ((?x304 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x118)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x47)))
 (let ((?x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1479X)))
 (let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1479X)))
 (=> $x58 (= ?x48 ?x214))))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1478X) (bvult input.ind-%var1478X (_ bv100 32)))))
 (let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1478X)))
 (= $x58 $x210))))
 ))
 (let (($x234 (and $x61 $x283)))
 (let (($x35 (= $x234 true)))
 (let (($x167 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1473X (_ bv4 32))))
 (let ((?x233 (bvadd ?x285 input.dst.llvm-%m2)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x260)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x52)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1473X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1473X)))
 (=> $x116 (= ?x121 ?x240))))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1472X) (bvult input.ind-%var1472X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1472X)))
 (= $x116 $x210))))
 ))
 (let (($x130 (and $x263 $x167)))
 (let (($x244 (= $x130 true)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x176 (= (_ bv0 32) ?x245)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x272 (= (_ bv0 32) ?x270)))
 (let ((?x169 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (and $x88 $x106)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x56 $x266)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x72 $x19)))
 (let (($x254 (not $x232)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x163 $x128)))
 (let (($x215 (and (not $x29) $x254)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x25 $x178)))
 (let (($x117 (not $x171)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x41 $x70)))
 (let (($x7 (and (not $x146) $x117)))
 (let (($x264 (and (and (and (and (and (and $x7 $x215) $x235) $x21) $x223) $x269) $x272)))
 (let (($x68 (and $x264 $x176)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x103 (or false (or false (and (and true (or $x31 $x45)) (or $x198 $x96))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x179 (and $x24 $x68)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let (($x206 (= $x78 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x54 (= (_ bv0 2) ?x145)))
 (let (($x44 (= $x54 true)))
 (let (($x67 (= $x44 true)))
 (let (($x22 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x76 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x112 (and $x76 $x156)))
 (let (($x98 (and $x112 $x22)))
 (let (($x6 (= $x98 true)))
 (let (($x188 (= $x6 true)))
 (let (($x50 (= $x188 true)))
 (let (($x9 (and $x50 $x67)))
 (let (($x216 (and $x9 $x206)))
 (let (($x28 (and $x216 $x244)))
 (let (($x143 (and $x28 $x35)))
 (let (($x170 (and $x143 $x261)))
 (let (($x259 (and $x170 $x104)))
 (let (($x292 (and $x259 $x291)))
 (let (($x284 (=> $x292 $x249)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(assert
 (let (($x153 (= false true)))
 (let (($x249 (= $x153 true)))
 (let (($x294 (forall ((input.ind-%var1497X (_ BitVec 32)) )(let ((?x129 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1497X)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1497X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1497X)))
 (=> $x116 (= ?x121 ?x129))))))
 ))
 (let (($x111 (forall ((input.ind-%var1496X (_ BitVec 32)) )(let (($x136 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1496X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1496X)))
 (= $x116 $x136))))
 ))
 (let (($x295 (and $x111 $x294)))
 (let (($x291 (= $x295 true)))
 (let (($x251 (forall ((input.ind-%var1491X (_ BitVec 32)) )(let ((?x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1491X)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1491X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1491X)))
 (=> $x282 (= ?x155 ?x48))))))
 ))
 (let (($x181 (forall ((input.ind-%var1490X (_ BitVec 32)) )(let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1490X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1490X)))
 (= $x282 $x58))))
 ))
 (let (($x59 (and $x181 $x251)))
 (let (($x104 (= $x59 true)))
 (let (($x108 (forall ((input.ind-%var1485X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1485X (_ bv4 32))))
 (let ((?x304 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x118)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x47)))
 (let ((?x155 (input.spec-%var-m1-1.1.1 input.ind-%var1485X)))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1485X)))
 (=> $x282 (= ?x155 ?x214))))))))))
 ))
 (let (($x57 (forall ((input.ind-%var1484X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1484X) (bvult input.ind-%var1484X (_ bv100 32)))))
 (let (($x282 (input.spec-%var-m1-1.0.1 input.ind-%var1484X)))
 (= $x282 $x210))))
 ))
 (let (($x12 (and $x57 $x108)))
 (let (($x261 (= $x12 true)))
 (let (($x283 (forall ((input.ind-%var1479X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1479X (_ bv4 32))))
 (let ((?x304 (bvadd ?x285 input.dst.llvm-%m1)))
 (let ((?x118 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x304))))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv2 32))) ?x118)))
 (let ((?x214 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x304 (_ bv3 32))) ?x47)))
 (let ((?x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1479X)))
 (let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1479X)))
 (=> $x58 (= ?x48 ?x214))))))))))
 ))
 (let (($x61 (forall ((input.ind-%var1478X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1478X) (bvult input.ind-%var1478X (_ bv100 32)))))
 (let (($x58 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1478X)))
 (= $x58 $x210))))
 ))
 (let (($x234 (and $x61 $x283)))
 (let (($x35 (= $x234 true)))
 (let (($x167 (forall ((input.ind-%var1473X (_ BitVec 32)) )(let ((?x285 (bvmul input.ind-%var1473X (_ bv4 32))))
 (let ((?x233 (bvadd ?x285 input.dst.llvm-%m2)))
 (let ((?x260 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x233))))
 (let ((?x52 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv2 32))) ?x260)))
 (let ((?x240 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x233 (_ bv3 32))) ?x52)))
 (let ((?x121 (input.spec-%var-m2-1.1.1 input.ind-%var1473X)))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1473X)))
 (=> $x116 (= ?x121 ?x240))))))))))
 ))
 (let (($x263 (forall ((input.ind-%var1472X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var1472X) (bvult input.ind-%var1472X (_ bv100 32)))))
 (let (($x116 (input.spec-%var-m2-1.0.1 input.ind-%var1472X)))
 (= $x116 $x210))))
 ))
 (let (($x130 (and $x263 $x167)))
 (let (($x244 (= $x130 true)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x176 (= (_ bv0 32) ?x245)))
 (let ((?x270 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x272 (= (_ bv0 32) ?x270)))
 (let ((?x169 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x269 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x169)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x106 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x266 (and $x88 $x106)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x223 (and $x56 $x266)))
 (let (($x21 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x72 $x19)))
 (let (($x254 (not $x232)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x163 $x128)))
 (let (($x215 (and (not $x29) $x254)))
 (let (($x178 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x25 $x178)))
 (let (($x117 (not $x171)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x41 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x41 $x70)))
 (let (($x7 (and (not $x146) $x117)))
 (let (($x264 (and (and (and (and (and (and $x7 $x215) $x235) $x21) $x223) $x269) $x272)))
 (let (($x68 (and $x264 $x176)))
 (let (($x96 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x90 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x198 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x90)))
 (let (($x45 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x90)))
 (let (($x103 (or false (or false (and (and true (or $x31 $x45)) (or $x198 $x96))))))
 (let (($x24 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x179 (and $x24 $x68)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let (($x206 (= $x78 true)))
 (let ((?x145 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x54 (= (_ bv0 2) ?x145)))
 (let (($x44 (= $x54 true)))
 (let (($x67 (= $x44 true)))
 (let (($x22 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x156 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x76 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x112 (and $x76 $x156)))
 (let (($x98 (and $x112 $x22)))
 (let (($x6 (= $x98 true)))
 (let (($x188 (= $x6 true)))
 (let (($x50 (= $x188 true)))
 (let (($x9 (and $x50 $x67)))
 (let (($x216 (and $x9 $x206)))
 (let (($x28 (and $x216 $x244)))
 (let (($x143 (and $x28 $x35)))
 (let (($x170 (and $x143 $x261)))
 (let (($x259 (and $x170 $x104)))
 (let (($x292 (and $x259 $x291)))
 (let (($x284 (=> $x292 $x249)))
 (not $x284)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xdffe4d03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x64d6c787)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xdffe4d00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x64d6c784)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0230db03)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80017a13)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x0230db00)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80017a10)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 29
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x279 (= $x40 true)))
 (let (($x127 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1559X)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 input.ind-%var1559X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1559X)))
 (=> $x175 (= ?x73 ?x280))))))
 ))
 (let (($x195 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1558X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1558X)))
 (= $x175 $x276))))
 ))
 (let (($x257 (and $x195 $x127)))
 (let (($x243 (= $x257 true)))
 (let (($x290 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1553X)))
 (let ((?x138 (input.spec-%var-m1-1.1.1 input.ind-%var1553X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1553X)))
 (=> $x184 (= ?x138 ?x136))))))
 ))
 (let (($x157 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1552X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1552X)))
 (= $x184 $x12))))
 ))
 (let (($x154 (and $x157 $x290)))
 (let (($x74 (= $x154 true)))
 (let (($x180 (forall ((input.ind-%var1547X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1547X (_ bv4 32))))
 (let ((?x182 (bvadd ?x13 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x265)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x224)))
 (let ((?x138 (input.spec-%var-m1-1.1.1 input.ind-%var1547X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1547X)))
 (=> $x184 (= ?x138 ?x115))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1546X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1546X) (bvult input.ind-%var1546X (_ bv100 32)))))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1546X)))
 (= $x184 $x233))))
 ))
 (let (($x196 (and $x62 $x180)))
 (let (($x273 (= $x196 true)))
 (let (($x10 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1541X (_ bv4 32))))
 (let ((?x182 (bvadd ?x13 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x265)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x224)))
 (let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1541X)))
 (let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1541X)))
 (=> $x12 (= ?x136 ?x115))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X (_ bv100 32)))))
 (let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1540X)))
 (= $x12 $x233))))
 ))
 (let (($x27 (and $x251 $x10)))
 (let (($x87 (= $x27 true)))
 (let (($x140 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1535X (_ bv4 32))))
 (let ((?x306 (bvadd ?x13 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x306))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv2 32))) ?x47)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv3 32))) ?x15)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 input.ind-%var1535X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1535X)))
 (=> $x175 (= ?x73 ?x35))))))))))
 ))
 (let (($x236 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1534X) (bvult input.ind-%var1534X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1534X)))
 (= $x175 $x233))))
 ))
 (let (($x57 (and $x236 $x140)))
 (let (($x155 (= $x57 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x269 (= (_ bv0 32) ?x169)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x223)))
 (let ((?x106 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x21 $x88)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x83 $x46)))
 (let (($x80 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x166 $x72)))
 (let (($x232 (not $x19)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x163 $x128)))
 (let (($x215 (and (not $x29) $x232)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x91 $x25)))
 (let (($x171 (not $x178)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x60 $x23)))
 (let (($x7 (and (not $x146) $x171)))
 (let (($x176 (and (and (and (and (and (and $x7 $x215) $x55) $x80) $x213) $x266) $x34)))
 (let (($x68 (and $x176 $x269)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x24 (or false (or false (and (and true (or $x45 $x18)) (or $x96 $x16))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x179 (and $x70 $x68)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let (($x206 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x229 (= (_ bv0 2) ?x50)))
 (let (($x145 (= $x229 true)))
 (let (($x54 (= $x145 true)))
 (let ((?x258 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x258)))
 (let (($x51 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x208 (= $x51 true)))
 (let (($x22 (= $x208 true)))
 (let (($x8 (= ?x112 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x49 (= $x8 true)))
 (let (($x32 (= $x49 true)))
 (let (($x98 (and $x32 $x22)))
 (let (($x44 (and $x98 $x54)))
 (let (($x216 (and $x44 $x206)))
 (let (($x250 (and $x216 $x155)))
 (let (($x205 (and $x250 $x87)))
 (let (($x158 (and $x205 $x273)))
 (let (($x186 (and $x158 $x74)))
 (let (($x268 (and $x186 $x243)))
 (let (($x252 (=> $x268 $x279)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x40 (= true false)))
 (let (($x279 (= $x40 true)))
 (let (($x127 (forall ((input.ind-%var1559X (_ BitVec 32)) )(let ((?x280 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1559X)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 input.ind-%var1559X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1559X)))
 (=> $x175 (= ?x73 ?x280))))))
 ))
 (let (($x195 (forall ((input.ind-%var1558X (_ BitVec 32)) )(let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1558X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1558X)))
 (= $x175 $x276))))
 ))
 (let (($x257 (and $x195 $x127)))
 (let (($x243 (= $x257 true)))
 (let (($x290 (forall ((input.ind-%var1553X (_ BitVec 32)) )(let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1553X)))
 (let ((?x138 (input.spec-%var-m1-1.1.1 input.ind-%var1553X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1553X)))
 (=> $x184 (= ?x138 ?x136))))))
 ))
 (let (($x157 (forall ((input.ind-%var1552X (_ BitVec 32)) )(let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1552X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1552X)))
 (= $x184 $x12))))
 ))
 (let (($x154 (and $x157 $x290)))
 (let (($x74 (= $x154 true)))
 (let (($x180 (forall ((input.ind-%var1547X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1547X (_ bv4 32))))
 (let ((?x182 (bvadd ?x13 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x265)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x224)))
 (let ((?x138 (input.spec-%var-m1-1.1.1 input.ind-%var1547X)))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1547X)))
 (=> $x184 (= ?x138 ?x115))))))))))
 ))
 (let (($x62 (forall ((input.ind-%var1546X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1546X) (bvult input.ind-%var1546X (_ bv100 32)))))
 (let (($x184 (input.spec-%var-m1-1.0.1 input.ind-%var1546X)))
 (= $x184 $x233))))
 ))
 (let (($x196 (and $x62 $x180)))
 (let (($x273 (= $x196 true)))
 (let (($x10 (forall ((input.ind-%var1541X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1541X (_ bv4 32))))
 (let ((?x182 (bvadd ?x13 input.dst.llvm-%m1)))
 (let ((?x265 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x182))))
 (let ((?x224 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv2 32))) ?x265)))
 (let ((?x115 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x182 (_ bv3 32))) ?x224)))
 (let ((?x136 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1541X)))
 (let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1541X)))
 (=> $x12 (= ?x136 ?x115))))))))))
 ))
 (let (($x251 (forall ((input.ind-%var1540X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1540X) (bvult input.ind-%var1540X (_ bv100 32)))))
 (let (($x12 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1540X)))
 (= $x12 $x233))))
 ))
 (let (($x27 (and $x251 $x10)))
 (let (($x87 (= $x27 true)))
 (let (($x140 (forall ((input.ind-%var1535X (_ BitVec 32)) )(let ((?x13 (bvmul input.ind-%var1535X (_ bv4 32))))
 (let ((?x306 (bvadd ?x13 input.dst.llvm-%m2)))
 (let ((?x47 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x306))))
 (let ((?x15 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv2 32))) ?x47)))
 (let ((?x35 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x306 (_ bv3 32))) ?x15)))
 (let ((?x73 (input.spec-%var-m2-1.1.1 input.ind-%var1535X)))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1535X)))
 (=> $x175 (= ?x73 ?x35))))))))))
 ))
 (let (($x236 (forall ((input.ind-%var1534X (_ BitVec 32)) )(let (($x233 (and (bvule (_ bv0 32) input.ind-%var1534X) (bvult input.ind-%var1534X (_ bv100 32)))))
 (let (($x175 (input.spec-%var-m2-1.0.1 input.ind-%var1534X)))
 (= $x175 $x233))))
 ))
 (let (($x57 (and $x236 $x140)))
 (let (($x155 (= $x57 true)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x269 (= (_ bv0 32) ?x169)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x223)))
 (let ((?x106 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x266 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x106)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x56)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x46 (and $x21 $x88)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x83 $x46)))
 (let (($x80 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x166 $x72)))
 (let (($x232 (not $x19)))
 (let (($x128 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x163 $x128)))
 (let (($x215 (and (not $x29) $x232)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x91 $x25)))
 (let (($x171 (not $x178)))
 (let (($x23 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x146 (and $x60 $x23)))
 (let (($x7 (and (not $x146) $x171)))
 (let (($x176 (and (and (and (and (and (and $x7 $x215) $x55) $x80) $x213) $x266) $x34)))
 (let (($x68 (and $x176 $x269)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x242 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x96 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x242)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x242)))
 (let (($x24 (or false (or false (and (and true (or $x45 $x18)) (or $x96 $x16))))))
 (let (($x70 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x24)))
 (let (($x179 (and $x70 $x68)))
 (let (($x226 (= $x179 true)))
 (let (($x78 (= $x226 true)))
 (let (($x206 (= $x78 true)))
 (let ((?x50 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x229 (= (_ bv0 2) ?x50)))
 (let (($x145 (= $x229 true)))
 (let (($x54 (= $x145 true)))
 (let ((?x258 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x258)))
 (let (($x51 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x208 (= $x51 true)))
 (let (($x22 (= $x208 true)))
 (let (($x8 (= ?x112 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x49 (= $x8 true)))
 (let (($x32 (= $x49 true)))
 (let (($x98 (and $x32 $x22)))
 (let (($x44 (and $x98 $x54)))
 (let (($x216 (and $x44 $x206)))
 (let (($x250 (and $x216 $x155)))
 (let (($x205 (and $x250 $x87)))
 (let (($x158 (and $x205 $x273)))
 (let (($x186 (and $x158 $x74)))
 (let (($x268 (and $x186 $x243)))
 (let (($x252 (=> $x268 $x279)))
 (not $x252))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x430fbb79)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xc135ce73)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xb60c3a17)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xc135ce70)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xb60c3a14)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x430fbb7c (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7b (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb7a (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x430fbb79 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00040003)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00040000)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 30
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x133 (= false true)))
 (let (($x69 (= $x133 true)))
 (let (($x150 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let ((?x201 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1669X)))
 (let ((?x12 (input.spec-%var-m2-1.1.1 input.ind-%var1669X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1669X)))
 (=> $x28 (= ?x12 ?x201))))))
 ))
 (let (($x238 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x159 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1668X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1668X)))
 (= $x28 $x159))))
 ))
 (let (($x189 (and $x238 $x150)))
 (let (($x200 (= $x189 true)))
 (let (($x42 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1663X)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 input.ind-%var1663X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1663X)))
 (=> $x185 (= ?x134 ?x279))))))
 ))
 (let (($x302 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1662X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1662X)))
 (= $x185 $x276))))
 ))
 (let (($x177 (and $x302 $x42)))
 (let (($x33 (= $x177 true)))
 (let (($x212 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1657X (_ bv4 32))))
 (let ((?x237 (bvadd ?x87 input.dst.llvm-%m1)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x187)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x58)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 input.ind-%var1657X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1657X)))
 (=> $x185 (= ?x134 ?x130))))))))))
 ))
 (let (($x292 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1656X) (bvult input.ind-%var1656X (_ bv100 32)))))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1656X)))
 (= $x185 $x143))))
 ))
 (let (($x299 (and $x292 $x212)))
 (let (($x65 (= $x299 true)))
 (let (($x61 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1651X (_ bv4 32))))
 (let ((?x237 (bvadd ?x87 input.dst.llvm-%m1)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x187)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x58)))
 (let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1651X)))
 (let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1651X)))
 (=> $x276 (= ?x279 ?x130))))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1650X) (bvult input.ind-%var1650X (_ bv100 32)))))
 (let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1650X)))
 (= $x276 $x143))))
 ))
 (let (($x122 (and $x257 $x61)))
 (let (($x59 (= $x122 true)))
 (let (($x286 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x205 (bvadd ?x87 input.dst.llvm-%m2)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x138)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x180)))
 (let ((?x12 (input.spec-%var-m2-1.1.1 input.ind-%var1645X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1645X)))
 (=> $x28 (= ?x12 ?x158))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1644X)))
 (= $x28 $x143))))
 ))
 (let (($x281 (and $x140 $x286)))
 (let (($x290 (= $x281 true)))
 (let ((?x206 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x206)))
 (let ((?x226 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x78 (= (_ bv0 32) ?x226)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x245 $x176)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x266 $x169)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x272 $x83)))
 (let (($x120 (not $x21)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x270 $x235)))
 (let (($x88 (and (not $x80) $x120)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x19 $x232)))
 (let (($x288 (not $x215)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x101 $x16)))
 (let (($x55 (and (not $x72) $x288)))
 (let (($x233 (and (and (and (and (and (and $x55 $x88) $x213) $x106) $x269) $x179) $x78)))
 (let (($x219 (and $x233 $x216)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x29 (or false (or false (and (and true (or $x60 $x23)) (or $x178 $x171))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x236 (and $x166 $x219)))
 (let (($x73 (= $x236 true)))
 (let (($x38 (= $x73 true)))
 (let (($x52 (= $x38 true)))
 (let (($x41 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x79 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x90 (and $x79 $x41)))
 (let (($x242 (= $x90 true)))
 (let (($x45 (= $x242 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x50 (= (_ bv0 2) ?x22)))
 (let (($x229 (= $x50 true)))
 (let (($x145 (= $x229 true)))
 (let ((?x194 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x6 (bvneg ?x194)))
 (let (($x32 (= ?x6 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x49 (= $x32 true)))
 (let (($x208 (= $x49 true)))
 (let (($x51 (= ?x6 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x260 (= $x51 true)))
 (let (($x76 (= $x260 true)))
 (let (($x156 (and $x76 $x208)))
 (let (($x54 (and $x156 $x145)))
 (let (($x18 (and $x54 $x31)))
 (let (($x13 (and $x18 $x52)))
 (let (($x154 (and $x13 $x290)))
 (let (($x259 (and $x154 $x59)))
 (let (($x209 (and $x259 $x65)))
 (let (($x123 (and $x209 $x33)))
 (let (($x82 (and $x123 $x200)))
 (let (($x151 (=> $x82 $x69)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x133 (= false true)))
 (let (($x69 (= $x133 true)))
 (let (($x150 (forall ((input.ind-%var1669X (_ BitVec 32)) )(let ((?x201 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1669X)))
 (let ((?x12 (input.spec-%var-m2-1.1.1 input.ind-%var1669X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1669X)))
 (=> $x28 (= ?x12 ?x201))))))
 ))
 (let (($x238 (forall ((input.ind-%var1668X (_ BitVec 32)) )(let (($x159 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1668X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1668X)))
 (= $x28 $x159))))
 ))
 (let (($x189 (and $x238 $x150)))
 (let (($x200 (= $x189 true)))
 (let (($x42 (forall ((input.ind-%var1663X (_ BitVec 32)) )(let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1663X)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 input.ind-%var1663X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1663X)))
 (=> $x185 (= ?x134 ?x279))))))
 ))
 (let (($x302 (forall ((input.ind-%var1662X (_ BitVec 32)) )(let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1662X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1662X)))
 (= $x185 $x276))))
 ))
 (let (($x177 (and $x302 $x42)))
 (let (($x33 (= $x177 true)))
 (let (($x212 (forall ((input.ind-%var1657X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1657X (_ bv4 32))))
 (let ((?x237 (bvadd ?x87 input.dst.llvm-%m1)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x187)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x58)))
 (let ((?x134 (input.spec-%var-m1-1.1.1 input.ind-%var1657X)))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1657X)))
 (=> $x185 (= ?x134 ?x130))))))))))
 ))
 (let (($x292 (forall ((input.ind-%var1656X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1656X) (bvult input.ind-%var1656X (_ bv100 32)))))
 (let (($x185 (input.spec-%var-m1-1.0.1 input.ind-%var1656X)))
 (= $x185 $x143))))
 ))
 (let (($x299 (and $x292 $x212)))
 (let (($x65 (= $x299 true)))
 (let (($x61 (forall ((input.ind-%var1651X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1651X (_ bv4 32))))
 (let ((?x237 (bvadd ?x87 input.dst.llvm-%m1)))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x237))))
 (let ((?x58 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv2 32))) ?x187)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x237 (_ bv3 32))) ?x58)))
 (let ((?x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1651X)))
 (let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1651X)))
 (=> $x276 (= ?x279 ?x130))))))))))
 ))
 (let (($x257 (forall ((input.ind-%var1650X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1650X) (bvult input.ind-%var1650X (_ bv100 32)))))
 (let (($x276 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1650X)))
 (= $x276 $x143))))
 ))
 (let (($x122 (and $x257 $x61)))
 (let (($x59 (= $x122 true)))
 (let (($x286 (forall ((input.ind-%var1645X (_ BitVec 32)) )(let ((?x87 (bvmul input.ind-%var1645X (_ bv4 32))))
 (let ((?x205 (bvadd ?x87 input.dst.llvm-%m2)))
 (let ((?x138 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x205))))
 (let ((?x180 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x138)))
 (let ((?x158 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x180)))
 (let ((?x12 (input.spec-%var-m2-1.1.1 input.ind-%var1645X)))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1645X)))
 (=> $x28 (= ?x12 ?x158))))))))))
 ))
 (let (($x140 (forall ((input.ind-%var1644X (_ BitVec 32)) )(let (($x143 (and (bvule (_ bv0 32) input.ind-%var1644X) (bvult input.ind-%var1644X (_ bv100 32)))))
 (let (($x28 (input.spec-%var-m2-1.0.1 input.ind-%var1644X)))
 (= $x28 $x143))))
 ))
 (let (($x281 (and $x140 $x286)))
 (let (($x290 (= $x281 true)))
 (let ((?x206 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x206)))
 (let ((?x226 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x78 (= (_ bv0 32) ?x226)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x68)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x34)))
 (let (($x245 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x169 (and $x245 $x176)))
 (let (($x266 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x266 $x169)))
 (let (($x106 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x272 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x21 (and $x272 $x83)))
 (let (($x120 (not $x21)))
 (let (($x235 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x80 (and $x270 $x235)))
 (let (($x88 (and (not $x80) $x120)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x215 (and $x19 $x232)))
 (let (($x288 (not $x215)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x101 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x101 $x16)))
 (let (($x55 (and (not $x72) $x288)))
 (let (($x233 (and (and (and (and (and (and $x55 $x88) $x213) $x106) $x269) $x179) $x78)))
 (let (($x219 (and $x233 $x216)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x23 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x70)))
 (let (($x29 (or false (or false (and (and true (or $x60 $x23)) (or $x178 $x171))))))
 (let (($x166 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x29)))
 (let (($x236 (and $x166 $x219)))
 (let (($x73 (= $x236 true)))
 (let (($x38 (= $x73 true)))
 (let (($x52 (= $x38 true)))
 (let (($x41 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x79 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x90 (and $x79 $x41)))
 (let (($x242 (= $x90 true)))
 (let (($x45 (= $x242 true)))
 (let (($x31 (= $x45 true)))
 (let ((?x22 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x50 (= (_ bv0 2) ?x22)))
 (let (($x229 (= $x50 true)))
 (let (($x145 (= $x229 true)))
 (let ((?x194 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x6 (bvneg ?x194)))
 (let (($x32 (= ?x6 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x49 (= $x32 true)))
 (let (($x208 (= $x49 true)))
 (let (($x51 (= ?x6 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x260 (= $x51 true)))
 (let (($x76 (= $x260 true)))
 (let (($x156 (and $x76 $x208)))
 (let (($x54 (and $x156 $x145)))
 (let (($x18 (and $x54 $x31)))
 (let (($x13 (and $x18 $x52)))
 (let (($x154 (and $x13 $x290)))
 (let (($x259 (and $x154 $x59)))
 (let (($x209 (and $x259 $x65)))
 (let (($x123 (and $x209 $x33)))
 (let (($x82 (and $x123 $x200)))
 (let (($x151 (=> $x82 $x69)))
 (not $x151)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x80000124)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!12))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00400040)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00400043)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x80000127)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00400040)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x80000124)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1!15 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!15 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (not (bvule #x00000064 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1 x!0))
  (define-fun k!12 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!14 (k!13 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
            (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
            (k!12 (bvmul #x00000004 x!0))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (input.spec-%var-m2-1.1.1 x!0))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!12 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!12 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!12 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!12 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xd6117448)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!13))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xccde805c)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xccde805f)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xd611744b)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xccde805c)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xd6117448)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!13 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!15 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!13 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!14 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1!17 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!17 (k!14 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!13 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!13 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!13 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (input.spec-%var-m2-1.1.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      (input.spec-%var-m2-1.0.1 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!16 (k!15 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 31
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x94 (= true false)))
 (let (($x207 (= $x94 true)))
 (let (($x92 (forall ((input.ind-%var1745X (_ BitVec 32)) )(let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1745X)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 input.ind-%var1745X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1745X)))
 (=> $x256 (= ?x249 ?x292))))))
 ))
 (let (($x144 (forall ((input.ind-%var1744X (_ BitVec 32)) )(let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1744X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1744X)))
 (= $x256 $x187))))
 ))
 (let (($x114 (and $x144 $x92)))
 (let (($x218 (= $x114 true)))
 (let (($x231 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1739X)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 input.ind-%var1739X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1739X)))
 (=> $x172 (= ?x17 ?x28))))))
 ))
 (let (($x217 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1738X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1738X)))
 (= $x172 $x68))))
 ))
 (let (($x294 (and $x217 $x231)))
 (let (($x253 (= $x294 true)))
 (let (($x102 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1733X (_ bv4 32))))
 (let ((?x99 (bvadd ?x180 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x99))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv2 32))) ?x296)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv3 32))) ?x200)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 input.ind-%var1733X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1733X)))
 (=> $x256 (= ?x249 ?x69))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1732X) (bvult input.ind-%var1732X (_ bv100 32)))))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1732X)))
 (= $x256 $x236))))
 ))
 (let (($x170 (and $x295 $x102)))
 (let (($x228 (= $x170 true)))
 (let (($x36 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1727X (_ bv4 32))))
 (let ((?x158 (bvadd ?x180 input.dst.llvm-%m1)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x158))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv2 32))) ?x281)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv3 32))) ?x276)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 input.ind-%var1727X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1727X)))
 (=> $x172 (= ?x17 ?x279))))))))))
 ))
 (let (($x306 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1726X) (bvult input.ind-%var1726X (_ bv100 32)))))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1726X)))
 (= $x172 $x236))))
 ))
 (let (($x67 (and $x306 $x36)))
 (let (($x174 (= $x67 true)))
 (let (($x85 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1721X (_ bv4 32))))
 (let ((?x99 (bvadd ?x180 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x99))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv2 32))) ?x296)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv3 32))) ?x200)))
 (let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1721X)))
 (let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1721X)))
 (=> $x187 (= ?x292 ?x69))))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1720X) (bvult input.ind-%var1720X (_ bv100 32)))))
 (let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1720X)))
 (= $x187 $x236))))
 ))
 (let (($x96 (and $x59 $x85)))
 (let (($x214 (= $x96 true)))
 (let (($x167 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1715X (_ bv4 32))))
 (let ((?x158 (bvadd ?x180 input.dst.llvm-%m1)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x158))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv2 32))) ?x281)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv3 32))) ?x276)))
 (let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1715X)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1715X)))
 (=> $x68 (= ?x28 ?x279))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1714X) (bvult input.ind-%var1714X (_ bv100 32)))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1714X)))
 (= $x68 $x236))))
 ))
 (let (($x48 (and $x38 $x167)))
 (let (($x304 (= $x48 true)))
 (let ((?x120 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x120)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x83)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x215 $x270)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x232 $x235)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x7 $x163)))
 (let (($x29 (not $x128)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x178 $x25)))
 (let (($x101 (and (not $x171) $x29)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x60 $x24)))
 (let (($x146 (not $x23)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x50 $x229)))
 (let (($x91 (and (not $x70) $x146)))
 (let (($x106 (and (and (and (and (and (and $x91 $x101) $x72) $x19) $x80) $x272) $x21)))
 (let (($x285 (and $x106 $x88)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x71 (or false (or false (and (and true (or $x79 $x86)) (or $x31 $x18))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x266 (and $x103 $x285)))
 (let (($x245 (= $x266 true)))
 (let (($x223 (= $x245 true)))
 (let (($x34 (= $x223 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x136)))
 (let (($x39 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x32 (= $x39 true)))
 (let (($x49 (= $x32 true)))
 (let (($x6 (= ?x112 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x51 (= $x6 true)))
 (let (($x260 (= $x51 true)))
 (let (($x208 (and $x260 $x49)))
 (let (($x176 (and $x208 $x34)))
 (let (($x263 (and $x176 $x304)))
 (let (($x141 (and $x263 $x214)))
 (let (($x303 (and $x141 $x174)))
 (let (($x26 (and $x303 $x228)))
 (let (($x199 (and $x26 $x253)))
 (let (($x75 (and $x199 $x218)))
 (let (($x211 (=> $x75 $x207)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x94 (= true false)))
 (let (($x207 (= $x94 true)))
 (let (($x92 (forall ((input.ind-%var1745X (_ BitVec 32)) )(let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1745X)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 input.ind-%var1745X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1745X)))
 (=> $x256 (= ?x249 ?x292))))))
 ))
 (let (($x144 (forall ((input.ind-%var1744X (_ BitVec 32)) )(let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1744X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1744X)))
 (= $x256 $x187))))
 ))
 (let (($x114 (and $x144 $x92)))
 (let (($x218 (= $x114 true)))
 (let (($x231 (forall ((input.ind-%var1739X (_ BitVec 32)) )(let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1739X)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 input.ind-%var1739X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1739X)))
 (=> $x172 (= ?x17 ?x28))))))
 ))
 (let (($x217 (forall ((input.ind-%var1738X (_ BitVec 32)) )(let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1738X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1738X)))
 (= $x172 $x68))))
 ))
 (let (($x294 (and $x217 $x231)))
 (let (($x253 (= $x294 true)))
 (let (($x102 (forall ((input.ind-%var1733X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1733X (_ bv4 32))))
 (let ((?x99 (bvadd ?x180 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x99))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv2 32))) ?x296)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv3 32))) ?x200)))
 (let ((?x249 (input.spec-%var-m2-1.1.1 input.ind-%var1733X)))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1733X)))
 (=> $x256 (= ?x249 ?x69))))))))))
 ))
 (let (($x295 (forall ((input.ind-%var1732X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1732X) (bvult input.ind-%var1732X (_ bv100 32)))))
 (let (($x256 (input.spec-%var-m2-1.0.1 input.ind-%var1732X)))
 (= $x256 $x236))))
 ))
 (let (($x170 (and $x295 $x102)))
 (let (($x228 (= $x170 true)))
 (let (($x36 (forall ((input.ind-%var1727X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1727X (_ bv4 32))))
 (let ((?x158 (bvadd ?x180 input.dst.llvm-%m1)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x158))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv2 32))) ?x281)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv3 32))) ?x276)))
 (let ((?x17 (input.spec-%var-m1-1.1.1 input.ind-%var1727X)))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1727X)))
 (=> $x172 (= ?x17 ?x279))))))))))
 ))
 (let (($x306 (forall ((input.ind-%var1726X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1726X) (bvult input.ind-%var1726X (_ bv100 32)))))
 (let (($x172 (input.spec-%var-m1-1.0.1 input.ind-%var1726X)))
 (= $x172 $x236))))
 ))
 (let (($x67 (and $x306 $x36)))
 (let (($x174 (= $x67 true)))
 (let (($x85 (forall ((input.ind-%var1721X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1721X (_ bv4 32))))
 (let ((?x99 (bvadd ?x180 input.dst.llvm-%m2)))
 (let ((?x296 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x99))))
 (let ((?x200 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv2 32))) ?x296)))
 (let ((?x69 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x99 (_ bv3 32))) ?x200)))
 (let ((?x292 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1721X)))
 (let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1721X)))
 (=> $x187 (= ?x292 ?x69))))))))))
 ))
 (let (($x59 (forall ((input.ind-%var1720X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1720X) (bvult input.ind-%var1720X (_ bv100 32)))))
 (let (($x187 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1720X)))
 (= $x187 $x236))))
 ))
 (let (($x96 (and $x59 $x85)))
 (let (($x214 (= $x96 true)))
 (let (($x167 (forall ((input.ind-%var1715X (_ BitVec 32)) )(let ((?x180 (bvmul input.ind-%var1715X (_ bv4 32))))
 (let ((?x158 (bvadd ?x180 input.dst.llvm-%m1)))
 (let ((?x281 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x158))))
 (let ((?x276 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv2 32))) ?x281)))
 (let ((?x279 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x158 (_ bv3 32))) ?x276)))
 (let ((?x28 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1715X)))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1715X)))
 (=> $x68 (= ?x28 ?x279))))))))))
 ))
 (let (($x38 (forall ((input.ind-%var1714X (_ BitVec 32)) )(let (($x236 (and (bvule (_ bv0 32) input.ind-%var1714X) (bvult input.ind-%var1714X (_ bv100 32)))))
 (let (($x68 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1714X)))
 (= $x68 $x236))))
 ))
 (let (($x48 (and $x38 $x167)))
 (let (($x304 (= $x48 true)))
 (let ((?x120 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x88 (= (_ bv0 32) ?x120)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x83)))
 (let ((?x56 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x272 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x56)))
 (let ((?x55 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x55)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x235 (and $x215 $x270)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x80 (and $x232 $x235)))
 (let (($x19 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x7 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x7 $x163)))
 (let (($x29 (not $x128)))
 (let (($x25 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (and $x178 $x25)))
 (let (($x101 (and (not $x171) $x29)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x60 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x60 $x24)))
 (let (($x146 (not $x23)))
 (let (($x229 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x50 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x50 $x229)))
 (let (($x91 (and (not $x70) $x146)))
 (let (($x106 (and (and (and (and (and (and $x91 $x101) $x72) $x19) $x80) $x272) $x21)))
 (let (($x285 (and $x106 $x88)))
 (let (($x18 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x97 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x97)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x79 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x97)))
 (let (($x71 (or false (or false (and (and true (or $x79 $x86)) (or $x31 $x18))))))
 (let (($x103 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x266 (and $x103 $x285)))
 (let (($x245 (= $x266 true)))
 (let (($x223 (= $x245 true)))
 (let (($x34 (= $x223 true)))
 (let ((?x136 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x112 (bvneg ?x136)))
 (let (($x39 (= ?x112 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x32 (= $x39 true)))
 (let (($x49 (= $x32 true)))
 (let (($x6 (= ?x112 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x51 (= $x6 true)))
 (let (($x260 (= $x51 true)))
 (let (($x208 (and $x260 $x49)))
 (let (($x176 (and $x208 $x34)))
 (let (($x263 (and $x176 $x304)))
 (let (($x141 (and $x263 $x214)))
 (let (($x303 (and $x141 $x174)))
 (let (($x26 (and $x303 $x228)))
 (let (($x199 (and $x26 $x253)))
 (let (($x75 (and $x199 $x218)))
 (let (($x211 (=> $x75 $x207)))
 (not $x211))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #x00000004)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #x00000002)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000103)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #x00000007)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000100)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #x00000004)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m2-1.0.1!20 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!21 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!20 (k!17 x!0)))
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000005 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000004 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
              (k!15 (bvmul #x00000004 x!0)))))
  (define-fun input.spec-%var-m1-1.0.1!18 ((x!0 (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!18 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!21 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 ((x!0
    (_ BitVec 32))) Bool
    (= x!0 #x00000000))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!19 (k!16 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000005 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000004 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) (input.spec-%var-m2-1.1.1 x!0) a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #x00000003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #x00000001 (bvmul #x00000004 x!0)))
                         (k!15 (bvmul #x00000004 x!0)))))
        (ite (input.spec-%var-m1-1.0.1 x!0) (input.spec-%var-m1-1.1.1 x!0) a!1))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.dst.llvm-%m2 () (_ BitVec 32)
    #xfafddfed)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32)
    #xdc44c5e4)
  (define-fun input.dst.llvm-%m1 () (_ BitVec 32)
    #xafb80000)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x09bdabe8)
  (define-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!15))
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x09bdabeb)
  (define-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32)
    #xdc44c5e7)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x09bdabe8)
  (define-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32)
    #xdc44c5e4)
  (define-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32)
    #x00000000)
  (define-fun k!15 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    #x00)
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #xafb80003 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80002 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80001 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xafb80000 (bvmul #x00000004 x!0))))))
  (define-fun input.spec-%var-m1-1.0.1!21 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!16 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m1-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m1-1.0.1!21 (k!16 x!0)))
  (define-fun input.spec-%var-m1-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #xafb80003 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80002 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80001 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xafb80000 (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m1-1.0.1 x!0)
             (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 x!0)
             a!1))))
  (define-fun input.spec-%var-m2-1.0.1!19 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun k!17 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (bvule #x00000064 x!0)
         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
         #x00000000))
  (define-fun input.spec-%var-m2-1.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m2-1.0.1!19 (k!17 x!0)))
  (define-fun input.spec-%var-m2-1.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (concat (k!15 (bvadd #xfafddff0 (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xfafddfef (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xfafddfee (bvmul #x00000004 x!0)))
              (k!15 (bvadd #xfafddfed (bvmul #x00000004 x!0))))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((x!0
    (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
      (let ((a!1 (concat (k!15 (bvadd #xfafddff0 (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xfafddfef (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xfafddfee (bvmul #x00000004 x!0)))
                         (k!15 (bvadd #xfafddfed (bvmul #x00000004 x!0))))))
        (ite (input.spec-%var-m2-1.0.1 x!0) (input.spec-%var-m2-1.1.1 x!0) a!1))))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!20 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1!20 (k!17 x!0)))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 ((x!0
    (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
      false))
  (define-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((x!0
    (_ BitVec 32))) Bool
    (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1!18 (k!16 x!0)))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 32
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x257 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x317 (=> $x257 true)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x313 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1813X)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var1813X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1813X)))
 (=> $x121 (= ?x107 ?x207))))))
 ))
 (let (($x14 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1812X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1812X)))
 (= $x121 $x253))))
 ))
 (let (($x314 (and $x14 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x284 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1807X)))
 (let ((?x299 (input.spec-%var-m1-1.1.1 input.ind-%var1807X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1807X)))
 (=> $x278 (= ?x299 ?x150))))))
 ))
 (let (($x159 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1806X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1806X)))
 (= $x278 $x279))))
 ))
 (let (($x125 (and $x159 $x284)))
 (let (($x155 (= $x125 true)))
 (let (($x206 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1801X (_ bv4 32))))
 (let ((?x169 (bvadd ?x36 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x169))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv2 32))) ?x12)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv3 32))) ?x273)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var1801X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1801X)))
 (=> $x121 (= ?x107 ?x87))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1800X) (bvult input.ind-%var1800X (_ bv100 32)))))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1800X)))
 (= $x121 $x59))))
 ))
 (let (($x184 (and $x221 $x206)))
 (let (($x255 (= $x184 true)))
 (let (($x81 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1795X (_ bv4 32))))
 (let ((?x67 (bvadd ?x36 input.dst.llvm-%m1)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x67))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv2 32))) ?x153)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv3 32))) ?x66)))
 (let ((?x299 (input.spec-%var-m1-1.1.1 input.ind-%var1795X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1795X)))
 (=> $x278 (= ?x299 ?x170))))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1794X) (bvult input.ind-%var1794X (_ bv100 32)))))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1794X)))
 (= $x278 $x59))))
 ))
 (let (($x265 (and $x302 $x81)))
 (let (($x173 (= $x265 true)))
 (let (($x119 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1789X (_ bv4 32))))
 (let ((?x169 (bvadd ?x36 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x169))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv2 32))) ?x12)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv3 32))) ?x273)))
 (let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1789X)))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1789X)))
 (=> $x253 (= ?x207 ?x87))))))))))
 ))
 (let (($x114 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X (_ bv100 32)))))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1788X)))
 (= $x253 $x59))))
 ))
 (let (($x62 (and $x114 $x119)))
 (let (($x259 (= $x62 true)))
 (let (($x10 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1783X (_ bv4 32))))
 (let ((?x67 (bvadd ?x36 input.dst.llvm-%m1)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x67))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv2 32))) ?x153)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv3 32))) ?x66)))
 (let ((?x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1783X)))
 (let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1783X)))
 (=> $x279 (= ?x150 ?x170))))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X (_ bv100 32)))))
 (let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1782X)))
 (= $x279 $x59))))
 ))
 (let (($x217 (and $x300 $x10)))
 (let (($x161 (= $x217 true)))
 (let (($x196 (= $x257 true)))
 (let (($x290 (= $x196 true)))
 (let (($x154 (= $x290 true)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x241 (= (_ bv0 32) ?x176)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x223)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x106 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x83 $x120)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x264 $x88)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x232 $x215)))
 (let (($x55 (not $x288)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x193 $x19)))
 (let (($x235 (and (not $x213) $x55)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x29 $x101)))
 (let (($x16 (not $x203)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x46 (and (not $x128) $x16)))
 (let (($x73 (and (and (and (and (and (and $x46 $x235) $x175) $x272) $x285) $x245) $x34)))
 (let (($x38 (and $x73 $x241)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x166 (or false (or false (and (and true (or $x229 $x70)) (or $x146 $x91))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x28 (and $x163 $x38)))
 (let (($x305 (= $x28 true)))
 (let (($x143 (= $x305 true)))
 (let (($x180 (= $x143 true)))
 (let (($x44 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x145 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x145 $x44)))
 (let (($x79 (= $x97 true)))
 (let (($x9 (= $x79 true)))
 (let (($x86 (= $x9 true)))
 (let ((?x188 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x136 (bvneg ?x188)))
 (let (($x76 (= ?x136 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x39 (= $x76 true)))
 (let (($x32 (= $x39 true)))
 (let (($x112 (= ?x136 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x6 (= $x112 true)))
 (let (($x51 (= $x6 true)))
 (let (($x49 (and $x51 $x32)))
 (let (($x41 (and $x49 $x86)))
 (let (($x140 (and $x41 $x180)))
 (let (($x157 (and $x140 $x154)))
 (let (($x286 (and $x157 $x154)))
 (let (($x227 (and $x286 $x161)))
 (let (($x149 (and $x227 $x259)))
 (let (($x191 (and $x149 $x173)))
 (let (($x61 (and $x191 $x255)))
 (let (($x268 (and $x61 $x155)))
 (let (($x316 (and $x268 $x315)))
 (let (($x320 (=> $x316 $x319)))
 (not $x320))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x257 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x317 (=> $x257 true)))
 (let (($x318 (= $x317 true)))
 (let (($x319 (= $x318 true)))
 (let (($x313 (forall ((input.ind-%var1813X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1813X)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var1813X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1813X)))
 (=> $x121 (= ?x107 ?x207))))))
 ))
 (let (($x14 (forall ((input.ind-%var1812X (_ BitVec 32)) )(let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1812X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1812X)))
 (= $x121 $x253))))
 ))
 (let (($x314 (and $x14 $x313)))
 (let (($x315 (= $x314 true)))
 (let (($x284 (forall ((input.ind-%var1807X (_ BitVec 32)) )(let ((?x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1807X)))
 (let ((?x299 (input.spec-%var-m1-1.1.1 input.ind-%var1807X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1807X)))
 (=> $x278 (= ?x299 ?x150))))))
 ))
 (let (($x159 (forall ((input.ind-%var1806X (_ BitVec 32)) )(let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1806X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1806X)))
 (= $x278 $x279))))
 ))
 (let (($x125 (and $x159 $x284)))
 (let (($x155 (= $x125 true)))
 (let (($x206 (forall ((input.ind-%var1801X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1801X (_ bv4 32))))
 (let ((?x169 (bvadd ?x36 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x169))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv2 32))) ?x12)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv3 32))) ?x273)))
 (let ((?x107 (input.spec-%var-m2-1.1.1 input.ind-%var1801X)))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1801X)))
 (=> $x121 (= ?x107 ?x87))))))))))
 ))
 (let (($x221 (forall ((input.ind-%var1800X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1800X) (bvult input.ind-%var1800X (_ bv100 32)))))
 (let (($x121 (input.spec-%var-m2-1.0.1 input.ind-%var1800X)))
 (= $x121 $x59))))
 ))
 (let (($x184 (and $x221 $x206)))
 (let (($x255 (= $x184 true)))
 (let (($x81 (forall ((input.ind-%var1795X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1795X (_ bv4 32))))
 (let ((?x67 (bvadd ?x36 input.dst.llvm-%m1)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x67))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv2 32))) ?x153)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv3 32))) ?x66)))
 (let ((?x299 (input.spec-%var-m1-1.1.1 input.ind-%var1795X)))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1795X)))
 (=> $x278 (= ?x299 ?x170))))))))))
 ))
 (let (($x302 (forall ((input.ind-%var1794X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1794X) (bvult input.ind-%var1794X (_ bv100 32)))))
 (let (($x278 (input.spec-%var-m1-1.0.1 input.ind-%var1794X)))
 (= $x278 $x59))))
 ))
 (let (($x265 (and $x302 $x81)))
 (let (($x173 (= $x265 true)))
 (let (($x119 (forall ((input.ind-%var1789X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1789X (_ bv4 32))))
 (let ((?x169 (bvadd ?x36 input.dst.llvm-%m2)))
 (let ((?x12 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x169))))
 (let ((?x273 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv2 32))) ?x12)))
 (let ((?x87 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x169 (_ bv3 32))) ?x273)))
 (let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1789X)))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1789X)))
 (=> $x253 (= ?x207 ?x87))))))))))
 ))
 (let (($x114 (forall ((input.ind-%var1788X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1788X) (bvult input.ind-%var1788X (_ bv100 32)))))
 (let (($x253 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1788X)))
 (= $x253 $x59))))
 ))
 (let (($x62 (and $x114 $x119)))
 (let (($x259 (= $x62 true)))
 (let (($x10 (forall ((input.ind-%var1783X (_ BitVec 32)) )(let ((?x36 (bvmul input.ind-%var1783X (_ bv4 32))))
 (let ((?x67 (bvadd ?x36 input.dst.llvm-%m1)))
 (let ((?x153 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x67))))
 (let ((?x66 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv2 32))) ?x153)))
 (let ((?x170 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x67 (_ bv3 32))) ?x66)))
 (let ((?x150 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1783X)))
 (let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1783X)))
 (=> $x279 (= ?x150 ?x170))))))))))
 ))
 (let (($x300 (forall ((input.ind-%var1782X (_ BitVec 32)) )(let (($x59 (and (bvule (_ bv0 32) input.ind-%var1782X) (bvult input.ind-%var1782X (_ bv100 32)))))
 (let (($x279 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1782X)))
 (= $x279 $x59))))
 ))
 (let (($x217 (and $x300 $x10)))
 (let (($x161 (= $x217 true)))
 (let (($x196 (= $x257 true)))
 (let (($x290 (= $x196 true)))
 (let (($x154 (= $x290 true)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x241 (= (_ bv0 32) ?x176)))
 (let ((?x223 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x223)))
 (let ((?x266 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x266)))
 (let ((?x106 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x106)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x88 (and $x83 $x120)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x264 $x88)))
 (let (($x272 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x232 $x215)))
 (let (($x55 (not $x288)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x193 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x193 $x19)))
 (let (($x235 (and (not $x213) $x55)))
 (let (($x101 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x29 $x101)))
 (let (($x16 (not $x203)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x46 (and (not $x128) $x16)))
 (let (($x73 (and (and (and (and (and (and $x46 $x235) $x175) $x272) $x285) $x245) $x34)))
 (let (($x38 (and $x73 $x241)))
 (let (($x91 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x50 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x50)))
 (let (($x70 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x229 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x50)))
 (let (($x166 (or false (or false (and (and true (or $x229 $x70)) (or $x146 $x91))))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x166)))
 (let (($x28 (and $x163 $x38)))
 (let (($x305 (= $x28 true)))
 (let (($x143 (= $x305 true)))
 (let (($x180 (= $x143 true)))
 (let (($x44 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x145 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x97 (and $x145 $x44)))
 (let (($x79 (= $x97 true)))
 (let (($x9 (= $x79 true)))
 (let (($x86 (= $x9 true)))
 (let ((?x188 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x136 (bvneg ?x188)))
 (let (($x76 (= ?x136 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x39 (= $x76 true)))
 (let (($x32 (= $x39 true)))
 (let (($x112 (= ?x136 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x6 (= $x112 true)))
 (let (($x51 (= $x6 true)))
 (let (($x49 (and $x51 $x32)))
 (let (($x41 (and $x49 $x86)))
 (let (($x140 (and $x41 $x180)))
 (let (($x157 (and $x140 $x154)))
 (let (($x286 (and $x157 $x154)))
 (let (($x227 (and $x286 $x161)))
 (let (($x149 (and $x227 $x259)))
 (let (($x191 (and $x149 $x173)))
 (let (($x61 (and $x191 $x255)))
 (let (($x268 (and $x61 $x155)))
 (let (($x316 (and $x268 $x315)))
 (let (($x320 (=> $x316 $x319)))
 (not $x320))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 33
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x324 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x325 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x324)))
 (let ((?x322 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x323 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x322)))
 (let (($x326 (= ?x323 ?x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x309 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1849X)))
 (let ((?x243 (input.spec-%var-m2-1.1.1 input.ind-%var1849X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1849X)))
 (=> $x5 (= ?x243 ?x125))))))
 ))
 (let (($x142 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1848X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1848X)))
 (= $x5 $x247))))
 ))
 (let (($x192 (and $x142 $x309)))
 (let (($x310 (= $x192 true)))
 (let (($x82 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1843X)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1843X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1843X)))
 (=> $x306 (= ?x231 ?x26))))))
 ))
 (let (($x307 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1842X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1842X)))
 (= $x306 $x238))))
 ))
 (let (($x283 (and $x307 $x82)))
 (let (($x52 (= $x283 true)))
 (let (($x64 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1837X (_ bv4 32))))
 (let ((?x293 (bvadd ?x251 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x293))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv2 32))) ?x84)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv3 32))) ?x237)))
 (let ((?x243 (input.spec-%var-m2-1.1.1 input.ind-%var1837X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1837X)))
 (=> $x5 (= ?x243 ?x211))))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1836X) (bvult input.ind-%var1836X (_ bv100 32)))))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1836X)))
 (= $x5 $x256))))
 ))
 (let (($x164 (and $x111 $x64)))
 (let (($x195 (= $x164 true)))
 (let (($x209 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1831X (_ bv4 32))))
 (let ((?x205 (bvadd ?x251 input.dst.llvm-%m1)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x149)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x302)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1831X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1831X)))
 (=> $x306 (= ?x231 ?x225))))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X (_ bv100 32)))))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1830X)))
 (= $x306 $x256))))
 ))
 (let (($x240 (and $x172 $x209)))
 (let (($x269 (= $x240 true)))
 (let (($x109 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1825X (_ bv4 32))))
 (let ((?x293 (bvadd ?x251 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x293))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv2 32))) ?x84)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv3 32))) ?x237)))
 (let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1825X)))
 (let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1825X)))
 (=> $x247 (= ?x125 ?x211))))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1824X) (bvult input.ind-%var1824X (_ bv100 32)))))
 (let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1824X)))
 (= $x247 $x256))))
 ))
 (let (($x30 (and $x159 $x109)))
 (let (($x48 (= $x30 true)))
 (let (($x173 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1819X (_ bv4 32))))
 (let ((?x205 (bvadd ?x251 input.dst.llvm-%m1)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x149)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x302)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1819X)))
 (let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1819X)))
 (=> $x238 (= ?x26 ?x225))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X (_ bv100 32)))))
 (let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1818X)))
 (= $x238 $x256))))
 ))
 (let (($x191 (and $x153 $x173)))
 (let (($x121 (= $x191 true)))
 (let ((?x196 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x290 (bvneg ?x196)))
 (let (($x167 (= ?x290 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x187 (= $x167 true)))
 (let (($x59 (= $x187 true)))
 (let (($x157 (= ?x290 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= $x157 true)))
 (let (($x276 (= $x286 true)))
 (let (($x34 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x260 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x15 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x258 (and $x15 $x260)))
 (let (($x305 (and $x258 $x34)))
 (let (($x143 (= $x305 true)))
 (let (($x180 (= $x143 true)))
 (let (($x140 (= $x180 true)))
 (let (($x73 (= $x34 true)))
 (let (($x176 (= $x73 true)))
 (let (($x241 (= $x176 true)))
 (let ((?x219 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x56 (= (_ bv0 32) ?x219)))
 (let ((?x80 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x80)))
 (let ((?x235 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x213 $x215)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x19 $x288)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x72 (not $x128)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x171 $x166)))
 (let (($x101 (and (not $x163) $x72)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x146)))
 (let (($x91 (not $x23)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x98 $x145)))
 (let (($x25 (and (not $x60) $x91)))
 (let (($x106 (and (and (and (and (and (and $x25 $x101) $x16) $x193) $x55) $x68) $x175)))
 (let (($x120 (and $x106 $x56)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x103 (or false (or false (and (and true (or $x9 $x86)) (or $x100 $x7))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x88 (and $x117 $x120)))
 (let (($x285 (= $x88 true)))
 (let (($x216 (= $x285 true)))
 (let (($x266 (= $x216 true)))
 (let (($x194 (= $x258 true)))
 (let (($x112 (= $x194 true)))
 (let (($x76 (= $x112 true)))
 (let (($x245 (and $x76 $x266)))
 (let (($x38 (and $x245 $x241)))
 (let (($x28 (and $x38 $x241)))
 (let (($x158 (and $x28 $x140)))
 (let (($x279 (and $x158 $x276)))
 (let (($x292 (and $x279 $x59)))
 (let (($x277 (and $x292 $x121)))
 (let (($x296 (and $x277 $x48)))
 (let (($x233 (and $x296 $x269)))
 (let (($x118 (and $x233 $x195)))
 (let (($x42 (and $x118 $x52)))
 (let (($x262 (and $x42 $x310)))
 (let (($x329 (=> $x262 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x324 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x325 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x324)))
 (let ((?x322 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x323 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x322)))
 (let (($x326 (= ?x323 ?x325)))
 (let (($x327 (= $x326 true)))
 (let (($x328 (= $x327 true)))
 (let (($x309 (forall ((input.ind-%var1849X (_ BitVec 32)) )(let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1849X)))
 (let ((?x243 (input.spec-%var-m2-1.1.1 input.ind-%var1849X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1849X)))
 (=> $x5 (= ?x243 ?x125))))))
 ))
 (let (($x142 (forall ((input.ind-%var1848X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1848X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1848X)))
 (= $x5 $x247))))
 ))
 (let (($x192 (and $x142 $x309)))
 (let (($x310 (= $x192 true)))
 (let (($x82 (forall ((input.ind-%var1843X (_ BitVec 32)) )(let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1843X)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1843X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1843X)))
 (=> $x306 (= ?x231 ?x26))))))
 ))
 (let (($x307 (forall ((input.ind-%var1842X (_ BitVec 32)) )(let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1842X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1842X)))
 (= $x306 $x238))))
 ))
 (let (($x283 (and $x307 $x82)))
 (let (($x52 (= $x283 true)))
 (let (($x64 (forall ((input.ind-%var1837X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1837X (_ bv4 32))))
 (let ((?x293 (bvadd ?x251 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x293))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv2 32))) ?x84)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv3 32))) ?x237)))
 (let ((?x243 (input.spec-%var-m2-1.1.1 input.ind-%var1837X)))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1837X)))
 (=> $x5 (= ?x243 ?x211))))))))))
 ))
 (let (($x111 (forall ((input.ind-%var1836X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1836X) (bvult input.ind-%var1836X (_ bv100 32)))))
 (let (($x5 (input.spec-%var-m2-1.0.1 input.ind-%var1836X)))
 (= $x5 $x256))))
 ))
 (let (($x164 (and $x111 $x64)))
 (let (($x195 (= $x164 true)))
 (let (($x209 (forall ((input.ind-%var1831X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1831X (_ bv4 32))))
 (let ((?x205 (bvadd ?x251 input.dst.llvm-%m1)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x149)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x302)))
 (let ((?x231 (input.spec-%var-m1-1.1.1 input.ind-%var1831X)))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1831X)))
 (=> $x306 (= ?x231 ?x225))))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1830X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1830X) (bvult input.ind-%var1830X (_ bv100 32)))))
 (let (($x306 (input.spec-%var-m1-1.0.1 input.ind-%var1830X)))
 (= $x306 $x256))))
 ))
 (let (($x240 (and $x172 $x209)))
 (let (($x269 (= $x240 true)))
 (let (($x109 (forall ((input.ind-%var1825X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1825X (_ bv4 32))))
 (let ((?x293 (bvadd ?x251 input.dst.llvm-%m2)))
 (let ((?x84 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x293))))
 (let ((?x237 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv2 32))) ?x84)))
 (let ((?x211 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x293 (_ bv3 32))) ?x237)))
 (let ((?x125 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1825X)))
 (let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1825X)))
 (=> $x247 (= ?x125 ?x211))))))))))
 ))
 (let (($x159 (forall ((input.ind-%var1824X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1824X) (bvult input.ind-%var1824X (_ bv100 32)))))
 (let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1824X)))
 (= $x247 $x256))))
 ))
 (let (($x30 (and $x159 $x109)))
 (let (($x48 (= $x30 true)))
 (let (($x173 (forall ((input.ind-%var1819X (_ BitVec 32)) )(let ((?x251 (bvmul input.ind-%var1819X (_ bv4 32))))
 (let ((?x205 (bvadd ?x251 input.dst.llvm-%m1)))
 (let ((?x149 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x205))))
 (let ((?x302 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv2 32))) ?x149)))
 (let ((?x225 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x205 (_ bv3 32))) ?x302)))
 (let ((?x26 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1819X)))
 (let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1819X)))
 (=> $x238 (= ?x26 ?x225))))))))))
 ))
 (let (($x153 (forall ((input.ind-%var1818X (_ BitVec 32)) )(let (($x256 (and (bvule (_ bv0 32) input.ind-%var1818X) (bvult input.ind-%var1818X (_ bv100 32)))))
 (let (($x238 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1818X)))
 (= $x238 $x256))))
 ))
 (let (($x191 (and $x153 $x173)))
 (let (($x121 (= $x191 true)))
 (let ((?x196 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x290 (bvneg ?x196)))
 (let (($x167 (= ?x290 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x187 (= $x167 true)))
 (let (($x59 (= $x187 true)))
 (let (($x157 (= ?x290 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x286 (= $x157 true)))
 (let (($x276 (= $x286 true)))
 (let (($x34 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x260 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x15 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x258 (and $x15 $x260)))
 (let (($x305 (and $x258 $x34)))
 (let (($x143 (= $x305 true)))
 (let (($x180 (= $x143 true)))
 (let (($x140 (= $x180 true)))
 (let (($x73 (= $x34 true)))
 (let (($x176 (= $x73 true)))
 (let (($x241 (= $x176 true)))
 (let ((?x219 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x56 (= (_ bv0 32) ?x219)))
 (let ((?x80 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x175 (= (_ bv0 32) ?x80)))
 (let ((?x235 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x235)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x215 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x213 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x213 $x215)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x19 $x288)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x72 (not $x128)))
 (let (($x166 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x171 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x163 (and $x171 $x166)))
 (let (($x101 (and (not $x163) $x72)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x146)))
 (let (($x91 (not $x23)))
 (let (($x145 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x60 (and $x98 $x145)))
 (let (($x25 (and (not $x60) $x91)))
 (let (($x106 (and (and (and (and (and (and $x25 $x101) $x16) $x193) $x55) $x68) $x175)))
 (let (($x120 (and $x106 $x56)))
 (let (($x7 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x79 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x79)))
 (let (($x86 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x79)))
 (let (($x103 (or false (or false (and (and true (or $x9 $x86)) (or $x100 $x7))))))
 (let (($x117 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x103)))
 (let (($x88 (and $x117 $x120)))
 (let (($x285 (= $x88 true)))
 (let (($x216 (= $x285 true)))
 (let (($x266 (= $x216 true)))
 (let (($x194 (= $x258 true)))
 (let (($x112 (= $x194 true)))
 (let (($x76 (= $x112 true)))
 (let (($x245 (and $x76 $x266)))
 (let (($x38 (and $x245 $x241)))
 (let (($x28 (and $x38 $x241)))
 (let (($x158 (and $x28 $x140)))
 (let (($x279 (and $x158 $x276)))
 (let (($x292 (and $x279 $x59)))
 (let (($x277 (and $x292 $x121)))
 (let (($x296 (and $x277 $x48)))
 (let (($x233 (and $x296 $x269)))
 (let (($x118 (and $x233 $x195)))
 (let (($x42 (and $x118 $x52)))
 (let (($x262 (and $x42 $x310)))
 (let (($x329 (=> $x262 $x328)))
 (not $x329)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 34
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(assert
 (let ((?x68 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x68)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x235 (= (_ bv0 32) ?x83)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x264 $x270)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x193 $x232)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x72 (not $x128)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x166 $x163)))
 (let (($x272 (and (not $x29) $x72)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x146)))
 (let (($x91 (not $x23)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x254 $x70)))
 (let (($x171 (and (not $x178) $x91)))
 (let (($x120 (and (and (and (and (and (and $x171 $x272) $x16) $x46) $x215) $x55) $x235)))
 (let (($x88 (and $x120 $x21)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x98 (or false (or false (and (and true (or $x41 $x242)) (or $x71 $x50))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x281 (and $x60 $x88)))
 (let (($x58 (= $x281 true)))
 (let (($x179 (= $x58 true)))
 (let (($x134 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x144 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1873X)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1873X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1873X)))
 (=> $x278 (= ?x185 ?x144))))))
 ))
 (let (($x17 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x14 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1872X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1872X)))
 (= $x278 $x14))))
 ))
 (let (($x115 (and $x17 $x134)))
 (let (($x304 (= $x115 true)))
 (let (($x297 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1867X)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1867X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1867X)))
 (=> $x195 (= ?x142 ?x221))))))
 ))
 (let (($x139 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1866X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1866X)))
 (= $x195 $x165))))
 ))
 (let (($x317 (and $x139 $x297)))
 (let (($x318 (= $x317 true)))
 (let (($x67 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var1861X (_ bv4 32))))
 (let ((?x32 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x214))))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x195 (= ?x142 ?x66)))))))))
 ))
 (let (($x283 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var1860X) (bvult input.ind-%var1860X (_ bv100 32)))))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x195 $x265))))
 ))
 (let (($x102 (and $x283 $x67)))
 (let (($x253 (= $x102 true)))
 (let (($x111 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var1855X (_ bv4 32))))
 (let ((?x296 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x231))))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1855X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1855X)))
 (=> $x278 (= ?x185 ?x233)))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv100 32)))))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1854X)))
 (= $x278 $x265))))
 ))
 (let (($x243 (and $x191 $x111)))
 (let (($x93 (= $x243 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x305 (concat ?x28 (concat ?x176 (concat ?x236 ?x266)))))
 (let (($x217 (= ?x305 input.dst.llvm-%m1)))
 (let (($x227 (= $x217 true)))
 (let (($x251 (= $x227 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x286 (concat ?x290 (concat ?x127 ?x140)))))
 (let (($x256 (= ?x276 input.dst.llvm-%m2)))
 (let (($x174 (= $x256 true)))
 (let (($x153 (= $x174 true)))
 (let (($x279 (= input.dst.llvm-%m2 ?x276)))
 (let (($x143 (= input.dst.llvm-%m1 ?x305)))
 (let (($x6 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x161 $x6)))
 (let (($x167 (and (and $x260 $x143) $x279)))
 (let (($x292 (and (and (and $x60 true) $x88) $x167)))
 (let (($x201 (and true $x292)))
 (let (($x238 (= $x201 true)))
 (let (($x303 (= $x238 true)))
 (let (($x152 (= $x303 true)))
 (let (($x258 (= $x260 true)))
 (let (($x194 (= $x258 true)))
 (let (($x112 (= $x194 true)))
 (let (($x249 (and $x112 $x152)))
 (let (($x26 (and $x249 $x153)))
 (let (($x205 (and $x26 $x251)))
 (let (($x27 (and $x205 $x93)))
 (let (($x92 (and $x27 $x253)))
 (let (($x314 (and $x92 $x318)))
 (let (($x156 (and $x314 $x304)))
 (let (($x22 (=> $x156 $x179)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(assert
 (let ((?x68 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x68)))
 (let ((?x83 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x235 (= (_ bv0 32) ?x83)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x213 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x270 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x213)))
 (let (($x264 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (and $x264 $x270)))
 (let (($x193 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x215 (and $x193 $x232)))
 (let (($x46 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x16 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x128 (and $x18 $x37)))
 (let (($x72 (not $x128)))
 (let (($x163 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x166 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x166 $x163)))
 (let (($x272 (and (not $x29) $x72)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x23 (and $x24 $x146)))
 (let (($x91 (not $x23)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x178 (and $x254 $x70)))
 (let (($x171 (and (not $x178) $x91)))
 (let (($x120 (and (and (and (and (and (and $x171 $x272) $x16) $x46) $x215) $x55) $x235)))
 (let (($x88 (and $x120 $x21)))
 (let (($x50 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x86 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x71 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x86)))
 (let (($x242 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x41 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x86)))
 (let (($x98 (or false (or false (and (and true (or $x41 $x242)) (or $x71 $x50))))))
 (let (($x60 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x98)))
 (let (($x281 (and $x60 $x88)))
 (let (($x58 (= $x281 true)))
 (let (($x179 (= $x58 true)))
 (let (($x134 (forall ((input.ind-%var1873X (_ BitVec 32)) )(let ((?x144 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1873X)))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1873X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1873X)))
 (=> $x278 (= ?x185 ?x144))))))
 ))
 (let (($x17 (forall ((input.ind-%var1872X (_ BitVec 32)) )(let (($x14 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1872X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1872X)))
 (= $x278 $x14))))
 ))
 (let (($x115 (and $x17 $x134)))
 (let (($x304 (= $x115 true)))
 (let (($x297 (forall ((input.ind-%var1867X (_ BitVec 32)) )(let ((?x221 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1867X)))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1867X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1867X)))
 (=> $x195 (= ?x142 ?x221))))))
 ))
 (let (($x139 (forall ((input.ind-%var1866X (_ BitVec 32)) )(let (($x165 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1866X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1866X)))
 (= $x195 $x165))))
 ))
 (let (($x317 (and $x139 $x297)))
 (let (($x318 (= $x317 true)))
 (let (($x67 (forall ((input.ind-%var1861X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var1861X (_ bv4 32))))
 (let ((?x32 (bvadd ?x48 input.dst.llvm-%m1)))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv1 32))) (select input.dst.llvm-mem ?x32))))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x32 (_ bv2 32))) ?x214))))
 (let ((?x142 (input.spec-%var-m1-1.1.1 input.ind-%var1861X)))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1861X)))
 (=> $x195 (= ?x142 ?x66)))))))))
 ))
 (let (($x283 (forall ((input.ind-%var1860X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var1860X) (bvult input.ind-%var1860X (_ bv100 32)))))
 (let (($x195 (input.spec-%var-m1-1.0.1 input.ind-%var1860X)))
 (= $x195 $x265))))
 ))
 (let (($x102 (and $x283 $x67)))
 (let (($x253 (= $x102 true)))
 (let (($x111 (forall ((input.ind-%var1855X (_ BitVec 32)) )(let ((?x48 (bvmul input.ind-%var1855X (_ bv4 32))))
 (let ((?x296 (bvadd ?x48 input.dst.llvm-%m2)))
 (let ((?x231 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv1 32))) (select input.dst.llvm-mem ?x296))))
 (let ((?x233 (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x296 (_ bv2 32))) ?x231))))
 (let ((?x185 (input.spec-%var-m2-1.1.1 input.ind-%var1855X)))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1855X)))
 (=> $x278 (= ?x185 ?x233)))))))))
 ))
 (let (($x191 (forall ((input.ind-%var1854X (_ BitVec 32)) )(let (($x265 (and (bvule (_ bv0 32) input.ind-%var1854X) (bvult input.ind-%var1854X (_ bv100 32)))))
 (let (($x278 (input.spec-%var-m2-1.0.1 input.ind-%var1854X)))
 (= $x278 $x265))))
 ))
 (let (($x243 (and $x191 $x111)))
 (let (($x93 (= $x243 true)))
 (let ((?x266 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x236 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x176 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x305 (concat ?x28 (concat ?x176 (concat ?x236 ?x266)))))
 (let (($x217 (= ?x305 input.dst.llvm-%m1)))
 (let (($x227 (= $x217 true)))
 (let (($x251 (= $x227 true)))
 (let ((?x140 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x286 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x276 (concat ?x286 (concat ?x290 (concat ?x127 ?x140)))))
 (let (($x256 (= ?x276 input.dst.llvm-%m2)))
 (let (($x174 (= $x256 true)))
 (let (($x153 (= $x174 true)))
 (let (($x279 (= input.dst.llvm-%m2 ?x276)))
 (let (($x143 (= input.dst.llvm-%m1 ?x305)))
 (let (($x6 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x161 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x260 (and $x161 $x6)))
 (let (($x167 (and (and $x260 $x143) $x279)))
 (let (($x292 (and (and (and $x60 true) $x88) $x167)))
 (let (($x201 (and true $x292)))
 (let (($x238 (= $x201 true)))
 (let (($x303 (= $x238 true)))
 (let (($x152 (= $x303 true)))
 (let (($x258 (= $x260 true)))
 (let (($x194 (= $x258 true)))
 (let (($x112 (= $x194 true)))
 (let (($x249 (and $x112 $x152)))
 (let (($x26 (and $x249 $x153)))
 (let (($x205 (and $x26 $x251)))
 (let (($x27 (and $x205 $x93)))
 (let (($x92 (and $x27 $x253)))
 (let (($x314 (and $x92 $x318)))
 (let (($x156 (and $x314 $x304)))
 (let (($x22 (=> $x156 $x179)))
 (not $x22))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 35
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x200 (= (_ bv0 2) ?x255)))
 (let (($x202 (= $x200 true)))
 (let (($x330 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let ((?x110 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1897X)))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var1897X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1897X)))
 (=> $x173 (= ?x233 ?x110))))))
 ))
 (let (($x151 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x164 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1896X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1896X)))
 (= $x173 $x164))))
 ))
 (let (($x184 (and $x151 $x330)))
 (let (($x316 (= $x184 true)))
 (let (($x325 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1891X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var1891X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1891X)))
 (=> $x14 (= ?x58 ?x323))))))
 ))
 (let (($x224 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1890X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1890X)))
 (= $x14 $x64))))
 ))
 (let (($x328 (and $x224 $x325)))
 (let (($x116 (= $x328 true)))
 (let (($x45 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1885X (_ bv4 32))))
 (let ((?x78 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x62))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var1885X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1885X)))
 (=> $x14 (= ?x58 ?x90)))))))))
 ))
 (let (($x115 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X (_ bv100 32)))))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1884X)))
 (= $x14 $x135))))
 ))
 (let (($x53 (and $x115 $x45)))
 (let (($x105 (= $x53 true)))
 (let (($x150 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1879X (_ bv4 32))))
 (let ((?x214 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x300))))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var1879X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1879X)))
 (=> $x173 (= ?x233 ?x114)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X (_ bv100 32)))))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1878X)))
 (= $x173 $x135))))
 ))
 (let (($x96 (and $x172 $x150)))
 (let (($x297 (= $x96 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x292 (concat ?x276 (concat ?x140 ?x158)))))
 (let (($x205 (= ?x201 input.dst.llvm-%m2)))
 (let (($x129 (= $x205 true)))
 (let (($x278 (= $x129 true)))
 (let (($x238 (= input.dst.llvm-%m2 ?x201)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x79 (concat ?x112 (concat ?x6 ?x39)))))
 (let (($x196 (= input.dst.llvm-%m1 ?x145)))
 (let (($x7 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x100 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x50 (and $x100 $x7)))
 (let (($x152 (and (and $x50 $x196) $x238)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x236)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x245 (= (_ bv0 32) ?x176)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x88 $x285)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x21 $x38)))
 (let (($x68 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x213 $x270)))
 (let (($x83 (and (not $x232) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x254 $x70)))
 (let (($x19 (and (not $x175) $x193)))
 (let (($x157 (and (and (and (and (and (and $x19 $x83) $x120) $x68) $x28) $x73) $x245)))
 (let (($x286 (and $x157 $x266)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x80 (or false (or false (and (and true (or $x91 $x171)) (or $x18 $x37))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x174 (and (and (and $x16 true) $x286) $x152)))
 (let (($x153 (and true $x174)))
 (let (($x26 (= $x153 true)))
 (let (($x217 (= $x26 true)))
 (let (($x227 (= $x217 true)))
 (let (($x229 (= $x50 true)))
 (let (($x103 (= $x229 true)))
 (let (($x117 (= $x103 true)))
 (let (($x86 (= ?x145 input.dst.llvm-%m1)))
 (let (($x41 (= $x86 true)))
 (let (($x97 (= $x41 true)))
 (let (($x98 (and $x97 $x117)))
 (let (($x251 (and $x98 $x227)))
 (let (($x81 (and $x251 $x278)))
 (let (($x317 (and $x81 $x297)))
 (let (($x237 (and $x317 $x105)))
 (let (($x282 (and $x237 $x116)))
 (let (($x12 (and $x282 $x316)))
 (let (($x274 (=> $x12 $x202)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x255 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x200 (= (_ bv0 2) ?x255)))
 (let (($x202 (= $x200 true)))
 (let (($x330 (forall ((input.ind-%var1897X (_ BitVec 32)) )(let ((?x110 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1897X)))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var1897X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1897X)))
 (=> $x173 (= ?x233 ?x110))))))
 ))
 (let (($x151 (forall ((input.ind-%var1896X (_ BitVec 32)) )(let (($x164 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1896X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1896X)))
 (= $x173 $x164))))
 ))
 (let (($x184 (and $x151 $x330)))
 (let (($x316 (= $x184 true)))
 (let (($x325 (forall ((input.ind-%var1891X (_ BitVec 32)) )(let ((?x323 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1891X)))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var1891X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1891X)))
 (=> $x14 (= ?x58 ?x323))))))
 ))
 (let (($x224 (forall ((input.ind-%var1890X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1890X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1890X)))
 (= $x14 $x64))))
 ))
 (let (($x328 (and $x224 $x325)))
 (let (($x116 (= $x328 true)))
 (let (($x45 (forall ((input.ind-%var1885X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1885X (_ bv4 32))))
 (let ((?x78 (bvadd ?x8 input.dst.llvm-%m1)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv1 32))) (select input.dst.llvm-mem ?x78))))
 (let ((?x90 (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x78 (_ bv2 32))) ?x62))))
 (let ((?x58 (input.spec-%var-m1-1.1.1 input.ind-%var1885X)))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1885X)))
 (=> $x14 (= ?x58 ?x90)))))))))
 ))
 (let (($x115 (forall ((input.ind-%var1884X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1884X) (bvult input.ind-%var1884X (_ bv100 32)))))
 (let (($x14 (input.spec-%var-m1-1.0.1 input.ind-%var1884X)))
 (= $x14 $x135))))
 ))
 (let (($x53 (and $x115 $x45)))
 (let (($x105 (= $x53 true)))
 (let (($x150 (forall ((input.ind-%var1879X (_ BitVec 32)) )(let ((?x8 (bvmul input.ind-%var1879X (_ bv4 32))))
 (let ((?x214 (bvadd ?x8 input.dst.llvm-%m2)))
 (let ((?x300 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x114 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x300))))
 (let ((?x233 (input.spec-%var-m2-1.1.1 input.ind-%var1879X)))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1879X)))
 (=> $x173 (= ?x233 ?x114)))))))))
 ))
 (let (($x172 (forall ((input.ind-%var1878X (_ BitVec 32)) )(let (($x135 (and (bvule (_ bv0 32) input.ind-%var1878X) (bvult input.ind-%var1878X (_ bv100 32)))))
 (let (($x173 (input.spec-%var-m2-1.0.1 input.ind-%var1878X)))
 (= $x173 $x135))))
 ))
 (let (($x96 (and $x172 $x150)))
 (let (($x297 (= $x96 true)))
 (let ((?x158 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x140 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x276 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x201 (concat ?x292 (concat ?x276 (concat ?x140 ?x158)))))
 (let (($x205 (= ?x201 input.dst.llvm-%m2)))
 (let (($x129 (= $x205 true)))
 (let (($x278 (= $x129 true)))
 (let (($x238 (= input.dst.llvm-%m2 ?x201)))
 (let ((?x39 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x112 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x145 (concat ?x79 (concat ?x112 (concat ?x6 ?x39)))))
 (let (($x196 (= input.dst.llvm-%m1 ?x145)))
 (let (($x7 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x100 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x50 (and $x100 $x7)))
 (let (($x152 (and (and $x50 $x196) $x238)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x236)))
 (let ((?x176 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x245 (= (_ bv0 32) ?x176)))
 (let ((?x34 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x73 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x34)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x59)))
 (let (($x88 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x88 $x285)))
 (let (($x21 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x28 (and $x21 $x38)))
 (let (($x68 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x270 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x213 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x232 (and $x213 $x270)))
 (let (($x83 (and (not $x232) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x70 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x175 (and $x254 $x70)))
 (let (($x19 (and (not $x175) $x193)))
 (let (($x157 (and (and (and (and (and (and $x19 $x83) $x120) $x68) $x28) $x73) $x245)))
 (let (($x286 (and $x157 $x266)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x23 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x171 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x23)))
 (let (($x80 (or false (or false (and (and true (or $x91 $x171)) (or $x18 $x37))))))
 (let (($x16 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x80)))
 (let (($x174 (and (and (and $x16 true) $x286) $x152)))
 (let (($x153 (and true $x174)))
 (let (($x26 (= $x153 true)))
 (let (($x217 (= $x26 true)))
 (let (($x227 (= $x217 true)))
 (let (($x229 (= $x50 true)))
 (let (($x103 (= $x229 true)))
 (let (($x117 (= $x103 true)))
 (let (($x86 (= ?x145 input.dst.llvm-%m1)))
 (let (($x41 (= $x86 true)))
 (let (($x97 (= $x41 true)))
 (let (($x98 (and $x97 $x117)))
 (let (($x251 (and $x98 $x227)))
 (let (($x81 (and $x251 $x278)))
 (let (($x317 (and $x81 $x297)))
 (let (($x237 (and $x317 $x105)))
 (let (($x282 (and $x237 $x116)))
 (let (($x12 (and $x282 $x316)))
 (let (($x274 (=> $x12 $x202)))
 (not $x274))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 36
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x262 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x30 (= (_ bv0 2) ?x262)))
 (let (($x302 (= $x30 true)))
 (let (($x156 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x284 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1921X)))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var1921X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1921X)))
 (=> $x85 (= ?x114 ?x284))))))
 ))
 (let (($x141 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x109 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1920X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1920X)))
 (= $x85 $x109))))
 ))
 (let (($x107 (and $x141 $x156)))
 (let (($x310 (= $x107 true)))
 (let (($x216 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1915X)))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var1915X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1915X)))
 (=> $x164 (= ?x255 ?x207))))))
 ))
 (let (($x22 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1914X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1914X)))
 (= $x164 $x281))))
 ))
 (let (($x118 (and $x22 $x216)))
 (let (($x206 (= $x118 true)))
 (let (($x195 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x121 (bvmul input.ind-%var1909X (_ bv4 32))))
 (let ((?x277 (bvadd ?x121 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x259))))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var1909X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1909X)))
 (=> $x164 (= ?x255 ?x20)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1908X) (bvult input.ind-%var1908X (_ bv100 32)))))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1908X)))
 (= $x164 $x102))))
 ))
 (let (($x82 (and $x184 $x195)))
 (let (($x27 (= $x82 true)))
 (let (($x192 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let ((?x121 (bvmul input.ind-%var1903X (_ bv4 32))))
 (let ((?x62 (bvadd ?x121 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x222))))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var1903X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1903X)))
 (=> $x85 (= ?x114 ?x47)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1902X) (bvult input.ind-%var1902X (_ bv100 32)))))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1902X)))
 (= $x85 $x102))))
 ))
 (let (($x322 (and $x228 $x192)))
 (let (($x325 (= $x322 true)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x279 (concat ?x257 (concat ?x127 (concat ?x292 ?x303)))))
 (let (($x81 (= ?x279 input.dst.llvm-%m1)))
 (let (($x265 (= $x81 true)))
 (let (($x173 (= $x265 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x145 (concat ?x6 (concat ?x194 ?x79)))))
 (let (($x238 (= input.dst.llvm-%m2 ?x9)))
 (let (($x201 (= input.dst.llvm-%m1 ?x279)))
 (let (($x50 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x71 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x229 (and $x71 $x50)))
 (let (($x174 (and (and $x229 $x201) $x238)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x73)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x143)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x305 $x88)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x68 $x59)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x270 $x232)))
 (let (($x223 (and (not $x56) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x203 $x24)))
 (let (($x213 (and (not $x264) $x193)))
 (let (($x286 (and (and (and (and (and (and $x213 $x223) $x235) $x241) $x285) $x28) $x34)))
 (let (($x256 (and $x286 $x122)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x254 (or false (or false (and (and true (or $x163 $x29)) (or $x72 $x272))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x217 (and (and (and $x175 true) $x256) $x174)))
 (let (($x227 (and true $x217)))
 (let (($x251 (= $x227 true)))
 (let (($x205 (= $x251 true)))
 (let (($x129 (= $x205 true)))
 (let (($x103 (= $x229 true)))
 (let (($x117 (= $x103 true)))
 (let (($x98 (= $x117 true)))
 (let (($x41 (= ?x9 input.dst.llvm-%m2)))
 (let (($x97 (= $x41 true)))
 (let (($x242 (= $x97 true)))
 (let (($x60 (and $x242 $x98)))
 (let (($x278 (and $x60 $x129)))
 (let (($x147 (and $x278 $x173)))
 (let (($x328 (and $x147 $x325)))
 (let (($x283 (and $x328 $x27)))
 (let (($x326 (and $x283 $x206)))
 (let (($x315 (and $x326 $x310)))
 (let (($x329 (=> $x315 $x302)))
 (not $x329))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x262 ((_ extract 1 0) input.dst.llvm-%m1)))
 (let (($x30 (= (_ bv0 2) ?x262)))
 (let (($x302 (= $x30 true)))
 (let (($x156 (forall ((input.ind-%var1921X (_ BitVec 32)) )(let ((?x284 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1921X)))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var1921X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1921X)))
 (=> $x85 (= ?x114 ?x284))))))
 ))
 (let (($x141 (forall ((input.ind-%var1920X (_ BitVec 32)) )(let (($x109 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1920X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1920X)))
 (= $x85 $x109))))
 ))
 (let (($x107 (and $x141 $x156)))
 (let (($x310 (= $x107 true)))
 (let (($x216 (forall ((input.ind-%var1915X (_ BitVec 32)) )(let ((?x207 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1915X)))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var1915X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1915X)))
 (=> $x164 (= ?x255 ?x207))))))
 ))
 (let (($x22 (forall ((input.ind-%var1914X (_ BitVec 32)) )(let (($x281 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1914X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1914X)))
 (= $x164 $x281))))
 ))
 (let (($x118 (and $x22 $x216)))
 (let (($x206 (= $x118 true)))
 (let (($x195 (forall ((input.ind-%var1909X (_ BitVec 32)) )(let ((?x121 (bvmul input.ind-%var1909X (_ bv4 32))))
 (let ((?x277 (bvadd ?x121 input.dst.llvm-%m1)))
 (let ((?x259 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv1 32))) (select input.dst.llvm-mem ?x277))))
 (let ((?x20 (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x277 (_ bv2 32))) ?x259))))
 (let ((?x255 (input.spec-%var-m1-1.1.1 input.ind-%var1909X)))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1909X)))
 (=> $x164 (= ?x255 ?x20)))))))))
 ))
 (let (($x184 (forall ((input.ind-%var1908X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1908X) (bvult input.ind-%var1908X (_ bv100 32)))))
 (let (($x164 (input.spec-%var-m1-1.0.1 input.ind-%var1908X)))
 (= $x164 $x102))))
 ))
 (let (($x82 (and $x184 $x195)))
 (let (($x27 (= $x82 true)))
 (let (($x192 (forall ((input.ind-%var1903X (_ BitVec 32)) )(let ((?x121 (bvmul input.ind-%var1903X (_ bv4 32))))
 (let ((?x62 (bvadd ?x121 input.dst.llvm-%m2)))
 (let ((?x222 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x222))))
 (let ((?x114 (input.spec-%var-m2-1.1.1 input.ind-%var1903X)))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1903X)))
 (=> $x85 (= ?x114 ?x47)))))))))
 ))
 (let (($x228 (forall ((input.ind-%var1902X (_ BitVec 32)) )(let (($x102 (and (bvule (_ bv0 32) input.ind-%var1902X) (bvult input.ind-%var1902X (_ bv100 32)))))
 (let (($x85 (input.spec-%var-m2-1.0.1 input.ind-%var1902X)))
 (= $x85 $x102))))
 ))
 (let (($x322 (and $x228 $x192)))
 (let (($x325 (= $x322 true)))
 (let ((?x303 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x279 (concat ?x257 (concat ?x127 (concat ?x292 ?x303)))))
 (let (($x81 (= ?x279 input.dst.llvm-%m1)))
 (let (($x265 (= $x81 true)))
 (let (($x173 (= $x265 true)))
 (let ((?x79 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x6 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x9 (concat ?x145 (concat ?x6 (concat ?x194 ?x79)))))
 (let (($x238 (= input.dst.llvm-%m2 ?x9)))
 (let (($x201 (= input.dst.llvm-%m1 ?x279)))
 (let (($x50 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x71 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x229 (and $x71 $x50)))
 (let (($x174 (and (and $x229 $x201) $x238)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x73)))
 (let ((?x143 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x34 (= (_ bv0 32) ?x143)))
 (let ((?x38 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x28 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x38)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x21)))
 (let (($x305 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x59 (and $x305 $x88)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x285 (and $x68 $x59)))
 (let (($x241 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x270 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x56 (and $x270 $x232)))
 (let (($x223 (and (not $x56) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x203 $x24)))
 (let (($x213 (and (not $x264) $x193)))
 (let (($x286 (and (and (and (and (and (and $x213 $x223) $x235) $x241) $x285) $x28) $x34)))
 (let (($x256 (and $x286 $x122)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x163 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x254 (or false (or false (and (and true (or $x163 $x29)) (or $x72 $x272))))))
 (let (($x175 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x254)))
 (let (($x217 (and (and (and $x175 true) $x256) $x174)))
 (let (($x227 (and true $x217)))
 (let (($x251 (= $x227 true)))
 (let (($x205 (= $x251 true)))
 (let (($x129 (= $x205 true)))
 (let (($x103 (= $x229 true)))
 (let (($x117 (= $x103 true)))
 (let (($x98 (= $x117 true)))
 (let (($x41 (= ?x9 input.dst.llvm-%m2)))
 (let (($x97 (= $x41 true)))
 (let (($x242 (= $x97 true)))
 (let (($x60 (and $x242 $x98)))
 (let (($x278 (and $x60 $x129)))
 (let (($x147 (and $x278 $x173)))
 (let (($x328 (and $x147 $x325)))
 (let (($x283 (and $x328 $x27)))
 (let (($x326 (and $x283 $x206)))
 (let (($x315 (and $x326 $x310)))
 (let (($x329 (=> $x315 $x302)))
 (not $x329))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 37
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x13 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1951X (_ bv4 32))))
 (let ((?x259 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x32))))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1951X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1951X)))
 (=> $x66 (= ?x47 ?x144)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1950X) (bvult input.ind-%var1950X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1950X)))
 (= $x66 $x53))))
 ))
 (let (($x280 (and $x244 $x13)))
 (let (($x296 (= true true)))
 (let (($x138 (and $x296 $x280)))
 (let (($x294 (= $x138 true)))
 (let (($x12 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x65 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1945X)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1945X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1945X)))
 (=> $x66 (= ?x47 ?x65))))))
 ))
 (let (($x327 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1944X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1944X)))
 (= $x66 $x240))))
 ))
 (let (($x131 (and $x327 $x12)))
 (let (($x159 (= $x131 true)))
 (let (($x290 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x179 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1939X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1939X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1939X)))
 (=> $x109 (= ?x262 ?x179))))))
 ))
 (let (($x202 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x268 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1938X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1938X)))
 (= $x109 $x268))))
 ))
 (let (($x5 (and $x202 $x290)))
 (let (($x275 (= $x5 true)))
 (let (($x14 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1933X (_ bv4 32))))
 (let ((?x186 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem ?x186))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv2 32))) ?x293))))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x109 (= ?x262 ?x119)))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1932X) (bvult input.ind-%var1932X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x109 $x53))))
 ))
 (let (($x134 (and $x107 $x14)))
 (let (($x317 (= $x134 true)))
 (let (($x180 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1927X (_ bv4 32))))
 (let ((?x259 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x32))))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1927X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1927X)))
 (=> $x66 (= ?x47 ?x144)))))))))
 ))
 (let (($x84 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1926X) (bvult input.ind-%var1926X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1926X)))
 (= $x66 $x53))))
 ))
 (let (($x76 (and $x84 $x180)))
 (let (($x216 (= $x76 true)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x201 (concat ?x154 (concat ?x167 ?x276)))))
 (let (($x147 (= ?x152 input.dst.llvm-%m2)))
 (let (($x135 (= $x147 true)))
 (let (($x85 (= $x135 true)))
 (let (($x238 (= input.dst.llvm-%m2 ?x152)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x9 (concat ?x194 (concat ?x136 ?x145)))))
 (let (($x158 (= input.dst.llvm-%m1 ?x86)))
 (let (($x229 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x71 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x71 $x229)))
 (let (($x217 (and (and $x103 $x158) $x238)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x28)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x236)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x157 $x305)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x241 $x21)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x232 $x56)))
 (let (($x176 (and (not $x83) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x70 $x146)))
 (let (($x270 (and (not $x19) $x193)))
 (let (($x256 (and (and (and (and (and (and $x270 $x176) $x245) $x120) $x88) $x285) $x38)))
 (let (($x26 (and $x256 $x266)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x203 (or false (or false (and (and true (or $x101 $x37)) (or $x16 $x249))))))
 (let (($x264 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x205 (and (and (and $x264 true) $x26) $x217)))
 (let (($x129 (and true $x205)))
 (let (($x278 (= $x129 true)))
 (let (($x81 (= $x278 true)))
 (let (($x265 (= $x81 true)))
 (let (($x117 (= $x103 true)))
 (let (($x98 (= $x117 true)))
 (let (($x60 (= $x98 true)))
 (let (($x97 (= ?x86 input.dst.llvm-%m1)))
 (let (($x242 (= $x97 true)))
 (let (($x31 (= $x242 true)))
 (let (($x178 (and $x31 $x60)))
 (let (($x173 (and $x178 $x265)))
 (let (($x67 (and $x173 $x85)))
 (let (($x118 (and $x67 $x216)))
 (let (($x115 (and $x118 $x317)))
 (let (($x239 (and $x115 $x275)))
 (let (($x271 (and $x239 $x159)))
 (let (($x162 (=> $x271 $x294)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x13 (forall ((input.ind-%var1951X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1951X (_ bv4 32))))
 (let ((?x259 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x32))))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1951X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1951X)))
 (=> $x66 (= ?x47 ?x144)))))))))
 ))
 (let (($x244 (forall ((input.ind-%var1950X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1950X) (bvult input.ind-%var1950X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1950X)))
 (= $x66 $x53))))
 ))
 (let (($x280 (and $x244 $x13)))
 (let (($x296 (= true true)))
 (let (($x138 (and $x296 $x280)))
 (let (($x294 (= $x138 true)))
 (let (($x12 (forall ((input.ind-%var1945X (_ BitVec 32)) )(let ((?x65 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1945X)))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1945X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1945X)))
 (=> $x66 (= ?x47 ?x65))))))
 ))
 (let (($x327 (forall ((input.ind-%var1944X (_ BitVec 32)) )(let (($x240 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1944X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1944X)))
 (= $x66 $x240))))
 ))
 (let (($x131 (and $x327 $x12)))
 (let (($x159 (= $x131 true)))
 (let (($x290 (forall ((input.ind-%var1939X (_ BitVec 32)) )(let ((?x179 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1939X)))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1939X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1939X)))
 (=> $x109 (= ?x262 ?x179))))))
 ))
 (let (($x202 (forall ((input.ind-%var1938X (_ BitVec 32)) )(let (($x268 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1938X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1938X)))
 (= $x109 $x268))))
 ))
 (let (($x5 (and $x202 $x290)))
 (let (($x275 (= $x5 true)))
 (let (($x14 (forall ((input.ind-%var1933X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1933X (_ bv4 32))))
 (let ((?x186 (bvadd ?x149 input.dst.llvm-%m1)))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv1 32))) (select input.dst.llvm-mem ?x186))))
 (let ((?x119 (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x186 (_ bv2 32))) ?x293))))
 (let ((?x262 (input.spec-%var-m1-1.1.1 input.ind-%var1933X)))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1933X)))
 (=> $x109 (= ?x262 ?x119)))))))))
 ))
 (let (($x107 (forall ((input.ind-%var1932X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1932X) (bvult input.ind-%var1932X (_ bv100 32)))))
 (let (($x109 (input.spec-%var-m1-1.0.1 input.ind-%var1932X)))
 (= $x109 $x53))))
 ))
 (let (($x134 (and $x107 $x14)))
 (let (($x317 (= $x134 true)))
 (let (($x180 (forall ((input.ind-%var1927X (_ BitVec 32)) )(let ((?x149 (bvmul input.ind-%var1927X (_ bv4 32))))
 (let ((?x259 (bvadd ?x149 input.dst.llvm-%m2)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x144 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x32))))
 (let ((?x47 (input.spec-%var-m2-1.1.1 input.ind-%var1927X)))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1927X)))
 (=> $x66 (= ?x47 ?x144)))))))))
 ))
 (let (($x84 (forall ((input.ind-%var1926X (_ BitVec 32)) )(let (($x53 (and (bvule (_ bv0 32) input.ind-%var1926X) (bvult input.ind-%var1926X (_ bv100 32)))))
 (let (($x66 (input.spec-%var-m2-1.0.1 input.ind-%var1926X)))
 (= $x66 $x53))))
 ))
 (let (($x76 (and $x84 $x180)))
 (let (($x216 (= $x76 true)))
 (let ((?x276 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x167 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x152 (concat ?x201 (concat ?x154 (concat ?x167 ?x276)))))
 (let (($x147 (= ?x152 input.dst.llvm-%m2)))
 (let (($x135 (= $x147 true)))
 (let (($x85 (= $x135 true)))
 (let (($x238 (= input.dst.llvm-%m2 ?x152)))
 (let ((?x145 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x194 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x9 (concat ?x194 (concat ?x136 ?x145)))))
 (let (($x158 (= input.dst.llvm-%m1 ?x86)))
 (let (($x229 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x71 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x103 (and $x71 $x229)))
 (let (($x217 (and (and $x103 $x158) $x238)))
 (let ((?x28 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x28)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x236)))
 (let ((?x59 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x285 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x59)))
 (let ((?x68 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x305 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x68)))
 (let (($x157 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x21 (and $x157 $x305)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x88 (and $x241 $x21)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x245 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x232 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (and $x232 $x56)))
 (let (($x176 (and (not $x83) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x146 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x19 (and $x70 $x146)))
 (let (($x270 (and (not $x19) $x193)))
 (let (($x256 (and (and (and (and (and (and $x270 $x176) $x245) $x120) $x88) $x285) $x38)))
 (let (($x26 (and $x256 $x266)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x18 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x18)))
 (let (($x37 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x101 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x18)))
 (let (($x203 (or false (or false (and (and true (or $x101 $x37)) (or $x16 $x249))))))
 (let (($x264 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x203)))
 (let (($x205 (and (and (and $x264 true) $x26) $x217)))
 (let (($x129 (and true $x205)))
 (let (($x278 (= $x129 true)))
 (let (($x81 (= $x278 true)))
 (let (($x265 (= $x81 true)))
 (let (($x117 (= $x103 true)))
 (let (($x98 (= $x117 true)))
 (let (($x60 (= $x98 true)))
 (let (($x97 (= ?x86 input.dst.llvm-%m1)))
 (let (($x242 (= $x97 true)))
 (let (($x31 (= $x242 true)))
 (let (($x178 (and $x31 $x60)))
 (let (($x173 (and $x178 $x265)))
 (let (($x67 (and $x173 $x85)))
 (let (($x118 (and $x67 $x216)))
 (let (($x115 (and $x118 $x317)))
 (let (($x239 (and $x115 $x275)))
 (let (($x271 (and $x239 $x159)))
 (let (($x162 (=> $x271 $x294)))
 (not $x162)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 38
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x36 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1981X (_ bv4 32))))
 (let ((?x125 (bvadd ?x225 input.dst.llvm-%m1)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x199))))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1981X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1981X)))
 (=> $x240 (= ?x244 ?x325)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1980X) (bvult input.ind-%var1980X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1980X)))
 (= $x240 $x82))))
 ))
 (let (($x299 (and $x267 $x36)))
 (let (($x124 (= true true)))
 (let (($x89 (and $x124 $x299)))
 (let (($x287 (= $x89 true)))
 (let (($x148 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1975X)))
 (let ((?x144 (input.spec-%var-m2-1.1.1 input.ind-%var1975X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1975X)))
 (=> $x90 (= ?x144 ?x189))))))
 ))
 (let (($x326 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x316 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1974X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1974X)))
 (= $x90 $x316))))
 ))
 (let (($x74 (and $x326 $x148)))
 (let (($x130 (= $x74 true)))
 (let (($x25 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1969X)))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1969X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1969X)))
 (=> $x240 (= ?x244 ?x329))))))
 ))
 (let (($x141 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1968X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1968X)))
 (= $x240 $x48))))
 ))
 (let (($x94 (and $x141 $x25)))
 (let (($x182 (= $x94 true)))
 (let (($x255 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1963X (_ bv4 32))))
 (let ((?x125 (bvadd ?x225 input.dst.llvm-%m1)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x199))))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1963X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1963X)))
 (=> $x240 (= ?x244 ?x325)))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1962X) (bvult input.ind-%var1962X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1962X)))
 (= $x240 $x82))))
 ))
 (let (($x277 (and $x131 $x255)))
 (let (($x164 (= $x277 true)))
 (let (($x187 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1957X (_ bv4 32))))
 (let ((?x293 (bvadd ?x225 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x78))))
 (let ((?x144 (input.spec-%var-m2-1.1.1 input.ind-%var1957X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1957X)))
 (=> $x90 (= ?x144 ?x110)))))))))
 ))
 (let (($x142 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X (_ bv100 32)))))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1956X)))
 (= $x90 $x82))))
 ))
 (let (($x210 (and $x142 $x187)))
 (let (($x290 (= $x210 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x292 (concat ?x127 (concat ?x201 ?x174)))))
 (let (($x67 (= ?x140 input.dst.llvm-%m1)))
 (let (($x102 (= $x67 true)))
 (let (($x66 (= $x102 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x86 (concat ?x136 (concat ?x258 ?x9)))))
 (let (($x238 (= input.dst.llvm-%m2 ?x41)))
 (let (($x152 (= input.dst.llvm-%m1 ?x140)))
 (let (($x103 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x50 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x117 (and $x50 $x103)))
 (let (($x205 (and (and $x117 $x152) $x238)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x285)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x59 (= (_ bv0 32) ?x73)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x241 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x241)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x286 $x157)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x120 $x68)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x56 $x83)))
 (let (($x143 (and (not $x223) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x232 (and (not $x213) $x193)))
 (let (($x26 (and (and (and (and (and (and $x232 $x143) $x235) $x34) $x305) $x88) $x59)))
 (let (($x251 (and $x26 $x122)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x70 (or false (or false (and (and true (or $x128 $x272)) (or $x175 $x153))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x81 (and (and (and $x19 true) $x251) $x205)))
 (let (($x265 (and true $x81)))
 (let (($x173 (= $x265 true)))
 (let (($x147 (= $x173 true)))
 (let (($x135 (= $x147 true)))
 (let (($x98 (= $x117 true)))
 (let (($x60 (= $x98 true)))
 (let (($x178 (= $x60 true)))
 (let (($x242 (= ?x41 input.dst.llvm-%m2)))
 (let (($x31 (= $x242 true)))
 (let (($x100 (= $x31 true)))
 (let (($x23 (and $x100 $x178)))
 (let (($x85 (and $x23 $x135)))
 (let (($x45 (and $x85 $x66)))
 (let (($x5 (and $x45 $x290)))
 (let (($x330 (and $x5 $x164)))
 (let (($x139 (and $x330 $x182)))
 (let (($x230 (and $x139 $x130)))
 (let (($x308 (=> $x230 $x287)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x36 (forall ((input.ind-%var1981X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1981X (_ bv4 32))))
 (let ((?x125 (bvadd ?x225 input.dst.llvm-%m1)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x199))))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1981X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1981X)))
 (=> $x240 (= ?x244 ?x325)))))))))
 ))
 (let (($x267 (forall ((input.ind-%var1980X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1980X) (bvult input.ind-%var1980X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1980X)))
 (= $x240 $x82))))
 ))
 (let (($x299 (and $x267 $x36)))
 (let (($x124 (= true true)))
 (let (($x89 (and $x124 $x299)))
 (let (($x287 (= $x89 true)))
 (let (($x148 (forall ((input.ind-%var1975X (_ BitVec 32)) )(let ((?x189 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var1975X)))
 (let ((?x144 (input.spec-%var-m2-1.1.1 input.ind-%var1975X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1975X)))
 (=> $x90 (= ?x144 ?x189))))))
 ))
 (let (($x326 (forall ((input.ind-%var1974X (_ BitVec 32)) )(let (($x316 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var1974X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1974X)))
 (= $x90 $x316))))
 ))
 (let (($x74 (and $x326 $x148)))
 (let (($x130 (= $x74 true)))
 (let (($x25 (forall ((input.ind-%var1969X (_ BitVec 32)) )(let ((?x329 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1969X)))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1969X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1969X)))
 (=> $x240 (= ?x244 ?x329))))))
 ))
 (let (($x141 (forall ((input.ind-%var1968X (_ BitVec 32)) )(let (($x48 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1968X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1968X)))
 (= $x240 $x48))))
 ))
 (let (($x94 (and $x141 $x25)))
 (let (($x182 (= $x94 true)))
 (let (($x255 (forall ((input.ind-%var1963X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1963X (_ bv4 32))))
 (let ((?x125 (bvadd ?x225 input.dst.llvm-%m1)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv1 32))) (select input.dst.llvm-mem ?x125))))
 (let ((?x325 (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x125 (_ bv2 32))) ?x199))))
 (let ((?x244 (input.spec-%var-m1-1.1.1 input.ind-%var1963X)))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1963X)))
 (=> $x240 (= ?x244 ?x325)))))))))
 ))
 (let (($x131 (forall ((input.ind-%var1962X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1962X) (bvult input.ind-%var1962X (_ bv100 32)))))
 (let (($x240 (input.spec-%var-m1-1.0.1 input.ind-%var1962X)))
 (= $x240 $x82))))
 ))
 (let (($x277 (and $x131 $x255)))
 (let (($x164 (= $x277 true)))
 (let (($x187 (forall ((input.ind-%var1957X (_ BitVec 32)) )(let ((?x225 (bvmul input.ind-%var1957X (_ bv4 32))))
 (let ((?x293 (bvadd ?x225 input.dst.llvm-%m2)))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv1 32))) (select input.dst.llvm-mem ?x293))))
 (let ((?x110 (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x293 (_ bv2 32))) ?x78))))
 (let ((?x144 (input.spec-%var-m2-1.1.1 input.ind-%var1957X)))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1957X)))
 (=> $x90 (= ?x144 ?x110)))))))))
 ))
 (let (($x142 (forall ((input.ind-%var1956X (_ BitVec 32)) )(let (($x82 (and (bvule (_ bv0 32) input.ind-%var1956X) (bvult input.ind-%var1956X (_ bv100 32)))))
 (let (($x90 (input.spec-%var-m2-1.0.1 input.ind-%var1956X)))
 (= $x90 $x82))))
 ))
 (let (($x210 (and $x142 $x187)))
 (let (($x290 (= $x210 true)))
 (let ((?x174 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let ((?x201 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x127 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x140 (concat ?x292 (concat ?x127 (concat ?x201 ?x174)))))
 (let (($x67 (= ?x140 input.dst.llvm-%m1)))
 (let (($x102 (= $x67 true)))
 (let (($x66 (= $x102 true)))
 (let ((?x9 (select input.dst.llvm-mem input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let ((?x258 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv1 32)))))
 (let ((?x136 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv2 32)))))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___bar__x__=L0%0%argnum1=/ (_ bv3 32)))))
 (let ((?x41 (concat ?x86 (concat ?x136 (concat ?x258 ?x9)))))
 (let (($x238 (= input.dst.llvm-%m2 ?x41)))
 (let (($x152 (= input.dst.llvm-%m1 ?x140)))
 (let (($x103 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x50 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x117 (and $x50 $x103)))
 (let (($x205 (and (and $x117 $x152) $x238)))
 (let ((?x285 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x285)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x59 (= (_ bv0 32) ?x73)))
 (let ((?x21 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x88 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x21)))
 (let ((?x241 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x241)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x68 (and $x286 $x157)))
 (let (($x120 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x305 (and $x120 $x68)))
 (let (($x34 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x288 (and $x215 $x219)))
 (let (($x55 (not $x288)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x56 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x223 (and $x56 $x83)))
 (let (($x143 (and (not $x223) $x55)))
 (let (($x46 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x106 (and $x226 $x46)))
 (let (($x193 (not $x106)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x232 (and (not $x213) $x193)))
 (let (($x26 (and (and (and (and (and (and $x232 $x143) $x235) $x34) $x305) $x88) $x59)))
 (let (($x251 (and $x26 $x122)))
 (let (($x153 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x72 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x72)))
 (let (($x70 (or false (or false (and (and true (or $x128 $x272)) (or $x175 $x153))))))
 (let (($x19 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x70)))
 (let (($x81 (and (and (and $x19 true) $x251) $x205)))
 (let (($x265 (and true $x81)))
 (let (($x173 (= $x265 true)))
 (let (($x147 (= $x173 true)))
 (let (($x135 (= $x147 true)))
 (let (($x98 (= $x117 true)))
 (let (($x60 (= $x98 true)))
 (let (($x178 (= $x60 true)))
 (let (($x242 (= ?x41 input.dst.llvm-%m2)))
 (let (($x31 (= $x242 true)))
 (let (($x100 (= $x31 true)))
 (let (($x23 (and $x100 $x178)))
 (let (($x85 (and $x23 $x135)))
 (let (($x45 (and $x85 $x66)))
 (let (($x5 (and $x45 $x290)))
 (let (($x330 (and $x5 $x164)))
 (let (($x139 (and $x330 $x182)))
 (let (($x230 (and $x139 $x130)))
 (let (($x308 (=> $x230 $x287)))
 (not $x308)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 39
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x17 (bvneg ?x10)))
 (let (($x104 (= ?x17 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= $x104 true)))
 (let (($x222 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2011X)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var2011X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var2011X)))
 (=> $x201 (= ?x67 ?x169))))))
 ))
 (let (($x212 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2010X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var2010X)))
 (= $x201 $x247))))
 ))
 (let (($x151 (and $x212 $x222)))
 (let (($x191 (= $x151 true)))
 (let (($x62 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let ((?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2005X)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 input.ind-%var2005X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var2005X)))
 (=> $x22 (= ?x47 ?x164))))))
 ))
 (let (($x162 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2004X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var2004X)))
 (= $x22 $x111))))
 ))
 (let (($x313 (and $x162 $x62)))
 (let (($x43 (= $x313 true)))
 (let (($x65 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1999X (_ bv4 32))))
 (let ((?x197 (bvadd ?x119 input.dst.llvm-%m1)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x197))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv2 32))) ?x130)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv3 32))) ?x267)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 input.ind-%var1999X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var1999X)))
 (=> $x22 (= ?x47 ?x89))))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1998X) (bvult input.ind-%var1998X (_ bv100 32)))))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var1998X)))
 (= $x22 $x81))))
 ))
 (let (($x280 (and $x284 $x65)))
 (let (($x64 (= $x280 true)))
 (let (($x311 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1993X (_ bv4 32))))
 (let ((?x197 (bvadd ?x119 input.dst.llvm-%m1)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x197))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv2 32))) ?x130)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv3 32))) ?x267)))
 (let ((?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1993X)))
 (let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1993X)))
 (=> $x111 (= ?x164 ?x89))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X (_ bv100 32)))))
 (let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1992X)))
 (= $x111 $x81))))
 ))
 (let (($x112 (and $x155 $x311)))
 (let (($x163 (= $x112 true)))
 (let (($x131 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1987X (_ bv4 32))))
 (let ((?x58 (bvadd ?x119 input.dst.llvm-%m2)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x110)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x187)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var1987X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var1987X)))
 (=> $x201 (= ?x67 ?x5))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X (_ bv100 32)))))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var1986X)))
 (= $x201 $x81))))
 ))
 (let (($x244 (and $x173 $x131)))
 (let (($x125 (= $x244 true)))
 (let (($x285 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x258 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and $x49 $x258)))
 (let (($x122 (and $x9 $x285)))
 (let (($x251 (= $x122 true)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x34 (= (_ bv0 32) ?x245)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x235)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x215)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x223 $x219)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x83 $x288)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x70 $x19)))
 (let (($x46 (and (not $x129) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x71 $x7)))
 (let (($x227 (and (not $x249) $x203)))
 (let (($x68 (and (and (and (and (and (and $x227 $x46) $x193) $x56) $x55) $x236) $x38)))
 (let (($x305 (and $x68 $x34)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x272 (or false (or false (and (and true (or $x60 $x178)) (or $x146 $x29))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x272)))
 (let (($x28 (and $x80 $x305)))
 (let (($x21 (= $x28 true)))
 (let (($x88 (= $x21 true)))
 (let (($x266 (= $x88 true)))
 (let (($x194 (= $x9 true)))
 (let (($x145 (= $x194 true)))
 (let (($x41 (= $x145 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x86 (= (_ bv0 2) ?x79)))
 (let (($x15 (= $x86 true)))
 (let (($x6 (= $x15 true)))
 (let (($x97 (and $x6 $x41)))
 (let (($x73 (and $x97 $x266)))
 (let (($x292 (and $x73 $x276)))
 (let (($x121 (and $x292 $x125)))
 (let (($x323 (and $x121 $x163)))
 (let (($x259 (and $x323 $x64)))
 (let (($x239 (and $x259 $x43)))
 (let (($x188 (and $x239 $x191)))
 (let (($x32 (=> $x188 $x181)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x10 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x17 (bvneg ?x10)))
 (let (($x104 (= ?x17 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x181 (= $x104 true)))
 (let (($x222 (forall ((input.ind-%var2011X (_ BitVec 32)) )(let ((?x169 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2011X)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var2011X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var2011X)))
 (=> $x201 (= ?x67 ?x169))))))
 ))
 (let (($x212 (forall ((input.ind-%var2010X (_ BitVec 32)) )(let (($x247 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2010X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var2010X)))
 (= $x201 $x247))))
 ))
 (let (($x151 (and $x212 $x222)))
 (let (($x191 (= $x151 true)))
 (let (($x62 (forall ((input.ind-%var2005X (_ BitVec 32)) )(let ((?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2005X)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 input.ind-%var2005X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var2005X)))
 (=> $x22 (= ?x47 ?x164))))))
 ))
 (let (($x162 (forall ((input.ind-%var2004X (_ BitVec 32)) )(let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2004X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var2004X)))
 (= $x22 $x111))))
 ))
 (let (($x313 (and $x162 $x62)))
 (let (($x43 (= $x313 true)))
 (let (($x65 (forall ((input.ind-%var1999X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1999X (_ bv4 32))))
 (let ((?x197 (bvadd ?x119 input.dst.llvm-%m1)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x197))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv2 32))) ?x130)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv3 32))) ?x267)))
 (let ((?x47 (input.spec-%var-m1-1.1.1 input.ind-%var1999X)))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var1999X)))
 (=> $x22 (= ?x47 ?x89))))))))))
 ))
 (let (($x284 (forall ((input.ind-%var1998X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1998X) (bvult input.ind-%var1998X (_ bv100 32)))))
 (let (($x22 (input.spec-%var-m1-1.0.1 input.ind-%var1998X)))
 (= $x22 $x81))))
 ))
 (let (($x280 (and $x284 $x65)))
 (let (($x64 (= $x280 true)))
 (let (($x311 (forall ((input.ind-%var1993X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1993X (_ bv4 32))))
 (let ((?x197 (bvadd ?x119 input.dst.llvm-%m1)))
 (let ((?x130 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x197))))
 (let ((?x267 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv2 32))) ?x130)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x197 (_ bv3 32))) ?x267)))
 (let ((?x164 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var1993X)))
 (let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1993X)))
 (=> $x111 (= ?x164 ?x89))))))))))
 ))
 (let (($x155 (forall ((input.ind-%var1992X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1992X) (bvult input.ind-%var1992X (_ bv100 32)))))
 (let (($x111 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var1992X)))
 (= $x111 $x81))))
 ))
 (let (($x112 (and $x155 $x311)))
 (let (($x163 (= $x112 true)))
 (let (($x131 (forall ((input.ind-%var1987X (_ BitVec 32)) )(let ((?x119 (bvmul input.ind-%var1987X (_ bv4 32))))
 (let ((?x58 (bvadd ?x119 input.dst.llvm-%m2)))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x58))))
 (let ((?x187 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv2 32))) ?x110)))
 (let ((?x5 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x58 (_ bv3 32))) ?x187)))
 (let ((?x67 (input.spec-%var-m2-1.1.1 input.ind-%var1987X)))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var1987X)))
 (=> $x201 (= ?x67 ?x5))))))))))
 ))
 (let (($x173 (forall ((input.ind-%var1986X (_ BitVec 32)) )(let (($x81 (and (bvule (_ bv0 32) input.ind-%var1986X) (bvult input.ind-%var1986X (_ bv100 32)))))
 (let (($x201 (input.spec-%var-m2-1.0.1 input.ind-%var1986X)))
 (= $x201 $x81))))
 ))
 (let (($x244 (and $x173 $x131)))
 (let (($x125 (= $x244 true)))
 (let (($x285 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x258 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x49 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x9 (and $x49 $x258)))
 (let (($x122 (and $x9 $x285)))
 (let (($x251 (= $x122 true)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x34 (= (_ bv0 32) ?x245)))
 (let ((?x235 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x38 (= (_ bv0 32) ?x235)))
 (let ((?x143 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x236 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x143)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x215)))
 (let (($x223 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x288 (and $x223 $x219)))
 (let (($x83 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x55 (and $x83 $x288)))
 (let (($x56 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x19 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x70 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x129 (and $x70 $x19)))
 (let (($x46 (and (not $x129) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x71 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x249 (and $x71 $x7)))
 (let (($x227 (and (not $x249) $x203)))
 (let (($x68 (and (and (and (and (and (and $x227 $x46) $x193) $x56) $x55) $x236) $x38)))
 (let (($x305 (and $x68 $x34)))
 (let (($x29 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x98 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x146 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x98)))
 (let (($x178 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x98)))
 (let (($x272 (or false (or false (and (and true (or $x60 $x178)) (or $x146 $x29))))))
 (let (($x80 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x272)))
 (let (($x28 (and $x80 $x305)))
 (let (($x21 (= $x28 true)))
 (let (($x88 (= $x21 true)))
 (let (($x266 (= $x88 true)))
 (let (($x194 (= $x9 true)))
 (let (($x145 (= $x194 true)))
 (let (($x41 (= $x145 true)))
 (let ((?x79 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x86 (= (_ bv0 2) ?x79)))
 (let (($x15 (= $x86 true)))
 (let (($x6 (= $x15 true)))
 (let (($x97 (and $x6 $x41)))
 (let (($x73 (and $x97 $x266)))
 (let (($x292 (and $x73 $x276)))
 (let (($x121 (and $x292 $x125)))
 (let (($x323 (and $x121 $x163)))
 (let (($x259 (and $x323 $x64)))
 (let (($x239 (and $x259 $x43)))
 (let (($x188 (and $x239 $x191)))
 (let (($x32 (=> $x188 $x181)))
 (not $x32)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 40
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x165 (bvneg ?x294)))
 (let (($x315 (= ?x165 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x274 (= $x315 true)))
 (let (($x91 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2041X)))
 (let ((?x317 (input.spec-%var-m2-1.1.1 input.ind-%var2041X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2041X)))
 (=> $x238 (= ?x317 ?x134))))))
 ))
 (let (($x217 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x324 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2040X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2040X)))
 (= $x238 $x324))))
 ))
 (let (($x27 (and $x217 $x91)))
 (let (($x296 (= $x27 true)))
 (let (($x260 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let ((?x11 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2035X)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 input.ind-%var2035X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2035X)))
 (=> $x115 (= ?x322 ?x11))))))
 ))
 (let (($x297 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2034X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2034X)))
 (= $x115 $x64))))
 ))
 (let (($x138 (and $x297 $x260)))
 (let (($x224 (= $x138 true)))
 (let (($x150 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2029X (_ bv4 32))))
 (let ((?x242 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x133)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x330)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 input.ind-%var2029X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2029X)))
 (=> $x115 (= ?x322 ?x108))))))))))
 ))
 (let (($x225 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2028X) (bvult input.ind-%var2028X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2028X)))
 (= $x115 $x210))))
 ))
 (let (($x158 (and $x225 $x150)))
 (let (($x13 (= $x158 true)))
 (let (($x154 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2023X (_ bv4 32))))
 (let ((?x242 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x133)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x330)))
 (let ((?x11 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2023X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2023X)))
 (=> $x64 (= ?x11 ?x108))))))))))
 ))
 (let (($x313 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2022X) (bvult input.ind-%var2022X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2022X)))
 (= $x64 $x210))))
 ))
 (let (($x303 (and $x313 $x154)))
 (let (($x140 (= $x303 true)))
 (let (($x284 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2017X (_ bv4 32))))
 (let ((?x74 (bvadd ?x148 input.dst.llvm-%m2)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x74))))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv2 32))) ?x89)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv3 32))) ?x311)))
 (let ((?x317 (input.spec-%var-m2-1.1.1 input.ind-%var2017X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2017X)))
 (=> $x238 (= ?x317 ?x323))))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2016X) (bvult input.ind-%var2016X (_ bv100 32)))))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2016X)))
 (= $x238 $x210))))
 ))
 (let (($x47 (and $x142 $x284)))
 (let (($x275 (= $x47 true)))
 (let (($x122 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x136 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x258 (and $x136 $x161)))
 (let (($x251 (and $x258 $x122)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let (($x292 (= $x276 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x236)))
 (let ((?x241 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x143 (= (_ bv0 32) ?x241)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x223 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x286 $x176)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x56 $x215)))
 (let (($x232 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x19 $x129)))
 (let (($x256 (and (not $x226) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x229 $x16)))
 (let (($x70 (and (not $x264) $x203)))
 (let (($x305 (and (and (and (and (and (and $x70 $x256) $x193) $x232) $x219) $x55) $x143)))
 (let (($x28 (and $x305 $x157)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x71 (or false (or false (and (and true (or $x23 $x166)) (or $x72 $x128))))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x21 (and $x249 $x28)))
 (let (($x88 (= $x21 true)))
 (let (($x266 (= $x88 true)))
 (let (($x73 (= $x266 true)))
 (let (($x9 (= $x258 true)))
 (let (($x194 (= $x9 true)))
 (let (($x145 (= $x194 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x15 (= (_ bv0 2) ?x86)))
 (let (($x207 (= $x15 true)))
 (let (($x79 (= $x207 true)))
 (let (($x41 (and $x79 $x145)))
 (let (($x59 (and $x41 $x73)))
 (let (($x279 (and $x59 $x292)))
 (let (($x327 (and $x279 $x275)))
 (let (($x90 (and $x327 $x140)))
 (let (($x310 (and $x90 $x13)))
 (let (($x221 (and $x310 $x224)))
 (let (($x248 (and $x221 $x296)))
 (let (($x314 (=> $x248 $x274)))
 (not $x314)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x294 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x165 (bvneg ?x294)))
 (let (($x315 (= ?x165 input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let (($x274 (= $x315 true)))
 (let (($x91 (forall ((input.ind-%var2041X (_ BitVec 32)) )(let ((?x134 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2041X)))
 (let ((?x317 (input.spec-%var-m2-1.1.1 input.ind-%var2041X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2041X)))
 (=> $x238 (= ?x317 ?x134))))))
 ))
 (let (($x217 (forall ((input.ind-%var2040X (_ BitVec 32)) )(let (($x324 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2040X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2040X)))
 (= $x238 $x324))))
 ))
 (let (($x27 (and $x217 $x91)))
 (let (($x296 (= $x27 true)))
 (let (($x260 (forall ((input.ind-%var2035X (_ BitVec 32)) )(let ((?x11 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2035X)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 input.ind-%var2035X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2035X)))
 (=> $x115 (= ?x322 ?x11))))))
 ))
 (let (($x297 (forall ((input.ind-%var2034X (_ BitVec 32)) )(let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2034X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2034X)))
 (= $x115 $x64))))
 ))
 (let (($x138 (and $x297 $x260)))
 (let (($x224 (= $x138 true)))
 (let (($x150 (forall ((input.ind-%var2029X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2029X (_ bv4 32))))
 (let ((?x242 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x133)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x330)))
 (let ((?x322 (input.spec-%var-m1-1.1.1 input.ind-%var2029X)))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2029X)))
 (=> $x115 (= ?x322 ?x108))))))))))
 ))
 (let (($x225 (forall ((input.ind-%var2028X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2028X) (bvult input.ind-%var2028X (_ bv100 32)))))
 (let (($x115 (input.spec-%var-m1-1.0.1 input.ind-%var2028X)))
 (= $x115 $x210))))
 ))
 (let (($x158 (and $x225 $x150)))
 (let (($x13 (= $x158 true)))
 (let (($x154 (forall ((input.ind-%var2023X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2023X (_ bv4 32))))
 (let ((?x242 (bvadd ?x148 input.dst.llvm-%m1)))
 (let ((?x133 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x242))))
 (let ((?x330 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv2 32))) ?x133)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x242 (_ bv3 32))) ?x330)))
 (let ((?x11 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2023X)))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2023X)))
 (=> $x64 (= ?x11 ?x108))))))))))
 ))
 (let (($x313 (forall ((input.ind-%var2022X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2022X) (bvult input.ind-%var2022X (_ bv100 32)))))
 (let (($x64 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2022X)))
 (= $x64 $x210))))
 ))
 (let (($x303 (and $x313 $x154)))
 (let (($x140 (= $x303 true)))
 (let (($x284 (forall ((input.ind-%var2017X (_ BitVec 32)) )(let ((?x148 (bvmul input.ind-%var2017X (_ bv4 32))))
 (let ((?x74 (bvadd ?x148 input.dst.llvm-%m2)))
 (let ((?x89 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x74))))
 (let ((?x311 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv2 32))) ?x89)))
 (let ((?x323 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x74 (_ bv3 32))) ?x311)))
 (let ((?x317 (input.spec-%var-m2-1.1.1 input.ind-%var2017X)))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2017X)))
 (=> $x238 (= ?x317 ?x323))))))))))
 ))
 (let (($x142 (forall ((input.ind-%var2016X (_ BitVec 32)) )(let (($x210 (and (bvule (_ bv0 32) input.ind-%var2016X) (bvult input.ind-%var2016X (_ bv100 32)))))
 (let (($x238 (input.spec-%var-m2-1.0.1 input.ind-%var2016X)))
 (= $x238 $x210))))
 ))
 (let (($x47 (and $x142 $x284)))
 (let (($x275 (= $x47 true)))
 (let (($x122 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x161 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x136 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x258 (and $x136 $x161)))
 (let (($x251 (and $x258 $x122)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let (($x292 (= $x276 true)))
 (let ((?x236 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x157 (= (_ bv0 32) ?x236)))
 (let ((?x241 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x143 (= (_ bv0 32) ?x241)))
 (let ((?x288 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x288)))
 (let ((?x223 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x176 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x223)))
 (let (($x286 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x215 (and $x286 $x176)))
 (let (($x56 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x219 (and $x56 $x215)))
 (let (($x232 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x129 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x19 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x226 (and $x19 $x129)))
 (let (($x256 (and (not $x226) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x16 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x229 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x229 $x16)))
 (let (($x70 (and (not $x264) $x203)))
 (let (($x305 (and (and (and (and (and (and $x70 $x256) $x193) $x232) $x219) $x55) $x143)))
 (let (($x28 (and $x305 $x157)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x166 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x178)))
 (let (($x71 (or false (or false (and (and true (or $x23 $x166)) (or $x72 $x128))))))
 (let (($x249 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x71)))
 (let (($x21 (and $x249 $x28)))
 (let (($x88 (= $x21 true)))
 (let (($x266 (= $x88 true)))
 (let (($x73 (= $x266 true)))
 (let (($x9 (= $x258 true)))
 (let (($x194 (= $x9 true)))
 (let (($x145 (= $x194 true)))
 (let ((?x86 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x15 (= (_ bv0 2) ?x86)))
 (let (($x207 (= $x15 true)))
 (let (($x79 (= $x207 true)))
 (let (($x41 (and $x79 $x145)))
 (let (($x59 (and $x41 $x73)))
 (let (($x279 (and $x59 $x292)))
 (let (($x327 (and $x279 $x275)))
 (let (($x90 (and $x327 $x140)))
 (let (($x310 (and $x90 $x13)))
 (let (($x221 (and $x310 $x224)))
 (let (($x248 (and $x221 $x296)))
 (let (($x314 (=> $x248 $x274)))
 (not $x314)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 41
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x251 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x183 (=> $x251 true)))
 (let (($x156 (= $x183 true)))
 (let (($x186 (= $x156 true)))
 (let (($x216 (forall ((input.ind-%var2071X (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2071X)))
 (let ((?x267 (input.spec-%var-m2-1.1.1 input.ind-%var2071X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2071X)))
 (=> $x119 (= ?x267 ?x124))))))
 ))
 (let (($x53 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let (($x231 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2070X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2070X)))
 (= $x119 $x231))))
 ))
 (let (($x185 (and $x53 $x216)))
 (let (($x182 (= $x185 true)))
 (let (($x233 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2065X)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var2065X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2065X)))
 (=> $x36 (= ?x65 ?x228))))))
 ))
 (let (($x172 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2064X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2064X)))
 (= $x36 $x13))))
 ))
 (let (($x76 (and $x172 $x233)))
 (let (($x199 (= $x76 true)))
 (let (($x277 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2059X (_ bv4 32))))
 (let ((?x97 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x97))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv2 32))) ?x144)))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv3 32))) ?x212)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var2059X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2059X)))
 (=> $x36 (= ?x65 ?x109))))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2058X) (bvult input.ind-%var2058X (_ bv100 32)))))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2058X)))
 (= $x36 $x112))))
 ))
 (let (($x195 (and $x164 $x277)))
 (let (($x180 (= $x195 true)))
 (let (($x201 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2053X (_ bv4 32))))
 (let ((?x97 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x97))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv2 32))) ?x144)))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv3 32))) ?x212)))
 (let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2053X)))
 (=> $x13 (= ?x228 ?x109))))))))))
 ))
 (let (($x138 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2052X) (bvult input.ind-%var2052X (_ bv100 32)))))
 (let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (= $x13 $x112))))
 ))
 (let (($x265 (and $x138 $x201)))
 (let (($x67 (= $x265 true)))
 (let (($x225 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2047X (_ bv4 32))))
 (let ((?x102 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x102))))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv2 32))) ?x108)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv3 32))) ?x154)))
 (let ((?x267 (input.spec-%var-m2-1.1.1 input.ind-%var2047X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2047X)))
 (=> $x119 (= ?x267 ?x90))))))))))
 ))
 (let (($x111 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X (_ bv100 32)))))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2046X)))
 (= $x119 $x112))))
 ))
 (let (($x322 (and $x111 $x225)))
 (let (($x92 (= $x322 true)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let (($x292 (= $x276 true)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x34 (= (_ bv0 32) ?x55)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x288 (= (_ bv0 32) ?x245)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x286 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x68 $x83)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x232 $x223)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x129 $x226)))
 (let (($x235 (and (not $x46) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x98 $x7)))
 (let (($x19 (and (not $x227) $x203)))
 (let (($x28 (and (and (and (and (and (and $x19 $x235) $x193) $x120) $x176) $x219) $x288)))
 (let (($x21 (and $x28 $x34)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x229 (or false (or false (and (and true (or $x18 $x146)) (or $x37 $x272))))))
 (let (($x264 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x88 (and $x264 $x21)))
 (let (($x266 (= $x88 true)))
 (let (($x73 (= $x266 true)))
 (let (($x59 (= $x73 true)))
 (let (($x49 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x51 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x161 (and $x51 $x49)))
 (let (($x258 (= $x161 true)))
 (let (($x9 (= $x258 true)))
 (let (($x194 (= $x9 true)))
 (let ((?x15 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x207 (= (_ bv0 2) ?x15)))
 (let (($x45 (= $x207 true)))
 (let (($x86 (= $x45 true)))
 (let (($x145 (and $x86 $x194)))
 (let (($x26 (and $x145 $x59)))
 (let (($x279 (and $x26 $x292)))
 (let (($x167 (and $x279 $x292)))
 (let (($x243 (and $x167 $x92)))
 (let (($x240 (and $x243 $x67)))
 (let (($x281 (and $x240 $x180)))
 (let (($x262 (and $x281 $x199)))
 (let (($x99 (and $x262 $x182)))
 (let (($x319 (=> $x99 $x186)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%1%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let (($x251 (= input.spec-%tmpvar-24.L3%1%fcallEnd input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x183 (=> $x251 true)))
 (let (($x156 (= $x183 true)))
 (let (($x186 (= $x156 true)))
 (let (($x216 (forall ((input.ind-%var2071X (_ BitVec 32)) )(let ((?x124 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2071X)))
 (let ((?x267 (input.spec-%var-m2-1.1.1 input.ind-%var2071X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2071X)))
 (=> $x119 (= ?x267 ?x124))))))
 ))
 (let (($x53 (forall ((input.ind-%var2070X (_ BitVec 32)) )(let (($x231 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2070X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2070X)))
 (= $x119 $x231))))
 ))
 (let (($x185 (and $x53 $x216)))
 (let (($x182 (= $x185 true)))
 (let (($x233 (forall ((input.ind-%var2065X (_ BitVec 32)) )(let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2065X)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var2065X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2065X)))
 (=> $x36 (= ?x65 ?x228))))))
 ))
 (let (($x172 (forall ((input.ind-%var2064X (_ BitVec 32)) )(let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2064X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2064X)))
 (= $x36 $x13))))
 ))
 (let (($x76 (and $x172 $x233)))
 (let (($x199 (= $x76 true)))
 (let (($x277 (forall ((input.ind-%var2059X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2059X (_ bv4 32))))
 (let ((?x97 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x97))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv2 32))) ?x144)))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv3 32))) ?x212)))
 (let ((?x65 (input.spec-%var-m1-1.1.1 input.ind-%var2059X)))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2059X)))
 (=> $x36 (= ?x65 ?x109))))))))))
 ))
 (let (($x164 (forall ((input.ind-%var2058X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2058X) (bvult input.ind-%var2058X (_ bv100 32)))))
 (let (($x36 (input.spec-%var-m1-1.0.1 input.ind-%var2058X)))
 (= $x36 $x112))))
 ))
 (let (($x195 (and $x164 $x277)))
 (let (($x180 (= $x195 true)))
 (let (($x201 (forall ((input.ind-%var2053X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2053X (_ bv4 32))))
 (let ((?x97 (bvadd ?x174 input.dst.llvm-%m1)))
 (let ((?x144 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x97))))
 (let ((?x212 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv2 32))) ?x144)))
 (let ((?x109 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x97 (_ bv3 32))) ?x212)))
 (let ((?x228 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2053X)))
 (let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2053X)))
 (=> $x13 (= ?x228 ?x109))))))))))
 ))
 (let (($x138 (forall ((input.ind-%var2052X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2052X) (bvult input.ind-%var2052X (_ bv100 32)))))
 (let (($x13 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2052X)))
 (= $x13 $x112))))
 ))
 (let (($x265 (and $x138 $x201)))
 (let (($x67 (= $x265 true)))
 (let (($x225 (forall ((input.ind-%var2047X (_ BitVec 32)) )(let ((?x174 (bvmul input.ind-%var2047X (_ bv4 32))))
 (let ((?x102 (bvadd ?x174 input.dst.llvm-%m2)))
 (let ((?x108 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%1%fcallEnd ?x102))))
 (let ((?x154 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv2 32))) ?x108)))
 (let ((?x90 (concat (select input.dst.llvm-mem.Lentry%1%fcallEnd (bvadd ?x102 (_ bv3 32))) ?x154)))
 (let ((?x267 (input.spec-%var-m2-1.1.1 input.ind-%var2047X)))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2047X)))
 (=> $x119 (= ?x267 ?x90))))))))))
 ))
 (let (($x111 (forall ((input.ind-%var2046X (_ BitVec 32)) )(let (($x112 (and (bvule (_ bv0 32) input.ind-%var2046X) (bvult input.ind-%var2046X (_ bv100 32)))))
 (let (($x119 (input.spec-%var-m2-1.0.1 input.ind-%var2046X)))
 (= $x119 $x112))))
 ))
 (let (($x322 (and $x111 $x225)))
 (let (($x92 (= $x322 true)))
 (let (($x278 (= $x251 true)))
 (let (($x276 (= $x278 true)))
 (let (($x292 (= $x276 true)))
 (let ((?x55 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x34 (= (_ bv0 32) ?x55)))
 (let ((?x245 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x288 (= (_ bv0 32) ?x245)))
 (let ((?x215 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x219 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x215)))
 (let ((?x286 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x83 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x286)))
 (let (($x68 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x223 (and $x68 $x83)))
 (let (($x232 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x176 (and $x232 $x223)))
 (let (($x120 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x193 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x171 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x24 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x213 (and $x24 $x171)))
 (let (($x270 (not $x213)))
 (let (($x226 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x129 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x46 (and $x129 $x226)))
 (let (($x235 (and (not $x46) $x270)))
 (let (($x254 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x175 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x153 (and $x175 $x254)))
 (let (($x203 (not $x153)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x227 (and $x98 $x7)))
 (let (($x19 (and (not $x227) $x203)))
 (let (($x28 (and (and (and (and (and (and $x19 $x235) $x193) $x120) $x176) $x219) $x288)))
 (let (($x21 (and $x28 $x34)))
 (let (($x272 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x146 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x18 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x166)))
 (let (($x229 (or false (or false (and (and true (or $x18 $x146)) (or $x37 $x272))))))
 (let (($x264 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x229)))
 (let (($x88 (and $x264 $x21)))
 (let (($x266 (= $x88 true)))
 (let (($x73 (= $x266 true)))
 (let (($x59 (= $x73 true)))
 (let (($x49 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x51 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x161 (and $x51 $x49)))
 (let (($x258 (= $x161 true)))
 (let (($x9 (= $x258 true)))
 (let (($x194 (= $x9 true)))
 (let ((?x15 ((_ extract 1 0) input.dst.llvm-%m2)))
 (let (($x207 (= (_ bv0 2) ?x15)))
 (let (($x45 (= $x207 true)))
 (let (($x86 (= $x45 true)))
 (let (($x145 (and $x86 $x194)))
 (let (($x26 (and $x145 $x59)))
 (let (($x279 (and $x26 $x292)))
 (let (($x167 (and $x279 $x292)))
 (let (($x243 (and $x167 $x92)))
 (let (($x240 (and $x243 $x67)))
 (let (($x281 (and $x240 $x180)))
 (let (($x262 (and $x281 $x199)))
 (let (($x99 (and $x262 $x182)))
 (let (($x319 (=> $x99 $x186)))
 (not $x319))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 42
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x142 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x218 (=> $x142 true)))
 (let (($x35 (= $x218 true)))
 (let (($x190 (= $x35 true)))
 (let (($x301 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2107X)))
 (let ((?x179 (input.spec-%var-m2-1.1.1 input.ind-%var2107X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2107X)))
 (=> $x283 (= ?x179 ?x99))))))
 ))
 (let (($x123 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2106X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2106X)))
 (= $x283 $x199))))
 ))
 (let (($x321 (and $x123 $x301)))
 (let (($x252 (= $x321 true)))
 (let (($x220 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x322 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2101X)))
 (let ((?x307 (input.spec-%var-m1-1.1.1 input.ind-%var2101X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2101X)))
 (=> $x324 (= ?x307 ?x322))))))
 ))
 (let (($x309 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2100X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2100X)))
 (= $x324 $x102))))
 ))
 (let (($x52 (and $x309 $x220)))
 (let (($x300 (= $x52 true)))
 (let (($x25 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2095X (_ bv4 32))))
 (let ((?x316 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x316))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv2 32))) ?x290)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv3 32))) ?x250)))
 (let ((?x179 (input.spec-%var-m2-1.1.1 input.ind-%var2095X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2095X)))
 (=> $x283 (= ?x179 ?x62))))))))))
 ))
 (let (($x197 (forall ((input.ind-%var2094X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2094X) (bvult input.ind-%var2094X (_ bv100 32)))))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2094X)))
 (= $x283 $x108))))
 ))
 (let (($x139 (and $x197 $x25)))
 (let (($x192 (= $x139 true)))
 (let (($x104 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2089X (_ bv4 32))))
 (let ((?x265 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x265))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv2 32))) ?x121)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv3 32))) ?x181)))
 (let ((?x307 (input.spec-%var-m1-1.1.1 input.ind-%var2089X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2089X)))
 (=> $x324 (= ?x307 ?x195))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2088X) (bvult input.ind-%var2088X (_ bv100 32)))))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2088X)))
 (= $x324 $x108))))
 ))
 (let (($x188 (and $x189 $x104)))
 (let (($x66 (= $x188 true)))
 (let (($x275 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x316 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x316))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv2 32))) ?x290)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv3 32))) ?x250)))
 (let ((?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2083X)))
 (let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2083X)))
 (=> $x199 (= ?x99 ?x62))))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2082X)))
 (= $x199 $x108))))
 ))
 (let (($x284 (and $x208 $x275)))
 (let (($x327 (= $x284 true)))
 (let (($x329 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2077X (_ bv4 32))))
 (let ((?x265 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x265))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv2 32))) ?x121)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv3 32))) ?x181)))
 (let ((?x322 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2077X)))
 (let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2077X)))
 (=> $x102 (= ?x322 ?x195))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2076X) (bvult input.ind-%var2076X (_ bv100 32)))))
 (let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2076X)))
 (= $x102 $x108))))
 ))
 (let (($x172 (and $x90 $x329)))
 (let (($x94 (= $x172 true)))
 (let (($x148 (= $x142 true)))
 (let (($x112 (= $x148 true)))
 (let (($x163 (= $x112 true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x88)))
 (let ((?x34 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x34)))
 (let ((?x28 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x219 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x236 $x157)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x176 $x245)))
 (let (($x223 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x143 $x38)))
 (let (($x305 (not $x120)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x241 $x106)))
 (let (($x68 (and (not $x193) $x305)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x256 $x24)))
 (let (($x213 (not $x171)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x72 $x29)))
 (let (($x235 (and (not $x46) $x213)))
 (let (($x251 (and (and (and (and (and (and $x235 $x68) $x286) $x223) $x288) $x55) $x21)))
 (let (($x278 (and $x251 $x266)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x19 (or false (or false (and (and true (or $x249 $x229)) (or $x70 $x175))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x276 (and $x226 $x278)))
 (let (($x292 (= $x276 true)))
 (let (($x279 (= $x292 true)))
 (let (($x167 (= $x279 true)))
 (let (($x100 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x60 (and $x194 $x100)))
 (let (($x178 (= $x60 true)))
 (let (($x16 (= $x178 true)))
 (let (($x23 (= $x16 true)))
 (let ((?x311 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x187 (bvneg ?x311)))
 (let (($x44 (= ?x187 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x51 (= $x44 true)))
 (let (($x136 (= $x51 true)))
 (let (($x207 (= ?x187 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x86 (= $x207 true)))
 (let (($x79 (= $x86 true)))
 (let (($x49 (and $x79 $x136)))
 (let (($x166 (and $x49 $x23)))
 (let (($x173 (and $x166 $x167)))
 (let (($x111 (and $x173 $x163)))
 (let (($x267 (and $x111 $x163)))
 (let (($x141 (and $x267 $x94)))
 (let (($x11 (and $x141 $x327)))
 (let (($x209 (and $x11 $x66)))
 (let (($x84 (and $x209 $x192)))
 (let (($x306 (and $x84 $x300)))
 (let (($x126 (and $x306 $x252)))
 (let (($x95 (=> $x126 $x190)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(assert
 (let (($x142 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x218 (=> $x142 true)))
 (let (($x35 (= $x218 true)))
 (let (($x190 (= $x35 true)))
 (let (($x301 (forall ((input.ind-%var2107X (_ BitVec 32)) )(let ((?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2107X)))
 (let ((?x179 (input.spec-%var-m2-1.1.1 input.ind-%var2107X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2107X)))
 (=> $x283 (= ?x179 ?x99))))))
 ))
 (let (($x123 (forall ((input.ind-%var2106X (_ BitVec 32)) )(let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2106X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2106X)))
 (= $x283 $x199))))
 ))
 (let (($x321 (and $x123 $x301)))
 (let (($x252 (= $x321 true)))
 (let (($x220 (forall ((input.ind-%var2101X (_ BitVec 32)) )(let ((?x322 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2101X)))
 (let ((?x307 (input.spec-%var-m1-1.1.1 input.ind-%var2101X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2101X)))
 (=> $x324 (= ?x307 ?x322))))))
 ))
 (let (($x309 (forall ((input.ind-%var2100X (_ BitVec 32)) )(let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2100X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2100X)))
 (= $x324 $x102))))
 ))
 (let (($x52 (and $x309 $x220)))
 (let (($x300 (= $x52 true)))
 (let (($x25 (forall ((input.ind-%var2095X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2095X (_ bv4 32))))
 (let ((?x316 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x316))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv2 32))) ?x290)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv3 32))) ?x250)))
 (let ((?x179 (input.spec-%var-m2-1.1.1 input.ind-%var2095X)))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2095X)))
 (=> $x283 (= ?x179 ?x62))))))))))
 ))
 (let (($x197 (forall ((input.ind-%var2094X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2094X) (bvult input.ind-%var2094X (_ bv100 32)))))
 (let (($x283 (input.spec-%var-m2-1.0.1 input.ind-%var2094X)))
 (= $x283 $x108))))
 ))
 (let (($x139 (and $x197 $x25)))
 (let (($x192 (= $x139 true)))
 (let (($x104 (forall ((input.ind-%var2089X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2089X (_ bv4 32))))
 (let ((?x265 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x265))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv2 32))) ?x121)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv3 32))) ?x181)))
 (let ((?x307 (input.spec-%var-m1-1.1.1 input.ind-%var2089X)))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2089X)))
 (=> $x324 (= ?x307 ?x195))))))))))
 ))
 (let (($x189 (forall ((input.ind-%var2088X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2088X) (bvult input.ind-%var2088X (_ bv100 32)))))
 (let (($x324 (input.spec-%var-m1-1.0.1 input.ind-%var2088X)))
 (= $x324 $x108))))
 ))
 (let (($x188 (and $x189 $x104)))
 (let (($x66 (= $x188 true)))
 (let (($x275 (forall ((input.ind-%var2083X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2083X (_ bv4 32))))
 (let ((?x316 (bvadd ?x201 input.dst.llvm-%m2)))
 (let ((?x290 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x316))))
 (let ((?x250 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv2 32))) ?x290)))
 (let ((?x62 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x316 (_ bv3 32))) ?x250)))
 (let ((?x99 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2083X)))
 (let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2083X)))
 (=> $x199 (= ?x99 ?x62))))))))))
 ))
 (let (($x208 (forall ((input.ind-%var2082X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2082X) (bvult input.ind-%var2082X (_ bv100 32)))))
 (let (($x199 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2082X)))
 (= $x199 $x108))))
 ))
 (let (($x284 (and $x208 $x275)))
 (let (($x327 (= $x284 true)))
 (let (($x329 (forall ((input.ind-%var2077X (_ BitVec 32)) )(let ((?x201 (bvmul input.ind-%var2077X (_ bv4 32))))
 (let ((?x265 (bvadd ?x201 input.dst.llvm-%m1)))
 (let ((?x121 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x265))))
 (let ((?x181 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv2 32))) ?x121)))
 (let ((?x195 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x265 (_ bv3 32))) ?x181)))
 (let ((?x322 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2077X)))
 (let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2077X)))
 (=> $x102 (= ?x322 ?x195))))))))))
 ))
 (let (($x90 (forall ((input.ind-%var2076X (_ BitVec 32)) )(let (($x108 (and (bvule (_ bv0 32) input.ind-%var2076X) (bvult input.ind-%var2076X (_ bv100 32)))))
 (let (($x102 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2076X)))
 (= $x102 $x108))))
 ))
 (let (($x172 (and $x90 $x329)))
 (let (($x94 (= $x172 true)))
 (let (($x148 (= $x142 true)))
 (let (($x112 (= $x148 true)))
 (let (($x163 (= $x112 true)))
 (let ((?x88 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x266 (= (_ bv0 32) ?x88)))
 (let ((?x34 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x21 (= (_ bv0 32) ?x34)))
 (let ((?x28 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x55 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x28)))
 (let ((?x219 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x157 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x219)))
 (let (($x236 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x245 (and $x236 $x157)))
 (let (($x176 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x288 (and $x176 $x245)))
 (let (($x223 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x286 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x143 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x120 (and $x143 $x38)))
 (let (($x305 (not $x120)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x241 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x193 (and $x241 $x106)))
 (let (($x68 (and (not $x193) $x305)))
 (let (($x24 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x256 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (and $x256 $x24)))
 (let (($x213 (not $x171)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x46 (and $x72 $x29)))
 (let (($x235 (and (not $x46) $x213)))
 (let (($x251 (and (and (and (and (and (and $x235 $x68) $x286) $x223) $x288) $x55) $x21)))
 (let (($x278 (and $x251 $x266)))
 (let (($x175 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x71 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x71)))
 (let (($x229 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x71)))
 (let (($x19 (or false (or false (and (and true (or $x249 $x229)) (or $x70 $x175))))))
 (let (($x226 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x19)))
 (let (($x276 (and $x226 $x278)))
 (let (($x292 (= $x276 true)))
 (let (($x279 (= $x292 true)))
 (let (($x167 (= $x279 true)))
 (let (($x100 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x194 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x60 (and $x194 $x100)))
 (let (($x178 (= $x60 true)))
 (let (($x16 (= $x178 true)))
 (let (($x23 (= $x16 true)))
 (let ((?x311 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x187 (bvneg ?x311)))
 (let (($x44 (= ?x187 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x51 (= $x44 true)))
 (let (($x136 (= $x51 true)))
 (let (($x207 (= ?x187 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x86 (= $x207 true)))
 (let (($x79 (= $x86 true)))
 (let (($x49 (and $x79 $x136)))
 (let (($x166 (and $x49 $x23)))
 (let (($x173 (and $x166 $x167)))
 (let (($x111 (and $x173 $x163)))
 (let (($x267 (and $x111 $x163)))
 (let (($x141 (and $x267 $x94)))
 (let (($x11 (and $x141 $x327)))
 (let (($x209 (and $x11 $x66)))
 (let (($x84 (and $x209 $x192)))
 (let (($x306 (and $x84 $x300)))
 (let (($x126 (and $x306 $x252)))
 (let (($x95 (=> $x126 $x190)))
 (not $x95))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 43
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x291 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x291)))
 (let ((?x168 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x263 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x168)))
 (let (($x246 (= ?x263 ?x77)))
 (let (($x289 (= $x246 true)))
 (let (($x57 (= $x289 true)))
 (let (($x170 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2143X)))
 (let ((?x155 (input.spec-%var-m2-1.1.1 input.ind-%var2143X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2143X)))
 (=> $x76 (= ?x155 ?x220))))))
 ))
 (let (($x169 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2142X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2142X)))
 (= $x76 $x179))))
 ))
 (let (($x273 (and $x169 $x170)))
 (let (($x87 (= $x273 true)))
 (let (($x20 (forall ((input.ind-%var2137X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2137X)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 input.ind-%var2137X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2137X)))
 (=> $x144 (= ?x182 ?x180))))))
 ))
 (let (($x328 (forall ((input.ind-%var2136X (_ BitVec 32)) )(let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2136X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2136X)))
 (= $x144 $x243))))
 ))
 (let (($x78 (and $x328 $x20)))
 (let (($x312 (= $x78 true)))
 (let (($x42 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2131X (_ bv4 32))))
 (let ((?x132 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x132))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv2 32))) ?x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv3 32))) ?x303)))
 (let ((?x155 (input.spec-%var-m2-1.1.1 input.ind-%var2131X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2131X)))
 (=> $x76 (= ?x155 ?x183))))))))))
 ))
 (let (($x294 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2130X) (bvult input.ind-%var2130X (_ bv100 32)))))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2130X)))
 (= $x76 $x240))))
 ))
 (let (($x221 (and $x294 $x42)))
 (let (($x48 (= $x221 true)))
 (let (($x165 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2125X (_ bv4 32))))
 (let ((?x313 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x313))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x327)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x110)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 input.ind-%var2125X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2125X)))
 (=> $x144 (= ?x182 ?x222))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2124X) (bvult input.ind-%var2124X (_ bv100 32)))))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2124X)))
 (= $x144 $x240))))
 ))
 (let (($x248 (and $x269 $x165)))
 (let (($x214 (= $x248 true)))
 (let (($x225 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2119X (_ bv4 32))))
 (let ((?x132 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x132))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv2 32))) ?x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv3 32))) ?x303)))
 (let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2119X)))
 (let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2119X)))
 (=> $x179 (= ?x220 ?x183))))))))))
 ))
 (let (($x30 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X (_ bv100 32)))))
 (let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2118X)))
 (= $x179 $x240))))
 ))
 (let (($x89 (and $x30 $x225)))
 (let (($x140 (= $x89 true)))
 (let (($x188 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x313 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x313))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x327)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x110)))
 (let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2113X)))
 (let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2113X)))
 (=> $x243 (= ?x180 ?x222))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2112X)))
 (= $x243 $x240))))
 ))
 (let (($x66 (and $x67 $x188)))
 (let (($x209 (= $x66 true)))
 (let ((?x142 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x148 (bvneg ?x142)))
 (let (($x198 (= ?x148 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x64 (= $x198 true)))
 (let (($x330 (= $x64 true)))
 (let (($x163 (= ?x148 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (= $x163 true)))
 (let (($x267 (= $x111 true)))
 (let (($x34 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x207 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x45 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x86 (and $x45 $x207)))
 (let (($x276 (and $x86 $x34)))
 (let (($x292 (= $x276 true)))
 (let (($x279 (= $x292 true)))
 (let (($x167 (= $x279 true)))
 (let (($x21 (= $x34 true)))
 (let (($x251 (= $x21 true)))
 (let (($x88 (= $x251 true)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x59 (= (_ bv0 32) ?x286)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x56 (= (_ bv0 32) ?x73)))
 (let ((?x305 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x305)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x106 $x143)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x241 $x38)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x226 $x72)))
 (let (($x46 (not $x29)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x153 $x203)))
 (let (($x256 (and (not $x19) $x46)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x98 $x7)))
 (let (($x227 (not $x70)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x258 $x9)))
 (let (($x254 (and (not $x264) $x227)))
 (let (($x215 (and (and (and (and (and (and $x254 $x256) $x171) $x235) $x120) $x68) $x56)))
 (let (($x219 (and $x215 $x59)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x249 (or false (or false (and (and true (or $x178 $x16)) (or $x37 $x128))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x249)))
 (let (($x157 (and $x229 $x219)))
 (let (($x245 (= $x157 true)))
 (let (($x288 (= $x245 true)))
 (let (($x285 (= $x288 true)))
 (let (($x79 (= $x86 true)))
 (let (($x6 (= $x79 true)))
 (let (($x44 (= $x6 true)))
 (let (($x28 (and $x44 $x285)))
 (let (($x266 (and $x28 $x88)))
 (let (($x278 (and $x266 $x88)))
 (let (($x173 (and $x278 $x167)))
 (let (($x174 (and $x173 $x267)))
 (let (($x108 (and $x174 $x330)))
 (let (($x283 (and $x108 $x209)))
 (let (($x147 (and $x283 $x140)))
 (let (($x107 (and $x147 $x214)))
 (let (($x200 (and $x107 $x48)))
 (let (($x58 (and $x200 $x312)))
 (let (($x230 (and $x58 $x87)))
 (let (($x113 (=> $x230 $x57)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%call1.Lentry%2%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.llvm-%call.Lentry%1%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-25.L3%3%fcallEnd () (_ BitVec 32))
(declare-fun input.spec-%var-fi-0.L3%3%fcallStart () (_ BitVec 32))
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m2-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m1-1.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.dst.llvm-%m2 () (_ BitVec 32))
(declare-fun input.dst.llvm-mem.Lentry%2%fcallEnd () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.llvm-%m1 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-24.L3%1%fcallEnd () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.local./*___y___bar__x__=L0%0%argnum1=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end () (_ BitVec 32))
(assert
 (let ((?x291 (bvmul (_ bv4294967295 32) input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let ((?x77 (bvadd input.dst.llvm-%call.Lentry%1%fcallEnd ?x291)))
 (let ((?x168 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-25.L3%3%fcallEnd)))
 (let ((?x263 (bvadd input.spec-%var-fi-0.L3%3%fcallStart ?x168)))
 (let (($x246 (= ?x263 ?x77)))
 (let (($x289 (= $x246 true)))
 (let (($x57 (= $x289 true)))
 (let (($x170 (forall ((input.ind-%var2143X (_ BitVec 32)) )(let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2143X)))
 (let ((?x155 (input.spec-%var-m2-1.1.1 input.ind-%var2143X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2143X)))
 (=> $x76 (= ?x155 ?x220))))))
 ))
 (let (($x169 (forall ((input.ind-%var2142X (_ BitVec 32)) )(let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2142X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2142X)))
 (= $x76 $x179))))
 ))
 (let (($x273 (and $x169 $x170)))
 (let (($x87 (= $x273 true)))
 (let (($x20 (forall ((input.ind-%var2137X (_ BitVec 32)) )(let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2137X)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 input.ind-%var2137X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2137X)))
 (=> $x144 (= ?x182 ?x180))))))
 ))
 (let (($x328 (forall ((input.ind-%var2136X (_ BitVec 32)) )(let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2136X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2136X)))
 (= $x144 $x243))))
 ))
 (let (($x78 (and $x328 $x20)))
 (let (($x312 (= $x78 true)))
 (let (($x42 (forall ((input.ind-%var2131X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2131X (_ bv4 32))))
 (let ((?x132 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x132))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv2 32))) ?x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv3 32))) ?x303)))
 (let ((?x155 (input.spec-%var-m2-1.1.1 input.ind-%var2131X)))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2131X)))
 (=> $x76 (= ?x155 ?x183))))))))))
 ))
 (let (($x294 (forall ((input.ind-%var2130X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2130X) (bvult input.ind-%var2130X (_ bv100 32)))))
 (let (($x76 (input.spec-%var-m2-1.0.1 input.ind-%var2130X)))
 (= $x76 $x240))))
 ))
 (let (($x221 (and $x294 $x42)))
 (let (($x48 (= $x221 true)))
 (let (($x165 (forall ((input.ind-%var2125X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2125X (_ bv4 32))))
 (let ((?x313 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x313))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x327)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x110)))
 (let ((?x182 (input.spec-%var-m1-1.1.1 input.ind-%var2125X)))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2125X)))
 (=> $x144 (= ?x182 ?x222))))))))))
 ))
 (let (($x269 (forall ((input.ind-%var2124X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2124X) (bvult input.ind-%var2124X (_ bv100 32)))))
 (let (($x144 (input.spec-%var-m1-1.0.1 input.ind-%var2124X)))
 (= $x144 $x240))))
 ))
 (let (($x248 (and $x269 $x165)))
 (let (($x214 (= $x248 true)))
 (let (($x225 (forall ((input.ind-%var2119X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2119X (_ bv4 32))))
 (let ((?x132 (bvadd ?x62 input.dst.llvm-%m2)))
 (let ((?x280 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x132))))
 (let ((?x303 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv2 32))) ?x280)))
 (let ((?x183 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x132 (_ bv3 32))) ?x303)))
 (let ((?x220 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.1.1 input.ind-%var2119X)))
 (let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2119X)))
 (=> $x179 (= ?x220 ?x183))))))))))
 ))
 (let (($x30 (forall ((input.ind-%var2118X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2118X) (bvult input.ind-%var2118X (_ bv100 32)))))
 (let (($x179 (input.spec-fcall_arg_copy.0.spec-%var-m2-1.L3%3%fcallEnd.0.1 input.ind-%var2118X)))
 (= $x179 $x240))))
 ))
 (let (($x89 (and $x30 $x225)))
 (let (($x140 (= $x89 true)))
 (let (($x188 (forall ((input.ind-%var2113X (_ BitVec 32)) )(let ((?x62 (bvmul input.ind-%var2113X (_ bv4 32))))
 (let ((?x313 (bvadd ?x62 input.dst.llvm-%m1)))
 (let ((?x327 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv1 32))) (select input.dst.llvm-mem.Lentry%2%fcallEnd ?x313))))
 (let ((?x110 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv2 32))) ?x327)))
 (let ((?x222 (concat (select input.dst.llvm-mem.Lentry%2%fcallEnd (bvadd ?x313 (_ bv3 32))) ?x110)))
 (let ((?x180 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.1.1 input.ind-%var2113X)))
 (let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2113X)))
 (=> $x243 (= ?x180 ?x222))))))))))
 ))
 (let (($x67 (forall ((input.ind-%var2112X (_ BitVec 32)) )(let (($x240 (and (bvule (_ bv0 32) input.ind-%var2112X) (bvult input.ind-%var2112X (_ bv100 32)))))
 (let (($x243 (input.spec-fcall_arg_copy.0.spec-%var-m1-1.L3%1%fcallEnd.0.1 input.ind-%var2112X)))
 (= $x243 $x240))))
 ))
 (let (($x66 (and $x67 $x188)))
 (let (($x209 (= $x66 true)))
 (let ((?x142 (bvmul (_ bv4294967295 32) input.spec-%tmpvar-24.L3%1%fcallEnd)))
 (let ((?x148 (bvneg ?x142)))
 (let (($x198 (= ?x148 input.spec-%var-fi-0.L3%3%fcallStart)))
 (let (($x64 (= $x198 true)))
 (let (($x330 (= $x64 true)))
 (let (($x163 (= ?x148 input.dst.llvm-%call.Lentry%1%fcallEnd)))
 (let (($x111 (= $x163 true)))
 (let (($x267 (= $x111 true)))
 (let (($x34 (= input.spec-%tmpvar-25.L3%3%fcallEnd input.dst.llvm-%call1.Lentry%2%fcallEnd)))
 (let (($x207 (= (bvand input.dst.llvm-%m2 (_ bv4294967292 32)) input.dst.llvm-%m2)))
 (let (($x45 (= (bvand input.dst.llvm-%m1 (_ bv4294967292 32)) input.dst.llvm-%m1)))
 (let (($x86 (and $x45 $x207)))
 (let (($x276 (and $x86 $x34)))
 (let (($x292 (= $x276 true)))
 (let (($x279 (= $x292 true)))
 (let (($x167 (= $x279 true)))
 (let (($x21 (= $x34 true)))
 (let (($x251 (= $x21 true)))
 (let (($x88 (= $x251 true)))
 (let ((?x286 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum0=/)))
 (let (($x59 (= (_ bv0 32) ?x286)))
 (let ((?x73 (bvand (_ bv3 32) input.dst.local./*___y___bar__x__=L0%0%argnum1=/)))
 (let (($x56 (= (_ bv0 32) ?x73)))
 (let ((?x305 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x68 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end ?x305)))
 (let ((?x232 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x143 (= input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end ?x232)))
 (let (($x106 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x38 (and $x106 $x143)))
 (let (($x241 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x120 (and $x241 $x38)))
 (let (($x235 (= input.dst.local./*___y___bar__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x171 (= input.dst.local./*___y___bar__x__=L0%0%argnum1=/ input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x72 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x226 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x29 (and $x226 $x72)))
 (let (($x46 (not $x29)))
 (let (($x203 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x153 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin)))
 (let (($x19 (and $x153 $x203)))
 (let (($x256 (and (not $x19) $x46)))
 (let (($x7 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x98 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x98 $x7)))
 (let (($x227 (not $x70)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let (($x258 (bvuge input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin)))
 (let (($x264 (and $x258 $x9)))
 (let (($x254 (and (not $x264) $x227)))
 (let (($x215 (and (and (and (and (and (and $x254 $x256) $x171) $x235) $x120) $x68) $x56)))
 (let (($x219 (and $x215 $x59)))
 (let (($x128 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_end)))
 (let ((?x60 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x37 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x16 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___bar__x__=L0%0%argnum1=/_begin ?x60)))
 (let (($x249 (or false (or false (and (and true (or $x178 $x16)) (or $x37 $x128))))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) $x249)))
 (let (($x157 (and $x229 $x219)))
 (let (($x245 (= $x157 true)))
 (let (($x288 (= $x245 true)))
 (let (($x285 (= $x288 true)))
 (let (($x79 (= $x86 true)))
 (let (($x6 (= $x79 true)))
 (let (($x44 (= $x6 true)))
 (let (($x28 (and $x44 $x285)))
 (let (($x266 (and $x28 $x88)))
 (let (($x278 (and $x266 $x88)))
 (let (($x173 (and $x278 $x167)))
 (let (($x174 (and $x173 $x267)))
 (let (($x108 (and $x174 $x330)))
 (let (($x283 (and $x108 $x209)))
 (let (($x147 (and $x283 $x140)))
 (let (($x107 (and $x147 $x214)))
 (let (($x200 (and $x107 $x48)))
 (let (($x58 (and $x200 $x312)))
 (let (($x230 (and $x58 $x87)))
 (let (($x113 (=> $x230 $x57)))
 (not $x113)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 44
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x98 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x39 (or (bvugt input.memlabel-mem--arg.0_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x39) (or $x272 $x98)))))))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= ?x59 (_ bv0 32))))
 (let ((?x9 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x44 $x6)))
 (let (($x120 (and $x16 $x106)))
 (let (($x171 (and $x120 $x143)))
 (and $x171 $x15)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x98 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x117 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x272 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x117)))
 (let (($x39 (or (bvugt input.memlabel-mem--arg.0_begin ?x117) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x39) (or $x272 $x98)))))))
 (let (($x143 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x59 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x106 (= ?x59 (_ bv0 32))))
 (let ((?x9 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x31 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x9)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x31)))
 (let (($x44 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x16 (and $x44 $x6)))
 (let (($x120 (and $x16 $x106)))
 (let (($x171 (and $x120 $x143)))
 (and $x171 $x15)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 45
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= true false)))
 (let (($x314 (= $x149 true)))
 (let ((?x143 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x323 (= ?x143 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x81 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (bvuge ?x81 (_ bv1 32))))
 (let (($x85 (=> $x304 $x323)))
 (let (($x318 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x257 (= $x304 $x318)))
 (let (($x79 (= false false)))
 (let (($x96 (= ?x81 (_ bv0 32))))
 (let (($x105 (=> $x96 $x79)))
 (let (($x197 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x139 (= $x96 $x197)))
 (let (($x210 (and (and (and $x139 $x105) $x257) $x85)))
 (let (($x41 (= $x210 true)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x320 (= ?x68 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x135 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x25 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x25 (_ bv1 32))))
 (let (($x137 (=> $x218 $x320)))
 (let (($x301 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x321 (= $x218 $x301)))
 (let (($x300 (= ?x25 (_ bv0 32))))
 (let (($x126 (=> $x300 $x79)))
 (let (($x277 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x306 (= $x300 $x277)))
 (let (($x35 (and (and (and $x306 $x126) $x321) $x137)))
 (let (($x50 (= $x35 true)))
 (let ((?x157 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x253 (= ?x157 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x154 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x201 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x201 (_ bv1 32))))
 (let (($x316 (=> $x184 $x253)))
 (let (($x317 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x208 (= $x184 $x317)))
 (let (($x268 (= ?x201 (_ bv0 32))))
 (let (($x238 (=> $x268 $x79)))
 (let (($x199 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x130 (= $x268 $x199)))
 (let (($x309 (and (and (and $x130 $x238) $x208) $x316)))
 (let (($x63 (= $x309 true)))
 (let ((?x235 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x260 (= ?x235 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x246 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x289 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x289 (_ bv1 32))))
 (let (($x281 (=> $x53 $x260)))
 (let (($x158 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x212 (= $x53 $x158)))
 (let (($x57 (= ?x289 (_ bv0 32))))
 (let (($x161 (=> $x57 $x79)))
 (let (($x298 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x51 (= $x57 $x298)))
 (let (($x160 (and (and (and $x51 $x161) $x212) $x281)))
 (let (($x121 (= $x160 true)))
 (let (($x168 (forall ((input.ind-%var2247X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2247X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x58))))
 (let ((?x6 (input.spec-%var-m-0.1.1 input.ind-%var2247X)))
 (let (($x183 (input.spec-%var-m-0.0.1 input.ind-%var2247X)))
 (=> $x183 (= ?x6 ?x273))))))))
 ))
 (let (($x325 (forall ((input.ind-%var2246X (_ BitVec 32)) )(let (($x183 (input.spec-%var-m-0.0.1 input.ind-%var2246X)))
 (= $x183 (and (bvule (_ bv0 32) input.ind-%var2246X) (bvult input.ind-%var2246X (_ bv100 32))))))
 ))
 (let (($x263 (and $x325 $x168)))
 (let (($x291 (= $x263 true)))
 (let ((?x209 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x262 (concat ?x220 (concat ?x179 ?x209)))))
 (let (($x91 (= ?x150 input.dst.llvm-%m)))
 (let (($x101 (= $x91 true)))
 (let (($x177 (= $x101 true)))
 (let ((?x94 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x324 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x94 (_ bv3 32)))))
 (let (($x222 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x324)))))))
 (let (($x62 (= $x222 true)))
 (let (($x313 (= $x62 true)))
 (let (($x151 (= $x313 true)))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x322 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x267 (_ bv3 32)))))
 (let (($x36 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x322)))))))
 (let (($x174 (= $x36 true)))
 (let (($x102 (= $x174 true)))
 (let (($x67 (= $x102 true)))
 (let (($x167 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x112 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x279 $x167)))))))
 (let (($x88 (= $x112 true)))
 (let (($x266 (= $x88 true)))
 (let (($x163 (= $x266 true)))
 (let ((?x256 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x245 (bvugt ?x256 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x256 (_ bv3 32)))))
 (let (($x34 (=> (bvule ?x256 (bvsub (bvadd ?x256 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x245)))))))
 (let (($x38 (= $x34 true)))
 (let (($x193 (= $x38 true)))
 (let (($x21 (= $x193 true)))
 (let ((?x23 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x23)))
 (let ((?x258 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x80 $x311)))
 (let (($x153 (and $x187 $x254)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x56 $x153)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x249)))))))
 (let (($x19 (and $x229 $x203)))
 (let (($x270 (= $x19 true)))
 (let (($x226 (= $x270 true)))
 (let (($x72 (= $x226 true)))
 (let (($x251 (and $x72 $x21)))
 (let (($x111 (and $x251 $x163)))
 (let (($x180 (and $x111 $x67)))
 (let (($x104 (and $x180 $x151)))
 (let (($x18 (and $x104 $x177)))
 (let (($x77 (and $x18 $x291)))
 (let (($x195 (and $x77 $x121)))
 (let (($x93 (and $x195 $x63)))
 (let (($x216 (and $x93 $x50)))
 (let (($x274 (and $x216 $x41)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x299 (and $x145 $x274)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x297 (and $x227 $x299)))
 (let (($x117 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x159 (and $x117 $x297)))
 (let (($x171 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x244 (and $x171 $x159)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x125 (and $x59 $x244)))
 (let (($x228 (and $x79 $x125)))
 (let (($x44 (= ?x235 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x211 (and $x44 $x228)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x82 (and $x71 $x211)))
 (let (($x237 (and $x79 $x82)))
 (let (($x215 (= ?x157 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x191 (and $x215 $x237)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x224 (and $x106 $x191)))
 (let (($x134 (and $x79 $x224)))
 (let (($x272 (= ?x68 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x152 (and $x272 $x134)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x282 (and $x98 $x152)))
 (let (($x205 (and $x79 $x282)))
 (let (($x39 (= ?x143 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x5 (and $x39 $x205)))
 (let (($x61 (=> $x5 $x314)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x149 (= true false)))
 (let (($x314 (= $x149 true)))
 (let ((?x143 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x323 (= ?x143 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x138 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x81 (ite $x138 (_ bv1 32) (_ bv0 32))))
 (let (($x304 (bvuge ?x81 (_ bv1 32))))
 (let (($x85 (=> $x304 $x323)))
 (let (($x318 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x257 (= $x304 $x318)))
 (let (($x79 (= false false)))
 (let (($x96 (= ?x81 (_ bv0 32))))
 (let (($x105 (=> $x96 $x79)))
 (let (($x197 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x139 (= $x96 $x197)))
 (let (($x210 (and (and (and $x139 $x105) $x257) $x85)))
 (let (($x41 (= $x210 true)))
 (let ((?x68 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x320 (= ?x68 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x135 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x25 (ite $x135 (_ bv1 32) (_ bv0 32))))
 (let (($x218 (bvuge ?x25 (_ bv1 32))))
 (let (($x137 (=> $x218 $x320)))
 (let (($x301 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x321 (= $x218 $x301)))
 (let (($x300 (= ?x25 (_ bv0 32))))
 (let (($x126 (=> $x300 $x79)))
 (let (($x277 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x306 (= $x300 $x277)))
 (let (($x35 (and (and (and $x306 $x126) $x321) $x137)))
 (let (($x50 (= $x35 true)))
 (let ((?x157 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x253 (= ?x157 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x154 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x201 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x184 (bvuge ?x201 (_ bv1 32))))
 (let (($x316 (=> $x184 $x253)))
 (let (($x317 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x208 (= $x184 $x317)))
 (let (($x268 (= ?x201 (_ bv0 32))))
 (let (($x238 (=> $x268 $x79)))
 (let (($x199 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x130 (= $x268 $x199)))
 (let (($x309 (and (and (and $x130 $x238) $x208) $x316)))
 (let (($x63 (= $x309 true)))
 (let ((?x235 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x260 (= ?x235 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x246 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x289 (ite $x246 (_ bv1 32) (_ bv0 32))))
 (let (($x53 (bvuge ?x289 (_ bv1 32))))
 (let (($x281 (=> $x53 $x260)))
 (let (($x158 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x212 (= $x53 $x158)))
 (let (($x57 (= ?x289 (_ bv0 32))))
 (let (($x161 (=> $x57 $x79)))
 (let (($x298 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x51 (= $x57 $x298)))
 (let (($x160 (and (and (and $x51 $x161) $x212) $x281)))
 (let (($x121 (= $x160 true)))
 (let (($x168 (forall ((input.ind-%var2247X (_ BitVec 32)) )(let ((?x124 (bvadd (bvmul input.ind-%var2247X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv1 32))) (select input.dst.llvm-mem ?x124))))
 (let ((?x273 (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x124 (_ bv2 32))) ?x58))))
 (let ((?x6 (input.spec-%var-m-0.1.1 input.ind-%var2247X)))
 (let (($x183 (input.spec-%var-m-0.0.1 input.ind-%var2247X)))
 (=> $x183 (= ?x6 ?x273))))))))
 ))
 (let (($x325 (forall ((input.ind-%var2246X (_ BitVec 32)) )(let (($x183 (input.spec-%var-m-0.0.1 input.ind-%var2246X)))
 (= $x183 (and (bvule (_ bv0 32) input.ind-%var2246X) (bvult input.ind-%var2246X (_ bv100 32))))))
 ))
 (let (($x263 (and $x325 $x168)))
 (let (($x291 (= $x263 true)))
 (let ((?x209 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x179 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x220 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x150 (concat ?x262 (concat ?x220 (concat ?x179 ?x209)))))
 (let (($x91 (= ?x150 input.dst.llvm-%m)))
 (let (($x101 (= $x91 true)))
 (let (($x177 (= $x101 true)))
 (let ((?x94 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x324 (bvugt ?x94 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x94 (_ bv3 32)))))
 (let (($x222 (=> (bvule ?x94 (bvsub (bvadd ?x94 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x324)))))))
 (let (($x62 (= $x222 true)))
 (let (($x313 (= $x62 true)))
 (let (($x151 (= $x313 true)))
 (let ((?x267 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x322 (bvugt ?x267 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x267 (_ bv3 32)))))
 (let (($x36 (=> (bvule ?x267 (bvsub (bvadd ?x267 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x322)))))))
 (let (($x174 (= $x36 true)))
 (let (($x102 (= $x174 true)))
 (let (($x67 (= $x102 true)))
 (let (($x167 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x279 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x112 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x279 $x167)))))))
 (let (($x88 (= $x112 true)))
 (let (($x266 (= $x88 true)))
 (let (($x163 (= $x266 true)))
 (let ((?x256 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x245 (bvugt ?x256 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x256 (_ bv3 32)))))
 (let (($x34 (=> (bvule ?x256 (bvsub (bvadd ?x256 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x245)))))))
 (let (($x38 (= $x34 true)))
 (let (($x193 (= $x38 true)))
 (let (($x21 (= $x193 true)))
 (let ((?x23 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x254 (= (_ bv0 32) ?x23)))
 (let ((?x258 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x311 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x258)))
 (let (($x80 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (and $x80 $x311)))
 (let (($x153 (and $x187 $x254)))
 (let (($x56 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x203 (and $x56 $x153)))
 (let (($x249 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x128 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x229 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x128 $x249)))))))
 (let (($x19 (and $x229 $x203)))
 (let (($x270 (= $x19 true)))
 (let (($x226 (= $x270 true)))
 (let (($x72 (= $x226 true)))
 (let (($x251 (and $x72 $x21)))
 (let (($x111 (and $x251 $x163)))
 (let (($x180 (and $x111 $x67)))
 (let (($x104 (and $x180 $x151)))
 (let (($x18 (and $x104 $x177)))
 (let (($x77 (and $x18 $x291)))
 (let (($x195 (and $x77 $x121)))
 (let (($x93 (and $x195 $x63)))
 (let (($x216 (and $x93 $x50)))
 (let (($x274 (and $x216 $x41)))
 (let (($x145 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x299 (and $x145 $x274)))
 (let (($x227 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x297 (and $x227 $x299)))
 (let (($x117 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x159 (and $x117 $x297)))
 (let (($x171 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x244 (and $x171 $x159)))
 (let (($x59 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x125 (and $x59 $x244)))
 (let (($x228 (and $x79 $x125)))
 (let (($x44 (= ?x235 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x211 (and $x44 $x228)))
 (let (($x71 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x82 (and $x71 $x211)))
 (let (($x237 (and $x79 $x82)))
 (let (($x215 (= ?x157 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x191 (and $x215 $x237)))
 (let (($x106 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x224 (and $x106 $x191)))
 (let (($x134 (and $x79 $x224)))
 (let (($x272 (= ?x68 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x152 (and $x272 $x134)))
 (let (($x98 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x282 (and $x98 $x152)))
 (let (($x205 (and $x79 $x282)))
 (let (($x39 (= ?x143 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x5 (and $x39 $x205)))
 (let (($x61 (=> $x5 $x314)))
 (not $x61)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 2
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x012a2c00)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #x4f9a0ff8)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x012a2c03)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x012a2c00)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #x012a2c00) #xf8
    (ite (= x!0 #x012a2c01) #x0f
    (ite (= x!0 #x012a2c03) #x4f
    (ite (= x!0 #x012a2c02) #x9a
      #x00)))))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000003) true
      (not (bvule #x00000064 x!0)))))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x012a2c03)
                                     (k!4 #x012a2c02)
                                     (k!4 #x012a2c01)
                                     (k!4 #x012a2c00)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x012a2c03)
                                     (k!4 #x012a2c02)
                                     (k!4 #x012a2c01)
                                     (k!4 #x012a2c00)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #x012a2c03)
                                     (k!4 #x012a2c02)
                                     (k!4 #x012a2c01)
                                     (k!4 #x012a2c00)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #x012a2c03)
                                     (k!4 #x012a2c02)
                                     (k!4 #x012a2c01)
                                     (k!4 #x012a2c00))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
sat
(
  (define-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    (_ as-array k!4))
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xbfffbfa4)
  (define-fun input.dst.llvm-%m () (_ BitVec 32)
    #xfffffff6)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #xbfffbfa7)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #xbfffbfa4)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32)
    #x00000003)
  (define-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%var-m-0.0.1!6 ((x!0 (_ BitVec 32))) Bool
    (ite (= x!0 #x00000000) true
    (ite (= x!0 #x00000001) true
    (ite (= x!0 #x00000002) true
    (ite (= x!0 #x00000003) true
      false)))))
  (define-fun k!5 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (let ((a!1 (ite (bvule #x00000003 x!0)
                    (ite (bvule #x00000064 x!0)
                         (ite (bvule #x00000065 x!0) #x00000065 #x00000064)
                         #x00000003)
                    #x00000002)))
      (ite (bvule #x00000001 x!0)
           (ite (bvule #x00000002 x!0) a!1 #x00000001)
           #x00000000)))
  (define-fun input.spec-%var-m-0.0.1 ((x!0 (_ BitVec 32))) Bool
    (input.spec-%var-m-0.0.1!6 (k!5 x!0)))
  (define-fun k!4 ((x!0 (_ BitVec 32))) (_ BitVec 8)
    (ite (= x!0 #xbfffbfa6) #xff
    (ite (= x!0 #xbfffbfa5) #xff
    (ite (= x!0 #xbfffbfa4) #xf6
    (ite (= x!0 #xbfffbfa7) #xff
      #x00)))))
  (define-fun input.spec-%var-m-0.1.1 ((x!0 (_ BitVec 32))) (_ BitVec 32)
    (ite (= x!0 #x00000000) #x00000000
    (ite (= x!0 #x00000001) #x00000000
    (ite (= x!0 #x00000002) #x00000000
    (ite (= x!0 #x00000003) #x00000000
      (let ((a!1 (k!4 (bvadd #x00000003
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!2 (k!4 (bvadd #x00000002
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!3 (k!4 (bvadd #x00000001
                             (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4)))))
            (a!4 (k!4 (bvadd (bvmul #x00000004 x!0)
                             (concat (k!4 #xbfffbfa7)
                                     (k!4 #xbfffbfa6)
                                     (k!4 #xbfffbfa5)
                                     (k!4 #xbfffbfa4))))))
        (concat a!1 a!2 a!3 a!4)))))))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 46
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x162 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x162 (_ bv1 32))))
 (let (($x185 (= ?x162 (_ bv0 32))))
 (let (($x334 (or $x185 $x290)))
 (let (($x308 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x293 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x293 (_ bv1 32))))
 (let (($x336 (and $x200 $x334)))
 (let (($x12 (= ?x293 (_ bv0 32))))
 (let (($x335 (and $x12 $x334)))
 (let (($x337 (or $x335 $x336)))
 (let (($x149 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x314 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x314 (_ bv1 32))))
 (let (($x339 (and $x271 $x337)))
 (let (($x61 (= ?x314 (_ bv0 32))))
 (let (($x338 (and $x61 $x337)))
 (let (($x340 (or $x338 $x339)))
 (let (($x41 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x274 (ite $x41 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x274 (_ bv1 32))))
 (let (($x342 (and $x228 $x340)))
 (let (($x299 (= ?x274 (_ bv0 32))))
 (let (($x341 (and $x299 $x340)))
 (let (($x343 (or $x341 $x342)))
 (let (($x344 (or false $x343)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x250 (= ?x46 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x190 (=> $x290 $x250)))
 (let (($x32 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x192 (= $x290 $x32)))
 (let (($x83 (= false false)))
 (let (($x259 (=> $x185 $x83)))
 (let (($x10 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x255 (= $x185 $x10)))
 (let (($x95 (and (and (and $x255 $x259) $x192) $x190)))
 (let (($x319 (= $x95 true)))
 (let ((?x28 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x17 (= ?x28 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x165 (=> $x200 $x17)))
 (let (($x303 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x140 (= $x200 $x303)))
 (let (($x43 (and (and (= $x12 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x12 $x83)) $x140)))
 (let (($x33 (and $x43 $x165)))
 (let (($x14 (= $x33 true)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x280 (= ?x21 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x115 (=> $x271 $x280)))
 (let (($x213 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x217 (= $x271 $x213)))
 (let (($x214 (and (and (= $x61 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x61 $x83)) $x217)))
 (let (($x107 (and $x214 $x115)))
 (let (($x221 (= $x107 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x191 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x224 (=> $x228 $x191)))
 (let (($x211 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x82 (= $x228 $x211)))
 (let (($x152 (and (and (= $x299 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x299 $x83)) $x82)))
 (let (($x282 (and $x152 $x224)))
 (let (($x205 (= $x282 true)))
 (let (($x310 (forall ((input.ind-%var2330X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2330X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2330X) (bvult input.ind-%var2330X (_ bv100 32))))))
 ))
 (let (($x138 (forall ((input.ind-%var2331X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var2331X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x305 (input.spec-%var-m-0.1.1 input.ind-%var2331X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2331X)))
 (=> $x130 (= ?x305 ?x35))))))))
 ))
 (let (($x323 (and $x138 $x310)))
 (let (($x85 (= $x323 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x160 (concat ?x233 (concat ?x158 ?x127)))))
 (let (($x195 (= ?x121 input.dst.llvm-%m)))
 (let (($x154 (= $x195 true)))
 (let (($x201 (= $x154 true)))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x169 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x204 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x269 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x182 (and true $x269)))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x9 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x325 (and $x9 $x182)))
 (let (($x177 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv8 32))) (bvult ?x219 (bvsub ?x219 (_ bv8 32))))))
 (let (($x170 (and (and (and true $x177) $x325) $x204)))
 (let (($x289 (and $x170 $x169)))
 (let (($x57 (= $x289 true)))
 (let (($x113 (= $x57 true)))
 (let (($x298 (= $x113 true)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x209 (and true $x179)))
 (let (($x62 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x84 (and $x62 $x209)))
 (let (($x92 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv12 32))) (bvult ?x73 (bvsub ?x73 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x62) $x92) $x84)))
 (let (($x263 (= $x20 true)))
 (let (($x291 (= $x263 true)))
 (let (($x77 (= $x291 true)))
 (let (($x116 (and (and $x20 $x170) $x169)))
 (let (($x273 (= $x116 true)))
 (let (($x87 (= $x273 true)))
 (let (($x230 (= $x87 true)))
 (let ((?x307 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x110 (= (_ bv0 32) ?x307)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x180 $x94)))
 (let (($x242 (and $x189 $x110)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x240 $x242)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x65)))))))
 (let (($x324 (and $x67 $x11)))
 (let (($x275 (= $x324 true)))
 (let (($x284 (= $x275 true)))
 (let (($x47 (= $x284 true)))
 (let (($x168 (and $x47 $x230)))
 (let (($x246 (and $x168 $x77)))
 (let (($x51 (and $x246 $x298)))
 (let (($x268 (and $x51 $x201)))
 (let (($x210 (and $x268 $x85)))
 (let (($x5 (and $x210 $x205)))
 (let (($x48 (and $x5 $x221)))
 (let (($x114 (and $x48 $x14)))
 (let (($x247 (and $x114 $x319)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x109 (and $x267 $x247)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x103 (and $x163 $x109)))
 (let (($x88 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x131 (and $x88 $x103)))
 (let (($x142 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x142 $x131)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x296 (and $x119 $x234)))
 (let (($x8 (and $x83 $x296)))
 (let (($x167 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x133 (and $x167 $x8)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x206 (and $x148 $x133)))
 (let (($x75 (and $x83 $x206)))
 (let (($x278 (= ?x21 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x202 (and $x278 $x75)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x302 (and $x193 $x202)))
 (let (($x261 (and $x83 $x302)))
 (let (($x34 (= ?x28 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x40 (and $x34 $x261)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x295 (and $x288 $x40)))
 (let (($x331 (and $x83 $x295)))
 (let (($x122 (= ?x46 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x332 (and $x122 $x331)))
 (let (($x153 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x16 (_ bv3 32)))))
 (let (($x29 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x153)))))))
 (let (($x175 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x219 (_ bv3 32)))))
 (let (($x56 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x175)))))))
 (let (($x178 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x73 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x171 $x178)))))))
 (let (($x143 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x143)))))))
 (let (($x39 (and $x136 $x7)))
 (let (($x194 (and $x39 $x56)))
 (let (($x80 (and $x194 $x29)))
 (let (($x333 (and $x80 $x332)))
 (let (($x347 (=> $x333 $x346)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x27 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x162 (ite $x27 (_ bv1 32) (_ bv0 32))))
 (let (($x290 (bvuge ?x162 (_ bv1 32))))
 (let (($x185 (= ?x162 (_ bv0 32))))
 (let (($x334 (or $x185 $x290)))
 (let (($x308 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x293 (ite $x308 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x293 (_ bv1 32))))
 (let (($x336 (and $x200 $x334)))
 (let (($x12 (= ?x293 (_ bv0 32))))
 (let (($x335 (and $x12 $x334)))
 (let (($x337 (or $x335 $x336)))
 (let (($x149 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x314 (ite $x149 (_ bv1 32) (_ bv0 32))))
 (let (($x271 (bvuge ?x314 (_ bv1 32))))
 (let (($x339 (and $x271 $x337)))
 (let (($x61 (= ?x314 (_ bv0 32))))
 (let (($x338 (and $x61 $x337)))
 (let (($x340 (or $x338 $x339)))
 (let (($x41 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x274 (ite $x41 (_ bv1 32) (_ bv0 32))))
 (let (($x228 (bvuge ?x274 (_ bv1 32))))
 (let (($x342 (and $x228 $x340)))
 (let (($x299 (= ?x274 (_ bv0 32))))
 (let (($x341 (and $x299 $x340)))
 (let (($x343 (or $x341 $x342)))
 (let (($x344 (or false $x343)))
 (let (($x345 (= $x344 true)))
 (let (($x346 (= $x345 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x250 (= ?x46 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x190 (=> $x290 $x250)))
 (let (($x32 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x192 (= $x290 $x32)))
 (let (($x83 (= false false)))
 (let (($x259 (=> $x185 $x83)))
 (let (($x10 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x255 (= $x185 $x10)))
 (let (($x95 (and (and (and $x255 $x259) $x192) $x190)))
 (let (($x319 (= $x95 true)))
 (let ((?x28 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x17 (= ?x28 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x165 (=> $x200 $x17)))
 (let (($x303 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x140 (= $x200 $x303)))
 (let (($x43 (and (and (= $x12 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x12 $x83)) $x140)))
 (let (($x33 (and $x43 $x165)))
 (let (($x14 (= $x33 true)))
 (let ((?x21 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x280 (= ?x21 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x115 (=> $x271 $x280)))
 (let (($x213 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x217 (= $x271 $x213)))
 (let (($x214 (and (and (= $x61 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x61 $x83)) $x217)))
 (let (($x107 (and $x214 $x115)))
 (let (($x221 (= $x107 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x191 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x224 (=> $x228 $x191)))
 (let (($x211 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x82 (= $x228 $x211)))
 (let (($x152 (and (and (= $x299 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x299 $x83)) $x82)))
 (let (($x282 (and $x152 $x224)))
 (let (($x205 (= $x282 true)))
 (let (($x310 (forall ((input.ind-%var2330X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2330X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2330X) (bvult input.ind-%var2330X (_ bv100 32))))))
 ))
 (let (($x138 (forall ((input.ind-%var2331X (_ BitVec 32)) )(let ((?x306 (bvadd (bvmul input.ind-%var2331X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x301 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv1 32))) (select input.dst.llvm-mem ?x306))))
 (let ((?x35 (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x306 (_ bv2 32))) ?x301))))
 (let ((?x305 (input.spec-%var-m-0.1.1 input.ind-%var2331X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2331X)))
 (=> $x130 (= ?x305 ?x35))))))))
 ))
 (let (($x323 (and $x138 $x310)))
 (let (($x85 (= $x323 true)))
 (let ((?x127 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x158 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x233 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x121 (concat ?x160 (concat ?x233 (concat ?x158 ?x127)))))
 (let (($x195 (= ?x121 input.dst.llvm-%m)))
 (let (($x154 (= $x195 true)))
 (let (($x201 (= $x154 true)))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x169 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let ((?x16 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x204 (= (bvand ?x16 (_ bv4294967292 32)) ?x16)))
 (let (($x269 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x16 (bvsub ?x16 (_ bv4 32))) (bvult ?x16 (bvsub ?x16 (_ bv4 32))))))
 (let (($x182 (and true $x269)))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let (($x9 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x325 (and $x9 $x182)))
 (let (($x177 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv8 32))) (bvult ?x219 (bvsub ?x219 (_ bv8 32))))))
 (let (($x170 (and (and (and true $x177) $x325) $x204)))
 (let (($x289 (and $x170 $x169)))
 (let (($x57 (= $x289 true)))
 (let (($x113 (= $x57 true)))
 (let (($x298 (= $x113 true)))
 (let (($x179 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x209 (and true $x179)))
 (let (($x62 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x84 (and $x62 $x209)))
 (let (($x92 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv12 32))) (bvult ?x73 (bvsub ?x73 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x62) $x92) $x84)))
 (let (($x263 (= $x20 true)))
 (let (($x291 (= $x263 true)))
 (let (($x77 (= $x291 true)))
 (let (($x116 (and (and $x20 $x170) $x169)))
 (let (($x273 (= $x116 true)))
 (let (($x87 (= $x273 true)))
 (let (($x230 (= $x87 true)))
 (let ((?x307 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x110 (= (_ bv0 32) ?x307)))
 (let ((?x329 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x94 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x329)))
 (let (($x180 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (and $x180 $x94)))
 (let (($x242 (and $x189 $x110)))
 (let (($x240 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x11 (and $x240 $x242)))
 (let (($x65 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x243 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x67 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x243 $x65)))))))
 (let (($x324 (and $x67 $x11)))
 (let (($x275 (= $x324 true)))
 (let (($x284 (= $x275 true)))
 (let (($x47 (= $x284 true)))
 (let (($x168 (and $x47 $x230)))
 (let (($x246 (and $x168 $x77)))
 (let (($x51 (and $x246 $x298)))
 (let (($x268 (and $x51 $x201)))
 (let (($x210 (and $x268 $x85)))
 (let (($x5 (and $x210 $x205)))
 (let (($x48 (and $x5 $x221)))
 (let (($x114 (and $x48 $x14)))
 (let (($x247 (and $x114 $x319)))
 (let (($x267 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x109 (and $x267 $x247)))
 (let (($x163 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x103 (and $x163 $x109)))
 (let (($x88 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x131 (and $x88 $x103)))
 (let (($x142 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x142 $x131)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x296 (and $x119 $x234)))
 (let (($x8 (and $x83 $x296)))
 (let (($x167 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x133 (and $x167 $x8)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x206 (and $x148 $x133)))
 (let (($x75 (and $x83 $x206)))
 (let (($x278 (= ?x21 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x202 (and $x278 $x75)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x302 (and $x193 $x202)))
 (let (($x261 (and $x83 $x302)))
 (let (($x34 (= ?x28 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x40 (and $x34 $x261)))
 (let (($x288 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x295 (and $x288 $x40)))
 (let (($x331 (and $x83 $x295)))
 (let (($x122 (= ?x46 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x332 (and $x122 $x331)))
 (let (($x153 (bvugt ?x16 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x16 (_ bv3 32)))))
 (let (($x29 (=> (bvule ?x16 (bvsub (bvadd ?x16 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x153)))))))
 (let (($x175 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x249 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x219 (_ bv3 32)))))
 (let (($x56 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x249 $x175)))))))
 (let (($x178 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x171 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x73 (_ bv3 32)))))
 (let (($x7 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x171 $x178)))))))
 (let (($x143 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x24 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x24 $x143)))))))
 (let (($x39 (and $x136 $x7)))
 (let (($x194 (and $x39 $x56)))
 (let (($x80 (and $x194 $x29)))
 (let (($x333 (and $x80 $x332)))
 (let (($x347 (=> $x333 $x346)))
 (not $x347))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 216 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 47
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x416 (bvmul (_ bv4294967295 32) ?x251)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x418 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x37)))
 (let ((?x419 (bvadd ?x418 ?x416)))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x405 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x285 (bvadd ?x70 (_ bv3 32))))
 (let ((?x411 (concat (select input.dst.llvm-mem ?x285) (concat ?x408 ?x406))))
 (let ((?x412 (bvmul (_ bv4294967295 32) ?x411)))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x396 (concat ?x395 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x235 (_ bv3 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem ?x29) (concat ?x398 ?x396))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x386 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x215 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x226 (bvadd ?x215 (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x226) (concat ?x389 ?x387))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x378)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x381)))
 (let ((?x415 (bvadd (bvadd (bvadd ?x383 ?x392) ?x401) ?x412)))
 (let (($x420 (= ?x415 ?x419)))
 (let (($x421 (= $x420 true)))
 (let (($x422 (= $x421 true)))
 (let (($x350 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x110 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x110 (_ bv1 32))))
 (let (($x351 (=> $x242 $x350)))
 (let (($x90 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x258 (= $x242 $x90)))
 (let (($x172 (= false false)))
 (let (($x96 (= ?x110 (_ bv0 32))))
 (let (($x199 (=> $x96 $x172)))
 (let (($x156 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x300 (= $x96 $x156)))
 (let (($x354 (and (and (and $x300 $x199) $x258) $x351)))
 (let (($x355 (= $x354 true)))
 (let (($x309 (= ?x251 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x94 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x94 (_ bv1 32))))
 (let (($x287 (=> $x189 $x309)))
 (let (($x93 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x135 (= $x189 $x93)))
 (let (($x81 (= ?x94 (_ bv0 32))))
 (let (($x317 (=> $x81 $x172)))
 (let (($x139 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x184 (= $x81 $x139)))
 (let (($x253 (and (and (and $x184 $x317) $x135) $x287)))
 (let (($x63 (= $x253 true)))
 (let ((?x279 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x236 (= ?x279 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x240 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x240 (_ bv1 32))))
 (let (($x198 (=> $x180 $x236)))
 (let (($x346 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x347 (= $x180 $x346)))
 (let (($x341 (= ?x240 (_ bv0 32))))
 (let (($x345 (=> $x341 $x172)))
 (let (($x343 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x344 (= $x341 $x343)))
 (let (($x223 (and (and (and $x344 $x345) $x347) $x198)))
 (let (($x141 (= $x223 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x334 (= ?x142 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x265 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x174 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x174 (_ bv1 32))))
 (let (($x335 (=> $x67 $x334)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x332 (= $x67 $x331)))
 (let (($x202 (= ?x174 (_ bv0 32))))
 (let (($x295 (=> $x202 $x172)))
 (let (($x261 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x40 (= $x202 $x261)))
 (let (($x338 (and (and (and $x40 $x295) $x332) $x335)))
 (let (($x339 (= $x338 true)))
 (let (($x8 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var2373X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x76))))
 (let ((?x39 (input.spec-%var-m-0.1.1 input.ind-%var2373X)))
 (let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2373X)))
 (=> $x164 (= ?x39 ?x140))))))))
 ))
 (let (($x255 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2372X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var2372X) (bvult input.ind-%var2372X (_ bv100 32))))))
 ))
 (let (($x133 (and $x255 $x8)))
 (let (($x206 (= $x133 true)))
 (let (($x17 (forall ((input.ind-%var2367X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var2367X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x76))))
 (let ((?x39 (input.spec-%var-m-0.1.1 input.ind-%var2367X)))
 (let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2367X)))
 (=> $x164 (= ?x39 ?x140))))))))
 ))
 (let (($x5 (forall ((input.ind-%var2366X (_ BitVec 32)) )(let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2366X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var2366X) (bvult input.ind-%var2366X (_ bv100 32))))))
 ))
 (let (($x165 (and $x5 $x17)))
 (let (($x33 (= $x165 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x197 (concat ?x216 (concat ?x123 ?x126)))))
 (let (($x297 (= ?x304 input.dst.llvm-%m)))
 (let (($x159 (= $x297 true)))
 (let (($x244 (= $x159 true)))
 (let (($x263 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x116 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x58 (and true $x170)))
 (let (($x182 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x315 (and $x182 $x58)))
 (let (($x225 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv8 32))) (bvult ?x70 (bvsub ?x70 (_ bv8 32))))))
 (let (($x230 (and (and (and true $x225) $x315) $x116)))
 (let (($x212 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x260 (and true $x212)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and $x298 $x260)))
 (let (($x52 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv12 32))) (bvult ?x215 (bvsub ?x215 (_ bv12 32))))))
 (let (($x201 (and (and (and true $x298) $x52) $x121)))
 (let (($x306 (and (and $x201 $x230) $x263)))
 (let (($x257 (= input.dst.llvm-%m ?x304)))
 (let (($x186 (and $x257 $x306)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x20 (= (_ bv0 32) ?x84)))
 (let ((?x283 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x220 $x179)))
 (let (($x150 (and $x209 $x20)))
 (let (($x327 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x327 $x150)))
 (let (($x313 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x262 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x313)))))))
 (let (($x85 (and (and (and $x262 true) $x132) $x186)))
 (let (($x210 (= $x85 true)))
 (let (($x41 (= $x210 true)))
 (let (($x274 (= $x41 true)))
 (let (($x320 (= $x306 true)))
 (let (($x137 (= $x320 true)))
 (let (($x321 (= $x137 true)))
 (let (($x268 (= $x201 true)))
 (let (($x256 (= $x268 true)))
 (let (($x130 (= $x256 true)))
 (let (($x291 (and $x230 $x263)))
 (let (($x77 (= $x291 true)))
 (let (($x246 (= $x77 true)))
 (let (($x289 (= $x246 true)))
 (let (($x91 (and $x262 $x132)))
 (let (($x101 (= $x91 true)))
 (let (($x177 (= $x101 true)))
 (let (($x124 (= $x177 true)))
 (let (($x57 (and $x124 $x289)))
 (let (($x305 (and $x57 $x130)))
 (let (($x252 (and $x305 $x321)))
 (let (($x299 (and $x252 $x274)))
 (let (($x83 (and $x299 $x244)))
 (let (($x14 (and $x83 $x33)))
 (let (($x75 (and $x14 $x206)))
 (let (($x340 (and $x75 $x339)))
 (let (($x22 (and $x340 $x141)))
 (let (($x25 (and $x22 $x63)))
 (let (($x356 (and $x25 $x355)))
 (let (($x11 (and $x189 $x242)))
 (let (($x324 (and $x180 $x11)))
 (let (($x275 (and $x67 $x324)))
 (let (($x357 (and $x275 $x356)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x65 $x357)))
 (let (($x322 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x359 (and $x322 $x358)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x360 (and $x108 $x359)))
 (let (($x267 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x361 (and $x267 $x360)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x362 (and $x163 $x361)))
 (let (($x363 (and $x172 $x362)))
 (let (($x88 (= ?x142 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x364 (and $x88 $x363)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x365 (and $x74 $x364)))
 (let (($x366 (and $x172 $x365)))
 (let (($x173 (= ?x279 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x367 (and $x173 $x366)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x368 (and $x292 $x367)))
 (let (($x369 (and $x172 $x368)))
 (let (($x276 (= ?x251 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x370 (and $x276 $x369)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x193 $x370)))
 (let (($x372 (and $x172 $x371)))
 (let (($x117 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x373 (and $x117 $x372)))
 (let (($x254 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x7 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x207 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x7)))))))
 (let (($x194 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x227 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x194)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x120 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x86)))))))
 (let (($x16 (and $x120 $x227)))
 (let (($x219 (and $x16 $x207)))
 (let (($x311 (and $x219 $x23)))
 (let (($x374 (and $x311 $x373)))
 (let (($x423 (=> $x374 $x422)))
 (not $x423))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x251 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x416 (bvmul (_ bv4294967295 32) ?x251)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x418 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x37)))
 (let ((?x419 (bvadd ?x418 ?x416)))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x406 (concat ?x405 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x70 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x285 (bvadd ?x70 (_ bv3 32))))
 (let ((?x411 (concat (select input.dst.llvm-mem ?x285) (concat ?x408 ?x406))))
 (let ((?x412 (bvmul (_ bv4294967295 32) ?x411)))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x396 (concat ?x395 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x29 (bvadd ?x235 (_ bv3 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem ?x29) (concat ?x398 ?x396))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x386 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x215 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x226 (bvadd ?x215 (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x226) (concat ?x389 ?x387))))
 (let ((?x378 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x381 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x378)))
 (let ((?x383 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x381)))
 (let ((?x415 (bvadd (bvadd (bvadd ?x383 ?x392) ?x401) ?x412)))
 (let (($x420 (= ?x415 ?x419)))
 (let (($x421 (= $x420 true)))
 (let (($x422 (= $x421 true)))
 (let (($x350 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x307 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x110 (ite $x307 (_ bv1 32) (_ bv0 32))))
 (let (($x242 (bvuge ?x110 (_ bv1 32))))
 (let (($x351 (=> $x242 $x350)))
 (let (($x90 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x258 (= $x242 $x90)))
 (let (($x172 (= false false)))
 (let (($x96 (= ?x110 (_ bv0 32))))
 (let (($x199 (=> $x96 $x172)))
 (let (($x156 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x300 (= $x96 $x156)))
 (let (($x354 (and (and (and $x300 $x199) $x258) $x351)))
 (let (($x355 (= $x354 true)))
 (let (($x309 (= ?x251 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x94 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x189 (bvuge ?x94 (_ bv1 32))))
 (let (($x287 (=> $x189 $x309)))
 (let (($x93 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x135 (= $x189 $x93)))
 (let (($x81 (= ?x94 (_ bv0 32))))
 (let (($x317 (=> $x81 $x172)))
 (let (($x139 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x184 (= $x81 $x139)))
 (let (($x253 (and (and (and $x184 $x317) $x135) $x287)))
 (let (($x63 (= $x253 true)))
 (let ((?x279 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x236 (= ?x279 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x240 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x180 (bvuge ?x240 (_ bv1 32))))
 (let (($x198 (=> $x180 $x236)))
 (let (($x346 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x347 (= $x180 $x346)))
 (let (($x341 (= ?x240 (_ bv0 32))))
 (let (($x345 (=> $x341 $x172)))
 (let (($x343 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x344 (= $x341 $x343)))
 (let (($x223 (and (and (and $x344 $x345) $x347) $x198)))
 (let (($x141 (= $x223 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x334 (= ?x142 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x265 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x174 (ite $x265 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x174 (_ bv1 32))))
 (let (($x335 (=> $x67 $x334)))
 (let (($x331 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x332 (= $x67 $x331)))
 (let (($x202 (= ?x174 (_ bv0 32))))
 (let (($x295 (=> $x202 $x172)))
 (let (($x261 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x40 (= $x202 $x261)))
 (let (($x338 (and (and (and $x40 $x295) $x332) $x335)))
 (let (($x339 (= $x338 true)))
 (let (($x8 (forall ((input.ind-%var2373X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var2373X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x76))))
 (let ((?x39 (input.spec-%var-m-0.1.1 input.ind-%var2373X)))
 (let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2373X)))
 (=> $x164 (= ?x39 ?x140))))))))
 ))
 (let (($x255 (forall ((input.ind-%var2372X (_ BitVec 32)) )(let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2372X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var2372X) (bvult input.ind-%var2372X (_ bv100 32))))))
 ))
 (let (($x133 (and $x255 $x8)))
 (let (($x206 (= $x133 true)))
 (let (($x17 (forall ((input.ind-%var2367X (_ BitVec 32)) )(let ((?x308 (bvadd (bvmul input.ind-%var2367X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv1 32))) (select input.dst.llvm-mem ?x308))))
 (let ((?x140 (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x308 (_ bv2 32))) ?x76))))
 (let ((?x39 (input.spec-%var-m-0.1.1 input.ind-%var2367X)))
 (let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2367X)))
 (=> $x164 (= ?x39 ?x140))))))))
 ))
 (let (($x5 (forall ((input.ind-%var2366X (_ BitVec 32)) )(let (($x164 (input.spec-%var-m-0.0.1 input.ind-%var2366X)))
 (= $x164 (and (bvule (_ bv0 32) input.ind-%var2366X) (bvult input.ind-%var2366X (_ bv100 32))))))
 ))
 (let (($x165 (and $x5 $x17)))
 (let (($x33 (= $x165 true)))
 (let ((?x126 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x123 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x216 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x197 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x304 (concat ?x197 (concat ?x216 (concat ?x123 ?x126)))))
 (let (($x297 (= ?x304 input.dst.llvm-%m)))
 (let (($x159 (= $x297 true)))
 (let (($x244 (= $x159 true)))
 (let (($x263 (= (bvand ?x70 (_ bv4294967292 32)) ?x70)))
 (let (($x116 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x170 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x58 (and true $x170)))
 (let (($x182 (= (bvand ?x215 (_ bv4294967292 32)) ?x215)))
 (let (($x315 (and $x182 $x58)))
 (let (($x225 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x70 (bvsub ?x70 (_ bv8 32))) (bvult ?x70 (bvsub ?x70 (_ bv8 32))))))
 (let (($x230 (and (and (and true $x225) $x315) $x116)))
 (let (($x212 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x260 (and true $x212)))
 (let (($x298 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x121 (and $x298 $x260)))
 (let (($x52 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x215 (bvsub ?x215 (_ bv12 32))) (bvult ?x215 (bvsub ?x215 (_ bv12 32))))))
 (let (($x201 (and (and (and true $x298) $x52) $x121)))
 (let (($x306 (and (and $x201 $x230) $x263)))
 (let (($x257 (= input.dst.llvm-%m ?x304)))
 (let (($x186 (and $x257 $x306)))
 (let ((?x84 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x20 (= (_ bv0 32) ?x84)))
 (let ((?x283 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x179 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x220 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x209 (and $x220 $x179)))
 (let (($x150 (and $x209 $x20)))
 (let (($x327 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (and $x327 $x150)))
 (let (($x313 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x262 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x313)))))))
 (let (($x85 (and (and (and $x262 true) $x132) $x186)))
 (let (($x210 (= $x85 true)))
 (let (($x41 (= $x210 true)))
 (let (($x274 (= $x41 true)))
 (let (($x320 (= $x306 true)))
 (let (($x137 (= $x320 true)))
 (let (($x321 (= $x137 true)))
 (let (($x268 (= $x201 true)))
 (let (($x256 (= $x268 true)))
 (let (($x130 (= $x256 true)))
 (let (($x291 (and $x230 $x263)))
 (let (($x77 (= $x291 true)))
 (let (($x246 (= $x77 true)))
 (let (($x289 (= $x246 true)))
 (let (($x91 (and $x262 $x132)))
 (let (($x101 (= $x91 true)))
 (let (($x177 (= $x101 true)))
 (let (($x124 (= $x177 true)))
 (let (($x57 (and $x124 $x289)))
 (let (($x305 (and $x57 $x130)))
 (let (($x252 (and $x305 $x321)))
 (let (($x299 (and $x252 $x274)))
 (let (($x83 (and $x299 $x244)))
 (let (($x14 (and $x83 $x33)))
 (let (($x75 (and $x14 $x206)))
 (let (($x340 (and $x75 $x339)))
 (let (($x22 (and $x340 $x141)))
 (let (($x25 (and $x22 $x63)))
 (let (($x356 (and $x25 $x355)))
 (let (($x11 (and $x189 $x242)))
 (let (($x324 (and $x180 $x11)))
 (let (($x275 (and $x67 $x324)))
 (let (($x357 (and $x275 $x356)))
 (let (($x65 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x65 $x357)))
 (let (($x322 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x359 (and $x322 $x358)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x360 (and $x108 $x359)))
 (let (($x267 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x361 (and $x267 $x360)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x362 (and $x163 $x361)))
 (let (($x363 (and $x172 $x362)))
 (let (($x88 (= ?x142 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x364 (and $x88 $x363)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x365 (and $x74 $x364)))
 (let (($x366 (and $x172 $x365)))
 (let (($x173 (= ?x279 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x367 (and $x173 $x366)))
 (let (($x292 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x368 (and $x292 $x367)))
 (let (($x369 (and $x172 $x368)))
 (let (($x276 (= ?x251 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x370 (and $x276 $x369)))
 (let (($x193 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x193 $x370)))
 (let (($x372 (and $x172 $x371)))
 (let (($x117 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x373 (and $x117 $x372)))
 (let (($x254 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x7 (bvugt ?x70 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x207 (=> (bvule ?x70 (bvsub (bvadd ?x70 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x7)))))))
 (let (($x194 (bvugt ?x215 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x226)))
 (let (($x227 (=> (bvule ?x215 (bvsub (bvadd ?x215 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x194)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x270 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x270)))
 (let (($x120 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x86)))))))
 (let (($x16 (and $x120 $x227)))
 (let (($x219 (and $x16 $x207)))
 (let (($x311 (and $x219 $x23)))
 (let (($x374 (and $x311 $x373)))
 (let (($x423 (=> $x374 $x422)))
 (not $x423))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 48
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x279 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x237 (bvmul (_ bv4294967295 32) ?x279)))
 (let ((?x10 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x237)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x7 (bvadd ?x73 (_ bv3 32))))
 (let ((?x190 (concat (select input.dst.llvm-mem ?x7) (concat ?x181 ?x95))))
 (let ((?x247 (bvmul (_ bv4294967295 32) ?x190)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x115 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x254 (bvadd ?x128 (_ bv3 32))))
 (let ((?x134 (concat (select input.dst.llvm-mem ?x254) (concat ?x162 ?x290))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x280 (concat ?x248 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x194 (bvadd ?x232 (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x194) (concat ?x217 ?x280))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x153)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x125)))
 (let ((?x118 (bvadd (bvadd (bvadd ?x82 ?x15) ?x134) ?x247)))
 (let (($x314 (= ?x118 ?x10)))
 (let (($x221 (= $x314 true)))
 (let (($x234 (= $x221 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x399 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x30 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x30 (_ bv1 32))))
 (let (($x401 (=> $x394 $x399)))
 (let (($x395 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x393 (= $x394 $x395)))
 (let (($x251 (= false false)))
 (let (($x78 (= ?x30 (_ bv0 32))))
 (let (($x398 (=> $x78 $x251)))
 (let (($x400 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x397 (= $x78 $x400)))
 (let (($x410 (and (and (and $x397 $x398) $x393) $x401)))
 (let (($x407 (= $x410 true)))
 (let (($x389 (= ?x279 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x324 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x275 (ite $x324 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x275 (_ bv1 32))))
 (let (($x385 (=> $x222 $x389)))
 (let (($x383 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x391 (= $x222 $x383)))
 (let (($x376 (= ?x275 (_ bv0 32))))
 (let (($x381 (=> $x376 $x251)))
 (let (($x375 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x378 (= $x376 $x375)))
 (let (($x387 (and (and (and $x378 $x381) $x391) $x385)))
 (let (($x390 (= $x387 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x371 (= ?x142 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x110 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x242 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x242 (_ bv1 32))))
 (let (($x372 (=> $x11 $x371)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x369 (= $x11 $x368)))
 (let (($x363 (= ?x242 (_ bv0 32))))
 (let (($x367 (=> $x363 $x251)))
 (let (($x365 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x366 (= $x363 $x365)))
 (let (($x382 (and (and (and $x366 $x367) $x369) $x372)))
 (let (($x379 (= $x382 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x356 (= ?x111 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x189 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x189 (_ bv1 32))))
 (let (($x357 (=> $x307 $x356)))
 (let (($x351 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x354 (= $x307 $x351)))
 (let (($x90 (= ?x189 (_ bv0 32))))
 (let (($x350 (=> $x90 $x251)))
 (let (($x353 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x349 (= $x90 $x353)))
 (let (($x360 (and (and (and $x349 $x350) $x354) $x357)))
 (let (($x361 (= $x360 true)))
 (let (($x156 (forall ((input.ind-%var2411X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var2411X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x334))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var2411X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2411X)))
 (=> $x329 (= ?x122 ?x342))))))))
 ))
 (let (($x22 (forall ((input.ind-%var2410X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2410X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var2410X) (bvult input.ind-%var2410X (_ bv100 32))))))
 ))
 (let (($x300 (and $x22 $x156)))
 (let (($x199 (= $x300 true)))
 (let (($x345 (forall ((input.ind-%var2405X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var2405X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x334))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var2405X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2405X)))
 (=> $x329 (= ?x122 ?x342))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2404X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2404X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var2404X) (bvult input.ind-%var2404X (_ bv100 32))))))
 ))
 (let (($x161 (and $x140 $x345)))
 (let (($x346 (= $x161 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x274 (concat ?x85 (concat ?x304 ?x35)))))
 (let (($x282 (= ?x299 input.dst.llvm-%m)))
 (let (($x205 (= $x282 true)))
 (let (($x5 (= $x205 true)))
 (let (($x195 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x246 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x263 (and true $x168)))
 (let (($x315 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x291 (and $x315 $x263)))
 (let (($x204 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv8 32))) (bvult ?x73 (bvsub ?x73 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x204) $x291) $x246)))
 (let (($x130 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x305 (and true $x130)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x277 (and $x53 $x305)))
 (let (($x260 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x137 (and (and (and true $x53) $x260) $x277)))
 (let (($x318 (and (and $x137 $x113) $x195)))
 (let (($x297 (= input.dst.llvm-%m ?x299)))
 (let (($x159 (and $x297 $x318)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x18 (= (_ bv0 32) ?x9)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x91 $x177)))
 (let (($x97 (and $x124 $x18)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x312 $x97)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x283)))))))
 (let (($x46 (and (and (and $x132 true) $x183) $x159)))
 (let (($x164 (= $x46 true)))
 (let (($x224 (= $x164 true)))
 (let (($x211 (= $x224 true)))
 (let (($x197 (= $x318 true)))
 (let (($x50 (= $x197 true)))
 (let (($x216 (= $x50 true)))
 (let (($x321 (= $x137 true)))
 (let (($x252 (= $x321 true)))
 (let (($x310 (= $x252 true)))
 (let (($x79 (and $x113 $x195)))
 (let (($x51 (= $x79 true)))
 (let (($x281 (= $x51 true)))
 (let (($x160 (= $x281 true)))
 (let (($x225 (and $x132 $x183)))
 (let (($x273 (= $x225 true)))
 (let (($x144 (= $x273 true)))
 (let (($x269 (= $x144 true)))
 (let (($x52 (and $x269 $x160)))
 (let (($x323 (and $x52 $x310)))
 (let (($x301 (and $x323 $x216)))
 (let (($x191 (and $x301 $x211)))
 (let (($x39 (and $x191 $x5)))
 (let (($x347 (and $x39 $x346)))
 (let (($x352 (and $x347 $x199)))
 (let (($x362 (and $x352 $x361)))
 (let (($x380 (and $x362 $x379)))
 (let (($x392 (and $x380 $x390)))
 (let (($x408 (and $x392 $x407)))
 (let (($x151 (and $x222 $x78)))
 (let (($x313 (and $x11 $x151)))
 (let (($x104 (and $x307 $x313)))
 (let (($x404 (and $x104 $x408)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x405 (and $x240 $x404)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x403 (and $x67 $x405)))
 (let (($x265 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x406 (and $x265 $x403)))
 (let (($x243 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x409 (and $x243 $x406)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x411 (and $x102 $x409)))
 (let (($x412 (and $x251 $x411)))
 (let (($x330 (= ?x111 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x415 (and $x330 $x412)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x417 (and $x163 $x415)))
 (let (($x418 (and $x251 $x417)))
 (let (($x88 (= ?x142 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x416 (and $x88 $x418)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x419 (and $x74 $x416)))
 (let (($x420 (and $x251 $x419)))
 (let (($x173 (= ?x279 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x421 (and $x173 $x420)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x422 (and $x148 $x421)))
 (let (($x423 (and $x251 $x422)))
 (let (($x21 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x424 (and $x21 $x423)))
 (let (($x72 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x178 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x178)))))))
 (let (($x60 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x70 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x166 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x55)))))))
 (let (($x34 (and $x166 $x70)))
 (let (($x288 (and $x34 $x80)))
 (let (($x245 (and $x288 $x203)))
 (let (($x71 (and $x245 $x424)))
 (let (($x326 (=> $x71 $x234)))
 (not $x326)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x279 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x237 (bvmul (_ bv4294967295 32) ?x279)))
 (let ((?x10 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x237)))
 (let ((?x103 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x95 (concat ?x103 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x181 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x7 (bvadd ?x73 (_ bv3 32))))
 (let ((?x190 (concat (select input.dst.llvm-mem ?x7) (concat ?x181 ?x95))))
 (let ((?x247 (bvmul (_ bv4294967295 32) ?x190)))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x290 (concat ?x115 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x162 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x254 (bvadd ?x128 (_ bv3 32))))
 (let ((?x134 (concat (select input.dst.llvm-mem ?x254) (concat ?x162 ?x290))))
 (let ((?x248 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x280 (concat ?x248 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x217 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x194 (bvadd ?x232 (_ bv3 32))))
 (let ((?x15 (concat (select input.dst.llvm-mem ?x194) (concat ?x217 ?x280))))
 (let ((?x153 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x125 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x153)))
 (let ((?x82 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x125)))
 (let ((?x118 (bvadd (bvadd (bvadd ?x82 ?x15) ?x134) ?x247)))
 (let (($x314 (= ?x118 ?x10)))
 (let (($x221 (= $x314 true)))
 (let (($x234 (= $x221 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x399 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x30 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x394 (bvuge ?x30 (_ bv1 32))))
 (let (($x401 (=> $x394 $x399)))
 (let (($x395 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x393 (= $x394 $x395)))
 (let (($x251 (= false false)))
 (let (($x78 (= ?x30 (_ bv0 32))))
 (let (($x398 (=> $x78 $x251)))
 (let (($x400 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x397 (= $x78 $x400)))
 (let (($x410 (and (and (and $x397 $x398) $x393) $x401)))
 (let (($x407 (= $x410 true)))
 (let (($x389 (= ?x279 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x324 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x275 (ite $x324 (_ bv1 32) (_ bv0 32))))
 (let (($x222 (bvuge ?x275 (_ bv1 32))))
 (let (($x385 (=> $x222 $x389)))
 (let (($x383 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x391 (= $x222 $x383)))
 (let (($x376 (= ?x275 (_ bv0 32))))
 (let (($x381 (=> $x376 $x251)))
 (let (($x375 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x378 (= $x376 $x375)))
 (let (($x387 (and (and (and $x378 $x381) $x391) $x385)))
 (let (($x390 (= $x387 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x371 (= ?x142 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x110 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x242 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x11 (bvuge ?x242 (_ bv1 32))))
 (let (($x372 (=> $x11 $x371)))
 (let (($x368 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x369 (= $x11 $x368)))
 (let (($x363 (= ?x242 (_ bv0 32))))
 (let (($x367 (=> $x363 $x251)))
 (let (($x365 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x366 (= $x363 $x365)))
 (let (($x382 (and (and (and $x366 $x367) $x369) $x372)))
 (let (($x379 (= $x382 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x356 (= ?x111 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x180 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x189 (ite $x180 (_ bv1 32) (_ bv0 32))))
 (let (($x307 (bvuge ?x189 (_ bv1 32))))
 (let (($x357 (=> $x307 $x356)))
 (let (($x351 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x354 (= $x307 $x351)))
 (let (($x90 (= ?x189 (_ bv0 32))))
 (let (($x350 (=> $x90 $x251)))
 (let (($x353 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x349 (= $x90 $x353)))
 (let (($x360 (and (and (and $x349 $x350) $x354) $x357)))
 (let (($x361 (= $x360 true)))
 (let (($x156 (forall ((input.ind-%var2411X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var2411X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x334))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var2411X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2411X)))
 (=> $x329 (= ?x122 ?x342))))))))
 ))
 (let (($x22 (forall ((input.ind-%var2410X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2410X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var2410X) (bvult input.ind-%var2410X (_ bv100 32))))))
 ))
 (let (($x300 (and $x22 $x156)))
 (let (($x199 (= $x300 true)))
 (let (($x345 (forall ((input.ind-%var2405X (_ BitVec 32)) )(let ((?x331 (bvadd (bvmul input.ind-%var2405X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv1 32))) (select input.dst.llvm-mem ?x331))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x331 (_ bv2 32))) ?x334))))
 (let ((?x122 (input.spec-%var-m-0.1.1 input.ind-%var2405X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2405X)))
 (=> $x329 (= ?x122 ?x342))))))))
 ))
 (let (($x140 (forall ((input.ind-%var2404X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var2404X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var2404X) (bvult input.ind-%var2404X (_ bv100 32))))))
 ))
 (let (($x161 (and $x140 $x345)))
 (let (($x346 (= $x161 true)))
 (let ((?x35 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x304 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x85 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x274 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x299 (concat ?x274 (concat ?x85 (concat ?x304 ?x35)))))
 (let (($x282 (= ?x299 input.dst.llvm-%m)))
 (let (($x205 (= $x282 true)))
 (let (($x5 (= $x205 true)))
 (let (($x195 (= (bvand ?x73 (_ bv4294967292 32)) ?x73)))
 (let (($x246 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x168 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x263 (and true $x168)))
 (let (($x315 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x291 (and $x315 $x263)))
 (let (($x204 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x73 (bvsub ?x73 (_ bv8 32))) (bvult ?x73 (bvsub ?x73 (_ bv8 32))))))
 (let (($x113 (and (and (and true $x204) $x291) $x246)))
 (let (($x130 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x305 (and true $x130)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x277 (and $x53 $x305)))
 (let (($x260 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x137 (and (and (and true $x53) $x260) $x277)))
 (let (($x318 (and (and $x137 $x113) $x195)))
 (let (($x297 (= input.dst.llvm-%m ?x299)))
 (let (($x159 (and $x297 $x318)))
 (let ((?x9 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x18 (= (_ bv0 32) ?x9)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x177 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x91 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x124 (and $x91 $x177)))
 (let (($x97 (and $x124 $x18)))
 (let (($x312 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x183 (and $x312 $x97)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x132 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x283)))))))
 (let (($x46 (and (and (and $x132 true) $x183) $x159)))
 (let (($x164 (= $x46 true)))
 (let (($x224 (= $x164 true)))
 (let (($x211 (= $x224 true)))
 (let (($x197 (= $x318 true)))
 (let (($x50 (= $x197 true)))
 (let (($x216 (= $x50 true)))
 (let (($x321 (= $x137 true)))
 (let (($x252 (= $x321 true)))
 (let (($x310 (= $x252 true)))
 (let (($x79 (and $x113 $x195)))
 (let (($x51 (= $x79 true)))
 (let (($x281 (= $x51 true)))
 (let (($x160 (= $x281 true)))
 (let (($x225 (and $x132 $x183)))
 (let (($x273 (= $x225 true)))
 (let (($x144 (= $x273 true)))
 (let (($x269 (= $x144 true)))
 (let (($x52 (and $x269 $x160)))
 (let (($x323 (and $x52 $x310)))
 (let (($x301 (and $x323 $x216)))
 (let (($x191 (and $x301 $x211)))
 (let (($x39 (and $x191 $x5)))
 (let (($x347 (and $x39 $x346)))
 (let (($x352 (and $x347 $x199)))
 (let (($x362 (and $x352 $x361)))
 (let (($x380 (and $x362 $x379)))
 (let (($x392 (and $x380 $x390)))
 (let (($x408 (and $x392 $x407)))
 (let (($x151 (and $x222 $x78)))
 (let (($x313 (and $x11 $x151)))
 (let (($x104 (and $x307 $x313)))
 (let (($x404 (and $x104 $x408)))
 (let (($x240 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x405 (and $x240 $x404)))
 (let (($x67 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x403 (and $x67 $x405)))
 (let (($x265 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x406 (and $x265 $x403)))
 (let (($x243 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x409 (and $x243 $x406)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x411 (and $x102 $x409)))
 (let (($x412 (and $x251 $x411)))
 (let (($x330 (= ?x111 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x415 (and $x330 $x412)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x417 (and $x163 $x415)))
 (let (($x418 (and $x251 $x417)))
 (let (($x88 (= ?x142 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x416 (and $x88 $x418)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x419 (and $x74 $x416)))
 (let (($x420 (and $x251 $x419)))
 (let (($x173 (= ?x279 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x421 (and $x173 $x420)))
 (let (($x148 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x422 (and $x148 $x421)))
 (let (($x423 (and $x251 $x422)))
 (let (($x21 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x424 (and $x21 $x423)))
 (let (($x72 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x178 (bvugt ?x73 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (=> (bvule ?x73 (bvsub (bvadd ?x73 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x178)))))))
 (let (($x60 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x59 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x70 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x59 $x60)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x166 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x55)))))))
 (let (($x34 (and $x166 $x70)))
 (let (($x288 (and $x34 $x80)))
 (let (($x245 (and $x288 $x203)))
 (let (($x71 (and $x245 $x424)))
 (let (($x326 (=> $x71 $x234)))
 (not $x326)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 49
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x141 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x37)))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x309 (concat ?x316 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x178 (bvadd ?x285 (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x178) (concat ?x135 ?x309))))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x287)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x238 (concat ?x139 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x72 (bvadd ?x235 (_ bv3 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem ?x72) (concat ?x198 ?x238))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x60 (bvadd ?x106 (_ bv3 32))))
 (let ((?x133 (concat (select input.dst.llvm-mem ?x60) (concat ?x255 ?x206))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x43)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x200)))
 (let ((?x12 (bvadd (bvadd (bvadd ?x165 ?x133) ?x42) ?x25)))
 (let (($x147 (= ?x12 ?x141)))
 (let (($x295 (= $x147 true)))
 (let (($x96 (= $x295 true)))
 (let (($x185 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x150 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x150 (_ bv1 32))))
 (let (($x134 (=> $x327 $x185)))
 (let (($x115 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x271 (= $x327 $x115)))
 (let (($x279 (= false false)))
 (let (($x131 (= ?x150 (_ bv0 32))))
 (let (($x214 (=> $x131 $x279)))
 (let (($x114 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x162 (= $x131 $x114)))
 (let (($x54 (and (and (and $x162 $x214) $x271) $x134)))
 (let (($x319 (= $x54 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x217 (= ?x142 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x104 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x104 (_ bv1 32))))
 (let (($x176 (=> $x125 $x217)))
 (let (($x82 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x89 (= $x125 $x82)))
 (let (($x262 (= ?x104 (_ bv0 32))))
 (let (($x153 (=> $x262 $x279)))
 (let (($x36 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x284 (= $x262 $x36)))
 (let (($x280 (and (and (and $x284 $x153) $x89) $x176)))
 (let (($x66 (= $x280 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x422 (= ?x111 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x30 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x78 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x78 (_ bv1 32))))
 (let (($x423 (=> $x151 $x422)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x420 (= $x151 $x419)))
 (let (($x412 (= ?x78 (_ bv0 32))))
 (let (($x416 (=> $x412 $x279)))
 (let (($x417 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x418 (= $x412 $x417)))
 (let (($x228 (and (and (and $x418 $x416) $x420) $x423)))
 (let (($x149 (= $x228 true)))
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x408 (= ?x322 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x11 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x222 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x222 (_ bv1 32))))
 (let (($x404 (=> $x62 $x408)))
 (let (($x401 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x410 (= $x62 $x401)))
 (let (($x395 (= ?x222 (_ bv0 32))))
 (let (($x399 (=> $x395 $x279)))
 (let (($x402 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x396 (= $x395 $x402)))
 (let (($x406 (and (and (and $x396 $x399) $x410) $x404)))
 (let (($x409 (= $x406 true)))
 (let (($x397 (forall ((input.ind-%var2449X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2449X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x356))))
 (let ((?x278 (input.spec-%var-m-0.1.1 input.ind-%var2449X)))
 (let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2449X)))
 (=> $x324 (= ?x278 ?x364))))))))
 ))
 (let (($x380 (forall ((input.ind-%var2448X (_ BitVec 32)) )(let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2448X)))
 (= $x324 (and (bvule (_ bv0 32) input.ind-%var2448X) (bvult input.ind-%var2448X (_ bv100 32))))))
 ))
 (let (($x398 (and $x380 $x397)))
 (let (($x414 (= $x398 true)))
 (let (($x367 (forall ((input.ind-%var2443X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2443X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x356))))
 (let ((?x278 (input.spec-%var-m-0.1.1 input.ind-%var2443X)))
 (let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2443X)))
 (=> $x324 (= ?x278 ?x364))))))))
 ))
 (let (($x342 (forall ((input.ind-%var2442X (_ BitVec 32)) )(let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2442X)))
 (= $x324 (and (bvule (_ bv0 32) input.ind-%var2442X) (bvult input.ind-%var2442X (_ bv100 32))))))
 ))
 (let (($x373 (and $x342 $x367)))
 (let (($x368 (= $x373 true)))
 (let ((?x257 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x191 (concat ?x211 (concat ?x46 (concat ?x299 ?x257)))))
 (let (($x76 (= ?x191 input.dst.llvm-%m)))
 (let (($x328 (= $x76 true)))
 (let (($x140 (= $x328 true)))
 (let (($x306 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x281 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x195 (and true $x298)))
 (let (($x291 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x79 (and $x291 $x195)))
 (let (($x230 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv8 32))) (bvult ?x285 (bvsub ?x285 (_ bv8 32))))))
 (let (($x154 (and (and (and true $x230) $x79) $x281)))
 (let (($x310 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x323 (and true $x310)))
 (let (($x201 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x201 $x323)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv12 32))) (bvult ?x106 (bvsub ?x106 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x201) $x305) $x69)))
 (let (($x41 (and (and $x50 $x154) $x306)))
 (let (($x282 (= input.dst.llvm-%m ?x191)))
 (let (($x205 (and $x282 $x41)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x196)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x225 $x144)))
 (let (($x325 (and $x269 $x182)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x20 $x325)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x101)))))))
 (let (($x117 (and (and (and $x183 true) $x6) $x205)))
 (let (($x329 (= $x117 true)))
 (let (($x293 (= $x329 true)))
 (let (($x303 (= $x293 true)))
 (let (($x274 (= $x41 true)))
 (let (($x186 (= $x274 true)))
 (let (($x85 (= $x186 true)))
 (let (($x216 (= $x50 true)))
 (let (($x301 (= $x216 true)))
 (let (($x244 (= $x301 true)))
 (let (($x158 (and $x154 $x306)))
 (let (($x233 (= $x158 true)))
 (let (($x127 (= $x233 true)))
 (let (($x212 (= $x127 true)))
 (let (($x204 (and $x183 $x6)))
 (let (($x289 (= $x204 true)))
 (let (($x170 (= $x289 true)))
 (let (($x58 (= $x170 true)))
 (let (($x260 (and $x58 $x212)))
 (let (($x83 (and $x260 $x244)))
 (let (($x138 (and $x83 $x85)))
 (let (($x294 (and $x138 $x303)))
 (let (($x122 (and $x294 $x140)))
 (let (($x369 (and $x122 $x368)))
 (let (($x394 (and $x369 $x414)))
 (let (($x411 (and $x394 $x409)))
 (let (($x61 (and $x411 $x149)))
 (let (($x15 (and $x61 $x66)))
 (let (($x181 (and $x15 $x319)))
 (let (($x220 (and $x262 $x327)))
 (let (($x283 (and $x151 $x220)))
 (let (($x179 (and $x62 $x283)))
 (let (($x109 (and $x179 $x181)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x103 (and $x242 $x109)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x192 (and $x307 $x103)))
 (let (($x180 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x95 (and $x180 $x192)))
 (let (($x64 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x250 (and $x64 $x95)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x190 (and $x174 $x250)))
 (let (($x247 (and $x279 $x190)))
 (let (($x65 (= ?x322 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x118 (and $x65 $x247)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x107 (and $x102 $x118)))
 (let (($x237 (and $x279 $x107)))
 (let (($x330 (= ?x111 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x10 (and $x330 $x237)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x314 (and $x163 $x10)))
 (let (($x221 (and $x279 $x314)))
 (let (($x88 (= ?x142 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x234 (and $x88 $x221)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x326 (and $x119 $x234)))
 (let (($x296 (and $x279 $x326)))
 (let (($x292 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x241 (and $x292 $x296)))
 (let (($x187 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x264 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x29 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x264)))))))
 (let (($x136 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x73 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x136)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x226 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x86)))))))
 (let (($x56 (and $x226 $x73)))
 (let (($x272 (and $x56 $x29)))
 (let (($x286 (and $x272 $x193)))
 (let (($x188 (and $x286 $x241)))
 (let (($x231 (=> $x188 $x96)))
 (not $x231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x141 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x37)))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x309 (concat ?x316 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x178 (bvadd ?x285 (_ bv3 32))))
 (let ((?x287 (concat (select input.dst.llvm-mem ?x178) (concat ?x135 ?x309))))
 (let ((?x25 (bvmul (_ bv4294967295 32) ?x287)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x238 (concat ?x139 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x72 (bvadd ?x235 (_ bv3 32))))
 (let ((?x42 (concat (select input.dst.llvm-mem ?x72) (concat ?x198 ?x238))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x206 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x255 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x60 (bvadd ?x106 (_ bv3 32))))
 (let ((?x133 (concat (select input.dst.llvm-mem ?x60) (concat ?x255 ?x206))))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x200 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x43)))
 (let ((?x165 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x200)))
 (let ((?x12 (bvadd (bvadd (bvadd ?x165 ?x133) ?x42) ?x25)))
 (let (($x147 (= ?x12 ?x141)))
 (let (($x295 (= $x147 true)))
 (let (($x96 (= $x295 true)))
 (let (($x185 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x150 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x327 (bvuge ?x150 (_ bv1 32))))
 (let (($x134 (=> $x327 $x185)))
 (let (($x115 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x271 (= $x327 $x115)))
 (let (($x279 (= false false)))
 (let (($x131 (= ?x150 (_ bv0 32))))
 (let (($x214 (=> $x131 $x279)))
 (let (($x114 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x162 (= $x131 $x114)))
 (let (($x54 (and (and (and $x162 $x214) $x271) $x134)))
 (let (($x319 (= $x54 true)))
 (let ((?x142 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x217 (= ?x142 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x104 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x125 (bvuge ?x104 (_ bv1 32))))
 (let (($x176 (=> $x125 $x217)))
 (let (($x82 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x89 (= $x125 $x82)))
 (let (($x262 (= ?x104 (_ bv0 32))))
 (let (($x153 (=> $x262 $x279)))
 (let (($x36 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x284 (= $x262 $x36)))
 (let (($x280 (and (and (and $x284 $x153) $x89) $x176)))
 (let (($x66 (= $x280 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x422 (= ?x111 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x30 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x78 (ite $x30 (_ bv1 32) (_ bv0 32))))
 (let (($x151 (bvuge ?x78 (_ bv1 32))))
 (let (($x423 (=> $x151 $x422)))
 (let (($x419 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x420 (= $x151 $x419)))
 (let (($x412 (= ?x78 (_ bv0 32))))
 (let (($x416 (=> $x412 $x279)))
 (let (($x417 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x418 (= $x412 $x417)))
 (let (($x228 (and (and (and $x418 $x416) $x420) $x423)))
 (let (($x149 (= $x228 true)))
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x408 (= ?x322 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x11 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x222 (ite $x11 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x222 (_ bv1 32))))
 (let (($x404 (=> $x62 $x408)))
 (let (($x401 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x410 (= $x62 $x401)))
 (let (($x395 (= ?x222 (_ bv0 32))))
 (let (($x399 (=> $x395 $x279)))
 (let (($x402 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x396 (= $x395 $x402)))
 (let (($x406 (and (and (and $x396 $x399) $x410) $x404)))
 (let (($x409 (= $x406 true)))
 (let (($x397 (forall ((input.ind-%var2449X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2449X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x356))))
 (let ((?x278 (input.spec-%var-m-0.1.1 input.ind-%var2449X)))
 (let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2449X)))
 (=> $x324 (= ?x278 ?x364))))))))
 ))
 (let (($x380 (forall ((input.ind-%var2448X (_ BitVec 32)) )(let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2448X)))
 (= $x324 (and (bvule (_ bv0 32) input.ind-%var2448X) (bvult input.ind-%var2448X (_ bv100 32))))))
 ))
 (let (($x398 (and $x380 $x397)))
 (let (($x414 (= $x398 true)))
 (let (($x367 (forall ((input.ind-%var2443X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2443X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x356 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x356))))
 (let ((?x278 (input.spec-%var-m-0.1.1 input.ind-%var2443X)))
 (let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2443X)))
 (=> $x324 (= ?x278 ?x364))))))))
 ))
 (let (($x342 (forall ((input.ind-%var2442X (_ BitVec 32)) )(let (($x324 (input.spec-%var-m-0.0.1 input.ind-%var2442X)))
 (= $x324 (and (bvule (_ bv0 32) input.ind-%var2442X) (bvult input.ind-%var2442X (_ bv100 32))))))
 ))
 (let (($x373 (and $x342 $x367)))
 (let (($x368 (= $x373 true)))
 (let ((?x257 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x299 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x211 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x191 (concat ?x211 (concat ?x46 (concat ?x299 ?x257)))))
 (let (($x76 (= ?x191 input.dst.llvm-%m)))
 (let (($x328 (= $x76 true)))
 (let (($x140 (= $x328 true)))
 (let (($x306 (= (bvand ?x285 (_ bv4294967292 32)) ?x285)))
 (let (($x281 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x298 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x195 (and true $x298)))
 (let (($x291 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x79 (and $x291 $x195)))
 (let (($x230 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x285 (bvsub ?x285 (_ bv8 32))) (bvult ?x285 (bvsub ?x285 (_ bv8 32))))))
 (let (($x154 (and (and (and true $x230) $x79) $x281)))
 (let (($x310 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x323 (and true $x310)))
 (let (($x201 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x69 (and $x201 $x323)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv12 32))) (bvult ?x106 (bvsub ?x106 (_ bv12 32))))))
 (let (($x50 (and (and (and true $x201) $x305) $x69)))
 (let (($x41 (and (and $x50 $x154) $x306)))
 (let (($x282 (= input.dst.llvm-%m ?x191)))
 (let (($x205 (and $x282 $x41)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x182 (= (_ bv0 32) ?x196)))
 (let ((?x273 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x144 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x273)))
 (let (($x225 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x269 (and $x225 $x144)))
 (let (($x325 (and $x269 $x182)))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (and $x20 $x325)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x183 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x101)))))))
 (let (($x117 (and (and (and $x183 true) $x6) $x205)))
 (let (($x329 (= $x117 true)))
 (let (($x293 (= $x329 true)))
 (let (($x303 (= $x293 true)))
 (let (($x274 (= $x41 true)))
 (let (($x186 (= $x274 true)))
 (let (($x85 (= $x186 true)))
 (let (($x216 (= $x50 true)))
 (let (($x301 (= $x216 true)))
 (let (($x244 (= $x301 true)))
 (let (($x158 (and $x154 $x306)))
 (let (($x233 (= $x158 true)))
 (let (($x127 (= $x233 true)))
 (let (($x212 (= $x127 true)))
 (let (($x204 (and $x183 $x6)))
 (let (($x289 (= $x204 true)))
 (let (($x170 (= $x289 true)))
 (let (($x58 (= $x170 true)))
 (let (($x260 (and $x58 $x212)))
 (let (($x83 (and $x260 $x244)))
 (let (($x138 (and $x83 $x85)))
 (let (($x294 (and $x138 $x303)))
 (let (($x122 (and $x294 $x140)))
 (let (($x369 (and $x122 $x368)))
 (let (($x394 (and $x369 $x414)))
 (let (($x411 (and $x394 $x409)))
 (let (($x61 (and $x411 $x149)))
 (let (($x15 (and $x61 $x66)))
 (let (($x181 (and $x15 $x319)))
 (let (($x220 (and $x262 $x327)))
 (let (($x283 (and $x151 $x220)))
 (let (($x179 (and $x62 $x283)))
 (let (($x109 (and $x179 $x181)))
 (let (($x242 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x103 (and $x242 $x109)))
 (let (($x307 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x192 (and $x307 $x103)))
 (let (($x180 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x95 (and $x180 $x192)))
 (let (($x64 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x250 (and $x64 $x95)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x190 (and $x174 $x250)))
 (let (($x247 (and $x279 $x190)))
 (let (($x65 (= ?x322 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x118 (and $x65 $x247)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x107 (and $x102 $x118)))
 (let (($x237 (and $x279 $x107)))
 (let (($x330 (= ?x111 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x10 (and $x330 $x237)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x314 (and $x163 $x10)))
 (let (($x221 (and $x279 $x314)))
 (let (($x88 (= ?x142 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x234 (and $x88 $x221)))
 (let (($x119 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x326 (and $x119 $x234)))
 (let (($x296 (and $x279 $x326)))
 (let (($x292 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x241 (and $x292 $x296)))
 (let (($x187 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x264 (bvugt ?x285 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x29 (=> (bvule ?x285 (bvsub (bvadd ?x285 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x264)))))))
 (let (($x136 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x44 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x60)))
 (let (($x73 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x44 $x136)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x166 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x145 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x166)))
 (let (($x226 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x145 $x86)))))))
 (let (($x56 (and $x226 $x73)))
 (let (($x272 (and $x56 $x29)))
 (let (($x286 (and $x272 $x193)))
 (let (($x188 (and $x286 $x241)))
 (let (($x231 (=> $x188 $x96)))
 (not $x231))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 50
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x379 (bvadd ?x67 ?x322)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x383 (concat ?x389 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x264 (bvadd ?x7 (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x264) (concat ?x386 ?x383))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x392)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x371 (concat ?x374 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x187 (bvadd ?x128 (_ bv3 32))))
 (let ((?x381 (concat (select input.dst.llvm-mem ?x187) (concat ?x378 ?x371))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x49 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x136 (bvadd ?x49 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x136) (concat ?x156 ?x352))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x345)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x335)))
 (let ((?x251 (bvadd (bvadd (bvadd ?x346 ?x90) ?x381) ?x370)))
 (let (($x344 (= ?x251 ?x379)))
 (let (($x350 (= $x344 true)))
 (let (($x413 (= $x350 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x184 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x97 (_ bv1 32))))
 (let (($x42 (=> $x40 $x184)))
 (let (($x139 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x202 (= $x40 $x139)))
 (let (($x142 (= false false)))
 (let (($x312 (= ?x97 (_ bv0 32))))
 (let (($x198 (=> $x312 $x142)))
 (let (($x308 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x236 (= $x312 $x308)))
 (let (($x208 (and (and (and $x236 $x198) $x202) $x42)))
 (let (($x93 (= $x208 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x255 (= ?x111 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x179 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x179 (_ bv1 32))))
 (let (($x302 (=> $x200 $x255)))
 (let (($x165 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x14 (= $x200 $x165)))
 (let (($x132 (= ?x179 (_ bv0 32))))
 (let (($x43 (=> $x132 $x142)))
 (let (($x38 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x126 (= $x132 $x38)))
 (let (($x206 (and (and (and $x126 $x43) $x14) $x302)))
 (let (($x8 (= $x206 true)))
 (let (($x326 (= ?x322 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x150 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x327 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x327 (_ bv1 32))))
 (let (($x296 (=> $x220 $x326)))
 (let (($x314 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x221 (= $x220 $x314)))
 (let (($x247 (= ?x327 (_ bv0 32))))
 (let (($x10 (=> $x247 $x142)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x247 $x107)))
 (let (($x155 (and (and (and $x237 $x10) $x221) $x296)))
 (let (($x17 (= $x155 true)))
 (let (($x181 (= ?x67 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x151 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x262 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x262 (_ bv1 32))))
 (let (($x109 (=> $x47 $x181)))
 (let (($x134 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x54 (= $x47 $x134)))
 (let (($x115 (= ?x262 (_ bv0 32))))
 (let (($x185 (=> $x115 $x142)))
 (let (($x152 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x290 (= $x115 $x152)))
 (let (($x95 (and (and (and $x290 $x185) $x54) $x109)))
 (let (($x250 (= $x95 true)))
 (let (($x114 (forall ((input.ind-%var2487X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var2487X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x408))))
 (let ((?x167 (input.spec-%var-m-0.1.1 input.ind-%var2487X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2487X)))
 (=> $x313 (= ?x167 ?x415))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2486X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var2486X) (bvult input.ind-%var2486X (_ bv100 32))))))
 ))
 (let (($x162 (and $x61 $x114)))
 (let (($x214 (= $x162 true)))
 (let (($x416 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var2481X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x408))))
 (let ((?x167 (input.spec-%var-m-0.1.1 input.ind-%var2481X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2481X)))
 (=> $x313 (= ?x167 ?x415))))))))
 ))
 (let (($x364 (forall ((input.ind-%var2480X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2480X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var2480X) (bvult input.ind-%var2480X (_ bv100 32))))))
 ))
 (let (($x424 (and $x364 $x416)))
 (let (($x419 (= $x424 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x294 (concat ?x303 (concat ?x117 (concat ?x191 ?x297)))))
 (let (($x334 (= ?x294 input.dst.llvm-%m)))
 (let (($x339 (= $x334 true)))
 (let (($x342 (= $x339 true)))
 (let (($x318 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x127 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x306 (and true $x53)))
 (let (($x79 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x158 (and $x79 $x306)))
 (let (($x113 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv8 32))) (bvult ?x7 (bvsub ?x7 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x113) $x158) $x127)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x83 (and true $x244)))
 (let (($x137 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x123 (and $x137 $x83)))
 (let (($x323 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv12 32))) (bvult ?x49 (bvsub ?x49 (_ bv12 32))))))
 (let (($x186 (and (and (and true $x137) $x323) $x123)))
 (let (($x224 (and (and $x186 $x320) $x318)))
 (let (($x76 (= input.dst.llvm-%m ?x294)))
 (let (($x328 (and $x76 $x224)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x315 (= (_ bv0 32) ?x169)))
 (let ((?x289 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x204 $x170)))
 (let (($x87 (and $x58 $x315)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x18 $x87)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x273)))))))
 (let (($x21 (and (and (and $x6 true) $x116) $x328)))
 (let (($x324 (= $x21 true)))
 (let (($x332 (= $x324 true)))
 (let (($x341 (= $x332 true)))
 (let (($x211 (= $x224 true)))
 (let (($x159 (= $x211 true)))
 (let (($x46 (= $x159 true)))
 (let (($x85 (= $x186 true)))
 (let (($x138 (= $x85 true)))
 (let (($x5 (= $x138 true)))
 (let (($x268 (and $x320 $x318)))
 (let (($x121 (= $x268 true)))
 (let (($x256 (= $x121 true)))
 (let (($x130 (= $x256 true)))
 (let (($x230 (and $x6 $x116)))
 (let (($x160 (= $x230 true)))
 (let (($x168 (= $x160 true)))
 (let (($x263 (= $x168 true)))
 (let (($x305 (and $x263 $x130)))
 (let (($x39 (and $x305 $x5)))
 (let (($x210 (and $x39 $x46)))
 (let (($x333 (and $x210 $x341)))
 (let (($x278 (and $x333 $x342)))
 (let (($x420 (and $x278 $x419)))
 (let (($x27 (and $x420 $x214)))
 (let (($x190 (and $x27 $x250)))
 (let (($x48 (and $x190 $x17)))
 (let (($x133 (and $x48 $x8)))
 (let (($x135 (and $x133 $x93)))
 (let (($x91 (and $x132 $x312)))
 (let (($x101 (and $x220 $x91)))
 (let (($x177 (and $x47 $x101)))
 (let (($x63 (and $x177 $x135)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x316 (and $x78 $x63)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x253 (and $x62 $x316)))
 (let (($x11 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x309 (and $x11 $x253)))
 (let (($x110 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x99 (and $x110 $x309)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x287 (and $x189 $x99)))
 (let (($x25 (and $x142 $x287)))
 (let (($x240 (= ?x67 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x12 (and $x240 $x25)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x172 (and $x174 $x12)))
 (let (($x141 (and $x142 $x172)))
 (let (($x65 (= ?x322 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x147 (and $x65 $x141)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x295 (and $x102 $x147)))
 (let (($x96 (and $x142 $x295)))
 (let (($x330 (= ?x111 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x231 (and $x330 $x96)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x105 (and $x266 $x231)))
 (let (($x26 (and $x142 $x105)))
 (let (($x74 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x209 (and $x74 $x26)))
 (let (($x311 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x219 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x254 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x219)))))))
 (let (($x16 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x285 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x16)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x194 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x86)))))))
 (let (($x59 (and $x194 $x285)))
 (let (($x100 (and $x59 $x254)))
 (let (($x45 (and $x100 $x148)))
 (let (($x35 (and $x45 $x209)))
 (let (($x377 (=> $x35 $x413)))
 (not $x377))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x379 (bvadd ?x67 ?x322)))
 (let ((?x389 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x383 (concat ?x389 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x386 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x264 (bvadd ?x7 (_ bv3 32))))
 (let ((?x392 (concat (select input.dst.llvm-mem ?x264) (concat ?x386 ?x383))))
 (let ((?x370 (bvmul (_ bv4294967295 32) ?x392)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x371 (concat ?x374 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x187 (bvadd ?x128 (_ bv3 32))))
 (let ((?x381 (concat (select input.dst.llvm-mem ?x187) (concat ?x378 ?x371))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x352 (concat ?x199 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x49 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x136 (bvadd ?x49 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x136) (concat ?x156 ?x352))))
 (let ((?x345 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x345)))
 (let ((?x346 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x335)))
 (let ((?x251 (bvadd (bvadd (bvadd ?x346 ?x90) ?x381) ?x370)))
 (let (($x344 (= ?x251 ?x379)))
 (let (($x350 (= $x344 true)))
 (let (($x413 (= $x350 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x184 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x92 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x97 (ite $x92 (_ bv1 32) (_ bv0 32))))
 (let (($x40 (bvuge ?x97 (_ bv1 32))))
 (let (($x42 (=> $x40 $x184)))
 (let (($x139 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x202 (= $x40 $x139)))
 (let (($x142 (= false false)))
 (let (($x312 (= ?x97 (_ bv0 32))))
 (let (($x198 (=> $x312 $x142)))
 (let (($x308 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x236 (= $x312 $x308)))
 (let (($x208 (and (and (and $x236 $x198) $x202) $x42)))
 (let (($x93 (= $x208 true)))
 (let ((?x111 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x255 (= ?x111 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x179 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x179 (_ bv1 32))))
 (let (($x302 (=> $x200 $x255)))
 (let (($x165 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x14 (= $x200 $x165)))
 (let (($x132 (= ?x179 (_ bv0 32))))
 (let (($x43 (=> $x132 $x142)))
 (let (($x38 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x126 (= $x132 $x38)))
 (let (($x206 (and (and (and $x126 $x43) $x14) $x302)))
 (let (($x8 (= $x206 true)))
 (let (($x326 (= ?x322 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x150 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x327 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x220 (bvuge ?x327 (_ bv1 32))))
 (let (($x296 (=> $x220 $x326)))
 (let (($x314 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x221 (= $x220 $x314)))
 (let (($x247 (= ?x327 (_ bv0 32))))
 (let (($x10 (=> $x247 $x142)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x247 $x107)))
 (let (($x155 (and (and (and $x237 $x10) $x221) $x296)))
 (let (($x17 (= $x155 true)))
 (let (($x181 (= ?x67 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x151 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x262 (ite $x151 (_ bv1 32) (_ bv0 32))))
 (let (($x47 (bvuge ?x262 (_ bv1 32))))
 (let (($x109 (=> $x47 $x181)))
 (let (($x134 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x54 (= $x47 $x134)))
 (let (($x115 (= ?x262 (_ bv0 32))))
 (let (($x185 (=> $x115 $x142)))
 (let (($x152 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x290 (= $x115 $x152)))
 (let (($x95 (and (and (and $x290 $x185) $x54) $x109)))
 (let (($x250 (= $x95 true)))
 (let (($x114 (forall ((input.ind-%var2487X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var2487X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x408))))
 (let ((?x167 (input.spec-%var-m-0.1.1 input.ind-%var2487X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2487X)))
 (=> $x313 (= ?x167 ?x415))))))))
 ))
 (let (($x61 (forall ((input.ind-%var2486X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2486X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var2486X) (bvult input.ind-%var2486X (_ bv100 32))))))
 ))
 (let (($x162 (and $x61 $x114)))
 (let (($x214 (= $x162 true)))
 (let (($x416 (forall ((input.ind-%var2481X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var2481X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x408 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x415 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x408))))
 (let ((?x167 (input.spec-%var-m-0.1.1 input.ind-%var2481X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2481X)))
 (=> $x313 (= ?x167 ?x415))))))))
 ))
 (let (($x364 (forall ((input.ind-%var2480X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var2480X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var2480X) (bvult input.ind-%var2480X (_ bv100 32))))))
 ))
 (let (($x424 (and $x364 $x416)))
 (let (($x419 (= $x424 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x191 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x303 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x294 (concat ?x303 (concat ?x117 (concat ?x191 ?x297)))))
 (let (($x334 (= ?x294 input.dst.llvm-%m)))
 (let (($x339 (= $x334 true)))
 (let (($x342 (= $x339 true)))
 (let (($x318 (= (bvand ?x7 (_ bv4294967292 32)) ?x7)))
 (let (($x127 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x306 (and true $x53)))
 (let (($x79 (= (bvand ?x49 (_ bv4294967292 32)) ?x49)))
 (let (($x158 (and $x79 $x306)))
 (let (($x113 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x7 (bvsub ?x7 (_ bv8 32))) (bvult ?x7 (bvsub ?x7 (_ bv8 32))))))
 (let (($x320 (and (and (and true $x113) $x158) $x127)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x83 (and true $x244)))
 (let (($x137 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x123 (and $x137 $x83)))
 (let (($x323 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x49 (bvsub ?x49 (_ bv12 32))) (bvult ?x49 (bvsub ?x49 (_ bv12 32))))))
 (let (($x186 (and (and (and true $x137) $x323) $x123)))
 (let (($x224 (and (and $x186 $x320) $x318)))
 (let (($x76 (= input.dst.llvm-%m ?x294)))
 (let (($x328 (and $x76 $x224)))
 (let ((?x169 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x315 (= (_ bv0 32) ?x169)))
 (let ((?x289 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x170 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x289)))
 (let (($x204 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x58 (and $x204 $x170)))
 (let (($x87 (and $x58 $x315)))
 (let (($x18 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x116 (and $x18 $x87)))
 (let (($x273 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x6 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x273)))))))
 (let (($x21 (and (and (and $x6 true) $x116) $x328)))
 (let (($x324 (= $x21 true)))
 (let (($x332 (= $x324 true)))
 (let (($x341 (= $x332 true)))
 (let (($x211 (= $x224 true)))
 (let (($x159 (= $x211 true)))
 (let (($x46 (= $x159 true)))
 (let (($x85 (= $x186 true)))
 (let (($x138 (= $x85 true)))
 (let (($x5 (= $x138 true)))
 (let (($x268 (and $x320 $x318)))
 (let (($x121 (= $x268 true)))
 (let (($x256 (= $x121 true)))
 (let (($x130 (= $x256 true)))
 (let (($x230 (and $x6 $x116)))
 (let (($x160 (= $x230 true)))
 (let (($x168 (= $x160 true)))
 (let (($x263 (= $x168 true)))
 (let (($x305 (and $x263 $x130)))
 (let (($x39 (and $x305 $x5)))
 (let (($x210 (and $x39 $x46)))
 (let (($x333 (and $x210 $x341)))
 (let (($x278 (and $x333 $x342)))
 (let (($x420 (and $x278 $x419)))
 (let (($x27 (and $x420 $x214)))
 (let (($x190 (and $x27 $x250)))
 (let (($x48 (and $x190 $x17)))
 (let (($x133 (and $x48 $x8)))
 (let (($x135 (and $x133 $x93)))
 (let (($x91 (and $x132 $x312)))
 (let (($x101 (and $x220 $x91)))
 (let (($x177 (and $x47 $x101)))
 (let (($x63 (and $x177 $x135)))
 (let (($x78 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x316 (and $x78 $x63)))
 (let (($x62 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x253 (and $x62 $x316)))
 (let (($x11 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x309 (and $x11 $x253)))
 (let (($x110 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x99 (and $x110 $x309)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x287 (and $x189 $x99)))
 (let (($x25 (and $x142 $x287)))
 (let (($x240 (= ?x67 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x12 (and $x240 $x25)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x172 (and $x174 $x12)))
 (let (($x141 (and $x142 $x172)))
 (let (($x65 (= ?x322 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x147 (and $x65 $x141)))
 (let (($x102 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x295 (and $x102 $x147)))
 (let (($x96 (and $x142 $x295)))
 (let (($x330 (= ?x111 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x231 (and $x330 $x96)))
 (let (($x266 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x105 (and $x266 $x231)))
 (let (($x26 (and $x142 $x105)))
 (let (($x74 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x209 (and $x74 $x26)))
 (let (($x311 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x219 (bvugt ?x7 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x254 (=> (bvule ?x7 (bvsub (bvadd ?x7 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x219)))))))
 (let (($x16 (bvugt ?x49 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x136)))
 (let (($x285 (=> (bvule ?x49 (bvsub (bvadd ?x49 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x16)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x194 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x86)))))))
 (let (($x59 (and $x194 $x285)))
 (let (($x100 (and $x59 $x254)))
 (let (($x45 (and $x100 $x148)))
 (let (($x35 (and $x45 $x209)))
 (let (($x377 (=> $x35 $x413)))
 (not $x377))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 51
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x366 (bvmul (_ bv4294967295 32) ?x322)))
 (let ((?x131 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x366)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x219 (bvadd ?x178 (_ bv3 32))))
 (let ((?x421 (concat (select input.dst.llvm-mem ?x219) (concat ?x239 ?x89))))
 (let ((?x228 (bvmul (_ bv4294967295 32) ?x421)))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x423 (concat ?x422 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x311 (bvadd ?x235 (_ bv3 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem ?x311) (concat ?x351 ?x423))))
 (let ((?x394 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x380 (concat ?x394 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x129 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x16 (bvadd ?x129 (_ bv3 32))))
 (let ((?x396 (concat (select input.dst.llvm-mem ?x16) (concat ?x369 ?x380))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x358)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x373)))
 (let ((?x149 (bvadd (bvadd (bvadd ?x393 ?x396) ?x280) ?x228)))
 (let (($x36 (= ?x149 ?x131)))
 (let (($x32 (= $x36 true)))
 (let (($x376 (= $x32 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x331 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x84 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x325 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x325 (_ bv1 32))))
 (let (($x381 (=> $x20 $x331)))
 (let (($x374 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x349 (= $x20 $x374)))
 (let (($x111 (= false false)))
 (let (($x382 (= ?x325 (_ bv0 32))))
 (let (($x375 (=> $x382 $x111)))
 (let (($x372 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x378 (= $x382 $x372)))
 (let (($x385 (and (and (and $x378 $x375) $x349) $x381)))
 (let (($x391 (= $x385 true)))
 (let (($x156 (= ?x322 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x177 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x177 (_ bv1 32))))
 (let (($x353 (=> $x183 $x156)))
 (let (($x346 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x300 (= $x183 $x346)))
 (let (($x276 (= ?x177 (_ bv0 32))))
 (let (($x335 (=> $x276 $x111)))
 (let (($x275 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x345 (= $x276 $x275)))
 (let (($x352 (and (and (and $x345 $x335) $x300) $x353)))
 (let (($x347 (= $x352 true)))
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x105 (= ?x67 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x312 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x312 (_ bv1 32))))
 (let (($x26 (=> $x147 $x105)))
 (let (($x295 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x96 (= $x147 $x295)))
 (let (($x91 (= ?x312 (_ bv0 32))))
 (let (($x141 (=> $x91 $x111)))
 (let (($x12 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x172 (= $x91 $x12)))
 (let (($x161 (and (and (and $x172 $x141) $x96) $x26)))
 (let (($x336 (= $x161 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x135 (= ?x307 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x220 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x132 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x132 (_ bv1 32))))
 (let (($x63 (=> $x92 $x135)))
 (let (($x42 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x208 (= $x92 $x42)))
 (let (($x139 (= ?x132 (_ bv0 32))))
 (let (($x184 (=> $x139 $x111)))
 (let (($x317 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x238 (= $x139 $x317)))
 (let (($x309 (and (and (and $x238 $x184) $x208) $x63)))
 (let (($x99 (= $x309 true)))
 (let (($x236 (forall ((input.ind-%var2525X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2525X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x181))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var2525X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2525X)))
 (=> $x283 (= ?x112 ?x118))))))))
 ))
 (let (($x48 (forall ((input.ind-%var2524X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2524X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var2524X) (bvult input.ind-%var2524X (_ bv100 32))))))
 ))
 (let (($x198 (and $x48 $x236)))
 (let (($x223 (= $x198 true)))
 (let (($x10 (forall ((input.ind-%var2519X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2519X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x181))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var2519X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2519X)))
 (=> $x283 (= ?x112 ?x118))))))))
 ))
 (let (($x415 (forall ((input.ind-%var2518X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2518X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var2518X) (bvult input.ind-%var2518X (_ bv100 32))))))
 ))
 (let (($x241 (and $x415 $x10)))
 (let (($x314 (= $x241 true)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x333 (concat ?x341 (concat ?x21 (concat ?x294 ?x282)))))
 (let (($x356 (= ?x333 input.dst.llvm-%m)))
 (let (($x361 (= $x356 true)))
 (let (($x364 (= $x361 true)))
 (let (($x41 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x256 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x201 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x318 (and true $x201)))
 (let (($x158 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x268 (and $x158 $x318)))
 (let (($x154 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x178 (bvsub ?x178 (_ bv8 32))) (bvult ?x178 (bvsub ?x178 (_ bv8 32))))))
 (let (($x197 (and (and (and true $x154) $x268) $x256)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x39 (and true $x5)))
 (let (($x50 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x304 (and $x50 $x39)))
 (let (($x83 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv12 32))) (bvult ?x129 (bvsub ?x129 (_ bv12 32))))))
 (let (($x159 (and (and (and true $x50) $x83) $x304)))
 (let (($x293 (and (and $x159 $x197) $x41)))
 (let (($x334 (= input.dst.llvm-%m ?x333)))
 (let (($x339 (and $x334 $x293)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x291 (= (_ bv0 32) ?x77)))
 (let ((?x160 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (and $x230 $x168)))
 (let (($x57 (and $x263 $x291)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x182 $x57)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x289)))))))
 (let (($x292 (and (and (and $x116 true) $x246) $x339)))
 (let (($x313 (= $x292 true)))
 (let (($x354 (= $x313 true)))
 (let (($x363 (= $x354 true)))
 (let (($x303 (= $x293 true)))
 (let (($x205 (= $x303 true)))
 (let (($x117 (= $x205 true)))
 (let (($x46 (= $x159 true)))
 (let (($x210 (= $x46 true)))
 (let (($x140 (= $x210 true)))
 (let (($x321 (and $x197 $x41)))
 (let (($x277 (= $x321 true)))
 (let (($x252 (= $x277 true)))
 (let (($x310 (= $x252 true)))
 (let (($x113 (and $x116 $x246)))
 (let (($x212 (= $x113 true)))
 (let (($x298 (= $x212 true)))
 (let (($x195 (= $x298 true)))
 (let (($x323 (and $x195 $x310)))
 (let (($x122 (and $x323 $x140)))
 (let (($x164 (and $x122 $x117)))
 (let (($x355 (and $x164 $x363)))
 (let (($x167 (and $x355 $x364)))
 (let (($x221 (and $x167 $x314)))
 (let (($x40 (and $x221 $x223)))
 (let (($x287 (and $x40 $x99)))
 (let (($x340 (and $x287 $x336)))
 (let (($x90 (and $x340 $x347)))
 (let (($x386 (and $x90 $x391)))
 (let (($x225 (and $x183 $x20)))
 (let (($x273 (and $x91 $x225)))
 (let (($x144 (and $x92 $x273)))
 (let (($x388 (and $x144 $x386)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x389 (and $x327 $x388)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x390 (and $x47 $x389)))
 (let (($x151 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x383 (and $x151 $x390)))
 (let (($x30 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x384 (and $x30 $x383)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x392 (and $x222 $x384)))
 (let (($x370 (and $x111 $x392)))
 (let (($x242 (= ?x307 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x251 (and $x242 $x370)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x379 (and $x189 $x251)))
 (let (($x344 (and $x111 $x379)))
 (let (($x240 (= ?x67 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x350 (and $x240 $x344)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x413 (and $x174 $x350)))
 (let (($x377 (and $x111 $x413)))
 (let (($x65 (= ?x322 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x400 (and $x65 $x377)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x215 (and $x108 $x400)))
 (let (($x124 (and $x111 $x215)))
 (let (($x163 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x257 (and $x163 $x124)))
 (let (($x245 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x288 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x72 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x288)))))))
 (let (($x34 (bvugt ?x129 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x7 (=> (bvule ?x129 (bvsub (bvadd ?x129 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x34)))))))
 (let (($x106 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x60 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x106)))))))
 (let (($x44 (and $x60 $x7)))
 (let (($x143 (and $x44 $x72)))
 (let (($x19 (and $x143 $x119)))
 (let (($x104 (and $x19 $x257)))
 (let (($x81 (=> $x104 $x376)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x322 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x366 (bvmul (_ bv4294967295 32) ?x322)))
 (let ((?x131 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x366)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x89 (concat ?x82 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x178 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x219 (bvadd ?x178 (_ bv3 32))))
 (let ((?x421 (concat (select input.dst.llvm-mem ?x219) (concat ?x239 ?x89))))
 (let ((?x228 (bvmul (_ bv4294967295 32) ?x421)))
 (let ((?x422 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x423 (concat ?x422 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x311 (bvadd ?x235 (_ bv3 32))))
 (let ((?x280 (concat (select input.dst.llvm-mem ?x311) (concat ?x351 ?x423))))
 (let ((?x394 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x380 (concat ?x394 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x369 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x129 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x16 (bvadd ?x129 (_ bv3 32))))
 (let ((?x396 (concat (select input.dst.llvm-mem ?x16) (concat ?x369 ?x380))))
 (let ((?x358 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x373 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x358)))
 (let ((?x393 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x373)))
 (let ((?x149 (bvadd (bvadd (bvadd ?x393 ?x396) ?x280) ?x228)))
 (let (($x36 (= ?x149 ?x131)))
 (let (($x32 (= $x36 true)))
 (let (($x376 (= $x32 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x331 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x84 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x325 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x20 (bvuge ?x325 (_ bv1 32))))
 (let (($x381 (=> $x20 $x331)))
 (let (($x374 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x349 (= $x20 $x374)))
 (let (($x111 (= false false)))
 (let (($x382 (= ?x325 (_ bv0 32))))
 (let (($x375 (=> $x382 $x111)))
 (let (($x372 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x378 (= $x382 $x372)))
 (let (($x385 (and (and (and $x378 $x375) $x349) $x381)))
 (let (($x391 (= $x385 true)))
 (let (($x156 (= ?x322 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x177 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x183 (bvuge ?x177 (_ bv1 32))))
 (let (($x353 (=> $x183 $x156)))
 (let (($x346 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x300 (= $x183 $x346)))
 (let (($x276 (= ?x177 (_ bv0 32))))
 (let (($x335 (=> $x276 $x111)))
 (let (($x275 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x345 (= $x276 $x275)))
 (let (($x352 (and (and (and $x345 $x335) $x300) $x353)))
 (let (($x347 (= $x352 true)))
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x105 (= ?x67 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x312 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x147 (bvuge ?x312 (_ bv1 32))))
 (let (($x26 (=> $x147 $x105)))
 (let (($x295 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x96 (= $x147 $x295)))
 (let (($x91 (= ?x312 (_ bv0 32))))
 (let (($x141 (=> $x91 $x111)))
 (let (($x12 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x172 (= $x91 $x12)))
 (let (($x161 (and (and (and $x172 $x141) $x96) $x26)))
 (let (($x336 (= $x161 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x135 (= ?x307 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x220 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x132 (ite $x220 (_ bv1 32) (_ bv0 32))))
 (let (($x92 (bvuge ?x132 (_ bv1 32))))
 (let (($x63 (=> $x92 $x135)))
 (let (($x42 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x208 (= $x92 $x42)))
 (let (($x139 (= ?x132 (_ bv0 32))))
 (let (($x184 (=> $x139 $x111)))
 (let (($x317 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x238 (= $x139 $x317)))
 (let (($x309 (and (and (and $x238 $x184) $x208) $x63)))
 (let (($x99 (= $x309 true)))
 (let (($x236 (forall ((input.ind-%var2525X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2525X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x181))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var2525X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2525X)))
 (=> $x283 (= ?x112 ?x118))))))))
 ))
 (let (($x48 (forall ((input.ind-%var2524X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2524X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var2524X) (bvult input.ind-%var2524X (_ bv100 32))))))
 ))
 (let (($x198 (and $x48 $x236)))
 (let (($x223 (= $x198 true)))
 (let (($x10 (forall ((input.ind-%var2519X (_ BitVec 32)) )(let ((?x134 (bvadd (bvmul input.ind-%var2519X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x181 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv1 32))) (select input.dst.llvm-mem ?x134))))
 (let ((?x118 (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x134 (_ bv2 32))) ?x181))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var2519X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2519X)))
 (=> $x283 (= ?x112 ?x118))))))))
 ))
 (let (($x415 (forall ((input.ind-%var2518X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var2518X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var2518X) (bvult input.ind-%var2518X (_ bv100 32))))))
 ))
 (let (($x241 (and $x415 $x10)))
 (let (($x314 (= $x241 true)))
 (let ((?x282 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x21 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x341 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x333 (concat ?x341 (concat ?x21 (concat ?x294 ?x282)))))
 (let (($x356 (= ?x333 input.dst.llvm-%m)))
 (let (($x361 (= $x356 true)))
 (let (($x364 (= $x361 true)))
 (let (($x41 (= (bvand ?x178 (_ bv4294967292 32)) ?x178)))
 (let (($x256 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x201 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x318 (and true $x201)))
 (let (($x158 (= (bvand ?x129 (_ bv4294967292 32)) ?x129)))
 (let (($x268 (and $x158 $x318)))
 (let (($x154 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x178 (bvsub ?x178 (_ bv8 32))) (bvult ?x178 (bvsub ?x178 (_ bv8 32))))))
 (let (($x197 (and (and (and true $x154) $x268) $x256)))
 (let (($x5 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x39 (and true $x5)))
 (let (($x50 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x304 (and $x50 $x39)))
 (let (($x83 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x129 (bvsub ?x129 (_ bv12 32))) (bvult ?x129 (bvsub ?x129 (_ bv12 32))))))
 (let (($x159 (and (and (and true $x50) $x83) $x304)))
 (let (($x293 (and (and $x159 $x197) $x41)))
 (let (($x334 (= input.dst.llvm-%m ?x333)))
 (let (($x339 (and $x334 $x293)))
 (let ((?x77 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x291 (= (_ bv0 32) ?x77)))
 (let ((?x160 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x168 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x160)))
 (let (($x230 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x263 (and $x230 $x168)))
 (let (($x57 (and $x263 $x291)))
 (let (($x182 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x246 (and $x182 $x57)))
 (let (($x289 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x116 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x289)))))))
 (let (($x292 (and (and (and $x116 true) $x246) $x339)))
 (let (($x313 (= $x292 true)))
 (let (($x354 (= $x313 true)))
 (let (($x363 (= $x354 true)))
 (let (($x303 (= $x293 true)))
 (let (($x205 (= $x303 true)))
 (let (($x117 (= $x205 true)))
 (let (($x46 (= $x159 true)))
 (let (($x210 (= $x46 true)))
 (let (($x140 (= $x210 true)))
 (let (($x321 (and $x197 $x41)))
 (let (($x277 (= $x321 true)))
 (let (($x252 (= $x277 true)))
 (let (($x310 (= $x252 true)))
 (let (($x113 (and $x116 $x246)))
 (let (($x212 (= $x113 true)))
 (let (($x298 (= $x212 true)))
 (let (($x195 (= $x298 true)))
 (let (($x323 (and $x195 $x310)))
 (let (($x122 (and $x323 $x140)))
 (let (($x164 (and $x122 $x117)))
 (let (($x355 (and $x164 $x363)))
 (let (($x167 (and $x355 $x364)))
 (let (($x221 (and $x167 $x314)))
 (let (($x40 (and $x221 $x223)))
 (let (($x287 (and $x40 $x99)))
 (let (($x340 (and $x287 $x336)))
 (let (($x90 (and $x340 $x347)))
 (let (($x386 (and $x90 $x391)))
 (let (($x225 (and $x183 $x20)))
 (let (($x273 (and $x91 $x225)))
 (let (($x144 (and $x92 $x273)))
 (let (($x388 (and $x144 $x386)))
 (let (($x327 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x389 (and $x327 $x388)))
 (let (($x47 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x390 (and $x47 $x389)))
 (let (($x151 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x383 (and $x151 $x390)))
 (let (($x30 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x384 (and $x30 $x383)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x392 (and $x222 $x384)))
 (let (($x370 (and $x111 $x392)))
 (let (($x242 (= ?x307 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x251 (and $x242 $x370)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x379 (and $x189 $x251)))
 (let (($x344 (and $x111 $x379)))
 (let (($x240 (= ?x67 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x350 (and $x240 $x344)))
 (let (($x174 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x413 (and $x174 $x350)))
 (let (($x377 (and $x111 $x413)))
 (let (($x65 (= ?x322 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x400 (and $x65 $x377)))
 (let (($x108 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x215 (and $x108 $x400)))
 (let (($x124 (and $x111 $x215)))
 (let (($x163 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x257 (and $x163 $x124)))
 (let (($x245 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x288 (bvugt ?x178 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x72 (=> (bvule ?x178 (bvsub (bvadd ?x178 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x288)))))))
 (let (($x34 (bvugt ?x129 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x7 (=> (bvule ?x129 (bvsub (bvadd ?x129 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x34)))))))
 (let (($x106 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x120 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x60 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x120 $x106)))))))
 (let (($x44 (and $x60 $x7)))
 (let (($x143 (and $x44 $x72)))
 (let (($x19 (and $x143 $x119)))
 (let (($x104 (and $x19 $x257)))
 (let (($x81 (=> $x104 $x376)))
 (not $x81)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 52
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x67)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x17 (bvadd ?x62 ?x142)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x75 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x264 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x288 (bvadd ?x264 (_ bv3 32))))
 (let ((?x302 (concat (select input.dst.llvm-mem ?x288) (concat ?x14 ?x255))))
 (let ((?x133 (bvmul (_ bv4294967295 32) ?x302)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x188 (concat ?x126 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x245 (bvadd ?x128 (_ bv3 32))))
 (let ((?x406 (concat (select input.dst.llvm-mem ?x245) (concat ?x296 ?x188))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x166 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x34 (bvadd ?x166 (_ bv3 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem ?x34) (concat ?x61 ?x214))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x417)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x411)))
 (let ((?x403 (bvadd (bvadd (bvadd ?x424 ?x162) ?x406) ?x133)))
 (let (($x418 (= ?x403 ?x17)))
 (let (($x185 (= $x418 true)))
 (let (($x348 (= $x185 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x360 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x9 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x87 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x87 (_ bv1 32))))
 (let (($x280 (=> $x71 $x360)))
 (let (($x422 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x284 (= $x71 $x422)))
 (let (($x322 (= false false)))
 (let (($x18 (= ?x87 (_ bv0 32))))
 (let (($x351 (=> $x18 $x322)))
 (let (($x248 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x153 (= $x18 $x248)))
 (let (($x15 (and (and (and $x153 $x351) $x284) $x280)))
 (let (($x125 (= $x15 true)))
 (let (($x369 (= ?x67 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x273 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x144 (ite $x273 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x144 (_ bv1 32))))
 (let (($x414 (=> $x6 $x369)))
 (let (($x393 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x395 (= $x6 $x393)))
 (let (($x365 (= ?x144 (_ bv0 32))))
 (let (($x373 (=> $x365 $x322)))
 (let (($x173 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x358 (= $x365 $x173)))
 (let (($x380 (and (and (and $x358 $x373) $x395) $x414)))
 (let (($x398 (= $x380 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x215 (= ?x307 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x20 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x20 (_ bv1 32))))
 (let (($x124 (=> $x350 $x215)))
 (let (($x413 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x377 (= $x350 $x413)))
 (let (($x225 (= ?x20 (_ bv0 32))))
 (let (($x344 (=> $x225 $x322)))
 (let (($x251 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x379 (= $x225 $x251)))
 (let (($x368 (and (and (and $x379 $x344) $x377) $x124)))
 (let (($x362 (= $x368 true)))
 (let (($x386 (= ?x62 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x91 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x183 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x183 (_ bv1 32))))
 (let (($x388 (=> $x84 $x386)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x385 (= $x84 $x381)))
 (let (($x374 (= ?x183 (_ bv0 32))))
 (let (($x331 (=> $x374 $x322)))
 (let (($x387 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x371 (= $x374 $x387)))
 (let (($x383 (and (and (and $x371 $x331) $x385) $x388)))
 (let (($x384 (= $x383 true)))
 (let (($x372 (forall ((input.ind-%var2563X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2563X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x135))))
 (let ((?x267 (input.spec-%var-m-0.1.1 input.ind-%var2563X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2563X)))
 (=> $x101 (= ?x267 ?x12))))))))
 ))
 (let (($x340 (forall ((input.ind-%var2562X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2562X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var2562X) (bvult input.ind-%var2562X (_ bv100 32))))))
 ))
 (let (($x378 (and $x340 $x372)))
 (let (($x375 (= $x378 true)))
 (let (($x209 (forall ((input.ind-%var2557X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2557X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x135))))
 (let ((?x267 (input.spec-%var-m-0.1.1 input.ind-%var2557X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2557X)))
 (=> $x101 (= ?x267 ?x12))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2556X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2556X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var2556X) (bvult input.ind-%var2556X (_ bv100 32))))))
 ))
 (let (($x147 (and $x118 $x209)))
 (let (($x295 (= $x147 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x333 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x355 (concat ?x363 (concat ?x292 (concat ?x333 ?x76)))))
 (let (($x408 (= ?x355 input.dst.llvm-%m)))
 (let (($x409 (= $x408 true)))
 (let (($x415 (= $x409 true)))
 (let (($x224 (= (bvand ?x264 (_ bv4294967292 32)) ?x264)))
 (let (($x252 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x41 (and true $x137)))
 (let (($x268 (= (bvand ?x166 (_ bv4294967292 32)) ?x166)))
 (let (($x321 (and $x268 $x41)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x264 (bvsub ?x264 (_ bv8 32))) (bvult ?x264 (bvsub ?x264 (_ bv8 32))))))
 (let (($x274 (and (and (and true $x320) $x321) $x252)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x122 (and true $x140)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x299 (and $x186 $x122)))
 (let (($x39 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x166 (bvsub ?x166 (_ bv12 32))) (bvult ?x166 (bvsub ?x166 (_ bv12 32))))))
 (let (($x205 (and (and (and true $x186) $x39) $x299)))
 (let (($x332 (and (and $x205 $x274) $x224)))
 (let (($x356 (= input.dst.llvm-%m ?x355)))
 (let (($x361 (and $x356 $x332)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x51)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x113 $x298)))
 (let (($x52 (and $x195 $x79)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x315 $x52)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x160)))))))
 (let (($x74 (and (and (and $x246 true) $x281) $x361)))
 (let (($x283 (= $x74 true)))
 (let (($x410 (= $x283 true)))
 (let (($x412 (= $x410 true)))
 (let (($x341 (= $x332 true)))
 (let (($x328 (= $x341 true)))
 (let (($x21 (= $x328 true)))
 (let (($x117 (= $x205 true)))
 (let (($x164 (= $x117 true)))
 (let (($x342 (= $x164 true)))
 (let (($x216 (and $x274 $x224)))
 (let (($x69 (= $x216 true)))
 (let (($x301 (= $x69 true)))
 (let (($x244 (= $x301 true)))
 (let (($x154 (and $x246 $x281)))
 (let (($x130 (= $x154 true)))
 (let (($x53 (= $x130 true)))
 (let (($x306 (= $x53 true)))
 (let (($x83 (and $x306 $x244)))
 (let (($x278 (and $x83 $x342)))
 (let (($x329 (and $x278 $x21)))
 (let (($x407 (and $x329 $x412)))
 (let (($x112 (and $x407 $x415)))
 (let (($x96 (and $x112 $x295)))
 (let (($x337 (and $x96 $x375)))
 (let (($x392 (and $x337 $x384)))
 (let (($x357 (and $x392 $x362)))
 (let (($x396 (and $x357 $x398)))
 (let (($x239 (and $x396 $x125)))
 (let (($x204 (and $x6 $x18)))
 (let (($x289 (and $x225 $x204)))
 (let (($x170 (and $x84 $x289)))
 (let (($x217 (and $x170 $x239)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x82 (and $x312 $x217)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x213 (and $x92 $x82)))
 (let (($x220 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x89 (and $x220 $x213)))
 (let (($x150 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x176 (and $x150 $x89)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x421 (and $x262 $x176)))
 (let (($x228 (and $x322 $x421)))
 (let (($x78 (= ?x62 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x149 (and $x78 $x228)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x399 (and $x222 $x149)))
 (let (($x366 (and $x322 $x399)))
 (let (($x242 (= ?x307 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x131 (and $x242 $x366)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x36 (and $x189 $x131)))
 (let (($x32 (and $x322 $x36)))
 (let (($x240 (= ?x67 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x376 (and $x240 $x32)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x81 (and $x265 $x376)))
 (let (($x259 (and $x322 $x81)))
 (let (($x102 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x145 (and $x102 $x259)))
 (let (($x286 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x266 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x272 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x187 (=> (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x272)))))))
 (let (($x56 (bvugt ?x166 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x178 (=> (bvule ?x166 (bvsub (bvadd ?x166 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x56)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x86)))))))
 (let (($x227 (and $x136 $x178)))
 (let (($x207 (and $x227 $x187)))
 (let (($x23 (and $x207 $x266)))
 (let (($x269 (and $x23 $x145)))
 (let (($x38 (=> $x269 $x348)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x67 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x142 (bvmul (_ bv4294967295 32) ?x67)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x17 (bvadd ?x62 ?x142)))
 (let ((?x75 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x255 (concat ?x75 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x264 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x288 (bvadd ?x264 (_ bv3 32))))
 (let ((?x302 (concat (select input.dst.llvm-mem ?x288) (concat ?x14 ?x255))))
 (let ((?x133 (bvmul (_ bv4294967295 32) ?x302)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x188 (concat ?x126 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x245 (bvadd ?x128 (_ bv3 32))))
 (let ((?x406 (concat (select input.dst.llvm-mem ?x245) (concat ?x296 ?x188))))
 (let ((?x152 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x152 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x166 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x34 (bvadd ?x166 (_ bv3 32))))
 (let ((?x162 (concat (select input.dst.llvm-mem ?x34) (concat ?x61 ?x214))))
 (let ((?x417 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x417)))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x411)))
 (let ((?x403 (bvadd (bvadd (bvadd ?x424 ?x162) ?x406) ?x133)))
 (let (($x418 (= ?x403 ?x17)))
 (let (($x185 (= $x418 true)))
 (let (($x348 (= $x185 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x360 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x9 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x87 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x71 (bvuge ?x87 (_ bv1 32))))
 (let (($x280 (=> $x71 $x360)))
 (let (($x422 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x284 (= $x71 $x422)))
 (let (($x322 (= false false)))
 (let (($x18 (= ?x87 (_ bv0 32))))
 (let (($x351 (=> $x18 $x322)))
 (let (($x248 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x153 (= $x18 $x248)))
 (let (($x15 (and (and (and $x153 $x351) $x284) $x280)))
 (let (($x125 (= $x15 true)))
 (let (($x369 (= ?x67 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x273 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x144 (ite $x273 (_ bv1 32) (_ bv0 32))))
 (let (($x6 (bvuge ?x144 (_ bv1 32))))
 (let (($x414 (=> $x6 $x369)))
 (let (($x393 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x395 (= $x6 $x393)))
 (let (($x365 (= ?x144 (_ bv0 32))))
 (let (($x373 (=> $x365 $x322)))
 (let (($x173 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x358 (= $x365 $x173)))
 (let (($x380 (and (and (and $x358 $x373) $x395) $x414)))
 (let (($x398 (= $x380 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x215 (= ?x307 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x325 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x20 (ite $x325 (_ bv1 32) (_ bv0 32))))
 (let (($x350 (bvuge ?x20 (_ bv1 32))))
 (let (($x124 (=> $x350 $x215)))
 (let (($x413 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x377 (= $x350 $x413)))
 (let (($x225 (= ?x20 (_ bv0 32))))
 (let (($x344 (=> $x225 $x322)))
 (let (($x251 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x379 (= $x225 $x251)))
 (let (($x368 (and (and (and $x379 $x344) $x377) $x124)))
 (let (($x362 (= $x368 true)))
 (let (($x386 (= ?x62 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x91 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x183 (ite $x91 (_ bv1 32) (_ bv0 32))))
 (let (($x84 (bvuge ?x183 (_ bv1 32))))
 (let (($x388 (=> $x84 $x386)))
 (let (($x381 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x385 (= $x84 $x381)))
 (let (($x374 (= ?x183 (_ bv0 32))))
 (let (($x331 (=> $x374 $x322)))
 (let (($x387 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x371 (= $x374 $x387)))
 (let (($x383 (and (and (and $x371 $x331) $x385) $x388)))
 (let (($x384 (= $x383 true)))
 (let (($x372 (forall ((input.ind-%var2563X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2563X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x135))))
 (let ((?x267 (input.spec-%var-m-0.1.1 input.ind-%var2563X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2563X)))
 (=> $x101 (= ?x267 ?x12))))))))
 ))
 (let (($x340 (forall ((input.ind-%var2562X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2562X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var2562X) (bvult input.ind-%var2562X (_ bv100 32))))))
 ))
 (let (($x378 (and $x340 $x372)))
 (let (($x375 (= $x378 true)))
 (let (($x209 (forall ((input.ind-%var2557X (_ BitVec 32)) )(let ((?x42 (bvadd (bvmul input.ind-%var2557X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x135 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv1 32))) (select input.dst.llvm-mem ?x42))))
 (let ((?x12 (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x42 (_ bv2 32))) ?x135))))
 (let ((?x267 (input.spec-%var-m-0.1.1 input.ind-%var2557X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2557X)))
 (=> $x101 (= ?x267 ?x12))))))))
 ))
 (let (($x118 (forall ((input.ind-%var2556X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var2556X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var2556X) (bvult input.ind-%var2556X (_ bv100 32))))))
 ))
 (let (($x147 (and $x118 $x209)))
 (let (($x295 (= $x147 true)))
 (let ((?x76 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x333 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x292 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x363 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x355 (concat ?x363 (concat ?x292 (concat ?x333 ?x76)))))
 (let (($x408 (= ?x355 input.dst.llvm-%m)))
 (let (($x409 (= $x408 true)))
 (let (($x415 (= $x409 true)))
 (let (($x224 (= (bvand ?x264 (_ bv4294967292 32)) ?x264)))
 (let (($x252 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x137 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x41 (and true $x137)))
 (let (($x268 (= (bvand ?x166 (_ bv4294967292 32)) ?x166)))
 (let (($x321 (and $x268 $x41)))
 (let (($x320 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x264 (bvsub ?x264 (_ bv8 32))) (bvult ?x264 (bvsub ?x264 (_ bv8 32))))))
 (let (($x274 (and (and (and true $x320) $x321) $x252)))
 (let (($x140 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x122 (and true $x140)))
 (let (($x186 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x299 (and $x186 $x122)))
 (let (($x39 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x166 (bvsub ?x166 (_ bv12 32))) (bvult ?x166 (bvsub ?x166 (_ bv12 32))))))
 (let (($x205 (and (and (and true $x186) $x39) $x299)))
 (let (($x332 (and (and $x205 $x274) $x224)))
 (let (($x356 (= input.dst.llvm-%m ?x355)))
 (let (($x361 (and $x356 $x332)))
 (let ((?x51 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x51)))
 (let ((?x212 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x298 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x212)))
 (let (($x113 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x195 (and $x113 $x298)))
 (let (($x52 (and $x195 $x79)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x281 (and $x315 $x52)))
 (let (($x160 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x246 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x160)))))))
 (let (($x74 (and (and (and $x246 true) $x281) $x361)))
 (let (($x283 (= $x74 true)))
 (let (($x410 (= $x283 true)))
 (let (($x412 (= $x410 true)))
 (let (($x341 (= $x332 true)))
 (let (($x328 (= $x341 true)))
 (let (($x21 (= $x328 true)))
 (let (($x117 (= $x205 true)))
 (let (($x164 (= $x117 true)))
 (let (($x342 (= $x164 true)))
 (let (($x216 (and $x274 $x224)))
 (let (($x69 (= $x216 true)))
 (let (($x301 (= $x69 true)))
 (let (($x244 (= $x301 true)))
 (let (($x154 (and $x246 $x281)))
 (let (($x130 (= $x154 true)))
 (let (($x53 (= $x130 true)))
 (let (($x306 (= $x53 true)))
 (let (($x83 (and $x306 $x244)))
 (let (($x278 (and $x83 $x342)))
 (let (($x329 (and $x278 $x21)))
 (let (($x407 (and $x329 $x412)))
 (let (($x112 (and $x407 $x415)))
 (let (($x96 (and $x112 $x295)))
 (let (($x337 (and $x96 $x375)))
 (let (($x392 (and $x337 $x384)))
 (let (($x357 (and $x392 $x362)))
 (let (($x396 (and $x357 $x398)))
 (let (($x239 (and $x396 $x125)))
 (let (($x204 (and $x6 $x18)))
 (let (($x289 (and $x225 $x204)))
 (let (($x170 (and $x84 $x289)))
 (let (($x217 (and $x170 $x239)))
 (let (($x312 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x82 (and $x312 $x217)))
 (let (($x92 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x213 (and $x92 $x82)))
 (let (($x220 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x89 (and $x220 $x213)))
 (let (($x150 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x176 (and $x150 $x89)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x421 (and $x262 $x176)))
 (let (($x228 (and $x322 $x421)))
 (let (($x78 (= ?x62 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x149 (and $x78 $x228)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x399 (and $x222 $x149)))
 (let (($x366 (and $x322 $x399)))
 (let (($x242 (= ?x307 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x131 (and $x242 $x366)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x36 (and $x189 $x131)))
 (let (($x32 (and $x322 $x36)))
 (let (($x240 (= ?x67 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x376 (and $x240 $x32)))
 (let (($x265 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x81 (and $x265 $x376)))
 (let (($x259 (and $x322 $x81)))
 (let (($x102 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x145 (and $x102 $x259)))
 (let (($x286 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x266 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x272 (bvugt ?x264 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x187 (=> (bvule ?x264 (bvsub (bvadd ?x264 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x272)))))))
 (let (($x56 (bvugt ?x166 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x178 (=> (bvule ?x166 (bvsub (bvadd ?x166 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x56)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x175 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x136 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x175 $x86)))))))
 (let (($x227 (and $x136 $x178)))
 (let (($x207 (and $x227 $x187)))
 (let (($x23 (and $x207 $x266)))
 (let (($x269 (and $x23 $x145)))
 (let (($x38 (=> $x269 $x348)))
 (not $x38)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 53
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x336 (bvadd ?x47 ?x37)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x346 (concat ?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x272 (bvadd ?x219 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x272) (concat ?x199 ?x346))))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x90)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x105 (concat ?x35 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x286 (bvadd ?x235 (_ bv3 32))))
 (let ((?x335 (concat (select input.dst.llvm-mem ?x286) (concat ?x345 ?x105))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x56 (bvadd ?x68 (_ bv3 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem ?x56) (concat ?x236 ?x40))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x10)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x109)))
 (let ((?x111 (bvadd (bvadd (bvadd ?x314 ?x139) ?x335) ?x231)))
 (let (($x237 (= ?x111 ?x336)))
 (let (($x184 (= $x237 true)))
 (let (($x382 (= $x184 true)))
 (let (($x43 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x57 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x57 (_ bv1 32))))
 (let (($x406 (=> $x182 $x43)))
 (let (($x126 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x115 (= $x182 $x126)))
 (let (($x67 (= false false)))
 (let (($x234 (= ?x57 (_ bv0 32))))
 (let (($x290 (=> $x234 $x67)))
 (let (($x326 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x296 (= $x234 $x326)))
 (let (($x33 (and (and (and $x296 $x290) $x115) $x406)))
 (let (($x165 (= $x33 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x61 (= ?x307 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x170 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x170 (_ bv1 32))))
 (let (($x271 (=> $x411 $x61)))
 (let (($x424 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x420 (= $x411 $x424)))
 (let (($x116 (= ?x170 (_ bv0 32))))
 (let (($x417 (=> $x116 $x67)))
 (let (($x88 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x297 (= $x116 $x88)))
 (let (($x214 (and (and (and $x297 $x417) $x420) $x271)))
 (let (($x114 (= $x214 true)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x81 (= ?x62 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x87 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x18 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x18 (_ bv1 32))))
 (let (($x259 (=> $x131 $x81)))
 (let (($x36 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x32 (= $x131 $x36)))
 (let (($x204 (= ?x18 (_ bv0 32))))
 (let (($x366 (=> $x204 $x67)))
 (let (($x149 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x399 (= $x204 $x149)))
 (let (($x404 (and (and (and $x399 $x366) $x32) $x259)))
 (let (($x416 (= $x404 true)))
 (let (($x239 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x225 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x6 (ite $x225 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x6 (_ bv1 32))))
 (let (($x217 (=> $x9 $x239)))
 (let (($x280 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x15 (= $x9 $x280)))
 (let (($x422 (= ?x6 (_ bv0 32))))
 (let (($x360 (=> $x422 $x67)))
 (let (($x66 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x423 (= $x422 $x66)))
 (let (($x89 (and (and (and $x423 $x360) $x15) $x217)))
 (let (($x176 (= $x89 true)))
 (let (($x153 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let ((?x381 (bvadd (bvmul input.ind-%var2601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x386))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var2601X)))
 (let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2601X)))
 (=> $x273 (= ?x243 ?x251))))))))
 ))
 (let (($x357 (forall ((input.ind-%var2600X (_ BitVec 32)) )(let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2600X)))
 (= $x273 (and (bvule (_ bv0 32) input.ind-%var2600X) (bvult input.ind-%var2600X (_ bv100 32))))))
 ))
 (let (($x351 (and $x357 $x153)))
 (let (($x279 (= $x351 true)))
 (let (($x257 (forall ((input.ind-%var2595X (_ BitVec 32)) )(let ((?x381 (bvadd (bvmul input.ind-%var2595X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x386))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var2595X)))
 (let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2595X)))
 (=> $x273 (= ?x243 ?x251))))))))
 ))
 (let (($x12 (forall ((input.ind-%var2594X (_ BitVec 32)) )(let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2594X)))
 (= $x273 (and (bvule (_ bv0 32) input.ind-%var2594X) (bvult input.ind-%var2594X (_ bv100 32))))))
 ))
 (let (($x350 (and $x12 $x257)))
 (let (($x413 (= $x350 true)))
 (let ((?x334 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x407 (concat ?x412 (concat ?x74 (concat ?x355 ?x334)))))
 (let (($x181 (= ?x407 input.dst.llvm-%m)))
 (let (($x250 (= $x181 true)))
 (let (($x118 (= $x250 true)))
 (let (($x293 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x301 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x224 (and true $x50)))
 (let (($x321 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x216 (and $x321 $x224)))
 (let (($x197 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv8 32))) (bvult ?x219 (bvsub ?x219 (_ bv8 32))))))
 (let (($x211 (and (and (and true $x197) $x216) $x301)))
 (let (($x342 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x278 (and true $x342)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x191 (and $x159 $x278)))
 (let (($x122 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x328 (and (and (and true $x159) $x122) $x191)))
 (let (($x354 (and (and $x328 $x211) $x293)))
 (let (($x408 (= input.dst.llvm-%m ?x407)))
 (let (($x409 (and $x408 $x354)))
 (let ((?x233 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x158 (= (_ bv0 32) ?x233)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (and $x154 $x53)))
 (let (($x260 (and $x306 $x158)))
 (let (($x291 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x291 $x260)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x212)))))))
 (let (($x163 (and (and (and $x281 true) $x127) $x409)))
 (let (($x101 (= $x163 true)))
 (let (($x54 (= $x101 true)))
 (let (($x247 (= $x54 true)))
 (let (($x363 (= $x354 true)))
 (let (($x339 (= $x363 true)))
 (let (($x292 (= $x339 true)))
 (let (($x21 (= $x328 true)))
 (let (($x329 (= $x21 true)))
 (let (($x364 (= $x329 true)))
 (let (($x85 (and $x211 $x293)))
 (let (($x123 (= $x85 true)))
 (let (($x138 (= $x123 true)))
 (let (($x5 (= $x138 true)))
 (let (($x320 (and $x281 $x127)))
 (let (($x310 (= $x320 true)))
 (let (($x201 (= $x310 true)))
 (let (($x318 (= $x201 true)))
 (let (($x39 (and $x318 $x5)))
 (let (($x167 (and $x39 $x364)))
 (let (($x324 (and $x167 $x292)))
 (let (($x319 (and $x324 $x247)))
 (let (($x267 (and $x319 $x118)))
 (let (($x377 (and $x267 $x413)))
 (let (($x71 (and $x377 $x279)))
 (let (($x421 (and $x71 $x176)))
 (let (($x405 (and $x421 $x416)))
 (let (($x162 (and $x405 $x114)))
 (let (($x14 (and $x162 $x165)))
 (let (($x230 (and $x116 $x182)))
 (let (($x160 (and $x204 $x230)))
 (let (($x168 (and $x9 $x160)))
 (let (($x8 (and $x168 $x14)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x75 (and $x20 $x8)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x206 (and $x84 $x75)))
 (let (($x91 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x255 (and $x91 $x206)))
 (let (($x97 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x200 (and $x97 $x255)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x132 $x200)))
 (let (($x133 (and $x67 $x302)))
 (let (($x327 (= ?x47 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x403 (and $x327 $x133)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x142 (and $x262 $x403)))
 (let (($x17 (and $x67 $x142)))
 (let (($x78 (= ?x62 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x418 (and $x78 $x17)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x185 (and $x222 $x418)))
 (let (($x348 (and $x67 $x185)))
 (let (($x242 (= ?x307 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x38 (and $x242 $x348)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x308 (and $x180 $x38)))
 (let (($x49 (and $x67 $x308)))
 (let (($x174 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x174 $x49)))
 (let (($x45 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x100 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x311 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x100)))))))
 (let (($x59 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x264 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x285 $x59)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x16 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x70 (and $x16 $x264)))
 (let (($x80 (and $x70 $x311)))
 (let (($x203 (and $x80 $x108)))
 (let (($x282 (and $x203 $x58)))
 (let (($x343 (=> $x282 $x382)))
 (not $x343))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x336 (bvadd ?x47 ?x37)))
 (let ((?x156 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x346 (concat ?x156 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x199 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x272 (bvadd ?x219 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x272) (concat ?x199 ?x346))))
 (let ((?x231 (bvmul (_ bv4294967295 32) ?x90)))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x105 (concat ?x35 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x286 (bvadd ?x235 (_ bv3 32))))
 (let ((?x335 (concat (select input.dst.llvm-mem ?x286) (concat ?x345 ?x105))))
 (let ((?x223 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x40 (concat ?x223 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x56 (bvadd ?x68 (_ bv3 32))))
 (let ((?x139 (concat (select input.dst.llvm-mem ?x56) (concat ?x236 ?x40))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x109 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x10)))
 (let ((?x314 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x109)))
 (let ((?x111 (bvadd (bvadd (bvadd ?x314 ?x139) ?x335) ?x231)))
 (let (($x237 (= ?x111 ?x336)))
 (let (($x184 (= $x237 true)))
 (let (($x382 (= $x184 true)))
 (let (($x43 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x196 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x57 (ite $x196 (_ bv1 32) (_ bv0 32))))
 (let (($x182 (bvuge ?x57 (_ bv1 32))))
 (let (($x406 (=> $x182 $x43)))
 (let (($x126 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x115 (= $x182 $x126)))
 (let (($x67 (= false false)))
 (let (($x234 (= ?x57 (_ bv0 32))))
 (let (($x290 (=> $x234 $x67)))
 (let (($x326 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x296 (= $x234 $x326)))
 (let (($x33 (and (and (and $x296 $x290) $x115) $x406)))
 (let (($x165 (= $x33 true)))
 (let ((?x307 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x61 (= ?x307 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x170 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x411 (bvuge ?x170 (_ bv1 32))))
 (let (($x271 (=> $x411 $x61)))
 (let (($x424 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x420 (= $x411 $x424)))
 (let (($x116 (= ?x170 (_ bv0 32))))
 (let (($x417 (=> $x116 $x67)))
 (let (($x88 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x297 (= $x116 $x88)))
 (let (($x214 (and (and (and $x297 $x417) $x420) $x271)))
 (let (($x114 (= $x214 true)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x81 (= ?x62 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x87 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x18 (ite $x87 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x18 (_ bv1 32))))
 (let (($x259 (=> $x131 $x81)))
 (let (($x36 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x32 (= $x131 $x36)))
 (let (($x204 (= ?x18 (_ bv0 32))))
 (let (($x366 (=> $x204 $x67)))
 (let (($x149 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x399 (= $x204 $x149)))
 (let (($x404 (and (and (and $x399 $x366) $x32) $x259)))
 (let (($x416 (= $x404 true)))
 (let (($x239 (= ?x47 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x225 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x6 (ite $x225 (_ bv1 32) (_ bv0 32))))
 (let (($x9 (bvuge ?x6 (_ bv1 32))))
 (let (($x217 (=> $x9 $x239)))
 (let (($x280 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x15 (= $x9 $x280)))
 (let (($x422 (= ?x6 (_ bv0 32))))
 (let (($x360 (=> $x422 $x67)))
 (let (($x66 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x423 (= $x422 $x66)))
 (let (($x89 (and (and (and $x423 $x360) $x15) $x217)))
 (let (($x176 (= $x89 true)))
 (let (($x153 (forall ((input.ind-%var2601X (_ BitVec 32)) )(let ((?x381 (bvadd (bvmul input.ind-%var2601X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x386))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var2601X)))
 (let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2601X)))
 (=> $x273 (= ?x243 ?x251))))))))
 ))
 (let (($x357 (forall ((input.ind-%var2600X (_ BitVec 32)) )(let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2600X)))
 (= $x273 (and (bvule (_ bv0 32) input.ind-%var2600X) (bvult input.ind-%var2600X (_ bv100 32))))))
 ))
 (let (($x351 (and $x357 $x153)))
 (let (($x279 (= $x351 true)))
 (let (($x257 (forall ((input.ind-%var2595X (_ BitVec 32)) )(let ((?x381 (bvadd (bvmul input.ind-%var2595X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x386 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv1 32))) (select input.dst.llvm-mem ?x381))))
 (let ((?x251 (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x381 (_ bv2 32))) ?x386))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var2595X)))
 (let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2595X)))
 (=> $x273 (= ?x243 ?x251))))))))
 ))
 (let (($x12 (forall ((input.ind-%var2594X (_ BitVec 32)) )(let (($x273 (input.spec-%var-m-0.0.1 input.ind-%var2594X)))
 (= $x273 (and (bvule (_ bv0 32) input.ind-%var2594X) (bvult input.ind-%var2594X (_ bv100 32))))))
 ))
 (let (($x350 (and $x12 $x257)))
 (let (($x413 (= $x350 true)))
 (let ((?x334 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x355 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x412 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x407 (concat ?x412 (concat ?x74 (concat ?x355 ?x334)))))
 (let (($x181 (= ?x407 input.dst.llvm-%m)))
 (let (($x250 (= $x181 true)))
 (let (($x118 (= $x250 true)))
 (let (($x293 (= (bvand ?x219 (_ bv4294967292 32)) ?x219)))
 (let (($x301 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x50 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x224 (and true $x50)))
 (let (($x321 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x216 (and $x321 $x224)))
 (let (($x197 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x219 (bvsub ?x219 (_ bv8 32))) (bvult ?x219 (bvsub ?x219 (_ bv8 32))))))
 (let (($x211 (and (and (and true $x197) $x216) $x301)))
 (let (($x342 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x278 (and true $x342)))
 (let (($x159 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x191 (and $x159 $x278)))
 (let (($x122 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x328 (and (and (and true $x159) $x122) $x191)))
 (let (($x354 (and (and $x328 $x211) $x293)))
 (let (($x408 (= input.dst.llvm-%m ?x407)))
 (let (($x409 (and $x408 $x354)))
 (let ((?x233 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x158 (= (_ bv0 32) ?x233)))
 (let ((?x130 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x130)))
 (let (($x154 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x306 (and $x154 $x53)))
 (let (($x260 (and $x306 $x158)))
 (let (($x291 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x127 (and $x291 $x260)))
 (let (($x212 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x113 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x281 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x113 $x212)))))))
 (let (($x163 (and (and (and $x281 true) $x127) $x409)))
 (let (($x101 (= $x163 true)))
 (let (($x54 (= $x101 true)))
 (let (($x247 (= $x54 true)))
 (let (($x363 (= $x354 true)))
 (let (($x339 (= $x363 true)))
 (let (($x292 (= $x339 true)))
 (let (($x21 (= $x328 true)))
 (let (($x329 (= $x21 true)))
 (let (($x364 (= $x329 true)))
 (let (($x85 (and $x211 $x293)))
 (let (($x123 (= $x85 true)))
 (let (($x138 (= $x123 true)))
 (let (($x5 (= $x138 true)))
 (let (($x320 (and $x281 $x127)))
 (let (($x310 (= $x320 true)))
 (let (($x201 (= $x310 true)))
 (let (($x318 (= $x201 true)))
 (let (($x39 (and $x318 $x5)))
 (let (($x167 (and $x39 $x364)))
 (let (($x324 (and $x167 $x292)))
 (let (($x319 (and $x324 $x247)))
 (let (($x267 (and $x319 $x118)))
 (let (($x377 (and $x267 $x413)))
 (let (($x71 (and $x377 $x279)))
 (let (($x421 (and $x71 $x176)))
 (let (($x405 (and $x421 $x416)))
 (let (($x162 (and $x405 $x114)))
 (let (($x14 (and $x162 $x165)))
 (let (($x230 (and $x116 $x182)))
 (let (($x160 (and $x204 $x230)))
 (let (($x168 (and $x9 $x160)))
 (let (($x8 (and $x168 $x14)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x75 (and $x20 $x8)))
 (let (($x84 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x206 (and $x84 $x75)))
 (let (($x91 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x255 (and $x91 $x206)))
 (let (($x97 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x200 (and $x97 $x255)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x302 (and $x132 $x200)))
 (let (($x133 (and $x67 $x302)))
 (let (($x327 (= ?x47 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x403 (and $x327 $x133)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x142 (and $x262 $x403)))
 (let (($x17 (and $x67 $x142)))
 (let (($x78 (= ?x62 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x418 (and $x78 $x17)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x185 (and $x222 $x418)))
 (let (($x348 (and $x67 $x185)))
 (let (($x242 (= ?x307 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x38 (and $x242 $x348)))
 (let (($x180 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x308 (and $x180 $x38)))
 (let (($x49 (and $x67 $x308)))
 (let (($x174 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x58 (and $x174 $x49)))
 (let (($x45 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x100 (bvugt ?x219 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x311 (=> (bvule ?x219 (bvsub (bvadd ?x219 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x100)))))))
 (let (($x59 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x285 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x264 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x285 $x59)))))))
 (let (($x86 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x106 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x120)))
 (let (($x16 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x106 $x86)))))))
 (let (($x70 (and $x16 $x264)))
 (let (($x80 (and $x70 $x311)))
 (let (($x203 (and $x80 $x108)))
 (let (($x282 (and $x203 $x58)))
 (let (($x343 (=> $x282 $x382)))
 (not $x343))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 54
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x402 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x288 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x288 (_ bv3 32))))
 (let ((?x400 (concat (select input.dst.llvm-mem ?x100) (concat ?x402 ?x395))))
 (let ((?x368 (bvmul (_ bv4294967295 32) ?x400)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x124 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x45 (bvadd ?x128 (_ bv3 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem ?x45) (concat ?x42 ?x124))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x340 (concat ?x337 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x13 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x59 (bvadd ?x13 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x59) (concat ?x96 ?x340))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x316)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x147)))
 (let ((?x362 (bvadd (bvadd (bvadd ?x349 ?x371) ?x380) ?x368)))
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x141 (= ?x92 ?x362)))
 (let (($x331 (= $x141 true)))
 (let (($x359 (= $x331 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x134 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x169 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x52 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x52 (_ bv1 32))))
 (let (($x335 (=> $x275 $x134)))
 (let (($x35 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x238 (= $x275 $x35)))
 (let (($x307 (= false false)))
 (let (($x315 (= ?x52 (_ bv0 32))))
 (let (($x345 (=> $x315 $x307)))
 (let (($x95 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x26 (= $x315 $x95)))
 (let (($x353 (and (and (and $x26 $x345) $x238) $x335)))
 (let (($x300 (= $x353 true)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x236 (= ?x62 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x160 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x168 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x168 (_ bv1 32))))
 (let (($x317 (=> $x109 $x236)))
 (let (($x314 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x198 (= $x109 $x314)))
 (let (($x246 (= ?x168 (_ bv0 32))))
 (let (($x10 (=> $x246 $x307)))
 (let (($x107 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x177 (= $x246 $x107)))
 (let (($x40 (and (and (and $x177 $x10) $x198) $x317)))
 (let (($x221 (= $x40 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x47 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x182 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x182 (_ bv1 32))))
 (let (($x49 (=> $x418 $x308)))
 (let (($x185 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x348 (= $x418 $x185)))
 (let (($x230 (= ?x182 (_ bv0 32))))
 (let (($x17 (=> $x230 $x307)))
 (let (($x403 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x142 (= $x230 $x403)))
 (let (($x241 (and (and (and $x142 $x17) $x348) $x49)))
 (let (($x103 (= $x241 true)))
 (let (($x14 (= ?x92 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x204 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x116 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x116 (_ bv1 32))))
 (let (($x8 (=> $x196 $x14)))
 (let (($x406 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x33 (= $x196 $x406)))
 (let (($x126 (= ?x116 (_ bv0 32))))
 (let (($x43 (=> $x126 $x307)))
 (let (($x261 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x188 (= $x126 $x261)))
 (let (($x255 (and (and (and $x188 $x43) $x33) $x8)))
 (let (($x200 (= $x255 true)))
 (let (($x326 (forall ((input.ind-%var2639X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2639X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x239))))
 (let ((?x64 (input.spec-%var-m-0.1.1 input.ind-%var2639X)))
 (let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2639X)))
 (=> $x289 (= ?x64 ?x149))))))))
 ))
 (let (($x405 (forall ((input.ind-%var2638X (_ BitVec 32)) )(let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2638X)))
 (= $x289 (and (bvule (_ bv0 32) input.ind-%var2638X) (bvult input.ind-%var2638X (_ bv100 32))))))
 ))
 (let (($x296 (and $x405 $x326)))
 (let (($x290 (= $x296 true)))
 (let (($x145 (forall ((input.ind-%var2633X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2633X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x239))))
 (let ((?x64 (input.spec-%var-m-0.1.1 input.ind-%var2633X)))
 (let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2633X)))
 (=> $x289 (= ?x64 ?x149))))))))
 ))
 (let (($x251 (forall ((input.ind-%var2632X (_ BitVec 32)) )(let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2632X)))
 (= $x289 (and (bvule (_ bv0 32) input.ind-%var2632X) (bvult input.ind-%var2632X (_ bv100 32))))))
 ))
 (let (($x131 (and $x251 $x145)))
 (let (($x36 (= $x131 true)))
 (let ((?x356 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x319 (concat ?x247 (concat ?x163 (concat ?x407 ?x356)))))
 (let (($x135 (= ?x319 input.dst.llvm-%m)))
 (let (($x99 (= $x135 true)))
 (let (($x12 (= $x99 true)))
 (let (($x332 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x138 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x186 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x293 (and true $x186)))
 (let (($x216 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x85 (and $x216 $x293)))
 (let (($x274 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv8 32))) (bvult ?x288 (bvsub ?x288 (_ bv8 32))))))
 (let (($x303 (and (and (and true $x274) $x85) $x138)))
 (let (($x364 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x167 (and true $x364)))
 (let (($x205 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x294 (and $x205 $x167)))
 (let (($x278 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv12 32))) (bvult ?x13 (bvsub ?x13 (_ bv12 32))))))
 (let (($x339 (and (and (and true $x205) $x278) $x294)))
 (let (($x410 (and (and $x339 $x303) $x332)))
 (let (($x181 (= input.dst.llvm-%m ?x319)))
 (let (($x250 (and $x181 $x410)))
 (let ((?x121 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x268 (= (_ bv0 32) ?x121)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x320 $x201)))
 (let (($x305 (and $x318 $x268)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x79 $x305)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x130)))))))
 (let (($x102 (and (and (and $x127 true) $x256) $x250)))
 (let (($x273 (= $x102 true)))
 (let (($x208 (= $x273 true)))
 (let (($x25 (= $x208 true)))
 (let (($x412 (= $x410 true)))
 (let (($x361 (= $x412 true)))
 (let (($x74 (= $x361 true)))
 (let (($x292 (= $x339 true)))
 (let (($x324 (= $x292 true)))
 (let (($x415 (= $x324 true)))
 (let (($x46 (and $x303 $x332)))
 (let (($x304 (= $x46 true)))
 (let (($x210 (= $x304 true)))
 (let (($x140 (= $x210 true)))
 (let (($x197 (and $x127 $x256)))
 (let (($x244 (= $x197 true)))
 (let (($x137 (= $x244 true)))
 (let (($x41 (= $x137 true)))
 (let (($x122 (and $x41 $x140)))
 (let (($x112 (and $x122 $x415)))
 (let (($x313 (and $x112 $x74)))
 (let (($x93 (and $x313 $x25)))
 (let (($x243 (and $x93 $x12)))
 (let (($x32 (and $x243 $x36)))
 (let (($x155 (and $x32 $x290)))
 (let (($x302 (and $x155 $x200)))
 (let (($x190 (and $x302 $x103)))
 (let (($x139 (and $x190 $x221)))
 (let (($x199 (and $x139 $x300)))
 (let (($x113 (and $x246 $x315)))
 (let (($x212 (and $x230 $x113)))
 (let (($x298 (and $x196 $x212)))
 (let (($x22 (and $x298 $x199)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x156 (and $x18 $x22)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x347 (and $x9 $x156)))
 (let (($x225 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x346 (and $x225 $x347)))
 (let (($x325 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x258 (and $x325 $x346)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x90 (and $x183 $x258)))
 (let (($x231 (and $x307 $x90)))
 (let (($x312 (= ?x92 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x111 (and $x312 $x231)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x132 $x111)))
 (let (($x237 (and $x307 $x336)))
 (let (($x327 (= ?x47 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x184 (and $x327 $x237)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x382 (and $x262 $x184)))
 (let (($x343 (and $x307 $x382)))
 (let (($x78 (= ?x62 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x338 (and $x78 $x343)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x129 (and $x11 $x338)))
 (let (($x263 (and $x307 $x129)))
 (let (($x189 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x76 (and $x189 $x263)))
 (let (($x19 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x143 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x245 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x143)))))))
 (let (($x44 (bvugt ?x13 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x219 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x44)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x34 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x270)))))))
 (let (($x73 (and $x34 $x219)))
 (let (($x29 (and $x73 $x245)))
 (let (($x193 (and $x29 $x265)))
 (let (($x144 (and $x193 $x76)))
 (let (($x367 (=> $x144 $x359)))
 (not $x367)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x393 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x393 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x402 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x288 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x100 (bvadd ?x288 (_ bv3 32))))
 (let ((?x400 (concat (select input.dst.llvm-mem ?x100) (concat ?x402 ?x395))))
 (let ((?x368 (bvmul (_ bv4294967295 32) ?x400)))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x124 (concat ?x215 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x42 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x45 (bvadd ?x128 (_ bv3 32))))
 (let ((?x380 (concat (select input.dst.llvm-mem ?x45) (concat ?x42 ?x124))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x340 (concat ?x337 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x13 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x59 (bvadd ?x13 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x59) (concat ?x96 ?x340))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x316)))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x147)))
 (let ((?x362 (bvadd (bvadd (bvadd ?x349 ?x371) ?x380) ?x368)))
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x141 (= ?x92 ?x362)))
 (let (($x331 (= $x141 true)))
 (let (($x359 (= $x331 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x134 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x169 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x52 (ite $x169 (_ bv1 32) (_ bv0 32))))
 (let (($x275 (bvuge ?x52 (_ bv1 32))))
 (let (($x335 (=> $x275 $x134)))
 (let (($x35 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x238 (= $x275 $x35)))
 (let (($x307 (= false false)))
 (let (($x315 (= ?x52 (_ bv0 32))))
 (let (($x345 (=> $x315 $x307)))
 (let (($x95 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x26 (= $x315 $x95)))
 (let (($x353 (and (and (and $x26 $x345) $x238) $x335)))
 (let (($x300 (= $x353 true)))
 (let ((?x62 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x236 (= ?x62 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x160 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x168 (ite $x160 (_ bv1 32) (_ bv0 32))))
 (let (($x109 (bvuge ?x168 (_ bv1 32))))
 (let (($x317 (=> $x109 $x236)))
 (let (($x314 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x198 (= $x109 $x314)))
 (let (($x246 (= ?x168 (_ bv0 32))))
 (let (($x10 (=> $x246 $x307)))
 (let (($x107 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x177 (= $x246 $x107)))
 (let (($x40 (and (and (and $x177 $x10) $x198) $x317)))
 (let (($x221 (= $x40 true)))
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x308 (= ?x47 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x57 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x182 (ite $x57 (_ bv1 32) (_ bv0 32))))
 (let (($x418 (bvuge ?x182 (_ bv1 32))))
 (let (($x49 (=> $x418 $x308)))
 (let (($x185 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x348 (= $x418 $x185)))
 (let (($x230 (= ?x182 (_ bv0 32))))
 (let (($x17 (=> $x230 $x307)))
 (let (($x403 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x142 (= $x230 $x403)))
 (let (($x241 (and (and (and $x142 $x17) $x348) $x49)))
 (let (($x103 (= $x241 true)))
 (let (($x14 (= ?x92 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x204 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x116 (ite $x204 (_ bv1 32) (_ bv0 32))))
 (let (($x196 (bvuge ?x116 (_ bv1 32))))
 (let (($x8 (=> $x196 $x14)))
 (let (($x406 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x33 (= $x196 $x406)))
 (let (($x126 (= ?x116 (_ bv0 32))))
 (let (($x43 (=> $x126 $x307)))
 (let (($x261 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x188 (= $x126 $x261)))
 (let (($x255 (and (and (and $x188 $x43) $x33) $x8)))
 (let (($x200 (= $x255 true)))
 (let (($x326 (forall ((input.ind-%var2639X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2639X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x239))))
 (let ((?x64 (input.spec-%var-m-0.1.1 input.ind-%var2639X)))
 (let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2639X)))
 (=> $x289 (= ?x64 ?x149))))))))
 ))
 (let (($x405 (forall ((input.ind-%var2638X (_ BitVec 32)) )(let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2638X)))
 (= $x289 (and (bvule (_ bv0 32) input.ind-%var2638X) (bvult input.ind-%var2638X (_ bv100 32))))))
 ))
 (let (($x296 (and $x405 $x326)))
 (let (($x290 (= $x296 true)))
 (let (($x145 (forall ((input.ind-%var2633X (_ BitVec 32)) )(let ((?x280 (bvadd (bvmul input.ind-%var2633X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x239 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv1 32))) (select input.dst.llvm-mem ?x280))))
 (let ((?x149 (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x280 (_ bv2 32))) ?x239))))
 (let ((?x64 (input.spec-%var-m-0.1.1 input.ind-%var2633X)))
 (let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2633X)))
 (=> $x289 (= ?x64 ?x149))))))))
 ))
 (let (($x251 (forall ((input.ind-%var2632X (_ BitVec 32)) )(let (($x289 (input.spec-%var-m-0.0.1 input.ind-%var2632X)))
 (= $x289 (and (bvule (_ bv0 32) input.ind-%var2632X) (bvult input.ind-%var2632X (_ bv100 32))))))
 ))
 (let (($x131 (and $x251 $x145)))
 (let (($x36 (= $x131 true)))
 (let ((?x356 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x247 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x319 (concat ?x247 (concat ?x163 (concat ?x407 ?x356)))))
 (let (($x135 (= ?x319 input.dst.llvm-%m)))
 (let (($x99 (= $x135 true)))
 (let (($x12 (= $x99 true)))
 (let (($x332 (= (bvand ?x288 (_ bv4294967292 32)) ?x288)))
 (let (($x138 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x186 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x293 (and true $x186)))
 (let (($x216 (= (bvand ?x13 (_ bv4294967292 32)) ?x13)))
 (let (($x85 (and $x216 $x293)))
 (let (($x274 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x288 (bvsub ?x288 (_ bv8 32))) (bvult ?x288 (bvsub ?x288 (_ bv8 32))))))
 (let (($x303 (and (and (and true $x274) $x85) $x138)))
 (let (($x364 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x167 (and true $x364)))
 (let (($x205 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x294 (and $x205 $x167)))
 (let (($x278 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x13 (bvsub ?x13 (_ bv12 32))) (bvult ?x13 (bvsub ?x13 (_ bv12 32))))))
 (let (($x339 (and (and (and true $x205) $x278) $x294)))
 (let (($x410 (and (and $x339 $x303) $x332)))
 (let (($x181 (= input.dst.llvm-%m ?x319)))
 (let (($x250 (and $x181 $x410)))
 (let ((?x121 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x268 (= (_ bv0 32) ?x121)))
 (let ((?x310 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x201 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x310)))
 (let (($x320 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x318 (and $x320 $x201)))
 (let (($x305 (and $x318 $x268)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x256 (and $x79 $x305)))
 (let (($x130 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x154 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x127 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x154 $x130)))))))
 (let (($x102 (and (and (and $x127 true) $x256) $x250)))
 (let (($x273 (= $x102 true)))
 (let (($x208 (= $x273 true)))
 (let (($x25 (= $x208 true)))
 (let (($x412 (= $x410 true)))
 (let (($x361 (= $x412 true)))
 (let (($x74 (= $x361 true)))
 (let (($x292 (= $x339 true)))
 (let (($x324 (= $x292 true)))
 (let (($x415 (= $x324 true)))
 (let (($x46 (and $x303 $x332)))
 (let (($x304 (= $x46 true)))
 (let (($x210 (= $x304 true)))
 (let (($x140 (= $x210 true)))
 (let (($x197 (and $x127 $x256)))
 (let (($x244 (= $x197 true)))
 (let (($x137 (= $x244 true)))
 (let (($x41 (= $x137 true)))
 (let (($x122 (and $x41 $x140)))
 (let (($x112 (and $x122 $x415)))
 (let (($x313 (and $x112 $x74)))
 (let (($x93 (and $x313 $x25)))
 (let (($x243 (and $x93 $x12)))
 (let (($x32 (and $x243 $x36)))
 (let (($x155 (and $x32 $x290)))
 (let (($x302 (and $x155 $x200)))
 (let (($x190 (and $x302 $x103)))
 (let (($x139 (and $x190 $x221)))
 (let (($x199 (and $x139 $x300)))
 (let (($x113 (and $x246 $x315)))
 (let (($x212 (and $x230 $x113)))
 (let (($x298 (and $x196 $x212)))
 (let (($x22 (and $x298 $x199)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x156 (and $x18 $x22)))
 (let (($x9 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x347 (and $x9 $x156)))
 (let (($x225 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x346 (and $x225 $x347)))
 (let (($x325 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x258 (and $x325 $x346)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x90 (and $x183 $x258)))
 (let (($x231 (and $x307 $x90)))
 (let (($x312 (= ?x92 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x111 (and $x312 $x231)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x336 (and $x132 $x111)))
 (let (($x237 (and $x307 $x336)))
 (let (($x327 (= ?x47 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x184 (and $x327 $x237)))
 (let (($x262 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x382 (and $x262 $x184)))
 (let (($x343 (and $x307 $x382)))
 (let (($x78 (= ?x62 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x338 (and $x78 $x343)))
 (let (($x11 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x129 (and $x11 $x338)))
 (let (($x263 (and $x307 $x129)))
 (let (($x189 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x76 (and $x189 $x263)))
 (let (($x19 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x143 (bvugt ?x288 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x100)))
 (let (($x245 (=> (bvule ?x288 (bvsub (bvadd ?x288 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x143)))))))
 (let (($x44 (bvugt ?x13 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x7 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x59)))
 (let (($x219 (=> (bvule ?x13 (bvsub (bvadd ?x13 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x7 $x44)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x106)))
 (let (($x34 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x270)))))))
 (let (($x73 (and $x34 $x219)))
 (let (($x29 (and $x73 $x245)))
 (let (($x193 (and $x29 $x265)))
 (let (($x144 (and $x193 $x76)))
 (let (($x367 (=> $x144 $x359)))
 (not $x367)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 55
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x360 (bvmul (_ bv4294967295 32) ?x47)))
 (let ((?x88 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x360)))
 (let ((?x420 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x411 (concat ?x420 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x272 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x143 (bvadd ?x272 (_ bv3 32))))
 (let ((?x404 (concat (select input.dst.llvm-mem ?x143) (concat ?x271 ?x411))))
 (let ((?x390 (bvmul (_ bv4294967295 32) ?x404)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x417 (concat ?x259 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x19 (bvadd ?x235 (_ bv3 32))))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x19) (concat ?x383 ?x417))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x357 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x44 (bvadd ?x232 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x44) (concat ?x351 ?x153))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x392)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x413)))
 (let ((?x344 (bvadd (bvadd (bvadd ?x66 ?x297) ?x114) ?x390)))
 (let (($x401 (= ?x344 ?x88)))
 (let (($x365 (= $x401 true)))
 (let (($x276 (= $x365 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x77 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x260 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x260 (_ bv1 32))))
 (let (($x380 (=> $x291 $x309)))
 (let (($x215 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x173 (= $x291 $x215)))
 (let (($x62 (= false false)))
 (let (($x253 (= ?x260 (_ bv0 32))))
 (let (($x104 (=> $x253 $x62)))
 (let (($x358 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x42 (= $x253 $x358)))
 (let (($x396 (and (and (and $x42 $x104) $x173) $x380)))
 (let (($x394 (= $x396 true)))
 (let (($x96 (= ?x47 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x212 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x298 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x298 (_ bv1 32))))
 (let (($x375 (=> $x281 $x96)))
 (let (($x349 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x374 (= $x281 $x349)))
 (let (($x172 (= ?x298 (_ bv0 32))))
 (let (($x147 (=> $x172 $x62)))
 (let (($x65 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x316 (= $x172 $x65)))
 (let (($x340 (and (and (and $x316 $x147) $x374) $x375)))
 (let (($x378 (= $x340 true)))
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x129 (= ?x92 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x52 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x315 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x315 (_ bv1 32))))
 (let (($x263 (=> $x113 $x129)))
 (let (($x382 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x113 $x382)))
 (let (($x231 (= ?x315 (_ bv0 32))))
 (let (($x184 (=> $x231 $x62)))
 (let (($x336 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x231 $x336)))
 (let (($x295 (and (and (and $x237 $x184) $x343) $x263)))
 (let (($x287 (= $x295 true)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x199 (= ?x84 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x230 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x246 (ite $x230 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x246 (_ bv1 32))))
 (let (($x22 (=> $x134 $x199)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x353 (= $x134 $x335)))
 (let (($x169 (= ?x246 (_ bv0 32))))
 (let (($x105 (=> $x169 $x62)))
 (let (($x238 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x352 (= $x169 $x238)))
 (let (($x346 (and (and (and $x352 $x105) $x353) $x22)))
 (let (($x258 (= $x346 true)))
 (let (($x26 (forall ((input.ind-%var2677X (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul input.ind-%var2677X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x14))))
 (let ((?x110 (input.spec-%var-m-0.1.1 input.ind-%var2677X)))
 (let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2677X)))
 (=> $x160 (= ?x110 ?x403))))))))
 ))
 (let (($x190 (forall ((input.ind-%var2676X (_ BitVec 32)) )(let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2676X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var2676X) (bvult input.ind-%var2676X (_ bv100 32))))))
 ))
 (let (($x345 (and $x190 $x26)))
 (let (($x192 (= $x345 true)))
 (let (($x58 (forall ((input.ind-%var2671X (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul input.ind-%var2671X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x14))))
 (let ((?x110 (input.spec-%var-m-0.1.1 input.ind-%var2671X)))
 (let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2671X)))
 (=> $x160 (= ?x110 ?x403))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2670X (_ BitVec 32)) )(let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2670X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var2670X) (bvult input.ind-%var2670X (_ bv100 32))))))
 ))
 (let (($x418 (and $x149 $x58)))
 (let (($x185 (= $x418 true)))
 (let ((?x408 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x25 (concat ?x102 (concat ?x319 ?x408)))))
 (let (($x386 (= ?x93 input.dst.llvm-%m)))
 (let (($x384 (= $x386 true)))
 (let (($x251 (= $x384 true)))
 (let (($x354 (= (bvand ?x272 (_ bv4294967292 32)) ?x272)))
 (let (($x210 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x332 (and true $x159)))
 (let (($x85 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x46 (and $x85 $x332)))
 (let (($x211 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x272 (bvsub ?x272 (_ bv8 32))) (bvult ?x272 (bvsub ?x272 (_ bv8 32))))))
 (let (($x341 (and (and (and true $x211) $x46) $x210)))
 (let (($x415 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x112 (and true $x415)))
 (let (($x328 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x333 (and $x328 $x112)))
 (let (($x167 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x361 (and (and (and true $x328) $x167) $x333)))
 (let (($x54 (and (and $x361 $x341) $x354)))
 (let (($x135 (= input.dst.llvm-%m ?x93)))
 (let (($x99 (and $x135 $x54)))
 (let ((?x277 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x277)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x197 $x137)))
 (let (($x323 (and $x41 $x321)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x158 $x323)))
 (let (($x310 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x320 $x310)))))))
 (let (($x174 (and (and (and $x256 true) $x252) $x99)))
 (let (($x289 (= $x174 true)))
 (let (($x385 (= $x289 true)))
 (let (($x370 (= $x385 true)))
 (let (($x247 (= $x54 true)))
 (let (($x409 (= $x247 true)))
 (let (($x163 (= $x409 true)))
 (let (($x74 (= $x361 true)))
 (let (($x313 (= $x74 true)))
 (let (($x118 (= $x313 true)))
 (let (($x117 (and $x341 $x354)))
 (let (($x299 (= $x117 true)))
 (let (($x164 (= $x299 true)))
 (let (($x342 (= $x164 true)))
 (let (($x274 (and $x256 $x252)))
 (let (($x5 (= $x274 true)))
 (let (($x50 (= $x5 true)))
 (let (($x224 (= $x50 true)))
 (let (($x278 (and $x224 $x342)))
 (let (($x267 (and $x278 $x118)))
 (let (($x283 (and $x267 $x163)))
 (let (($x391 (and $x283 $x370)))
 (let (($x64 (and $x391 $x251)))
 (let (($x348 (and $x64 $x185)))
 (let (($x275 (and $x348 $x192)))
 (let (($x90 (and $x275 $x258)))
 (let (($x63 (and $x90 $x287)))
 (let (($x371 (and $x63 $x378)))
 (let (($x402 (and $x371 $x394)))
 (let (($x154 (and $x281 $x291)))
 (let (($x130 (and $x113 $x154)))
 (let (($x53 (and $x169 $x130)))
 (let (($x369 (and $x53 $x402)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x393 (and $x182 $x369)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x397 (and $x196 $x393)))
 (let (($x204 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x395 (and $x204 $x397)))
 (let (($x87 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x414 (and $x87 $x395)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x400 (and $x6 $x414)))
 (let (($x368 (and $x62 $x400)))
 (let (($x20 (= ?x84 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x362 (and $x20 $x368)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x141 (and $x183 $x362)))
 (let (($x331 (and $x62 $x141)))
 (let (($x312 (= ?x92 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x359 (and $x312 $x331)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x367 (and $x132 $x359)))
 (let (($x248 (and $x62 $x367)))
 (let (($x327 (= ?x47 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x175 (and $x327 $x248)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x195 (and $x151 $x175)))
 (let (($x334 (and $x62 $x195)))
 (let (($x222 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x170 (and $x222 $x334)))
 (let (($x23 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x207 (bvugt ?x272 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x286 (=> (bvule ?x272 (bvsub (bvadd ?x272 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x207)))))))
 (let (($x227 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x288 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x227)))))))
 (let (($x68 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x56 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x68)))))))
 (let (($x285 (and $x56 $x288)))
 (let (($x254 (and $x285 $x286)))
 (let (($x148 (and $x254 $x180)))
 (let (($x240 (and $x148 $x170)))
 (let (($x94 (=> $x240 $x276)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x47 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x360 (bvmul (_ bv4294967295 32) ?x47)))
 (let ((?x88 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x360)))
 (let ((?x420 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x411 (concat ?x420 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x272 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x143 (bvadd ?x272 (_ bv3 32))))
 (let ((?x404 (concat (select input.dst.llvm-mem ?x143) (concat ?x271 ?x411))))
 (let ((?x390 (bvmul (_ bv4294967295 32) ?x404)))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x417 (concat ?x259 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x19 (bvadd ?x235 (_ bv3 32))))
 (let ((?x114 (concat (select input.dst.llvm-mem ?x19) (concat ?x383 ?x417))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x153 (concat ?x357 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x351 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x44 (bvadd ?x232 (_ bv3 32))))
 (let ((?x297 (concat (select input.dst.llvm-mem ?x44) (concat ?x351 ?x153))))
 (let ((?x392 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x392)))
 (let ((?x66 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x413)))
 (let ((?x344 (bvadd (bvadd (bvadd ?x66 ?x297) ?x114) ?x390)))
 (let (($x401 (= ?x344 ?x88)))
 (let (($x365 (= $x401 true)))
 (let (($x276 (= $x365 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x309 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x77 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x260 (ite $x77 (_ bv1 32) (_ bv0 32))))
 (let (($x291 (bvuge ?x260 (_ bv1 32))))
 (let (($x380 (=> $x291 $x309)))
 (let (($x215 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x173 (= $x291 $x215)))
 (let (($x62 (= false false)))
 (let (($x253 (= ?x260 (_ bv0 32))))
 (let (($x104 (=> $x253 $x62)))
 (let (($x358 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x42 (= $x253 $x358)))
 (let (($x396 (and (and (and $x42 $x104) $x173) $x380)))
 (let (($x394 (= $x396 true)))
 (let (($x96 (= ?x47 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x212 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x298 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x281 (bvuge ?x298 (_ bv1 32))))
 (let (($x375 (=> $x281 $x96)))
 (let (($x349 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x374 (= $x281 $x349)))
 (let (($x172 (= ?x298 (_ bv0 32))))
 (let (($x147 (=> $x172 $x62)))
 (let (($x65 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x316 (= $x172 $x65)))
 (let (($x340 (and (and (and $x316 $x147) $x374) $x375)))
 (let (($x378 (= $x340 true)))
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x129 (= ?x92 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x52 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x315 (ite $x52 (_ bv1 32) (_ bv0 32))))
 (let (($x113 (bvuge ?x315 (_ bv1 32))))
 (let (($x263 (=> $x113 $x129)))
 (let (($x382 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x343 (= $x113 $x382)))
 (let (($x231 (= ?x315 (_ bv0 32))))
 (let (($x184 (=> $x231 $x62)))
 (let (($x336 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x231 $x336)))
 (let (($x295 (and (and (and $x237 $x184) $x343) $x263)))
 (let (($x287 (= $x295 true)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x199 (= ?x84 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x230 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x246 (ite $x230 (_ bv1 32) (_ bv0 32))))
 (let (($x134 (bvuge ?x246 (_ bv1 32))))
 (let (($x22 (=> $x134 $x199)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x353 (= $x134 $x335)))
 (let (($x169 (= ?x246 (_ bv0 32))))
 (let (($x105 (=> $x169 $x62)))
 (let (($x238 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x352 (= $x169 $x238)))
 (let (($x346 (and (and (and $x352 $x105) $x353) $x22)))
 (let (($x258 (= $x346 true)))
 (let (($x26 (forall ((input.ind-%var2677X (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul input.ind-%var2677X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x14))))
 (let ((?x110 (input.spec-%var-m-0.1.1 input.ind-%var2677X)))
 (let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2677X)))
 (=> $x160 (= ?x110 ?x403))))))))
 ))
 (let (($x190 (forall ((input.ind-%var2676X (_ BitVec 32)) )(let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2676X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var2676X) (bvult input.ind-%var2676X (_ bv100 32))))))
 ))
 (let (($x345 (and $x190 $x26)))
 (let (($x192 (= $x345 true)))
 (let (($x58 (forall ((input.ind-%var2671X (_ BitVec 32)) )(let ((?x406 (bvadd (bvmul input.ind-%var2671X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x14 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv1 32))) (select input.dst.llvm-mem ?x406))))
 (let ((?x403 (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x406 (_ bv2 32))) ?x14))))
 (let ((?x110 (input.spec-%var-m-0.1.1 input.ind-%var2671X)))
 (let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2671X)))
 (=> $x160 (= ?x110 ?x403))))))))
 ))
 (let (($x149 (forall ((input.ind-%var2670X (_ BitVec 32)) )(let (($x160 (input.spec-%var-m-0.0.1 input.ind-%var2670X)))
 (= $x160 (and (bvule (_ bv0 32) input.ind-%var2670X) (bvult input.ind-%var2670X (_ bv100 32))))))
 ))
 (let (($x418 (and $x149 $x58)))
 (let (($x185 (= $x418 true)))
 (let ((?x408 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x319 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x102 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x93 (concat ?x25 (concat ?x102 (concat ?x319 ?x408)))))
 (let (($x386 (= ?x93 input.dst.llvm-%m)))
 (let (($x384 (= $x386 true)))
 (let (($x251 (= $x384 true)))
 (let (($x354 (= (bvand ?x272 (_ bv4294967292 32)) ?x272)))
 (let (($x210 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x159 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x332 (and true $x159)))
 (let (($x85 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x46 (and $x85 $x332)))
 (let (($x211 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x272 (bvsub ?x272 (_ bv8 32))) (bvult ?x272 (bvsub ?x272 (_ bv8 32))))))
 (let (($x341 (and (and (and true $x211) $x46) $x210)))
 (let (($x415 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x112 (and true $x415)))
 (let (($x328 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x333 (and $x328 $x112)))
 (let (($x167 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x361 (and (and (and true $x328) $x167) $x333)))
 (let (($x54 (and (and $x361 $x341) $x354)))
 (let (($x135 (= input.dst.llvm-%m ?x93)))
 (let (($x99 (and $x135 $x54)))
 (let ((?x277 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x321 (= (_ bv0 32) ?x277)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x137 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let (($x197 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x41 (and $x197 $x137)))
 (let (($x323 (and $x41 $x321)))
 (let (($x158 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x252 (and $x158 $x323)))
 (let (($x310 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x320 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x256 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x320 $x310)))))))
 (let (($x174 (and (and (and $x256 true) $x252) $x99)))
 (let (($x289 (= $x174 true)))
 (let (($x385 (= $x289 true)))
 (let (($x370 (= $x385 true)))
 (let (($x247 (= $x54 true)))
 (let (($x409 (= $x247 true)))
 (let (($x163 (= $x409 true)))
 (let (($x74 (= $x361 true)))
 (let (($x313 (= $x74 true)))
 (let (($x118 (= $x313 true)))
 (let (($x117 (and $x341 $x354)))
 (let (($x299 (= $x117 true)))
 (let (($x164 (= $x299 true)))
 (let (($x342 (= $x164 true)))
 (let (($x274 (and $x256 $x252)))
 (let (($x5 (= $x274 true)))
 (let (($x50 (= $x5 true)))
 (let (($x224 (= $x50 true)))
 (let (($x278 (and $x224 $x342)))
 (let (($x267 (and $x278 $x118)))
 (let (($x283 (and $x267 $x163)))
 (let (($x391 (and $x283 $x370)))
 (let (($x64 (and $x391 $x251)))
 (let (($x348 (and $x64 $x185)))
 (let (($x275 (and $x348 $x192)))
 (let (($x90 (and $x275 $x258)))
 (let (($x63 (and $x90 $x287)))
 (let (($x371 (and $x63 $x378)))
 (let (($x402 (and $x371 $x394)))
 (let (($x154 (and $x281 $x291)))
 (let (($x130 (and $x113 $x154)))
 (let (($x53 (and $x169 $x130)))
 (let (($x369 (and $x53 $x402)))
 (let (($x182 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x393 (and $x182 $x369)))
 (let (($x196 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x397 (and $x196 $x393)))
 (let (($x204 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x395 (and $x204 $x397)))
 (let (($x87 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x414 (and $x87 $x395)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x400 (and $x6 $x414)))
 (let (($x368 (and $x62 $x400)))
 (let (($x20 (= ?x84 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x362 (and $x20 $x368)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x141 (and $x183 $x362)))
 (let (($x331 (and $x62 $x141)))
 (let (($x312 (= ?x92 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x359 (and $x312 $x331)))
 (let (($x132 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x367 (and $x132 $x359)))
 (let (($x248 (and $x62 $x367)))
 (let (($x327 (= ?x47 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x175 (and $x327 $x248)))
 (let (($x151 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x195 (and $x151 $x175)))
 (let (($x334 (and $x62 $x195)))
 (let (($x222 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x170 (and $x222 $x334)))
 (let (($x23 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x207 (bvugt ?x272 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x286 (=> (bvule ?x272 (bvsub (bvadd ?x272 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x207)))))))
 (let (($x227 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x288 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x227)))))))
 (let (($x68 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x31 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x56 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x31 $x68)))))))
 (let (($x285 (and $x56 $x288)))
 (let (($x254 (and $x285 $x286)))
 (let (($x148 (and $x254 $x180)))
 (let (($x240 (and $x148 $x170)))
 (let (($x94 (=> $x240 $x276)))
 (not $x94)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 56
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x307 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x103 (bvadd ?x84 ?x307)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x48 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x207 (bvadd ?x100 (_ bv3 32))))
 (let ((?x317 (concat (select input.dst.llvm-mem ?x207) (concat ?x198 ?x236))))
 (let ((?x139 (bvmul (_ bv4294967295 32) ?x317)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x282 (concat ?x177 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x23 (bvadd ?x128 (_ bv3 32))))
 (let ((?x89 (concat (select input.dst.llvm-mem ?x23) (concat ?x49 ?x282))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x290 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x171 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x227 (bvadd ?x171 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x227) (concat ?x405 ?x290))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x399)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x421)))
 (let ((?x213 (bvadd (bvadd (bvadd ?x131 ?x296) ?x89) ?x139)))
 (let (($x366 (= ?x213 ?x103)))
 (let (($x43 (= $x366 true)))
 (let (($x161 (= $x43 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x152 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x305 (_ bv1 32))))
 (let (($x114 (=> $x81 $x152)))
 (let (($x259 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x269 (= $x81 $x259)))
 (let (($x47 (= false false)))
 (let (($x79 (= ?x305 (_ bv0 32))))
 (let (($x383 (=> $x79 $x47)))
 (let (($x214 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x381 (= $x79 $x214)))
 (let (($x376 (and (and (and $x381 $x383) $x269) $x114)))
 (let (($x419 (= $x376 true)))
 (let (($x351 (= ?x92 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x130 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x53 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (=> $x127 $x351)))
 (let (($x66 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x423 (= $x127 $x66)))
 (let (($x257 (= ?x53 (_ bv0 32))))
 (let (($x413 (=> $x257 $x47)))
 (let (($x379 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x392 (= $x257 $x379)))
 (let (($x153 (and (and (and $x392 $x413) $x423) $x71)))
 (let (($x422 (= $x153 true)))
 (let (($x195 (= ?x84 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x291 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x291 (_ bv1 32))))
 (let (($x334 (=> $x154 $x195)))
 (let (($x367 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x248 (= $x154 $x367)))
 (let (($x368 (= ?x291 (_ bv0 32))))
 (let (($x359 (=> $x368 $x47)))
 (let (($x141 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x331 (= $x368 $x141)))
 (let (($x284 (and (and (and $x331 $x359) $x248) $x334)))
 (let (($x388 (= $x284 true)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x402 (= ?x9 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x113 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x281 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x281 (_ bv1 32))))
 (let (($x369 (=> $x309 $x402)))
 (let (($x380 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x396 (= $x309 $x380)))
 (let (($x77 (= ?x281 (_ bv0 32))))
 (let (($x124 (=> $x77 $x47)))
 (let (($x173 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x398 (= $x77 $x173)))
 (let (($x395 (and (and (and $x398 $x124) $x396) $x369)))
 (let (($x414 (= $x395 true)))
 (let (($x358 (forall ((input.ind-%var2715X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var2715X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x199))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2715X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2715X)))
 (=> $x212 (= ?x30 ?x111))))))))
 ))
 (let (($x63 (forall ((input.ind-%var2714X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2714X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2714X) (bvult input.ind-%var2714X (_ bv100 32))))))
 ))
 (let (($x42 (and $x63 $x358)))
 (let (($x104 (= $x42 true)))
 (let (($x184 (forall ((input.ind-%var2709X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var2709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x199))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2709X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2709X)))
 (=> $x212 (= ?x30 ?x111))))))))
 ))
 (let (($x403 (forall ((input.ind-%var2708X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2708X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2708X) (bvult input.ind-%var2708X (_ bv100 32))))))
 ))
 (let (($x76 (and $x403 $x184)))
 (let (($x382 (= $x76 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x391 (concat ?x370 (concat ?x174 (concat ?x93 ?x181)))))
 (let (($x239 (= ?x391 input.dst.llvm-%m)))
 (let (($x176 (= $x239 true)))
 (let (($x149 (= $x176 true)))
 (let (($x410 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x164 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x354 (and true $x205)))
 (let (($x46 (= (bvand ?x171 (_ bv4294967292 32)) ?x171)))
 (let (($x117 (and $x46 $x354)))
 (let (($x303 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv8 32))) (bvult ?x100 (bvsub ?x100 (_ bv8 32))))))
 (let (($x363 (and (and (and true $x303) $x117) $x164)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x267 (and true $x118)))
 (let (($x339 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x355 (and $x339 $x267)))
 (let (($x112 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x171 (bvsub ?x171 (_ bv12 32))) (bvult ?x171 (bvsub ?x171 (_ bv12 32))))))
 (let (($x409 (and (and (and true $x339) $x112) $x355)))
 (let (($x208 (and (and $x409 $x363) $x410)))
 (let (($x386 (= input.dst.llvm-%m ?x391)))
 (let (($x384 (and $x386 $x208)))
 (let ((?x69 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x69)))
 (let ((?x5 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x274 $x50)))
 (let (($x83 (and $x224 $x216)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x268 $x83)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x197 $x244)))))))
 (let (($x189 (and (and (and $x252 true) $x301) $x384)))
 (let (($x160 (= $x189 true)))
 (let (($x15 (= $x160 true)))
 (let (($x228 (= $x15 true)))
 (let (($x25 (= $x208 true)))
 (let (($x250 (= $x25 true)))
 (let (($x102 (= $x250 true)))
 (let (($x163 (= $x409 true)))
 (let (($x283 (= $x163 true)))
 (let (($x12 (= $x283 true)))
 (let (($x21 (and $x363 $x410)))
 (let (($x191 (= $x21 true)))
 (let (($x329 (= $x191 true)))
 (let (($x364 (= $x329 true)))
 (let (($x211 (and $x252 $x301)))
 (let (($x140 (= $x211 true)))
 (let (($x186 (= $x140 true)))
 (let (($x293 (= $x186 true)))
 (let (($x167 (and $x293 $x364)))
 (let (($x243 (and $x167 $x12)))
 (let (($x101 (and $x243 $x102)))
 (let (($x125 (and $x101 $x228)))
 (let (($x110 (and $x125 $x149)))
 (let (($x343 (and $x110 $x382)))
 (let (($x322 (and $x343 $x104)))
 (let (($x400 (and $x322 $x414)))
 (let (($x350 (and $x400 $x388)))
 (let (($x297 (and $x350 $x422)))
 (let (($x271 (and $x297 $x419)))
 (let (($x320 (and $x127 $x79)))
 (let (($x310 (and $x154 $x320)))
 (let (($x201 (and $x77 $x310)))
 (let (($x424 (and $x201 $x271)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x420 (and $x315 $x424)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x61 (and $x169 $x420)))
 (let (($x230 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x411 (and $x230 $x61)))
 (let (($x57 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x162 (and $x57 $x411)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x404 (and $x116 $x162)))
 (let (($x390 (and $x47 $x404)))
 (let (($x18 (= ?x9 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x344 (and $x18 $x390)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x234 (and $x6 $x344)))
 (let (($x360 (and $x47 $x234)))
 (let (($x20 (= ?x84 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x88 (and $x20 $x360)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x401 (and $x183 $x88)))
 (let (($x365 (and $x47 $x401)))
 (let (($x312 (= ?x92 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x276 (and $x312 $x365)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x94 (and $x220 $x276)))
 (let (($x218 (and $x47 $x94)))
 (let (($x262 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x28 (and $x262 $x218)))
 (let (($x203 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x80 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x45 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x80)))))))
 (let (($x70 (bvugt ?x171 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x272 (=> (bvule ?x171 (bvsub (bvadd ?x171 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x70)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x270)))))))
 (let (($x7 (and $x59 $x272)))
 (let (($x72 (and $x7 $x45)))
 (let (($x119 (and $x72 $x11)))
 (let (($x306 (and $x119 $x28)))
 (let (($x107 (=> $x306 $x161)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x307 (bvmul (_ bv4294967295 32) ?x92)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x103 (bvadd ?x84 ?x307)))
 (let ((?x48 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x236 (concat ?x48 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x198 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x100 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x207 (bvadd ?x100 (_ bv3 32))))
 (let ((?x317 (concat (select input.dst.llvm-mem ?x207) (concat ?x198 ?x236))))
 (let ((?x139 (bvmul (_ bv4294967295 32) ?x317)))
 (let ((?x177 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x282 (concat ?x177 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x49 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x23 (bvadd ?x128 (_ bv3 32))))
 (let ((?x89 (concat (select input.dst.llvm-mem ?x23) (concat ?x49 ?x282))))
 (let ((?x261 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x290 (concat ?x261 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x405 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x171 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x227 (bvadd ?x171 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x227) (concat ?x405 ?x290))))
 (let ((?x399 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x421 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x399)))
 (let ((?x131 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x421)))
 (let ((?x213 (bvadd (bvadd (bvadd ?x131 ?x296) ?x89) ?x139)))
 (let (($x366 (= ?x213 ?x103)))
 (let (($x43 (= $x366 true)))
 (let (($x161 (= $x43 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x152 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x51 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x51 (_ bv1 32) (_ bv0 32))))
 (let (($x81 (bvuge ?x305 (_ bv1 32))))
 (let (($x114 (=> $x81 $x152)))
 (let (($x259 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x269 (= $x81 $x259)))
 (let (($x47 (= false false)))
 (let (($x79 (= ?x305 (_ bv0 32))))
 (let (($x383 (=> $x79 $x47)))
 (let (($x214 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x381 (= $x79 $x214)))
 (let (($x376 (and (and (and $x381 $x383) $x269) $x114)))
 (let (($x419 (= $x376 true)))
 (let (($x351 (= ?x92 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x130 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x53 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x127 (bvuge ?x53 (_ bv1 32))))
 (let (($x71 (=> $x127 $x351)))
 (let (($x66 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x423 (= $x127 $x66)))
 (let (($x257 (= ?x53 (_ bv0 32))))
 (let (($x413 (=> $x257 $x47)))
 (let (($x379 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x392 (= $x257 $x379)))
 (let (($x153 (and (and (and $x392 $x413) $x423) $x71)))
 (let (($x422 (= $x153 true)))
 (let (($x195 (= ?x84 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x260 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x291 (ite $x260 (_ bv1 32) (_ bv0 32))))
 (let (($x154 (bvuge ?x291 (_ bv1 32))))
 (let (($x334 (=> $x154 $x195)))
 (let (($x367 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x248 (= $x154 $x367)))
 (let (($x368 (= ?x291 (_ bv0 32))))
 (let (($x359 (=> $x368 $x47)))
 (let (($x141 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x331 (= $x368 $x141)))
 (let (($x284 (and (and (and $x331 $x359) $x248) $x334)))
 (let (($x388 (= $x284 true)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x402 (= ?x9 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x113 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x281 (ite $x113 (_ bv1 32) (_ bv0 32))))
 (let (($x309 (bvuge ?x281 (_ bv1 32))))
 (let (($x369 (=> $x309 $x402)))
 (let (($x380 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x396 (= $x309 $x380)))
 (let (($x77 (= ?x281 (_ bv0 32))))
 (let (($x124 (=> $x77 $x47)))
 (let (($x173 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x398 (= $x77 $x173)))
 (let (($x395 (and (and (and $x398 $x124) $x396) $x369)))
 (let (($x414 (= $x395 true)))
 (let (($x358 (forall ((input.ind-%var2715X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var2715X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x199))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2715X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2715X)))
 (=> $x212 (= ?x30 ?x111))))))))
 ))
 (let (($x63 (forall ((input.ind-%var2714X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2714X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2714X) (bvult input.ind-%var2714X (_ bv100 32))))))
 ))
 (let (($x42 (and $x63 $x358)))
 (let (($x104 (= $x42 true)))
 (let (($x184 (forall ((input.ind-%var2709X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var2709X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x199 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x111 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x199))))
 (let ((?x30 (input.spec-%var-m-0.1.1 input.ind-%var2709X)))
 (let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2709X)))
 (=> $x212 (= ?x30 ?x111))))))))
 ))
 (let (($x403 (forall ((input.ind-%var2708X (_ BitVec 32)) )(let (($x212 (input.spec-%var-m-0.0.1 input.ind-%var2708X)))
 (= $x212 (and (bvule (_ bv0 32) input.ind-%var2708X) (bvult input.ind-%var2708X (_ bv100 32))))))
 ))
 (let (($x76 (and $x403 $x184)))
 (let (($x382 (= $x76 true)))
 (let ((?x181 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x93 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x174 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x370 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x391 (concat ?x370 (concat ?x174 (concat ?x93 ?x181)))))
 (let (($x239 (= ?x391 input.dst.llvm-%m)))
 (let (($x176 (= $x239 true)))
 (let (($x149 (= $x176 true)))
 (let (($x410 (= (bvand ?x100 (_ bv4294967292 32)) ?x100)))
 (let (($x164 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x205 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x354 (and true $x205)))
 (let (($x46 (= (bvand ?x171 (_ bv4294967292 32)) ?x171)))
 (let (($x117 (and $x46 $x354)))
 (let (($x303 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x100 (bvsub ?x100 (_ bv8 32))) (bvult ?x100 (bvsub ?x100 (_ bv8 32))))))
 (let (($x363 (and (and (and true $x303) $x117) $x164)))
 (let (($x118 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x267 (and true $x118)))
 (let (($x339 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x355 (and $x339 $x267)))
 (let (($x112 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x171 (bvsub ?x171 (_ bv12 32))) (bvult ?x171 (bvsub ?x171 (_ bv12 32))))))
 (let (($x409 (and (and (and true $x339) $x112) $x355)))
 (let (($x208 (and (and $x409 $x363) $x410)))
 (let (($x386 (= input.dst.llvm-%m ?x391)))
 (let (($x384 (and $x386 $x208)))
 (let ((?x69 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x216 (= (_ bv0 32) ?x69)))
 (let ((?x5 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x50 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x5)))
 (let (($x274 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x224 (and $x274 $x50)))
 (let (($x83 (and $x224 $x216)))
 (let (($x268 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x301 (and $x268 $x83)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x197 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x252 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x197 $x244)))))))
 (let (($x189 (and (and (and $x252 true) $x301) $x384)))
 (let (($x160 (= $x189 true)))
 (let (($x15 (= $x160 true)))
 (let (($x228 (= $x15 true)))
 (let (($x25 (= $x208 true)))
 (let (($x250 (= $x25 true)))
 (let (($x102 (= $x250 true)))
 (let (($x163 (= $x409 true)))
 (let (($x283 (= $x163 true)))
 (let (($x12 (= $x283 true)))
 (let (($x21 (and $x363 $x410)))
 (let (($x191 (= $x21 true)))
 (let (($x329 (= $x191 true)))
 (let (($x364 (= $x329 true)))
 (let (($x211 (and $x252 $x301)))
 (let (($x140 (= $x211 true)))
 (let (($x186 (= $x140 true)))
 (let (($x293 (= $x186 true)))
 (let (($x167 (and $x293 $x364)))
 (let (($x243 (and $x167 $x12)))
 (let (($x101 (and $x243 $x102)))
 (let (($x125 (and $x101 $x228)))
 (let (($x110 (and $x125 $x149)))
 (let (($x343 (and $x110 $x382)))
 (let (($x322 (and $x343 $x104)))
 (let (($x400 (and $x322 $x414)))
 (let (($x350 (and $x400 $x388)))
 (let (($x297 (and $x350 $x422)))
 (let (($x271 (and $x297 $x419)))
 (let (($x320 (and $x127 $x79)))
 (let (($x310 (and $x154 $x320)))
 (let (($x201 (and $x77 $x310)))
 (let (($x424 (and $x201 $x271)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x420 (and $x315 $x424)))
 (let (($x169 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x61 (and $x169 $x420)))
 (let (($x230 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x411 (and $x230 $x61)))
 (let (($x57 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x162 (and $x57 $x411)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x404 (and $x116 $x162)))
 (let (($x390 (and $x47 $x404)))
 (let (($x18 (= ?x9 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x344 (and $x18 $x390)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x234 (and $x6 $x344)))
 (let (($x360 (and $x47 $x234)))
 (let (($x20 (= ?x84 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x88 (and $x20 $x360)))
 (let (($x183 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x401 (and $x183 $x88)))
 (let (($x365 (and $x47 $x401)))
 (let (($x312 (= ?x92 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x276 (and $x312 $x365)))
 (let (($x220 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x94 (and $x220 $x276)))
 (let (($x218 (and $x47 $x94)))
 (let (($x262 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x28 (and $x262 $x218)))
 (let (($x203 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x80 (bvugt ?x100 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x45 (=> (bvule ?x100 (bvsub (bvadd ?x100 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x80)))))))
 (let (($x70 (bvugt ?x171 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x272 (=> (bvule ?x171 (bvsub (bvadd ?x171 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x70)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x55 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x60 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x55)))
 (let (($x59 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x60 $x270)))))))
 (let (($x7 (and $x59 $x272)))
 (let (($x72 (and $x7 $x45)))
 (let (($x119 (and $x72 $x11)))
 (let (($x306 (and $x119 $x28)))
 (let (($x107 (=> $x306 $x161)))
 (not $x107)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 57
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x287 (bvadd ?x9 ?x37)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x80 (bvadd ?x143 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x80) (concat ?x337 ?x349))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x371)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x129 (concat ?x144 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x203 (bvadd ?x235 (_ bv3 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem ?x203) (concat ?x316 ?x129))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x275 (concat ?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x146 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x70 (bvadd ?x146 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x70) (concat ?x26 ?x275))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x58)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x8)))
 (let ((?x105 (bvadd (bvadd (bvadd ?x185 ?x35) ?x147) ?x338)))
 (let (($x17 (= ?x105 ?x287)))
 (let (($x156 (= $x17 true)))
 (let (($x253 (= $x156 true)))
 (let (($x10 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x323 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x323 (_ bv1 32))))
 (let (($x89 (=> $x158 $x10)))
 (let (($x177 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x126 (= $x158 $x177)))
 (let (($x92 (= false false)))
 (let (($x38 (= ?x323 (_ bv0 32))))
 (let (($x188 (=> $x38 $x92)))
 (let (($x308 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x49 (= $x38 $x308)))
 (let (($x202 (and (and (and $x49 $x188) $x126) $x89)))
 (let (($x314 (= $x202 true)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x405 (= ?x84 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x310 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x201 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x201 (_ bv1 32))))
 (let (($x115 (=> $x421 $x405)))
 (let (($x131 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x32 (= $x421 $x131)))
 (let (($x256 (= ?x201 (_ bv0 32))))
 (let (($x399 (=> $x256 $x92)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x356 (= $x256 $x242)))
 (let (($x290 (and (and (and $x356 $x399) $x32) $x115)))
 (let (($x326 (= $x290 true)))
 (let (($x94 (= ?x9 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x79 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x79 (_ bv1 32))))
 (let (($x218 (=> $x320 $x94)))
 (let (($x401 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x365 (= $x320 $x401)))
 (let (($x390 (= ?x79 (_ bv0 32))))
 (let (($x88 (=> $x390 $x92)))
 (let (($x234 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x360 (= $x390 $x234)))
 (let (($x217 (and (and (and $x360 $x88) $x365) $x218)))
 (let (($x145 (= $x217 true)))
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x271 (= ?x196 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x154 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x127 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x127 (_ bv1 32))))
 (let (($x424 (=> $x152 $x271)))
 (let (($x114 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x376 (= $x152 $x114)))
 (let (($x51 (= ?x127 (_ bv0 32))))
 (let (($x417 (=> $x51 $x92)))
 (let (($x269 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x27 (= $x51 $x269)))
 (let (($x411 (and (and (and $x27 $x417) $x376) $x424)))
 (let (($x162 (= $x411 true)))
 (let (($x381 (forall ((input.ind-%var2753X (_ BitVec 32)) )(let ((?x380 (bvadd (bvmul input.ind-%var2753X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x402))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var2753X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2753X)))
 (=> $x130 (= ?x150 ?x362))))))))
 ))
 (let (($x350 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2752X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2752X) (bvult input.ind-%var2752X (_ bv100 32))))))
 ))
 (let (($x383 (and $x350 $x381)))
 (let (($x416 (= $x383 true)))
 (let (($x359 (forall ((input.ind-%var2747X (_ BitVec 32)) )(let ((?x380 (bvadd (bvmul input.ind-%var2747X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x402))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var2747X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2747X)))
 (=> $x130 (= ?x150 ?x362))))))))
 ))
 (let (($x111 (forall ((input.ind-%var2746X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2746X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2746X) (bvult input.ind-%var2746X (_ bv100 32))))))
 ))
 (let (($x170 (and $x111 $x359)))
 (let (($x367 (= $x170 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x228 (concat ?x189 (concat ?x391 ?x135)))))
 (let (($x14 (= ?x125 input.dst.llvm-%m)))
 (let (($x200 (= $x14 true)))
 (let (($x403 (= $x200 true)))
 (let (($x54 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x329 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x328 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x410 (and true $x328)))
 (let (($x117 (= (bvand ?x146 (_ bv4294967292 32)) ?x146)))
 (let (($x21 (and $x117 $x410)))
 (let (($x341 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv8 32))) (bvult ?x143 (bvsub ?x143 (_ bv8 32))))))
 (let (($x412 (and (and (and true $x341) $x21) $x329)))
 (let (($x12 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x12)))
 (let (($x361 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x407 (and $x361 $x243)))
 (let (($x267 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x146 (bvsub ?x146 (_ bv12 32))) (bvult ?x146 (bvsub ?x146 (_ bv12 32))))))
 (let (($x250 (and (and (and true $x361) $x267) $x407)))
 (let (($x385 (and (and $x250 $x412) $x54)))
 (let (($x239 (= input.dst.llvm-%m ?x125)))
 (let (($x176 (and $x239 $x385)))
 (let ((?x123 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x123)))
 (let ((?x140 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x211 $x186)))
 (let (($x39 (and $x293 $x85)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x321 $x39)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x5)))))))
 (let (($x222 (and (and (and $x301 true) $x138) $x176)))
 (let (($x212 (= $x222 true)))
 (let (($x33 (= $x212 true)))
 (let (($x133 (= $x33 true)))
 (let (($x370 (= $x385 true)))
 (let (($x99 (= $x370 true)))
 (let (($x174 (= $x99 true)))
 (let (($x102 (= $x250 true)))
 (let (($x101 (= $x102 true)))
 (let (($x251 (= $x101 true)))
 (let (($x292 (and $x412 $x54)))
 (let (($x294 (= $x292 true)))
 (let (($x324 (= $x294 true)))
 (let (($x415 (= $x324 true)))
 (let (($x303 (and $x301 $x138)))
 (let (($x342 (= $x303 true)))
 (let (($x159 (= $x342 true)))
 (let (($x332 (= $x159 true)))
 (let (($x112 (and $x332 $x415)))
 (let (($x64 (and $x112 $x251)))
 (let (($x273 (and $x64 $x174)))
 (let (($x165 (and $x273 $x133)))
 (let (($x30 (and $x165 $x403)))
 (let (($x248 (and $x30 $x367)))
 (let (($x81 (and $x248 $x416)))
 (let (($x404 (and $x81 $x162)))
 (let (($x82 (and $x404 $x145)))
 (let (($x296 (and $x82 $x326)))
 (let (($x198 (and $x296 $x314)))
 (let (($x197 (and $x256 $x158)))
 (let (($x244 (and $x320 $x197)))
 (let (($x137 (and $x51 $x244)))
 (let (($x221 (and $x137 $x198)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x48 (and $x291 $x221)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x40 (and $x77 $x48)))
 (let (($x113 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x236 (and $x113 $x40)))
 (let (($x52 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x109 (and $x52 $x236)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x317 (and $x246 $x109)))
 (let (($x139 (and $x92 $x317)))
 (let (($x182 (= ?x196 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x213 (and $x182 $x139)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x307 (and $x116 $x213)))
 (let (($x103 (and $x92 $x307)))
 (let (($x18 (= ?x9 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x366 (and $x18 $x103)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x43 (and $x6 $x366)))
 (let (($x161 (and $x92 $x43)))
 (let (($x20 (= ?x84 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x20 $x161)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x95 (and $x91 $x107)))
 (let (($x86 (and $x92 $x95)))
 (let (($x132 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x318 (and $x132 $x86)))
 (let (($x193 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x151 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x193)))))))
 (let (($x29 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x19 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x29)))))))
 (let (($x73 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x100 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x73)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x44 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x270)))))))
 (let (($x178 (and $x44 $x100)))
 (let (($x187 (and $x178 $x19)))
 (let (($x266 (and $x187 $x151)))
 (let (($x408 (and $x266 $x318)))
 (let (($x209 (=> $x408 $x253)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x287 (bvadd ?x9 ?x37)))
 (let ((?x96 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x349 (concat ?x96 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x337 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x143 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x80 (bvadd ?x143 (_ bv3 32))))
 (let ((?x371 (concat (select input.dst.llvm-mem ?x80) (concat ?x337 ?x349))))
 (let ((?x338 (bvmul (_ bv4294967295 32) ?x371)))
 (let ((?x144 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x129 (concat ?x144 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x316 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x203 (bvadd ?x235 (_ bv3 32))))
 (let ((?x147 (concat (select input.dst.llvm-mem ?x203) (concat ?x316 ?x129))))
 (let ((?x192 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x275 (concat ?x192 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x146 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x70 (bvadd ?x146 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x70) (concat ?x26 ?x275))))
 (let ((?x58 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x8 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x58)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x8)))
 (let ((?x105 (bvadd (bvadd (bvadd ?x185 ?x35) ?x147) ?x338)))
 (let (($x17 (= ?x105 ?x287)))
 (let (($x156 (= $x17 true)))
 (let (($x253 (= $x156 true)))
 (let (($x10 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x233 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x323 (ite $x233 (_ bv1 32) (_ bv0 32))))
 (let (($x158 (bvuge ?x323 (_ bv1 32))))
 (let (($x89 (=> $x158 $x10)))
 (let (($x177 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x126 (= $x158 $x177)))
 (let (($x92 (= false false)))
 (let (($x38 (= ?x323 (_ bv0 32))))
 (let (($x188 (=> $x38 $x92)))
 (let (($x308 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x49 (= $x38 $x308)))
 (let (($x202 (and (and (and $x49 $x188) $x126) $x89)))
 (let (($x314 (= $x202 true)))
 (let ((?x84 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x405 (= ?x84 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x310 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x201 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x201 (_ bv1 32))))
 (let (($x115 (=> $x421 $x405)))
 (let (($x131 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x32 (= $x421 $x131)))
 (let (($x256 (= ?x201 (_ bv0 32))))
 (let (($x399 (=> $x256 $x92)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x356 (= $x256 $x242)))
 (let (($x290 (and (and (and $x356 $x399) $x32) $x115)))
 (let (($x326 (= $x290 true)))
 (let (($x94 (= ?x9 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x79 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x320 (bvuge ?x79 (_ bv1 32))))
 (let (($x218 (=> $x320 $x94)))
 (let (($x401 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x365 (= $x320 $x401)))
 (let (($x390 (= ?x79 (_ bv0 32))))
 (let (($x88 (=> $x390 $x92)))
 (let (($x234 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x360 (= $x390 $x234)))
 (let (($x217 (and (and (and $x360 $x88) $x365) $x218)))
 (let (($x145 (= $x217 true)))
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x271 (= ?x196 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x154 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x127 (ite $x154 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x127 (_ bv1 32))))
 (let (($x424 (=> $x152 $x271)))
 (let (($x114 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x376 (= $x152 $x114)))
 (let (($x51 (= ?x127 (_ bv0 32))))
 (let (($x417 (=> $x51 $x92)))
 (let (($x269 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x27 (= $x51 $x269)))
 (let (($x411 (and (and (and $x27 $x417) $x376) $x424)))
 (let (($x162 (= $x411 true)))
 (let (($x381 (forall ((input.ind-%var2753X (_ BitVec 32)) )(let ((?x380 (bvadd (bvmul input.ind-%var2753X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x402))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var2753X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2753X)))
 (=> $x130 (= ?x150 ?x362))))))))
 ))
 (let (($x350 (forall ((input.ind-%var2752X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2752X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2752X) (bvult input.ind-%var2752X (_ bv100 32))))))
 ))
 (let (($x383 (and $x350 $x381)))
 (let (($x416 (= $x383 true)))
 (let (($x359 (forall ((input.ind-%var2747X (_ BitVec 32)) )(let ((?x380 (bvadd (bvmul input.ind-%var2747X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x402 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv1 32))) (select input.dst.llvm-mem ?x380))))
 (let ((?x362 (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x380 (_ bv2 32))) ?x402))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var2747X)))
 (let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2747X)))
 (=> $x130 (= ?x150 ?x362))))))))
 ))
 (let (($x111 (forall ((input.ind-%var2746X (_ BitVec 32)) )(let (($x130 (input.spec-%var-m-0.0.1 input.ind-%var2746X)))
 (= $x130 (and (bvule (_ bv0 32) input.ind-%var2746X) (bvult input.ind-%var2746X (_ bv100 32))))))
 ))
 (let (($x170 (and $x111 $x359)))
 (let (($x367 (= $x170 true)))
 (let ((?x135 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x391 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x189 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x228 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x125 (concat ?x228 (concat ?x189 (concat ?x391 ?x135)))))
 (let (($x14 (= ?x125 input.dst.llvm-%m)))
 (let (($x200 (= $x14 true)))
 (let (($x403 (= $x200 true)))
 (let (($x54 (= (bvand ?x143 (_ bv4294967292 32)) ?x143)))
 (let (($x329 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x328 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x410 (and true $x328)))
 (let (($x117 (= (bvand ?x146 (_ bv4294967292 32)) ?x146)))
 (let (($x21 (and $x117 $x410)))
 (let (($x341 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x143 (bvsub ?x143 (_ bv8 32))) (bvult ?x143 (bvsub ?x143 (_ bv8 32))))))
 (let (($x412 (and (and (and true $x341) $x21) $x329)))
 (let (($x12 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x12)))
 (let (($x361 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x407 (and $x361 $x243)))
 (let (($x267 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x146 (bvsub ?x146 (_ bv12 32))) (bvult ?x146 (bvsub ?x146 (_ bv12 32))))))
 (let (($x250 (and (and (and true $x361) $x267) $x407)))
 (let (($x385 (and (and $x250 $x412) $x54)))
 (let (($x239 (= input.dst.llvm-%m ?x125)))
 (let (($x176 (and $x239 $x385)))
 (let ((?x123 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x85 (= (_ bv0 32) ?x123)))
 (let ((?x140 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x186 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x140)))
 (let (($x211 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x293 (and $x211 $x186)))
 (let (($x39 (and $x293 $x85)))
 (let (($x321 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x138 (and $x321 $x39)))
 (let (($x5 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x274 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x301 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x274 $x5)))))))
 (let (($x222 (and (and (and $x301 true) $x138) $x176)))
 (let (($x212 (= $x222 true)))
 (let (($x33 (= $x212 true)))
 (let (($x133 (= $x33 true)))
 (let (($x370 (= $x385 true)))
 (let (($x99 (= $x370 true)))
 (let (($x174 (= $x99 true)))
 (let (($x102 (= $x250 true)))
 (let (($x101 (= $x102 true)))
 (let (($x251 (= $x101 true)))
 (let (($x292 (and $x412 $x54)))
 (let (($x294 (= $x292 true)))
 (let (($x324 (= $x294 true)))
 (let (($x415 (= $x324 true)))
 (let (($x303 (and $x301 $x138)))
 (let (($x342 (= $x303 true)))
 (let (($x159 (= $x342 true)))
 (let (($x332 (= $x159 true)))
 (let (($x112 (and $x332 $x415)))
 (let (($x64 (and $x112 $x251)))
 (let (($x273 (and $x64 $x174)))
 (let (($x165 (and $x273 $x133)))
 (let (($x30 (and $x165 $x403)))
 (let (($x248 (and $x30 $x367)))
 (let (($x81 (and $x248 $x416)))
 (let (($x404 (and $x81 $x162)))
 (let (($x82 (and $x404 $x145)))
 (let (($x296 (and $x82 $x326)))
 (let (($x198 (and $x296 $x314)))
 (let (($x197 (and $x256 $x158)))
 (let (($x244 (and $x320 $x197)))
 (let (($x137 (and $x51 $x244)))
 (let (($x221 (and $x137 $x198)))
 (let (($x291 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x48 (and $x291 $x221)))
 (let (($x77 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x40 (and $x77 $x48)))
 (let (($x113 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x236 (and $x113 $x40)))
 (let (($x52 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x109 (and $x52 $x236)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x317 (and $x246 $x109)))
 (let (($x139 (and $x92 $x317)))
 (let (($x182 (= ?x196 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x213 (and $x182 $x139)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x307 (and $x116 $x213)))
 (let (($x103 (and $x92 $x307)))
 (let (($x18 (= ?x9 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x366 (and $x18 $x103)))
 (let (($x6 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x43 (and $x6 $x366)))
 (let (($x161 (and $x92 $x43)))
 (let (($x20 (= ?x84 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x107 (and $x20 $x161)))
 (let (($x91 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x95 (and $x91 $x107)))
 (let (($x86 (and $x92 $x95)))
 (let (($x132 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x318 (and $x132 $x86)))
 (let (($x193 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x151 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x193)))))))
 (let (($x29 (bvugt ?x143 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x19 (=> (bvule ?x143 (bvsub (bvadd ?x143 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x29)))))))
 (let (($x73 (bvugt ?x146 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x100 (=> (bvule ?x146 (bvsub (bvadd ?x146 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x73)))))))
 (let (($x270 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x68 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x44 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x68 $x270)))))))
 (let (($x178 (and $x44 $x100)))
 (let (($x187 (and $x178 $x19)))
 (let (($x266 (and $x187 $x151)))
 (let (($x408 (and $x266 $x318)))
 (let (($x209 (=> $x408 $x253)))
 (not $x209))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 58
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x423 (concat ?x66 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x207 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x29 (bvadd ?x207 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x29) (concat ?x279 ?x423))))
 (let ((?x284 (bvmul (_ bv4294967295 32) ?x175)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x195 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x193 (bvadd ?x128 (_ bv3 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem ?x193) (concat ?x335 ?x334))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x322 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x73 (bvadd ?x120 (_ bv3 32))))
 (let ((?x47 (concat (select input.dst.llvm-mem ?x73) (concat ?x343 ?x63))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x134)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x76)))
 (let ((?x388 (bvadd (bvadd (bvadd ?x173 ?x47) ?x153) ?x284)))
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x237 (= ?x196 ?x388)))
 (let (($x393 (= $x237 true)))
 (let (($x67 (= $x393 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x406 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x83 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x83 (_ bv1 32))))
 (let (($x147 (=> $x65 $x406)))
 (let (($x144 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x62 (= $x65 $x144)))
 (let (($x84 (= false false)))
 (let (($x268 (= ?x83 (_ bv0 32))))
 (let (($x316 (=> $x268 $x84)))
 (let (($x255 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x263 (= $x268 $x255)))
 (let (($x375 (and (and (and $x263 $x316) $x62) $x147)))
 (let (($x374 (= $x375 true)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x26 (= ?x9 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x137 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x137 (_ bv1 32))))
 (let (($x352 (=> $x8 $x26)))
 (let (($x185 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x345 (= $x8 $x185)))
 (let (($x252 (= ?x137 (_ bv0 32))))
 (let (($x58 (=> $x252 $x84)))
 (let (($x142 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x298 (= $x252 $x142)))
 (let (($x275 (and (and (and $x298 $x58) $x345) $x352)))
 (let (($x348 (= $x275 true)))
 (let (($x95 (= ?x196 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x323 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x158 (ite $x323 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x158 (_ bv1 32))))
 (let (($x86 (=> $x197 $x95)))
 (let (($x43 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x161 (= $x197 $x43)))
 (let (($x139 (= ?x158 (_ bv0 32))))
 (let (($x366 (=> $x139 $x84)))
 (let (($x307 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x103 (= $x139 $x307)))
 (let (($x418 (and (and (and $x103 $x366) $x161) $x86)))
 (let (($x75 (= $x418 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x198 (= ?x169 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x256 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x256 (_ bv1 32))))
 (let (($x221 (=> $x10 $x198)))
 (let (($x89 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x202 (= $x10 $x89)))
 (let (($x233 (= ?x256 (_ bv0 32))))
 (let (($x282 (=> $x233 $x84)))
 (let (($x126 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x223 (= $x233 $x126)))
 (let (($x236 (and (and (and $x223 $x282) $x202) $x221)))
 (let (($x109 (= $x236 true)))
 (let (($x308 (forall ((input.ind-%var2791X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var2791X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x271))))
 (let ((?x97 (input.spec-%var-m-0.1.1 input.ind-%var2791X)))
 (let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2791X)))
 (=> $x310 (= ?x97 ?x344))))))))
 ))
 (let (($x82 (forall ((input.ind-%var2790X (_ BitVec 32)) )(let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2790X)))
 (= $x310 (and (bvule (_ bv0 32) input.ind-%var2790X) (bvult input.ind-%var2790X (_ bv100 32))))))
 ))
 (let (($x49 (and $x82 $x308)))
 (let (($x188 (= $x49 true)))
 (let (($x88 (forall ((input.ind-%var2785X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var2785X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x271))))
 (let ((?x97 (input.spec-%var-m-0.1.1 input.ind-%var2785X)))
 (let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2785X)))
 (=> $x310 (= ?x97 ?x344))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2784X (_ BitVec 32)) )(let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2784X)))
 (= $x310 (and (bvule (_ bv0 32) input.ind-%var2784X) (bvult input.ind-%var2784X (_ bv100 32))))))
 ))
 (let (($x28 (and $x362 $x88)))
 (let (($x401 (= $x28 true)))
 (let ((?x386 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x133 (concat ?x222 (concat ?x125 ?x386)))))
 (let (($x199 (= ?x165 input.dst.llvm-%m)))
 (let (($x258 (= $x199 true)))
 (let (($x111 (= $x258 true)))
 (let (($x208 (= (bvand ?x207 (_ bv4294967292 32)) ?x207)))
 (let (($x324 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x339 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x54 (and true $x339)))
 (let (($x21 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x292 (and $x21 $x54)))
 (let (($x363 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x207 (bvsub ?x207 (_ bv8 32))) (bvult ?x207 (bvsub ?x207 (_ bv8 32))))))
 (let (($x247 (and (and (and true $x363) $x292) $x324)))
 (let (($x251 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x64 (and true $x251)))
 (let (($x409 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x319 (and $x409 $x64)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x99 (and (and (and true $x409) $x243) $x319)))
 (let (($x15 (and (and $x99 $x247) $x208)))
 (let (($x14 (= input.dst.llvm-%m ?x165)))
 (let (($x200 (and $x14 $x15)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x304)))
 (let ((?x342 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x342)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (and $x303 $x159)))
 (let (($x122 (and $x332 $x46)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x216 $x122)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x140)))))))
 (let (($x262 (and (and (and $x138 true) $x210) $x200)))
 (let (($x130 (= $x262 true)))
 (let (($x353 (= $x130 true)))
 (let (($x231 (= $x353 true)))
 (let (($x228 (= $x15 true)))
 (let (($x384 (= $x228 true)))
 (let (($x189 (= $x384 true)))
 (let (($x174 (= $x99 true)))
 (let (($x273 (= $x174 true)))
 (let (($x149 (= $x273 true)))
 (let (($x74 (and $x247 $x208)))
 (let (($x333 (= $x74 true)))
 (let (($x313 (= $x333 true)))
 (let (($x118 (= $x313 true)))
 (let (($x341 (and $x138 $x210)))
 (let (($x364 (= $x341 true)))
 (let (($x205 (= $x364 true)))
 (let (($x354 (= $x205 true)))
 (let (($x267 (and $x354 $x118)))
 (let (($x110 (and $x267 $x149)))
 (let (($x289 (and $x110 $x189)))
 (let (($x300 (and $x289 $x231)))
 (let (($x150 (and $x300 $x111)))
 (let (($x365 (and $x150 $x401)))
 (let (($x241 (and $x365 $x188)))
 (let (($x317 (and $x241 $x109)))
 (let (($x302 (and $x317 $x75)))
 (let (($x35 (and $x302 $x348)))
 (let (($x337 (and $x35 $x374)))
 (let (($x274 (and $x252 $x268)))
 (let (($x5 (and $x197 $x274)))
 (let (($x50 (and $x233 $x5)))
 (let (($x372 (and $x50 $x337)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x79 $x372)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x378 (and $x51 $x96)))
 (let (($x154 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x349 (and $x154 $x378)))
 (let (($x260 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x387 (and $x260 $x349)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x371 (and $x281 $x387)))
 (let (($x338 (and $x84 $x371)))
 (let (($x315 (= ?x169 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x105 (and $x315 $x338)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x287 (and $x246 $x105)))
 (let (($x17 (and $x84 $x287)))
 (let (($x182 (= ?x196 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x156 (and $x182 $x17)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x253 (and $x116 $x156)))
 (let (($x209 (and $x84 $x253)))
 (let (($x18 (= ?x9 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x373 (and $x18 $x209)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x13 (and $x225 $x373)))
 (let (($x41 (and $x84 $x13)))
 (let (($x183 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x181 (and $x183 $x41)))
 (let (($x148 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x220 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x148)))))))
 (let (($x254 (bvugt ?x207 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x207 (bvsub (bvadd ?x207 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x285 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x143 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x285)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x227 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x157)))))))
 (let (($x264 (and $x227 $x143)))
 (let (($x311 (and $x264 $x23)))
 (let (($x108 (and $x311 $x220)))
 (let (($x53 (and $x108 $x181)))
 (let (($x389 (=> $x53 $x67)))
 (not $x389)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x66 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x423 (concat ?x66 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x279 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x207 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x29 (bvadd ?x207 (_ bv3 32))))
 (let ((?x175 (concat (select input.dst.llvm-mem ?x29) (concat ?x279 ?x423))))
 (let ((?x284 (bvmul (_ bv4294967295 32) ?x175)))
 (let ((?x195 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x334 (concat ?x195 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x193 (bvadd ?x128 (_ bv3 32))))
 (let ((?x153 (concat (select input.dst.llvm-mem ?x193) (concat ?x335 ?x334))))
 (let ((?x322 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x322 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x73 (bvadd ?x120 (_ bv3 32))))
 (let ((?x47 (concat (select input.dst.llvm-mem ?x73) (concat ?x343 ?x63))))
 (let ((?x134 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x134)))
 (let ((?x173 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x76)))
 (let ((?x388 (bvadd (bvadd (bvadd ?x173 ?x47) ?x153) ?x284)))
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x237 (= ?x196 ?x388)))
 (let (($x393 (= $x237 true)))
 (let (($x67 (= $x393 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x406 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x121 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x83 (ite $x121 (_ bv1 32) (_ bv0 32))))
 (let (($x65 (bvuge ?x83 (_ bv1 32))))
 (let (($x147 (=> $x65 $x406)))
 (let (($x144 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x62 (= $x65 $x144)))
 (let (($x84 (= false false)))
 (let (($x268 (= ?x83 (_ bv0 32))))
 (let (($x316 (=> $x268 $x84)))
 (let (($x255 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x263 (= $x268 $x255)))
 (let (($x375 (and (and (and $x263 $x316) $x62) $x147)))
 (let (($x374 (= $x375 true)))
 (let ((?x9 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x26 (= ?x9 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x137 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x8 (bvuge ?x137 (_ bv1 32))))
 (let (($x352 (=> $x8 $x26)))
 (let (($x185 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x345 (= $x8 $x185)))
 (let (($x252 (= ?x137 (_ bv0 32))))
 (let (($x58 (=> $x252 $x84)))
 (let (($x142 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x298 (= $x252 $x142)))
 (let (($x275 (and (and (and $x298 $x58) $x345) $x352)))
 (let (($x348 (= $x275 true)))
 (let (($x95 (= ?x196 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x323 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x158 (ite $x323 (_ bv1 32) (_ bv0 32))))
 (let (($x197 (bvuge ?x158 (_ bv1 32))))
 (let (($x86 (=> $x197 $x95)))
 (let (($x43 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x161 (= $x197 $x43)))
 (let (($x139 (= ?x158 (_ bv0 32))))
 (let (($x366 (=> $x139 $x84)))
 (let (($x307 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x103 (= $x139 $x307)))
 (let (($x418 (and (and (and $x103 $x366) $x161) $x86)))
 (let (($x75 (= $x418 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x198 (= ?x169 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x256 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x10 (bvuge ?x256 (_ bv1 32))))
 (let (($x221 (=> $x10 $x198)))
 (let (($x89 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x202 (= $x10 $x89)))
 (let (($x233 (= ?x256 (_ bv0 32))))
 (let (($x282 (=> $x233 $x84)))
 (let (($x126 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x223 (= $x233 $x126)))
 (let (($x236 (and (and (and $x223 $x282) $x202) $x221)))
 (let (($x109 (= $x236 true)))
 (let (($x308 (forall ((input.ind-%var2791X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var2791X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x271))))
 (let ((?x97 (input.spec-%var-m-0.1.1 input.ind-%var2791X)))
 (let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2791X)))
 (=> $x310 (= ?x97 ?x344))))))))
 ))
 (let (($x82 (forall ((input.ind-%var2790X (_ BitVec 32)) )(let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2790X)))
 (= $x310 (and (bvule (_ bv0 32) input.ind-%var2790X) (bvult input.ind-%var2790X (_ bv100 32))))))
 ))
 (let (($x49 (and $x82 $x308)))
 (let (($x188 (= $x49 true)))
 (let (($x88 (forall ((input.ind-%var2785X (_ BitVec 32)) )(let ((?x114 (bvadd (bvmul input.ind-%var2785X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv1 32))) (select input.dst.llvm-mem ?x114))))
 (let ((?x344 (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x114 (_ bv2 32))) ?x271))))
 (let ((?x97 (input.spec-%var-m-0.1.1 input.ind-%var2785X)))
 (let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2785X)))
 (=> $x310 (= ?x97 ?x344))))))))
 ))
 (let (($x362 (forall ((input.ind-%var2784X (_ BitVec 32)) )(let (($x310 (input.spec-%var-m-0.0.1 input.ind-%var2784X)))
 (= $x310 (and (bvule (_ bv0 32) input.ind-%var2784X) (bvult input.ind-%var2784X (_ bv100 32))))))
 ))
 (let (($x28 (and $x362 $x88)))
 (let (($x401 (= $x28 true)))
 (let ((?x386 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x125 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x222 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x133 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x165 (concat ?x133 (concat ?x222 (concat ?x125 ?x386)))))
 (let (($x199 (= ?x165 input.dst.llvm-%m)))
 (let (($x258 (= $x199 true)))
 (let (($x111 (= $x258 true)))
 (let (($x208 (= (bvand ?x207 (_ bv4294967292 32)) ?x207)))
 (let (($x324 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x339 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x54 (and true $x339)))
 (let (($x21 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x292 (and $x21 $x54)))
 (let (($x363 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x207 (bvsub ?x207 (_ bv8 32))) (bvult ?x207 (bvsub ?x207 (_ bv8 32))))))
 (let (($x247 (and (and (and true $x363) $x292) $x324)))
 (let (($x251 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x64 (and true $x251)))
 (let (($x409 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x319 (and $x409 $x64)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x99 (and (and (and true $x409) $x243) $x319)))
 (let (($x15 (and (and $x99 $x247) $x208)))
 (let (($x14 (= input.dst.llvm-%m ?x165)))
 (let (($x200 (and $x14 $x15)))
 (let ((?x304 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x46 (= (_ bv0 32) ?x304)))
 (let ((?x342 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x159 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x342)))
 (let (($x303 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x332 (and $x303 $x159)))
 (let (($x122 (and $x332 $x46)))
 (let (($x216 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x210 (and $x216 $x122)))
 (let (($x140 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x211 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x138 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x211 $x140)))))))
 (let (($x262 (and (and (and $x138 true) $x210) $x200)))
 (let (($x130 (= $x262 true)))
 (let (($x353 (= $x130 true)))
 (let (($x231 (= $x353 true)))
 (let (($x228 (= $x15 true)))
 (let (($x384 (= $x228 true)))
 (let (($x189 (= $x384 true)))
 (let (($x174 (= $x99 true)))
 (let (($x273 (= $x174 true)))
 (let (($x149 (= $x273 true)))
 (let (($x74 (and $x247 $x208)))
 (let (($x333 (= $x74 true)))
 (let (($x313 (= $x333 true)))
 (let (($x118 (= $x313 true)))
 (let (($x341 (and $x138 $x210)))
 (let (($x364 (= $x341 true)))
 (let (($x205 (= $x364 true)))
 (let (($x354 (= $x205 true)))
 (let (($x267 (and $x354 $x118)))
 (let (($x110 (and $x267 $x149)))
 (let (($x289 (and $x110 $x189)))
 (let (($x300 (and $x289 $x231)))
 (let (($x150 (and $x300 $x111)))
 (let (($x365 (and $x150 $x401)))
 (let (($x241 (and $x365 $x188)))
 (let (($x317 (and $x241 $x109)))
 (let (($x302 (and $x317 $x75)))
 (let (($x35 (and $x302 $x348)))
 (let (($x337 (and $x35 $x374)))
 (let (($x274 (and $x252 $x268)))
 (let (($x5 (and $x197 $x274)))
 (let (($x50 (and $x233 $x5)))
 (let (($x372 (and $x50 $x337)))
 (let (($x79 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x96 (and $x79 $x372)))
 (let (($x51 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x378 (and $x51 $x96)))
 (let (($x154 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x349 (and $x154 $x378)))
 (let (($x260 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x387 (and $x260 $x349)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x371 (and $x281 $x387)))
 (let (($x338 (and $x84 $x371)))
 (let (($x315 (= ?x169 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x105 (and $x315 $x338)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x287 (and $x246 $x105)))
 (let (($x17 (and $x84 $x287)))
 (let (($x182 (= ?x196 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x156 (and $x182 $x17)))
 (let (($x116 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x253 (and $x116 $x156)))
 (let (($x209 (and $x84 $x253)))
 (let (($x18 (= ?x9 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x373 (and $x18 $x209)))
 (let (($x225 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x13 (and $x225 $x373)))
 (let (($x41 (and $x84 $x13)))
 (let (($x183 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x181 (and $x183 $x41)))
 (let (($x148 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x220 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x148)))))))
 (let (($x254 (bvugt ?x207 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x207 (bvsub (bvadd ?x207 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x285 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x143 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x285)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x56 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x68)))
 (let (($x227 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x56 $x157)))))))
 (let (($x264 (and $x227 $x143)))
 (let (($x311 (and $x264 $x23)))
 (let (($x108 (and $x311 $x220)))
 (let (($x53 (and $x108 $x181)))
 (let (($x389 (=> $x53 $x67)))
 (not $x389)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 59
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x420 (bvmul (_ bv4294967295 32) ?x196)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x38 (bvadd ?x37 ?x420)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x421 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x254 (bvadd ?x80 (_ bv3 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem ?x254) (concat ?x115 ?x421))))
 (let ((?x397 (bvmul (_ bv4294967295 32) ?x217)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x399 (concat ?x218 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x148 (bvadd ?x235 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x148) (concat ?x395 ?x399))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x350 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x285 (bvadd ?x106 (_ bv3 32))))
 (let ((?x356 (concat (select input.dst.llvm-mem ?x285) (concat ?x383 ?x381))))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x400)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x367)))
 (let ((?x331 (bvadd (bvadd (bvadd ?x27 ?x356) ?x326) ?x397)))
 (let (($x242 (= ?x331 ?x38)))
 (let (($x280 (= $x242 true)))
 (let (($x257 (= $x280 true)))
 (let (($x346 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x277 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x39 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x39 (_ bv1 32))))
 (let (($x153 (=> $x321 $x346)))
 (let (($x195 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x379 (= $x321 $x195)))
 (let (($x9 (= false false)))
 (let (($x347 (= ?x39 (_ bv0 32))))
 (let (($x240 (=> $x347 $x9)))
 (let (($x392 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x347 $x392)))
 (let (($x297 (and (and (and $x335 $x240) $x379) $x153)))
 (let (($x357 (= $x297 true)))
 (let (($x343 (= ?x196 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x5 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x50 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x50 (_ bv1 32))))
 (let (($x104 (=> $x301 $x343)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x215 (= $x301 $x173)))
 (let (($x336 (= ?x50 (_ bv0 32))))
 (let (($x76 (=> $x336 $x9)))
 (let (($x327 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x134 (= $x336 $x327)))
 (let (($x63 (and (and (and $x134 $x76) $x215) $x104)))
 (let (($x42 (= $x63 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x13 (= ?x169 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x268 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x268 (_ bv1 32))))
 (let (($x41 (=> $x156 $x13)))
 (let (($x253 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x209 (= $x156 $x253)))
 (let (($x274 (= ?x268 (_ bv0 32))))
 (let (($x17 (=> $x274 $x9)))
 (let (($x105 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x287 (= $x274 $x105)))
 (let (($x382 (and (and (and $x287 $x17) $x209) $x41)))
 (let (($x90 (= $x382 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x337 (= ?x77 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x252 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x252 (_ bv1 32))))
 (let (($x372 (=> $x406 $x337)))
 (let (($x147 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x375 (= $x406 $x147)))
 (let (($x121 (= ?x252 (_ bv0 32))))
 (let (($x129 (=> $x121 $x9)))
 (let (($x62 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x340 (= $x121 $x62)))
 (let (($x349 (and (and (and $x340 $x129) $x375) $x372)))
 (let (($x387 (= $x349 true)))
 (let (($x263 (forall ((input.ind-%var2829X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2829X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x198))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2829X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2829X)))
 (=> $x244 (= ?x325 ?x213))))))))
 ))
 (let (($x302 (forall ((input.ind-%var2828X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2828X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2828X) (bvult input.ind-%var2828X (_ bv100 32))))))
 ))
 (let (($x316 (and $x302 $x263)))
 (let (($x206 (= $x316 true)))
 (let (($x366 (forall ((input.ind-%var2823X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2823X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x198))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2823X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2823X)))
 (=> $x244 (= ?x325 ?x213))))))))
 ))
 (let (($x344 (forall ((input.ind-%var2822X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2822X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2822X) (bvult input.ind-%var2822X (_ bv100 32))))))
 ))
 (let (($x318 (and $x344 $x366)))
 (let (($x43 (= $x318 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x231 (concat ?x262 (concat ?x165 ?x239)))))
 (let (($x402 (= ?x300 input.dst.llvm-%m)))
 (let (($x414 (= $x402 true)))
 (let (($x362 (= $x414 true)))
 (let (($x385 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x313 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x361 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x208 (and true $x361)))
 (let (($x292 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x74 (and $x292 $x208)))
 (let (($x412 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv8 32))) (bvult ?x80 (bvsub ?x80 (_ bv8 32))))))
 (let (($x25 (and (and (and true $x412) $x74) $x313)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x110 (and true $x149)))
 (let (($x250 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x250 $x110)))
 (let (($x64 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv12 32))) (bvult ?x106 (bvsub ?x106 (_ bv12 32))))))
 (let (($x384 (and (and (and true $x250) $x64) $x93)))
 (let (($x33 (and (and $x384 $x25) $x385)))
 (let (($x199 (= input.dst.llvm-%m ?x300)))
 (let (($x258 (and $x199 $x33)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x117 (= (_ bv0 32) ?x299)))
 (let ((?x364 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x364)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x354 (and $x341 $x205)))
 (let (($x278 (and $x354 $x117)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x85 $x278)))
 (let (($x342 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x303 $x342)))))))
 (let (($x132 (and (and (and $x210 true) $x164) $x258)))
 (let (($x310 (= $x132 true)))
 (let (($x396 (= $x310 true)))
 (let (($x368 (= $x396 true)))
 (let (($x133 (= $x33 true)))
 (let (($x176 (= $x133 true)))
 (let (($x222 (= $x176 true)))
 (let (($x189 (= $x384 true)))
 (let (($x289 (= $x189 true)))
 (let (($x403 (= $x289 true)))
 (let (($x163 (and $x25 $x385)))
 (let (($x355 (= $x163 true)))
 (let (($x283 (= $x355 true)))
 (let (($x12 (= $x283 true)))
 (let (($x363 (and $x210 $x164)))
 (let (($x415 (= $x363 true)))
 (let (($x328 (= $x415 true)))
 (let (($x410 (= $x328 true)))
 (let (($x243 (and $x410 $x12)))
 (let (($x30 (and $x243 $x403)))
 (let (($x160 (and $x30 $x222)))
 (let (($x394 (and $x160 $x368)))
 (let (($x97 (and $x394 $x362)))
 (let (($x161 (and $x97 $x43)))
 (let (($x65 (and $x161 $x206)))
 (let (($x371 (and $x65 $x387)))
 (let (($x22 (and $x371 $x90)))
 (let (($x47 (and $x22 $x42)))
 (let (($x279 (and $x47 $x357)))
 (let (($x211 (and $x301 $x321)))
 (let (($x140 (and $x274 $x211)))
 (let (($x186 (and $x121 $x140)))
 (let (($x351 (and $x186 $x279)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x66 (and $x158 $x351)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x377 (and $x233 $x66)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x423 (and $x320 $x377)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x71 (and $x305 $x423)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x175 (and $x127 $x71)))
 (let (($x284 (and $x9 $x175)))
 (let (($x291 (= ?x77 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x388 (and $x291 $x284)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x237 (and $x281 $x388)))
 (let (($x393 (and $x9 $x237)))
 (let (($x315 (= ?x169 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x67 (and $x315 $x393)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x389 (and $x246 $x67)))
 (let (($x214 (and $x9 $x389)))
 (let (($x182 (= ?x196 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x136 (and $x182 $x214)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x224 (and $x204 $x136)))
 (let (($x135 (and $x9 $x224)))
 (let (($x6 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x201 (and $x6 $x135)))
 (let (($x119 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x91 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x119)))))))
 (let (($x72 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x7 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x207 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x7)))))))
 (let (($x31 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x70 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x270 $x31)))))))
 (let (($x219 (and $x70 $x207)))
 (let (($x245 (and $x219 $x203)))
 (let (($x265 (and $x245 $x91)))
 (let (($x312 (and $x265 $x201)))
 (let (($x172 (=> $x312 $x257)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x196 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x420 (bvmul (_ bv4294967295 32) ?x196)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x38 (bvadd ?x37 ?x420)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x421 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x80 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x254 (bvadd ?x80 (_ bv3 32))))
 (let ((?x217 (concat (select input.dst.llvm-mem ?x254) (concat ?x115 ?x421))))
 (let ((?x397 (bvmul (_ bv4294967295 32) ?x217)))
 (let ((?x218 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x399 (concat ?x218 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x395 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x148 (bvadd ?x235 (_ bv3 32))))
 (let ((?x326 (concat (select input.dst.llvm-mem ?x148) (concat ?x395 ?x399))))
 (let ((?x350 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x381 (concat ?x350 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x383 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x106 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x285 (bvadd ?x106 (_ bv3 32))))
 (let ((?x356 (concat (select input.dst.llvm-mem ?x285) (concat ?x383 ?x381))))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x367 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x400)))
 (let ((?x27 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x367)))
 (let ((?x331 (bvadd (bvadd (bvadd ?x27 ?x356) ?x326) ?x397)))
 (let (($x242 (= ?x331 ?x38)))
 (let (($x280 (= $x242 true)))
 (let (($x257 (= $x280 true)))
 (let (($x346 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x277 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x39 (ite $x277 (_ bv1 32) (_ bv0 32))))
 (let (($x321 (bvuge ?x39 (_ bv1 32))))
 (let (($x153 (=> $x321 $x346)))
 (let (($x195 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x379 (= $x321 $x195)))
 (let (($x9 (= false false)))
 (let (($x347 (= ?x39 (_ bv0 32))))
 (let (($x240 (=> $x347 $x9)))
 (let (($x392 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x347 $x392)))
 (let (($x297 (and (and (and $x335 $x240) $x379) $x153)))
 (let (($x357 (= $x297 true)))
 (let (($x343 (= ?x196 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x5 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x50 (ite $x5 (_ bv1 32) (_ bv0 32))))
 (let (($x301 (bvuge ?x50 (_ bv1 32))))
 (let (($x104 (=> $x301 $x343)))
 (let (($x173 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x215 (= $x301 $x173)))
 (let (($x336 (= ?x50 (_ bv0 32))))
 (let (($x76 (=> $x336 $x9)))
 (let (($x327 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x134 (= $x336 $x327)))
 (let (($x63 (and (and (and $x134 $x76) $x215) $x104)))
 (let (($x42 (= $x63 true)))
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x13 (= ?x169 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x83 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x268 (ite $x83 (_ bv1 32) (_ bv0 32))))
 (let (($x156 (bvuge ?x268 (_ bv1 32))))
 (let (($x41 (=> $x156 $x13)))
 (let (($x253 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x209 (= $x156 $x253)))
 (let (($x274 (= ?x268 (_ bv0 32))))
 (let (($x17 (=> $x274 $x9)))
 (let (($x105 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x287 (= $x274 $x105)))
 (let (($x382 (and (and (and $x287 $x17) $x209) $x41)))
 (let (($x90 (= $x382 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x337 (= ?x77 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x252 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x252 (_ bv1 32))))
 (let (($x372 (=> $x406 $x337)))
 (let (($x147 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x375 (= $x406 $x147)))
 (let (($x121 (= ?x252 (_ bv0 32))))
 (let (($x129 (=> $x121 $x9)))
 (let (($x62 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x340 (= $x121 $x62)))
 (let (($x349 (and (and (and $x340 $x129) $x375) $x372)))
 (let (($x387 (= $x349 true)))
 (let (($x263 (forall ((input.ind-%var2829X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2829X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x198))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2829X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2829X)))
 (=> $x244 (= ?x325 ?x213))))))))
 ))
 (let (($x302 (forall ((input.ind-%var2828X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2828X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2828X) (bvult input.ind-%var2828X (_ bv100 32))))))
 ))
 (let (($x316 (and $x302 $x263)))
 (let (($x206 (= $x316 true)))
 (let (($x366 (forall ((input.ind-%var2823X (_ BitVec 32)) )(let ((?x89 (bvadd (bvmul input.ind-%var2823X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x198 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv1 32))) (select input.dst.llvm-mem ?x89))))
 (let ((?x213 (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x89 (_ bv2 32))) ?x198))))
 (let ((?x325 (input.spec-%var-m-0.1.1 input.ind-%var2823X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2823X)))
 (=> $x244 (= ?x325 ?x213))))))))
 ))
 (let (($x344 (forall ((input.ind-%var2822X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2822X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2822X) (bvult input.ind-%var2822X (_ bv100 32))))))
 ))
 (let (($x318 (and $x344 $x366)))
 (let (($x43 (= $x318 true)))
 (let ((?x239 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x165 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x262 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x231 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x300 (concat ?x231 (concat ?x262 (concat ?x165 ?x239)))))
 (let (($x402 (= ?x300 input.dst.llvm-%m)))
 (let (($x414 (= $x402 true)))
 (let (($x362 (= $x414 true)))
 (let (($x385 (= (bvand ?x80 (_ bv4294967292 32)) ?x80)))
 (let (($x313 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x361 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x208 (and true $x361)))
 (let (($x292 (= (bvand ?x106 (_ bv4294967292 32)) ?x106)))
 (let (($x74 (and $x292 $x208)))
 (let (($x412 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x80 (bvsub ?x80 (_ bv8 32))) (bvult ?x80 (bvsub ?x80 (_ bv8 32))))))
 (let (($x25 (and (and (and true $x412) $x74) $x313)))
 (let (($x149 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x110 (and true $x149)))
 (let (($x250 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x93 (and $x250 $x110)))
 (let (($x64 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x106 (bvsub ?x106 (_ bv12 32))) (bvult ?x106 (bvsub ?x106 (_ bv12 32))))))
 (let (($x384 (and (and (and true $x250) $x64) $x93)))
 (let (($x33 (and (and $x384 $x25) $x385)))
 (let (($x199 (= input.dst.llvm-%m ?x300)))
 (let (($x258 (and $x199 $x33)))
 (let ((?x299 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x117 (= (_ bv0 32) ?x299)))
 (let ((?x364 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x205 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x364)))
 (let (($x341 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x354 (and $x341 $x205)))
 (let (($x278 (and $x354 $x117)))
 (let (($x85 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x164 (and $x85 $x278)))
 (let (($x342 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x303 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x210 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x303 $x342)))))))
 (let (($x132 (and (and (and $x210 true) $x164) $x258)))
 (let (($x310 (= $x132 true)))
 (let (($x396 (= $x310 true)))
 (let (($x368 (= $x396 true)))
 (let (($x133 (= $x33 true)))
 (let (($x176 (= $x133 true)))
 (let (($x222 (= $x176 true)))
 (let (($x189 (= $x384 true)))
 (let (($x289 (= $x189 true)))
 (let (($x403 (= $x289 true)))
 (let (($x163 (and $x25 $x385)))
 (let (($x355 (= $x163 true)))
 (let (($x283 (= $x355 true)))
 (let (($x12 (= $x283 true)))
 (let (($x363 (and $x210 $x164)))
 (let (($x415 (= $x363 true)))
 (let (($x328 (= $x415 true)))
 (let (($x410 (= $x328 true)))
 (let (($x243 (and $x410 $x12)))
 (let (($x30 (and $x243 $x403)))
 (let (($x160 (and $x30 $x222)))
 (let (($x394 (and $x160 $x368)))
 (let (($x97 (and $x394 $x362)))
 (let (($x161 (and $x97 $x43)))
 (let (($x65 (and $x161 $x206)))
 (let (($x371 (and $x65 $x387)))
 (let (($x22 (and $x371 $x90)))
 (let (($x47 (and $x22 $x42)))
 (let (($x279 (and $x47 $x357)))
 (let (($x211 (and $x301 $x321)))
 (let (($x140 (and $x274 $x211)))
 (let (($x186 (and $x121 $x140)))
 (let (($x351 (and $x186 $x279)))
 (let (($x158 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x66 (and $x158 $x351)))
 (let (($x233 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x377 (and $x233 $x66)))
 (let (($x320 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x423 (and $x320 $x377)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x71 (and $x305 $x423)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x175 (and $x127 $x71)))
 (let (($x284 (and $x9 $x175)))
 (let (($x291 (= ?x77 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x388 (and $x291 $x284)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x237 (and $x281 $x388)))
 (let (($x393 (and $x9 $x237)))
 (let (($x315 (= ?x169 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x67 (and $x315 $x393)))
 (let (($x246 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x389 (and $x246 $x67)))
 (let (($x214 (and $x9 $x389)))
 (let (($x182 (= ?x196 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x136 (and $x182 $x214)))
 (let (($x204 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x224 (and $x204 $x136)))
 (let (($x135 (and $x9 $x224)))
 (let (($x6 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x201 (and $x6 $x135)))
 (let (($x119 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x91 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x119)))))))
 (let (($x72 (bvugt ?x80 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x80 (bvsub (bvadd ?x80 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x7 (bvugt ?x106 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x207 (=> (bvule ?x106 (bvsub (bvadd ?x106 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x7)))))))
 (let (($x31 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x270 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x70 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x270 $x31)))))))
 (let (($x219 (and $x70 $x207)))
 (let (($x245 (and $x219 $x203)))
 (let (($x265 (and $x245 $x91)))
 (let (($x312 (and $x265 $x201)))
 (let (($x172 (=> $x312 $x257)))
 (not $x172)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 60
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x75 (bvmul (_ bv4294967295 32) ?x169)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x185 (concat ?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x72 (bvadd ?x29 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x72) (concat ?x8 ?x185))))
 (let ((?x107 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x95 (concat ?x408 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x119 (bvadd ?x128 (_ bv3 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem ?x119) (concat ?x58 ?x95))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x241 (concat ?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x7 (bvadd ?x232 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x7) (concat ?x308 ?x241))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x424)))
 (let ((?x282 (bvadd (bvadd (bvadd ?x401 ?x177) ?x192) ?x107)))
 (let (($x360 (= ?x282 ?x75)))
 (let (($x48 (= $x360 true)))
 (let (($x295 (= $x48 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x261 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x69 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x122 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x122 (_ bv1 32))))
 (let (($x326 (=> $x94 $x261)))
 (let (($x218 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x306 (= $x94 $x218)))
 (let (($x196 (= false false)))
 (let (($x216 (= ?x122 (_ bv0 32))))
 (let (($x395 (=> $x216 $x196)))
 (let (($x290 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x380 (= $x216 $x290)))
 (let (($x36 (and (and (and $x380 $x395) $x306) $x326)))
 (let (($x115 (= $x36 true)))
 (let (($x383 (= ?x169 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x140 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x186 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x186 (_ bv1 32))))
 (let (($x81 (=> $x138 $x383)))
 (let (($x27 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x92 (= $x138 $x27)))
 (let (($x359 (= ?x186 (_ bv0 32))))
 (let (($x367 (=> $x359 $x196)))
 (let (($x141 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x400 (= $x359 $x141)))
 (let (($x381 (and (and (and $x400 $x367) $x92) $x81)))
 (let (($x259 (= $x381 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x224 (= ?x77 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x321 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x321 (_ bv1 32))))
 (let (($x135 (=> $x67 $x224)))
 (let (($x389 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x214 (= $x67 $x389)))
 (let (($x211 (= ?x321 (_ bv0 32))))
 (let (($x393 (=> $x211 $x196)))
 (let (($x388 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x211 $x388)))
 (let (($x269 (and (and (and $x237 $x393) $x214) $x135)))
 (let (($x369 (= $x269 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x279 (= ?x51 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x301 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x301 (_ bv1 32))))
 (let (($x351 (=> $x346 $x279)))
 (let (($x153 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x297 (= $x346 $x153)))
 (let (($x277 (= ?x301 (_ bv0 32))))
 (let (($x334 (=> $x277 $x196)))
 (let (($x379 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x422 (= $x277 $x379)))
 (let (($x423 (and (and (and $x422 $x334) $x297) $x351)))
 (let (($x71 (= $x423 true)))
 (let (($x392 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var2867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x337))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var2867X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2867X)))
 (=> $x5 (= ?x87 ?x105))))))))
 ))
 (let (($x22 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2866X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var2866X) (bvult input.ind-%var2866X (_ bv100 32))))))
 ))
 (let (($x335 (and $x22 $x392)))
 (let (($x240 (= $x335 true)))
 (let (($x181 (forall ((input.ind-%var2861X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var2861X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x337))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var2861X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2861X)))
 (=> $x5 (= ?x87 ?x105))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2860X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2860X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var2860X) (bvult input.ind-%var2860X (_ bv100 32))))))
 ))
 (let (($x156 (and $x213 $x181)))
 (let (($x253 (= $x156 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x394 (concat ?x368 (concat ?x132 (concat ?x300 ?x14)))))
 (let (($x271 (= ?x394 input.dst.llvm-%m)))
 (let (($x162 (= $x271 true)))
 (let (($x344 (= $x162 true)))
 (let (($x15 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x283 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x409 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x385 (and true $x409)))
 (let (($x74 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x163 (and $x74 $x385)))
 (let (($x247 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv8 32))) (bvult ?x29 (bvsub ?x29 (_ bv8 32))))))
 (let (($x370 (and (and (and true $x247) $x163) $x283)))
 (let (($x403 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x30 (and true $x403)))
 (let (($x99 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x391 (and $x99 $x30)))
 (let (($x110 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x176 (and (and (and true $x99) $x110) $x391)))
 (let (($x353 (and (and $x176 $x370) $x15)))
 (let (($x402 (= input.dst.llvm-%m ?x394)))
 (let (($x414 (and $x402 $x353)))
 (let ((?x191 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x191)))
 (let ((?x415 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x410 (and $x363 $x328)))
 (let (($x167 (and $x410 $x21)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x46 $x167)))
 (let (($x364 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x341 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x341 $x364)))))))
 (let (($x183 (and (and (and $x164 true) $x329) $x414)))
 (let (($x244 (= $x183 true)))
 (let (($x376 (= $x244 true)))
 (let (($x390 (= $x376 true)))
 (let (($x231 (= $x353 true)))
 (let (($x200 (= $x231 true)))
 (let (($x262 (= $x200 true)))
 (let (($x222 (= $x176 true)))
 (let (($x160 (= $x222 true)))
 (let (($x111 (= $x160 true)))
 (let (($x102 (and $x370 $x15)))
 (let (($x407 (= $x102 true)))
 (let (($x101 (= $x407 true)))
 (let (($x251 (= $x101 true)))
 (let (($x412 (and $x164 $x329)))
 (let (($x118 (= $x412 true)))
 (let (($x339 (= $x118 true)))
 (let (($x54 (= $x339 true)))
 (let (($x64 (and $x54 $x251)))
 (let (($x150 (and $x64 $x111)))
 (let (($x212 (and $x150 $x262)))
 (let (($x419 (and $x212 $x390)))
 (let (($x325 (and $x419 $x344)))
 (let (($x209 (and $x325 $x253)))
 (let (($x124 (and $x209 $x240)))
 (let (($x175 (and $x124 $x71)))
 (let (($x170 (and $x175 $x369)))
 (let (($x356 (and $x170 $x259)))
 (let (($x131 (and $x356 $x115)))
 (let (($x303 (and $x138 $x216)))
 (let (($x342 (and $x211 $x303)))
 (let (($x159 (and $x277 $x342)))
 (let (($x32 (and $x159 $x131)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x405 (and $x268 $x32)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x421 (and $x121 $x405)))
 (let (($x197 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x296 (and $x197 $x421)))
 (let (($x323 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x217 (and $x323 $x296)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x397 (and $x256 $x217)))
 (let (($x331 (and $x196 $x397)))
 (let (($x79 (= ?x51 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x420 (and $x79 $x331)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x38 (and $x127 $x420)))
 (let (($x242 (and $x196 $x38)))
 (let (($x291 (= ?x77 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x280 (and $x291 $x242)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x257 (and $x281 $x280)))
 (let (($x172 (and $x196 $x257)))
 (let (($x315 (= ?x169 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x330 (and $x315 $x172)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x146 (and $x230 $x330)))
 (let (($x60 (and $x196 $x146)))
 (let (($x116 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x293 (and $x116 $x60)))
 (let (($x266 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x225 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x266)))))))
 (let (($x187 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x178 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x178)))))))
 (let (($x34 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x73 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x34)))))))
 (let (($x288 (and $x73 $x80)))
 (let (($x286 (and $x288 $x193)))
 (let (($x180 (and $x286 $x225)))
 (let (($x386 (and $x180 $x293)))
 (let (($x142 (=> $x386 $x295)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x169 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x75 (bvmul (_ bv4294967295 32) ?x169)))
 (let ((?x26 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x185 (concat ?x26 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x8 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x29 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x72 (bvadd ?x29 (_ bv3 32))))
 (let ((?x35 (concat (select input.dst.llvm-mem ?x72) (concat ?x8 ?x185))))
 (let ((?x107 (bvmul (_ bv4294967295 32) ?x35)))
 (let ((?x408 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x95 (concat ?x408 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x58 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x119 (bvadd ?x128 (_ bv3 32))))
 (let ((?x192 (concat (select input.dst.llvm-mem ?x119) (concat ?x58 ?x95))))
 (let ((?x188 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x241 (concat ?x188 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x7 (bvadd ?x232 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x7) (concat ?x308 ?x241))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x401 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x424)))
 (let ((?x282 (bvadd (bvadd (bvadd ?x401 ?x177) ?x192) ?x107)))
 (let (($x360 (= ?x282 ?x75)))
 (let (($x48 (= $x360 true)))
 (let (($x295 (= $x48 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x261 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x69 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x122 (ite $x69 (_ bv1 32) (_ bv0 32))))
 (let (($x94 (bvuge ?x122 (_ bv1 32))))
 (let (($x326 (=> $x94 $x261)))
 (let (($x218 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x306 (= $x94 $x218)))
 (let (($x196 (= false false)))
 (let (($x216 (= ?x122 (_ bv0 32))))
 (let (($x395 (=> $x216 $x196)))
 (let (($x290 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x380 (= $x216 $x290)))
 (let (($x36 (and (and (and $x380 $x395) $x306) $x326)))
 (let (($x115 (= $x36 true)))
 (let (($x383 (= ?x169 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x140 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x186 (ite $x140 (_ bv1 32) (_ bv0 32))))
 (let (($x138 (bvuge ?x186 (_ bv1 32))))
 (let (($x81 (=> $x138 $x383)))
 (let (($x27 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x92 (= $x138 $x27)))
 (let (($x359 (= ?x186 (_ bv0 32))))
 (let (($x367 (=> $x359 $x196)))
 (let (($x141 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x400 (= $x359 $x141)))
 (let (($x381 (and (and (and $x400 $x367) $x92) $x81)))
 (let (($x259 (= $x381 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x224 (= ?x77 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x39 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x321 (ite $x39 (_ bv1 32) (_ bv0 32))))
 (let (($x67 (bvuge ?x321 (_ bv1 32))))
 (let (($x135 (=> $x67 $x224)))
 (let (($x389 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x214 (= $x67 $x389)))
 (let (($x211 (= ?x321 (_ bv0 32))))
 (let (($x393 (=> $x211 $x196)))
 (let (($x388 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x237 (= $x211 $x388)))
 (let (($x269 (and (and (and $x237 $x393) $x214) $x135)))
 (let (($x369 (= $x269 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x279 (= ?x51 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x301 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x346 (bvuge ?x301 (_ bv1 32))))
 (let (($x351 (=> $x346 $x279)))
 (let (($x153 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x297 (= $x346 $x153)))
 (let (($x277 (= ?x301 (_ bv0 32))))
 (let (($x334 (=> $x277 $x196)))
 (let (($x379 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x422 (= $x277 $x379)))
 (let (($x423 (and (and (and $x422 $x334) $x297) $x351)))
 (let (($x71 (= $x423 true)))
 (let (($x392 (forall ((input.ind-%var2867X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var2867X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x337))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var2867X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2867X)))
 (=> $x5 (= ?x87 ?x105))))))))
 ))
 (let (($x22 (forall ((input.ind-%var2866X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2866X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var2866X) (bvult input.ind-%var2866X (_ bv100 32))))))
 ))
 (let (($x335 (and $x22 $x392)))
 (let (($x240 (= $x335 true)))
 (let (($x181 (forall ((input.ind-%var2861X (_ BitVec 32)) )(let ((?x147 (bvadd (bvmul input.ind-%var2861X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x337 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv1 32))) (select input.dst.llvm-mem ?x147))))
 (let ((?x105 (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x147 (_ bv2 32))) ?x337))))
 (let ((?x87 (input.spec-%var-m-0.1.1 input.ind-%var2861X)))
 (let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2861X)))
 (=> $x5 (= ?x87 ?x105))))))))
 ))
 (let (($x213 (forall ((input.ind-%var2860X (_ BitVec 32)) )(let (($x5 (input.spec-%var-m-0.0.1 input.ind-%var2860X)))
 (= $x5 (and (bvule (_ bv0 32) input.ind-%var2860X) (bvult input.ind-%var2860X (_ bv100 32))))))
 ))
 (let (($x156 (and $x213 $x181)))
 (let (($x253 (= $x156 true)))
 (let ((?x14 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x300 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x132 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x368 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x394 (concat ?x368 (concat ?x132 (concat ?x300 ?x14)))))
 (let (($x271 (= ?x394 input.dst.llvm-%m)))
 (let (($x162 (= $x271 true)))
 (let (($x344 (= $x162 true)))
 (let (($x15 (= (bvand ?x29 (_ bv4294967292 32)) ?x29)))
 (let (($x283 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x409 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x385 (and true $x409)))
 (let (($x74 (= (bvand ?x232 (_ bv4294967292 32)) ?x232)))
 (let (($x163 (and $x74 $x385)))
 (let (($x247 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x29 (bvsub ?x29 (_ bv8 32))) (bvult ?x29 (bvsub ?x29 (_ bv8 32))))))
 (let (($x370 (and (and (and true $x247) $x163) $x283)))
 (let (($x403 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x30 (and true $x403)))
 (let (($x99 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x391 (and $x99 $x30)))
 (let (($x110 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x232 (bvsub ?x232 (_ bv12 32))) (bvult ?x232 (bvsub ?x232 (_ bv12 32))))))
 (let (($x176 (and (and (and true $x99) $x110) $x391)))
 (let (($x353 (and (and $x176 $x370) $x15)))
 (let (($x402 (= input.dst.llvm-%m ?x394)))
 (let (($x414 (and $x402 $x353)))
 (let ((?x191 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x21 (= (_ bv0 32) ?x191)))
 (let ((?x415 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x328 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x415)))
 (let (($x363 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x410 (and $x363 $x328)))
 (let (($x167 (and $x410 $x21)))
 (let (($x46 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x46 $x167)))
 (let (($x364 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x341 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x164 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x341 $x364)))))))
 (let (($x183 (and (and (and $x164 true) $x329) $x414)))
 (let (($x244 (= $x183 true)))
 (let (($x376 (= $x244 true)))
 (let (($x390 (= $x376 true)))
 (let (($x231 (= $x353 true)))
 (let (($x200 (= $x231 true)))
 (let (($x262 (= $x200 true)))
 (let (($x222 (= $x176 true)))
 (let (($x160 (= $x222 true)))
 (let (($x111 (= $x160 true)))
 (let (($x102 (and $x370 $x15)))
 (let (($x407 (= $x102 true)))
 (let (($x101 (= $x407 true)))
 (let (($x251 (= $x101 true)))
 (let (($x412 (and $x164 $x329)))
 (let (($x118 (= $x412 true)))
 (let (($x339 (= $x118 true)))
 (let (($x54 (= $x339 true)))
 (let (($x64 (and $x54 $x251)))
 (let (($x150 (and $x64 $x111)))
 (let (($x212 (and $x150 $x262)))
 (let (($x419 (and $x212 $x390)))
 (let (($x325 (and $x419 $x344)))
 (let (($x209 (and $x325 $x253)))
 (let (($x124 (and $x209 $x240)))
 (let (($x175 (and $x124 $x71)))
 (let (($x170 (and $x175 $x369)))
 (let (($x356 (and $x170 $x259)))
 (let (($x131 (and $x356 $x115)))
 (let (($x303 (and $x138 $x216)))
 (let (($x342 (and $x211 $x303)))
 (let (($x159 (and $x277 $x342)))
 (let (($x32 (and $x159 $x131)))
 (let (($x268 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x405 (and $x268 $x32)))
 (let (($x121 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x421 (and $x121 $x405)))
 (let (($x197 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x296 (and $x197 $x421)))
 (let (($x323 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x217 (and $x323 $x296)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x397 (and $x256 $x217)))
 (let (($x331 (and $x196 $x397)))
 (let (($x79 (= ?x51 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x420 (and $x79 $x331)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x38 (and $x127 $x420)))
 (let (($x242 (and $x196 $x38)))
 (let (($x291 (= ?x77 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x280 (and $x291 $x242)))
 (let (($x281 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x257 (and $x281 $x280)))
 (let (($x172 (and $x196 $x257)))
 (let (($x315 (= ?x169 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x330 (and $x315 $x172)))
 (let (($x230 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x146 (and $x230 $x330)))
 (let (($x60 (and $x196 $x146)))
 (let (($x116 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x293 (and $x116 $x60)))
 (let (($x266 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x225 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x266)))))))
 (let (($x187 (bvugt ?x29 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x29 (bvsub (bvadd ?x29 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x178 (bvugt ?x232 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x100 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x80 (=> (bvule ?x232 (bvsub (bvadd ?x232 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x100 $x178)))))))
 (let (($x34 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x73 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x34)))))))
 (let (($x288 (and $x73 $x80)))
 (let (($x286 (and $x288 $x193)))
 (let (($x180 (and $x286 $x225)))
 (let (($x386 (and $x180 $x293)))
 (let (($x142 (=> $x386 $x295)))
 (not $x142))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 61
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x187 (bvadd ?x254 (_ bv3 32))))
 (let ((?x373 (concat (select input.dst.llvm-mem ?x187) (concat ?x398 ?x215))))
 (let ((?x382 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x41 (concat ?x13 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x266 (bvadd ?x235 (_ bv3 32))))
 (let ((?x63 (concat (select input.dst.llvm-mem ?x266) (concat ?x89 ?x41))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x65 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x178 (bvadd ?x31 (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x178) (concat ?x161 ?x302))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x10)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x318)))
 (let ((?x90 (bvadd (bvadd (bvadd ?x62 ?x9) ?x63) ?x382)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x103 (= ?x37 ?x90)))
 (let (($x96 (= $x103 true)))
 (let (($x347 (= $x96 true)))
 (let (($x114 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x123 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x278 (_ bv1 32))))
 (let (($x192 (=> $x85 $x114)))
 (let (($x408 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x84 (= $x85 $x408)))
 (let (($x169 (= false false)))
 (let (($x418 (= ?x278 (_ bv0 32))))
 (let (($x298 (=> $x418 $x169)))
 (let (($x86 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x58 (= $x418 $x86)))
 (let (($x352 (and (and (and $x58 $x298) $x84) $x192)))
 (let (($x345 (= $x352 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x308 (= ?x77 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x159 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x159 (_ bv1 32))))
 (let (($x223 (=> $x424 $x308)))
 (let (($x401 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x49 (= $x424 $x401)))
 (let (($x210 (= ?x159 (_ bv0 32))))
 (let (($x88 (=> $x210 $x169)))
 (let (($x234 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x137 (= $x210 $x234)))
 (let (($x241 (and (and (and $x137 $x88) $x49) $x223)))
 (let (($x365 (= $x241 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x146 (= ?x51 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x216 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x216 (_ bv1 32))))
 (let (($x60 (=> $x280 $x146)))
 (let (($x257 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x172 (= $x280 $x257)))
 (let (($x303 (= ?x216 (_ bv0 32))))
 (let (($x242 (=> $x303 $x169)))
 (let (($x420 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x38 (= $x303 $x420)))
 (let (($x28 (and (and (and $x38 $x242) $x172) $x60)))
 (let (($x152 (= $x28 true)))
 (let ((?x233 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x131 (= ?x233 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x138 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x138 (_ bv1 32))))
 (let (($x32 (=> $x261 $x131)))
 (let (($x326 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x36 (= $x261 $x326)))
 (let (($x69 (= ?x138 (_ bv0 32))))
 (let (($x399 (=> $x69 $x169)))
 (let (($x306 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x276 (= $x69 $x306)))
 (let (($x296 (and (and (and $x276 $x399) $x36) $x32)))
 (let (($x217 (= $x296 true)))
 (let (($x380 (forall ((input.ind-%var2905X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var2905X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x279))))
 (let ((?x57 (input.spec-%var-m-0.1.1 input.ind-%var2905X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2905X)))
 (=> $x140 (= ?x57 ?x388))))))))
 ))
 (let (($x170 (forall ((input.ind-%var2904X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2904X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2904X) (bvult input.ind-%var2904X (_ bv100 32))))))
 ))
 (let (($x395 (and $x170 $x380)))
 (let (($x145 (= $x395 true)))
 (let (($x201 (forall ((input.ind-%var2899X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var2899X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x279))))
 (let ((?x57 (input.spec-%var-m-0.1.1 input.ind-%var2899X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2899X)))
 (=> $x140 (= ?x57 ?x388))))))))
 ))
 (let (($x105 (forall ((input.ind-%var2898X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2898X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2898X) (bvult input.ind-%var2898X (_ bv100 32))))))
 ))
 (let (($x67 (and $x105 $x201)))
 (let (($x389 (= $x67 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x394 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x419 (concat ?x390 (concat ?x183 (concat ?x394 ?x199)))))
 (let (($x198 (= ?x419 input.dst.llvm-%m)))
 (let (($x109 (= $x198 true)))
 (let (($x213 (= $x109 true)))
 (let (($x33 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x101 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x250 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x15 (and true $x250)))
 (let (($x163 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x102 (and $x163 $x15)))
 (let (($x25 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x228 (and (and (and true $x25) $x102) $x101)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x150 (and true $x111)))
 (let (($x384 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x384 $x150)))
 (let (($x30 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x200 (and (and (and true $x384) $x30) $x125)))
 (let (($x396 (and (and $x200 $x228) $x33)))
 (let (($x271 (= input.dst.llvm-%m ?x419)))
 (let (($x162 (and $x271 $x396)))
 (let ((?x294 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x292 (= (_ bv0 32) ?x294)))
 (let ((?x118 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x412 $x339)))
 (let (($x112 (and $x54 $x292)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x117 $x112)))
 (let (($x415 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x415)))))))
 (let (($x6 (and (and (and $x329 true) $x324) $x162)))
 (let (($x5 (= $x6 true)))
 (let (($x202 (= $x5 true)))
 (let (($x139 (= $x202 true)))
 (let (($x368 (= $x396 true)))
 (let (($x258 (= $x368 true)))
 (let (($x132 (= $x258 true)))
 (let (($x262 (= $x200 true)))
 (let (($x212 (= $x262 true)))
 (let (($x362 (= $x212 true)))
 (let (($x174 (and $x228 $x33)))
 (let (($x319 (= $x174 true)))
 (let (($x273 (= $x319 true)))
 (let (($x149 (= $x273 true)))
 (let (($x247 (and $x329 $x324)))
 (let (($x12 (= $x247 true)))
 (let (($x361 (= $x12 true)))
 (let (($x208 (= $x361 true)))
 (let (($x110 (and $x208 $x149)))
 (let (($x97 (and $x110 $x362)))
 (let (($x130 (and $x97 $x132)))
 (let (($x314 (and $x130 $x139)))
 (let (($x87 (and $x314 $x213)))
 (let (($x214 (and $x87 $x389)))
 (let (($x94 (and $x214 $x145)))
 (let (($x397 (and $x94 $x217)))
 (let (($x404 (and $x397 $x152)))
 (let (($x177 (and $x404 $x365)))
 (let (($x8 (and $x177 $x345)))
 (let (($x341 (and $x210 $x85)))
 (let (($x364 (and $x303 $x341)))
 (let (($x205 (and $x69 $x364)))
 (let (($x190 (and $x205 $x8)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x26 (and $x321 $x190)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x348 (and $x277 $x26)))
 (let (($x274 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x185 (and $x274 $x348)))
 (let (($x83 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x238 (and $x83 $x185)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x35 (and $x252 $x238)))
 (let (($x107 (and $x169 $x35)))
 (let (($x158 (= ?x233 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x282 (and $x158 $x107)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x75 (and $x256 $x282)))
 (let (($x360 (and $x169 $x75)))
 (let (($x79 (= ?x51 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x48 (and $x79 $x360)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x295 (and $x127 $x48)))
 (let (($x142 (and $x169 $x295)))
 (let (($x291 (= ?x77 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x255 (and $x291 $x142)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x155 (and $x113 $x255)))
 (let (($x332 (and $x169 $x155)))
 (let (($x246 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x239 (and $x246 $x332)))
 (let (($x108 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x108)))))))
 (let (($x311 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x264 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x29 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x264)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x285 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x55)))))))
 (let (($x272 (and $x285 $x29)))
 (let (($x45 (and $x272 $x148)))
 (let (($x11 (and $x45 $x204)))
 (let (($x50 (and $x11 $x239)))
 (let (($x184 (=> $x50 $x347)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x173 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x215 (concat ?x173 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x254 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x187 (bvadd ?x254 (_ bv3 32))))
 (let ((?x373 (concat (select input.dst.llvm-mem ?x187) (concat ?x398 ?x215))))
 (let ((?x382 (bvmul (_ bv4294967295 32) ?x373)))
 (let ((?x13 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x41 (concat ?x13 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x89 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x266 (bvadd ?x235 (_ bv3 32))))
 (let ((?x63 (concat (select input.dst.llvm-mem ?x266) (concat ?x89 ?x41))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x302 (concat ?x65 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x161 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x178 (bvadd ?x31 (_ bv3 32))))
 (let ((?x9 (concat (select input.dst.llvm-mem ?x178) (concat ?x161 ?x302))))
 (let ((?x10 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x318 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x10)))
 (let ((?x62 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x318)))
 (let ((?x90 (bvadd (bvadd (bvadd ?x62 ?x9) ?x63) ?x382)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x103 (= ?x37 ?x90)))
 (let (($x96 (= $x103 true)))
 (let (($x347 (= $x96 true)))
 (let (($x114 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x123 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x278 (ite $x123 (_ bv1 32) (_ bv0 32))))
 (let (($x85 (bvuge ?x278 (_ bv1 32))))
 (let (($x192 (=> $x85 $x114)))
 (let (($x408 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x84 (= $x85 $x408)))
 (let (($x169 (= false false)))
 (let (($x418 (= ?x278 (_ bv0 32))))
 (let (($x298 (=> $x418 $x169)))
 (let (($x86 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x58 (= $x418 $x86)))
 (let (($x352 (and (and (and $x58 $x298) $x84) $x192)))
 (let (($x345 (= $x352 true)))
 (let ((?x77 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x308 (= ?x77 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x159 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x424 (bvuge ?x159 (_ bv1 32))))
 (let (($x223 (=> $x424 $x308)))
 (let (($x401 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x49 (= $x424 $x401)))
 (let (($x210 (= ?x159 (_ bv0 32))))
 (let (($x88 (=> $x210 $x169)))
 (let (($x234 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x137 (= $x210 $x234)))
 (let (($x241 (and (and (and $x137 $x88) $x49) $x223)))
 (let (($x365 (= $x241 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x146 (= ?x51 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x122 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x216 (ite $x122 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x216 (_ bv1 32))))
 (let (($x60 (=> $x280 $x146)))
 (let (($x257 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x172 (= $x280 $x257)))
 (let (($x303 (= ?x216 (_ bv0 32))))
 (let (($x242 (=> $x303 $x169)))
 (let (($x420 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x38 (= $x303 $x420)))
 (let (($x28 (and (and (and $x38 $x242) $x172) $x60)))
 (let (($x152 (= $x28 true)))
 (let ((?x233 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x131 (= ?x233 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x211 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x138 (ite $x211 (_ bv1 32) (_ bv0 32))))
 (let (($x261 (bvuge ?x138 (_ bv1 32))))
 (let (($x32 (=> $x261 $x131)))
 (let (($x326 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x36 (= $x261 $x326)))
 (let (($x69 (= ?x138 (_ bv0 32))))
 (let (($x399 (=> $x69 $x169)))
 (let (($x306 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x276 (= $x69 $x306)))
 (let (($x296 (and (and (and $x276 $x399) $x36) $x32)))
 (let (($x217 (= $x296 true)))
 (let (($x380 (forall ((input.ind-%var2905X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var2905X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x279))))
 (let ((?x57 (input.spec-%var-m-0.1.1 input.ind-%var2905X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2905X)))
 (=> $x140 (= ?x57 ?x388))))))))
 ))
 (let (($x170 (forall ((input.ind-%var2904X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2904X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2904X) (bvult input.ind-%var2904X (_ bv100 32))))))
 ))
 (let (($x395 (and $x170 $x380)))
 (let (($x145 (= $x395 true)))
 (let (($x201 (forall ((input.ind-%var2899X (_ BitVec 32)) )(let ((?x153 (bvadd (bvmul input.ind-%var2899X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x279 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv1 32))) (select input.dst.llvm-mem ?x153))))
 (let ((?x388 (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x153 (_ bv2 32))) ?x279))))
 (let ((?x57 (input.spec-%var-m-0.1.1 input.ind-%var2899X)))
 (let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2899X)))
 (=> $x140 (= ?x57 ?x388))))))))
 ))
 (let (($x105 (forall ((input.ind-%var2898X (_ BitVec 32)) )(let (($x140 (input.spec-%var-m-0.0.1 input.ind-%var2898X)))
 (= $x140 (and (bvule (_ bv0 32) input.ind-%var2898X) (bvult input.ind-%var2898X (_ bv100 32))))))
 ))
 (let (($x67 (and $x105 $x201)))
 (let (($x389 (= $x67 true)))
 (let ((?x199 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x394 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x183 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x419 (concat ?x390 (concat ?x183 (concat ?x394 ?x199)))))
 (let (($x198 (= ?x419 input.dst.llvm-%m)))
 (let (($x109 (= $x198 true)))
 (let (($x213 (= $x109 true)))
 (let (($x33 (= (bvand ?x254 (_ bv4294967292 32)) ?x254)))
 (let (($x101 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x250 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x15 (and true $x250)))
 (let (($x163 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x102 (and $x163 $x15)))
 (let (($x25 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x254 (bvsub ?x254 (_ bv8 32))) (bvult ?x254 (bvsub ?x254 (_ bv8 32))))))
 (let (($x228 (and (and (and true $x25) $x102) $x101)))
 (let (($x111 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x150 (and true $x111)))
 (let (($x384 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x125 (and $x384 $x150)))
 (let (($x30 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x200 (and (and (and true $x384) $x30) $x125)))
 (let (($x396 (and (and $x200 $x228) $x33)))
 (let (($x271 (= input.dst.llvm-%m ?x419)))
 (let (($x162 (and $x271 $x396)))
 (let ((?x294 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x292 (= (_ bv0 32) ?x294)))
 (let ((?x118 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x118)))
 (let (($x412 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (and $x412 $x339)))
 (let (($x112 (and $x54 $x292)))
 (let (($x117 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x324 (and $x117 $x112)))
 (let (($x415 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x415)))))))
 (let (($x6 (and (and (and $x329 true) $x324) $x162)))
 (let (($x5 (= $x6 true)))
 (let (($x202 (= $x5 true)))
 (let (($x139 (= $x202 true)))
 (let (($x368 (= $x396 true)))
 (let (($x258 (= $x368 true)))
 (let (($x132 (= $x258 true)))
 (let (($x262 (= $x200 true)))
 (let (($x212 (= $x262 true)))
 (let (($x362 (= $x212 true)))
 (let (($x174 (and $x228 $x33)))
 (let (($x319 (= $x174 true)))
 (let (($x273 (= $x319 true)))
 (let (($x149 (= $x273 true)))
 (let (($x247 (and $x329 $x324)))
 (let (($x12 (= $x247 true)))
 (let (($x361 (= $x12 true)))
 (let (($x208 (= $x361 true)))
 (let (($x110 (and $x208 $x149)))
 (let (($x97 (and $x110 $x362)))
 (let (($x130 (and $x97 $x132)))
 (let (($x314 (and $x130 $x139)))
 (let (($x87 (and $x314 $x213)))
 (let (($x214 (and $x87 $x389)))
 (let (($x94 (and $x214 $x145)))
 (let (($x397 (and $x94 $x217)))
 (let (($x404 (and $x397 $x152)))
 (let (($x177 (and $x404 $x365)))
 (let (($x8 (and $x177 $x345)))
 (let (($x341 (and $x210 $x85)))
 (let (($x364 (and $x303 $x341)))
 (let (($x205 (and $x69 $x364)))
 (let (($x190 (and $x205 $x8)))
 (let (($x321 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x26 (and $x321 $x190)))
 (let (($x277 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x348 (and $x277 $x26)))
 (let (($x274 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x185 (and $x274 $x348)))
 (let (($x83 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x238 (and $x83 $x185)))
 (let (($x252 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x35 (and $x252 $x238)))
 (let (($x107 (and $x169 $x35)))
 (let (($x158 (= ?x233 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x282 (and $x158 $x107)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x75 (and $x256 $x282)))
 (let (($x360 (and $x169 $x75)))
 (let (($x79 (= ?x51 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x48 (and $x79 $x360)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x295 (and $x127 $x48)))
 (let (($x142 (and $x169 $x295)))
 (let (($x291 (= ?x77 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x255 (and $x291 $x142)))
 (let (($x113 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x155 (and $x113 $x255)))
 (let (($x332 (and $x169 $x155)))
 (let (($x246 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x239 (and $x246 $x332)))
 (let (($x108 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x108)))))))
 (let (($x311 (bvugt ?x254 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x254 (bvsub (bvadd ?x254 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x264 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x29 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x264)))))))
 (let (($x55 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x227 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x285 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x227 $x55)))))))
 (let (($x272 (and $x285 $x29)))
 (let (($x45 (and $x272 $x148)))
 (let (($x11 (and $x45 $x204)))
 (let (($x50 (and $x11 $x239)))
 (let (($x184 (=> $x50 $x347)))
 (not $x184)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 62
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x350 (concat ?x92 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x72 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x311 (bvadd ?x72 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x311) (concat ?x81 ?x350))))
 (let ((?x378 (bvmul (_ bv4294967295 32) ?x269)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x400 (concat ?x135 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x108 (bvadd ?x128 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x108) (concat ?x349 ?x400))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x392 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x264 (bvadd ?x68 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x264) (concat ?x335 ?x392))))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x371)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x253)))
 (let ((?x17 (bvadd (bvadd (bvadd ?x422 ?x141) ?x259) ?x378)))
 (let (($x66 (= (_ bv0 32) ?x17)))
 (let (($x417 (= $x66 true)))
 (let (($x309 (= $x417 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x63 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x46 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x46 (_ bv1 32))))
 (let (($x129 (=> $x13 $x63)))
 (let (($x327 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x41 (= $x13 $x327)))
 (let (($x260 (= false false)))
 (let (($x363 (= ?x46 (_ bv0 32))))
 (let (($x53 (=> $x363 $x260)))
 (let (($x134 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x89 (= $x363 $x134)))
 (let (($x322 (and (and (and $x89 $x53) $x41) $x129)))
 (let (($x398 (= $x322 true)))
 (let ((?x305 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x206 (= ?x305 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x164 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x164 (_ bv1 32))))
 (let (($x65 (=> $x62 $x206)))
 (let (($x144 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x263 (= $x62 $x144)))
 (let (($x304 (= ?x164 (_ bv0 32))))
 (let (($x318 (=> $x304 $x260)))
 (let (($x18 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x10 (= $x304 $x18)))
 (let (($x316 (and (and (and $x10 $x318) $x263) $x65)))
 (let (($x9 (= $x316 true)))
 (let ((?x323 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x332 (= ?x323 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x341 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x341 (_ bv1 32))))
 (let (($x239 (=> $x295 $x332)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x255 (= $x295 $x142)))
 (let (($x364 (= ?x341 (_ bv0 32))))
 (let (($x48 (=> $x364 $x260)))
 (let (($x75 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x360 (= $x364 $x75)))
 (let (($x317 (and (and (and $x360 $x48) $x255) $x239)))
 (let (($x221 (= $x317 true)))
 (let ((?x83 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x190 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x123 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x123 (_ bv1 32))))
 (let (($x26 (=> $x192 $x190)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x345 (= $x192 $x352)))
 (let (($x278 (= ?x123 (_ bv0 32))))
 (let (($x114 (=> $x278 $x260)))
 (let (($x275 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x95 (= $x278 $x275)))
 (let (($x238 (and (and (and $x95 $x114) $x345) $x26)))
 (let (($x35 (= $x238 true)))
 (let (($x58 (forall ((input.ind-%var2943X (_ BitVec 32)) )(let ((?x36 (bvadd (bvmul input.ind-%var2943X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x32))))
 (let ((?x315 (input.spec-%var-m-0.1.1 input.ind-%var2943X)))
 (let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2943X)))
 (=> $x159 (= ?x315 ?x38))))))))
 ))
 (let (($x20 (forall ((input.ind-%var2942X (_ BitVec 32)) )(let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2942X)))
 (= $x159 (and (bvule (_ bv0 32) input.ind-%var2942X) (bvult input.ind-%var2942X (_ bv100 32))))))
 ))
 (let (($x298 (and $x20 $x58)))
 (let (($x61 (= $x298 true)))
 (let (($x280 (forall ((input.ind-%var2937X (_ BitVec 32)) )(let ((?x36 (bvadd (bvmul input.ind-%var2937X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x32))))
 (let ((?x315 (input.spec-%var-m-0.1.1 input.ind-%var2937X)))
 (let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2937X)))
 (=> $x159 (= ?x315 ?x38))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2936X (_ BitVec 32)) )(let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2936X)))
 (= $x159 (and (bvule (_ bv0 32) input.ind-%var2936X) (bvult input.ind-%var2936X (_ bv100 32))))))
 ))
 (let (($x257 (and $x237 $x280)))
 (let (($x172 (= $x257 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x314 (concat ?x5 (concat ?x271 ?x244)))))
 (let (($x387 (= ?x198 input.dst.llvm-%m)))
 (let (($x105 (= $x387 true)))
 (let (($x57 (= $x105 true)))
 (let (($x189 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x149 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x33 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x174 (and true $x33)))
 (let (($x64 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x319 (and $x64 $x174)))
 (let (($x250 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv8 32))) (bvult ?x72 (bvsub ?x72 (_ bv8 32))))))
 (let (($x384 (and (and (and true $x250) $x319) $x149)))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x165 (and true $x97)))
 (let (($x391 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x396 (and $x391 $x165)))
 (let (($x125 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x132 (and (and (and true $x391) $x125) $x396)))
 (let (($x390 (and (and $x132 $x384) $x189)))
 (let (($x109 (= input.dst.llvm-%m ?x198)))
 (let (($x213 (and $x109 $x390)))
 (let ((?x74 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x267 (= (_ bv0 32) ?x74)))
 (let ((?x361 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x361)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x12 $x208)))
 (let (($x313 (and $x333 $x267)))
 (let (($x329 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x329 $x313)))
 (let (($x339 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x339)))))))
 (let (($x140 (and (and (and $x247 true) $x25) $x213)))
 (let (($x375 (= $x140 true)))
 (let (($x338 (= $x375 true)))
 (let (($x374 (= $x338 true)))
 (let (($x414 (= $x390 true)))
 (let (($x183 (= $x414 true)))
 (let (($x310 (= $x183 true)))
 (let (($x130 (= $x132 true)))
 (let (($x344 (= $x130 true)))
 (let (($x325 (= $x344 true)))
 (let (($x93 (and $x384 $x189)))
 (let (($x289 (= $x93 true)))
 (let (($x403 (= $x289 true)))
 (let (($x30 (= $x403 true)))
 (let (($x251 (and $x247 $x25)))
 (let (($x409 (= $x251 true)))
 (let (($x385 (= $x409 true)))
 (let (($x163 (= $x385 true)))
 (let (($x231 (and $x163 $x30)))
 (let (($x300 (and $x231 $x325)))
 (let (($x394 (and $x300 $x310)))
 (let (($x337 (and $x394 $x374)))
 (let (($x346 (and $x337 $x57)))
 (let (($x386 (and $x346 $x172)))
 (let (($x408 (and $x386 $x61)))
 (let (($x107 (and $x408 $x35)))
 (let (($x307 (and $x107 $x221)))
 (let (($x40 (and $x307 $x9)))
 (let (($x343 (and $x40 $x398)))
 (let (($x415 (and $x304 $x363)))
 (let (($x328 (and $x364 $x415)))
 (let (($x410 (and $x278 $x328)))
 (let (($x173 (and $x410 $x343)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x303 $x173)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x215 (and $x122 $x358)))
 (let (($x138 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x104 (and $x138 $x215)))
 (let (($x321 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x373 (and $x321 $x104)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x382 (and $x277 $x373)))
 (let (($x90 (and $x260 $x382)))
 (let (($x274 (= ?x83 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x103 (and $x274 $x90)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x96 (and $x121 $x103)))
 (let (($x347 (and $x260 $x96)))
 (let (($x197 (= ?x323 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x184 (and $x197 $x347)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x413 (and $x233 $x184)))
 (let (($x270 (and $x260 $x413)))
 (let (($x320 (= ?x305 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x166 (and $x320 $x270)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x354 (and $x127 $x166)))
 (let (($x14 (and $x260 $x354)))
 (let (($x77 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x186 (and $x77 $x14)))
 (let (($x265 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x230 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x265)))))))
 (let (($x245 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x219 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x254 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x219)))))))
 (let (($x227 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x70 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x227)))))))
 (let (($x194 (and $x70 $x254)))
 (let (($x19 (and $x194 $x119)))
 (let (($x151 (and $x19 $x230)))
 (let (($x182 (and $x151 $x186)))
 (let (($x290 (=> $x182 $x309)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x92 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x350 (concat ?x92 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x81 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x72 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x311 (bvadd ?x72 (_ bv3 32))))
 (let ((?x269 (concat (select input.dst.llvm-mem ?x311) (concat ?x81 ?x350))))
 (let ((?x378 (bvmul (_ bv4294967295 32) ?x269)))
 (let ((?x135 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x400 (concat ?x135 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x108 (bvadd ?x128 (_ bv3 32))))
 (let ((?x259 (concat (select input.dst.llvm-mem ?x108) (concat ?x349 ?x400))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x392 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x264 (bvadd ?x68 (_ bv3 32))))
 (let ((?x141 (concat (select input.dst.llvm-mem ?x264) (concat ?x335 ?x392))))
 (let ((?x371 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x371)))
 (let ((?x422 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x253)))
 (let ((?x17 (bvadd (bvadd (bvadd ?x422 ?x141) ?x259) ?x378)))
 (let (($x66 (= (_ bv0 32) ?x17)))
 (let (($x417 (= $x66 true)))
 (let (($x309 (= $x417 true)))
 (let ((?x249 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x63 (= ?x249 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x167 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x46 (ite $x167 (_ bv1 32) (_ bv0 32))))
 (let (($x13 (bvuge ?x46 (_ bv1 32))))
 (let (($x129 (=> $x13 $x63)))
 (let (($x327 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x41 (= $x13 $x327)))
 (let (($x260 (= false false)))
 (let (($x363 (= ?x46 (_ bv0 32))))
 (let (($x53 (=> $x363 $x260)))
 (let (($x134 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x89 (= $x363 $x134)))
 (let (($x322 (and (and (and $x89 $x53) $x41) $x129)))
 (let (($x398 (= $x322 true)))
 (let ((?x305 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x206 (= ?x305 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x164 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x62 (bvuge ?x164 (_ bv1 32))))
 (let (($x65 (=> $x62 $x206)))
 (let (($x144 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x263 (= $x62 $x144)))
 (let (($x304 (= ?x164 (_ bv0 32))))
 (let (($x318 (=> $x304 $x260)))
 (let (($x18 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x10 (= $x304 $x18)))
 (let (($x316 (and (and (and $x10 $x318) $x263) $x65)))
 (let (($x9 (= $x316 true)))
 (let ((?x323 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x332 (= ?x323 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x85 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x341 (ite $x85 (_ bv1 32) (_ bv0 32))))
 (let (($x295 (bvuge ?x341 (_ bv1 32))))
 (let (($x239 (=> $x295 $x332)))
 (let (($x142 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x255 (= $x295 $x142)))
 (let (($x364 (= ?x341 (_ bv0 32))))
 (let (($x48 (=> $x364 $x260)))
 (let (($x75 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x360 (= $x364 $x75)))
 (let (($x317 (and (and (and $x360 $x48) $x255) $x239)))
 (let (($x221 (= $x317 true)))
 (let ((?x83 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x190 (= ?x83 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x342 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x123 (ite $x342 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x123 (_ bv1 32))))
 (let (($x26 (=> $x192 $x190)))
 (let (($x352 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x345 (= $x192 $x352)))
 (let (($x278 (= ?x123 (_ bv0 32))))
 (let (($x114 (=> $x278 $x260)))
 (let (($x275 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x95 (= $x278 $x275)))
 (let (($x238 (and (and (and $x95 $x114) $x345) $x26)))
 (let (($x35 (= $x238 true)))
 (let (($x58 (forall ((input.ind-%var2943X (_ BitVec 32)) )(let ((?x36 (bvadd (bvmul input.ind-%var2943X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x32))))
 (let ((?x315 (input.spec-%var-m-0.1.1 input.ind-%var2943X)))
 (let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2943X)))
 (=> $x159 (= ?x315 ?x38))))))))
 ))
 (let (($x20 (forall ((input.ind-%var2942X (_ BitVec 32)) )(let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2942X)))
 (= $x159 (and (bvule (_ bv0 32) input.ind-%var2942X) (bvult input.ind-%var2942X (_ bv100 32))))))
 ))
 (let (($x298 (and $x20 $x58)))
 (let (($x61 (= $x298 true)))
 (let (($x280 (forall ((input.ind-%var2937X (_ BitVec 32)) )(let ((?x36 (bvadd (bvmul input.ind-%var2937X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x32 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv1 32))) (select input.dst.llvm-mem ?x36))))
 (let ((?x38 (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x36 (_ bv2 32))) ?x32))))
 (let ((?x315 (input.spec-%var-m-0.1.1 input.ind-%var2937X)))
 (let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2937X)))
 (=> $x159 (= ?x315 ?x38))))))))
 ))
 (let (($x237 (forall ((input.ind-%var2936X (_ BitVec 32)) )(let (($x159 (input.spec-%var-m-0.0.1 input.ind-%var2936X)))
 (= $x159 (and (bvule (_ bv0 32) input.ind-%var2936X) (bvult input.ind-%var2936X (_ bv100 32))))))
 ))
 (let (($x257 (and $x237 $x280)))
 (let (($x172 (= $x257 true)))
 (let ((?x244 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x271 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x5 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x314 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x198 (concat ?x314 (concat ?x5 (concat ?x271 ?x244)))))
 (let (($x387 (= ?x198 input.dst.llvm-%m)))
 (let (($x105 (= $x387 true)))
 (let (($x57 (= $x105 true)))
 (let (($x189 (= (bvand ?x72 (_ bv4294967292 32)) ?x72)))
 (let (($x149 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x33 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x174 (and true $x33)))
 (let (($x64 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x319 (and $x64 $x174)))
 (let (($x250 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x72 (bvsub ?x72 (_ bv8 32))) (bvult ?x72 (bvsub ?x72 (_ bv8 32))))))
 (let (($x384 (and (and (and true $x250) $x319) $x149)))
 (let (($x97 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x165 (and true $x97)))
 (let (($x391 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x396 (and $x391 $x165)))
 (let (($x125 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x132 (and (and (and true $x391) $x125) $x396)))
 (let (($x390 (and (and $x132 $x384) $x189)))
 (let (($x109 (= input.dst.llvm-%m ?x198)))
 (let (($x213 (and $x109 $x390)))
 (let ((?x74 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x267 (= (_ bv0 32) ?x74)))
 (let ((?x361 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x208 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x361)))
 (let (($x12 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x333 (and $x12 $x208)))
 (let (($x313 (and $x333 $x267)))
 (let (($x329 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x25 (and $x329 $x313)))
 (let (($x339 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x247 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x339)))))))
 (let (($x140 (and (and (and $x247 true) $x25) $x213)))
 (let (($x375 (= $x140 true)))
 (let (($x338 (= $x375 true)))
 (let (($x374 (= $x338 true)))
 (let (($x414 (= $x390 true)))
 (let (($x183 (= $x414 true)))
 (let (($x310 (= $x183 true)))
 (let (($x130 (= $x132 true)))
 (let (($x344 (= $x130 true)))
 (let (($x325 (= $x344 true)))
 (let (($x93 (and $x384 $x189)))
 (let (($x289 (= $x93 true)))
 (let (($x403 (= $x289 true)))
 (let (($x30 (= $x403 true)))
 (let (($x251 (and $x247 $x25)))
 (let (($x409 (= $x251 true)))
 (let (($x385 (= $x409 true)))
 (let (($x163 (= $x385 true)))
 (let (($x231 (and $x163 $x30)))
 (let (($x300 (and $x231 $x325)))
 (let (($x394 (and $x300 $x310)))
 (let (($x337 (and $x394 $x374)))
 (let (($x346 (and $x337 $x57)))
 (let (($x386 (and $x346 $x172)))
 (let (($x408 (and $x386 $x61)))
 (let (($x107 (and $x408 $x35)))
 (let (($x307 (and $x107 $x221)))
 (let (($x40 (and $x307 $x9)))
 (let (($x343 (and $x40 $x398)))
 (let (($x415 (and $x304 $x363)))
 (let (($x328 (and $x364 $x415)))
 (let (($x410 (and $x278 $x328)))
 (let (($x173 (and $x410 $x343)))
 (let (($x303 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x303 $x173)))
 (let (($x122 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x215 (and $x122 $x358)))
 (let (($x138 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x104 (and $x138 $x215)))
 (let (($x321 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x373 (and $x321 $x104)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x382 (and $x277 $x373)))
 (let (($x90 (and $x260 $x382)))
 (let (($x274 (= ?x83 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x103 (and $x274 $x90)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x96 (and $x121 $x103)))
 (let (($x347 (and $x260 $x96)))
 (let (($x197 (= ?x323 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x184 (and $x197 $x347)))
 (let (($x233 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x413 (and $x233 $x184)))
 (let (($x270 (and $x260 $x413)))
 (let (($x320 (= ?x305 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x166 (and $x320 $x270)))
 (let (($x127 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x354 (and $x127 $x166)))
 (let (($x14 (and $x260 $x354)))
 (let (($x77 (= ?x249 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x186 (and $x77 $x14)))
 (let (($x265 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x230 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x265)))))))
 (let (($x245 (bvugt ?x72 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x72 (bvsub (bvadd ?x72 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x219 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x254 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x219)))))))
 (let (($x227 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x232 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x16 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x232)))
 (let (($x70 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x16 $x227)))))))
 (let (($x194 (and $x70 $x254)))
 (let (($x19 (and $x194 $x119)))
 (let (($x151 (and $x19 $x230)))
 (let (($x182 (and $x151 $x186)))
 (let (($x290 (=> $x182 $x309)))
 (not $x290)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 63
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x236 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x236 (_ bv1 32))))
 (let (($x63 (= ?x236 (_ bv0 32))))
 (let (($x209 (or $x63 $x173)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x144 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x144 (_ bv1 32))))
 (let (($x124 (and $x316 $x209)))
 (let (($x263 (= ?x144 (_ bv0 32))))
 (let (($x335 (and $x263 $x209)))
 (let (($x22 (or $x335 $x124)))
 (let (($x360 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x48 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x48 (_ bv1 32))))
 (let (($x392 (and $x155 $x22)))
 (let (($x50 (= ?x48 (_ bv0 32))))
 (let (($x240 (and $x50 $x22)))
 (let (($x195 (or $x240 $x392)))
 (let (($x84 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x275 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x275 (_ bv1 32))))
 (let (($x334 (and $x352 $x195)))
 (let (($x95 (= ?x275 (_ bv0 32))))
 (let (($x141 (and $x95 $x195)))
 (let (($x381 (or $x141 $x334)))
 (let (($x147 (or false $x381)))
 (let (($x349 (= $x147 true)))
 (let (($x224 (= $x349 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x373 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x382 (=> $x173 $x373)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x215 (= $x173 $x358)))
 (let (($x305 (= false false)))
 (let (($x343 (=> $x63 $x305)))
 (let (($x322 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x398 (= $x63 $x322)))
 (let (($x96 (and (and (and $x398 $x343) $x215) $x382)))
 (let (($x347 (= $x96 true)))
 (let ((?x323 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x134 (= ?x323 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x89 (=> $x316 $x134)))
 (let (($x9 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x40 (= $x316 $x9)))
 (let (($x42 (and (and (= $x263 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x263 $x305)) $x40)))
 (let (($x13 (and $x42 $x89)))
 (let (($x327 (= $x13 true)))
 (let ((?x83 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x221 (= ?x83 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x307 (=> $x155 $x221)))
 (let (($x332 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x239 (= $x155 $x332)))
 (let (($x18 (and (and (= $x50 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x50 $x305)) $x239)))
 (let (($x10 (and $x18 $x307)))
 (let (($x318 (= $x10 true)))
 (let ((?x39 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x190 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x26 (=> $x352 $x190)))
 (let (($x345 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x185 (= $x352 $x345)))
 (let (($x35 (and (and (= $x95 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x95 $x305)) $x185)))
 (let (($x107 (and $x35 $x26)))
 (let (($x282 (= $x107 true)))
 (let (($x58 (forall ((input.ind-%var2974X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2974X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2974X) (bvult input.ind-%var2974X (_ bv100 32))))))
 ))
 (let (($x131 (forall ((input.ind-%var2975X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2975X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x237))))
 (let ((?x291 (input.spec-%var-m-0.1.1 input.ind-%var2975X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2975X)))
 (=> $x244 (= ?x291 ?x296))))))))
 ))
 (let (($x298 (and $x131 $x58)))
 (let (($x61 (= $x298 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x116 (concat ?x310 (concat ?x390 ?x300)))))
 (let (($x139 (= ?x199 input.dst.llvm-%m)))
 (let (($x314 (= $x139 true)))
 (let (($x6 (= $x314 true)))
 (let (($x370 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x250 (and true $x370)))
 (let (($x267 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (and $x267 $x250)))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x313 (bvsub ?x59 (_ bv12 32))))
 (let (($x385 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 ?x313) (bvult ?x59 ?x313))))
 (let (($x368 (and (and (and true $x267) $x385) $x110)))
 (let (($x165 (= $x368 true)))
 (let (($x396 (= $x165 true)))
 (let (($x132 (= $x396 true)))
 (let ((?x187 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x231 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x189 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x273 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x149 (and true $x273)))
 (let (($x99 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x384 (and $x99 $x149)))
 (let (($x407 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x187 (bvsub ?x187 (_ bv8 32))) (bvult ?x187 (bvsub ?x187 (_ bv8 32))))))
 (let (($x403 (and (and (and true $x407) $x384) $x189)))
 (let (($x262 (and $x403 $x231)))
 (let (($x200 (= $x262 true)))
 (let (($x212 (= $x200 true)))
 (let (($x362 (= $x212 true)))
 (let (($x222 (and (and $x368 $x403) $x231)))
 (let (($x111 (= $x222 true)))
 (let (($x150 (= $x111 true)))
 (let (($x125 (= $x150 true)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x292)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x339)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x118 $x54)))
 (let (($x247 (and $x294 $x112)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x164 $x247)))
 (let (($x415 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x412 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x415)))))))
 (let (($x329 (and $x412 $x21)))
 (let (($x12 (= $x329 true)))
 (let (($x361 (= $x12 true)))
 (let (($x208 (= $x361 true)))
 (let (($x258 (and $x208 $x125)))
 (let (($x97 (and $x258 $x362)))
 (let (($x130 (and $x97 $x132)))
 (let (($x5 (and $x130 $x6)))
 (let (($x408 (and $x5 $x61)))
 (let (($x75 (and $x408 $x282)))
 (let (($x340 (and $x75 $x318)))
 (let (($x41 (and $x340 $x327)))
 (let (($x184 (and $x41 $x347)))
 (let (($x341 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x413 (and $x341 $x184)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x270 (and $x278 $x413)))
 (let (($x342 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x166 (and $x342 $x270)))
 (let (($x216 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x354 (and $x216 $x166)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x14 (and $x69 $x354)))
 (let (($x186 (and $x305 $x14)))
 (let (($x211 (= ?x39 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x182 (and $x211 $x186)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x379 (and $x277 $x182)))
 (let (($x372 (and $x305 $x379)))
 (let (($x274 (= ?x83 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x156 (and $x274 $x372)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x181 (and $x121 $x156)))
 (let (($x406 (and $x305 $x181)))
 (let (($x197 (= ?x323 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x287 (and $x197 $x406)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x256 $x287)))
 (let (($x253 (and $x305 $x371)))
 (let (($x51 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x422 (and $x51 $x253)))
 (let (($x180 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x235 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x180)))))))
 (let (($x286 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x187 (_ bv3 32)))))
 (let (($x266 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x288 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x59 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x288)))))))
 (let (($x56 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x178 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x143 (and $x178 $x72)))
 (let (($x23 (and $x143 $x266)))
 (let (($x220 (and $x23 $x281)))
 (let (($x196 (and $x220 $x422)))
 (let (($x135 (=> $x196 $x224)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let (($x47 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x236 (ite $x47 (_ bv1 32) (_ bv0 32))))
 (let (($x173 (bvuge ?x236 (_ bv1 32))))
 (let (($x63 (= ?x236 (_ bv0 32))))
 (let (($x209 (or $x63 $x173)))
 (let (($x62 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x144 (ite $x62 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x144 (_ bv1 32))))
 (let (($x124 (and $x316 $x209)))
 (let (($x263 (= ?x144 (_ bv0 32))))
 (let (($x335 (and $x263 $x209)))
 (let (($x22 (or $x335 $x124)))
 (let (($x360 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x48 (ite $x360 (_ bv1 32) (_ bv0 32))))
 (let (($x155 (bvuge ?x48 (_ bv1 32))))
 (let (($x392 (and $x155 $x22)))
 (let (($x50 (= ?x48 (_ bv0 32))))
 (let (($x240 (and $x50 $x22)))
 (let (($x195 (or $x240 $x392)))
 (let (($x84 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x275 (ite $x84 (_ bv1 32) (_ bv0 32))))
 (let (($x352 (bvuge ?x275 (_ bv1 32))))
 (let (($x334 (and $x352 $x195)))
 (let (($x95 (= ?x275 (_ bv0 32))))
 (let (($x141 (and $x95 $x195)))
 (let (($x381 (or $x141 $x334)))
 (let (($x147 (or false $x381)))
 (let (($x349 (= $x147 true)))
 (let (($x224 (= $x349 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x373 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x382 (=> $x173 $x373)))
 (let (($x358 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x215 (= $x173 $x358)))
 (let (($x305 (= false false)))
 (let (($x343 (=> $x63 $x305)))
 (let (($x322 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x398 (= $x63 $x322)))
 (let (($x96 (and (and (and $x398 $x343) $x215) $x382)))
 (let (($x347 (= $x96 true)))
 (let ((?x323 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x134 (= ?x323 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x89 (=> $x316 $x134)))
 (let (($x9 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x40 (= $x316 $x9)))
 (let (($x42 (and (and (= $x263 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))) (=> $x263 $x305)) $x40)))
 (let (($x13 (and $x42 $x89)))
 (let (($x327 (= $x13 true)))
 (let ((?x83 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x221 (= ?x83 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x307 (=> $x155 $x221)))
 (let (($x332 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x239 (= $x155 $x332)))
 (let (($x18 (and (and (= $x50 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))) (=> $x50 $x305)) $x239)))
 (let (($x10 (and $x18 $x307)))
 (let (($x318 (= $x10 true)))
 (let ((?x39 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x190 (= ?x39 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x26 (=> $x352 $x190)))
 (let (($x345 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x185 (= $x352 $x345)))
 (let (($x35 (and (and (= $x95 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))) (=> $x95 $x305)) $x185)))
 (let (($x107 (and $x35 $x26)))
 (let (($x282 (= $x107 true)))
 (let (($x58 (forall ((input.ind-%var2974X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2974X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var2974X) (bvult input.ind-%var2974X (_ bv100 32))))))
 ))
 (let (($x131 (forall ((input.ind-%var2975X (_ BitVec 32)) )(let ((?x351 (bvadd (bvmul input.ind-%var2975X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x237 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv1 32))) (select input.dst.llvm-mem ?x351))))
 (let ((?x296 (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x351 (_ bv2 32))) ?x237))))
 (let ((?x291 (input.spec-%var-m-0.1.1 input.ind-%var2975X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var2975X)))
 (=> $x244 (= ?x291 ?x296))))))))
 ))
 (let (($x298 (and $x131 $x58)))
 (let (($x61 (= $x298 true)))
 (let ((?x300 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x390 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x310 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x116 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x199 (concat ?x116 (concat ?x310 (concat ?x390 ?x300)))))
 (let (($x139 (= ?x199 input.dst.llvm-%m)))
 (let (($x314 (= $x139 true)))
 (let (($x6 (= $x314 true)))
 (let (($x370 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x250 (and true $x370)))
 (let (($x267 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x110 (and $x267 $x250)))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x313 (bvsub ?x59 (_ bv12 32))))
 (let (($x385 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 ?x313) (bvult ?x59 ?x313))))
 (let (($x368 (and (and (and true $x267) $x385) $x110)))
 (let (($x165 (= $x368 true)))
 (let (($x396 (= $x165 true)))
 (let (($x132 (= $x396 true)))
 (let ((?x187 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let (($x231 (= (bvand ?x187 (_ bv4294967292 32)) ?x187)))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let (($x189 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x273 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x149 (and true $x273)))
 (let (($x99 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x384 (and $x99 $x149)))
 (let (($x407 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x187 (bvsub ?x187 (_ bv8 32))) (bvult ?x187 (bvsub ?x187 (_ bv8 32))))))
 (let (($x403 (and (and (and true $x407) $x384) $x189)))
 (let (($x262 (and $x403 $x231)))
 (let (($x200 (= $x262 true)))
 (let (($x212 (= $x200 true)))
 (let (($x362 (= $x212 true)))
 (let (($x222 (and (and $x368 $x403) $x231)))
 (let (($x111 (= $x222 true)))
 (let (($x150 (= $x111 true)))
 (let (($x125 (= $x150 true)))
 (let ((?x292 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x112 (= (_ bv0 32) ?x292)))
 (let ((?x339 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x54 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x339)))
 (let (($x118 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x294 (and $x118 $x54)))
 (let (($x247 (and $x294 $x112)))
 (let (($x164 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x21 (and $x164 $x247)))
 (let (($x415 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x363 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x412 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x363 $x415)))))))
 (let (($x329 (and $x412 $x21)))
 (let (($x12 (= $x329 true)))
 (let (($x361 (= $x12 true)))
 (let (($x208 (= $x361 true)))
 (let (($x258 (and $x208 $x125)))
 (let (($x97 (and $x258 $x362)))
 (let (($x130 (and $x97 $x132)))
 (let (($x5 (and $x130 $x6)))
 (let (($x408 (and $x5 $x61)))
 (let (($x75 (and $x408 $x282)))
 (let (($x340 (and $x75 $x318)))
 (let (($x41 (and $x340 $x327)))
 (let (($x184 (and $x41 $x347)))
 (let (($x341 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x413 (and $x341 $x184)))
 (let (($x278 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x270 (and $x278 $x413)))
 (let (($x342 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x166 (and $x342 $x270)))
 (let (($x216 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x354 (and $x216 $x166)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x14 (and $x69 $x354)))
 (let (($x186 (and $x305 $x14)))
 (let (($x211 (= ?x39 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x182 (and $x211 $x186)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x379 (and $x277 $x182)))
 (let (($x372 (and $x305 $x379)))
 (let (($x274 (= ?x83 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x156 (and $x274 $x372)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x181 (and $x121 $x156)))
 (let (($x406 (and $x305 $x181)))
 (let (($x197 (= ?x323 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x287 (and $x197 $x406)))
 (let (($x256 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x371 (and $x256 $x287)))
 (let (($x253 (and $x305 $x371)))
 (let (($x51 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x422 (and $x51 $x253)))
 (let (($x180 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x235 (_ bv3 32)))))
 (let (($x281 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x180)))))))
 (let (($x286 (bvugt ?x187 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x187 (_ bv3 32)))))
 (let (($x266 (=> (bvule ?x187 (bvsub (bvadd ?x187 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x288 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd ?x59 (_ bv3 32)))))
 (let (($x72 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x288)))))))
 (let (($x56 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x55 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd input.dst.llvm-%m (_ bv3 32)))))
 (let (($x178 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x55 $x56)))))))
 (let (($x143 (and $x178 $x72)))
 (let (($x23 (and $x143 $x266)))
 (let (($x220 (and $x23 $x281)))
 (let (($x196 (and $x220 $x422)))
 (let (($x135 (=> $x196 $x224)))
 (not $x135)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 217 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 64
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x268 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x261 (bvmul (_ bv4294967295 32) ?x268)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x137 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x51)))
 (let ((?x86 (bvadd ?x137 ?x261)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x401 (concat ?x126 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x311 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x286 (bvadd ?x311 (_ bv3 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem ?x286) (concat ?x241 ?x401))))
 (let ((?x357 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x188 (concat ?x28 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x180 (bvadd ?x128 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x180) (concat ?x377 ?x188))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x380 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x288 (bvadd ?x120 (_ bv3 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x288) (concat ?x145 ?x395))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x284)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x214)))
 (let ((?x201 (bvadd (bvadd (bvadd ?x169 ?x88) ?x177) ?x357)))
 (let (($x359 (= ?x201 ?x86)))
 (let (($x78 (= $x359 true)))
 (let (($x168 (= $x78 true)))
 (let (($x367 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x112 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x112 (_ bv1 32))))
 (let (($x259 (=> $x247 $x367)))
 (let (($x159 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x234 (= $x247 $x159)))
 (let (($x158 (= false false)))
 (let (($x32 (= ?x112 (_ bv0 32))))
 (let (($x271 (=> $x32 $x158)))
 (let (($x280 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x246 (= $x32 $x280)))
 (let (($x136 (and (and (and $x246 $x271) $x234) $x259)))
 (let (($x416 (= $x136 true)))
 (let (($x337 (= ?x268 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x339 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x54 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x54 (_ bv1 32))))
 (let (($x140 (=> $x294 $x337)))
 (let (($x105 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x57 (= $x294 $x105)))
 (let (($x421 (= ?x54 (_ bv0 32))))
 (let (($x109 (=> $x421 $x158)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x198 (= $x421 $x242)))
 (let (($x338 (and (and (and $x198 $x109) $x57) $x140)))
 (let (($x387 (= $x338 true)))
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x106 (= ?x321 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x164 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x164 (_ bv1 32))))
 (let (($x364 (=> $x118 $x106)))
 (let (($x224 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x135 (= $x118 $x224)))
 (let (($x141 (= ?x164 (_ bv0 32))))
 (let (($x349 (=> $x141 $x158)))
 (let (($x381 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x147 (= $x141 $x381)))
 (let (($x154 (and (and (and $x147 $x349) $x135) $x364)))
 (let (($x419 (= $x154 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x209 (= ?x216 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x328 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x117 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x117 (_ bv1 32))))
 (let (($x335 (=> $x412 $x209)))
 (let (($x253 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x422 (= $x412 $x253)))
 (let (($x156 (= ?x117 (_ bv0 32))))
 (let (($x371 (=> $x156 $x158)))
 (let (($x406 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x156 $x406)))
 (let (($x240 (and (and (and $x287 $x371) $x422) $x335)))
 (let (($x392 (= $x240 true)))
 (let (($x186 (forall ((input.ind-%var3017X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var3017X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x161))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var3017X)))
 (let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3017X)))
 (=> $x410 (= ?x320 ?x40))))))))
 ))
 (let (($x398 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3016X)))
 (= $x410 (and (bvule (_ bv0 32) input.ind-%var3016X) (bvult input.ind-%var3016X (_ bv100 32))))))
 ))
 (let (($x182 (and $x398 $x186)))
 (let (($x379 (= $x182 true)))
 (let (($x134 (forall ((input.ind-%var3011X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var3011X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x161))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var3011X)))
 (let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3011X)))
 (=> $x410 (= ?x320 ?x40))))))))
 ))
 (let (($x75 (forall ((input.ind-%var3010X (_ BitVec 32)) )(let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3010X)))
 (= $x410 (and (bvule (_ bv0 32) input.ind-%var3010X) (bvult input.ind-%var3010X (_ bv100 32))))))
 ))
 (let (($x89 (and $x75 $x134)))
 (let (($x13 (= $x89 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x38 (concat ?x115 (concat ?x36 ?x297)))))
 (let (($x260 (= ?x257 input.dst.llvm-%m)))
 (let (($x114 (= $x260 true)))
 (let (($x348 (= $x114 true)))
 (let (($x262 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x222 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x403 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x160 (and true $x403)))
 (let (($x149 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x30 (and $x149 $x160)))
 (let (($x319 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x311 (bvsub ?x311 (_ bv8 32))) (bvult ?x311 (bvsub ?x311 (_ bv8 32))))))
 (let (($x125 (and (and (and true $x319) $x30) $x222)))
 (let (($x414 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x394 (and true $x414)))
 (let (($x132 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x199 (and $x132 $x394)))
 (let (($x183 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x6 (and (and (and true $x132) $x183) $x199)))
 (let (($x351 (and (and $x6 $x125) $x262)))
 (let (($x386 (= input.dst.llvm-%m ?x257)))
 (let (($x20 (and $x386 $x351)))
 (let ((?x110 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x368 (= (_ bv0 32) ?x110)))
 (let ((?x283 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x355 $x370)))
 (let (($x102 (and $x250 $x368)))
 (let (($x333 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x333 $x102)))
 (let (($x313 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x313)))))))
 (let (($x61 (and (and (and $x163 true) $x15) $x20)))
 (let (($x408 (= $x61 true)))
 (let (($x84 (= $x408 true)))
 (let (($x275 (= $x84 true)))
 (let (($x331 (= $x351 true)))
 (let (($x420 (= $x331 true)))
 (let (($x315 (= $x420 true)))
 (let (($x5 (= $x6 true)))
 (let (($x77 (= $x5 true)))
 (let (($x244 (= $x77 true)))
 (let (($x200 (and $x125 $x262)))
 (let (($x212 (= $x200 true)))
 (let (($x362 (= $x212 true)))
 (let (($x97 (= $x362 true)))
 (let (($x64 (and $x163 $x15)))
 (let (($x101 (= $x64 true)))
 (let (($x407 (= $x101 true)))
 (let (($x93 (= $x407 true)))
 (let (($x165 (and $x93 $x97)))
 (let (($x291 (and $x165 $x244)))
 (let (($x326 (and $x291 $x315)))
 (let (($x95 (and $x326 $x275)))
 (let (($x305 (and $x95 $x348)))
 (let (($x327 (and $x305 $x13)))
 (let (($x372 (and $x327 $x379)))
 (let (($x195 (and $x372 $x392)))
 (let (($x202 (and $x195 $x419)))
 (let (($x346 (and $x202 $x387)))
 (let (($x81 (and $x346 $x416)))
 (let (($x21 (and $x294 $x247)))
 (let (($x329 (and $x118 $x21)))
 (let (($x12 (and $x412 $x329)))
 (let (($x27 (and $x12 $x81)))
 (let (($x415 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x92 (and $x415 $x27)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x383 (and $x46 $x92)))
 (let (($x167 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x350 (and $x167 $x383)))
 (let (($x341 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x356 (and $x341 $x350)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x269 (and $x278 $x356)))
 (let (($x378 (and $x158 $x269)))
 (let (($x342 (= ?x216 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x17 (and $x342 $x378)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x66 (and $x122 $x17)))
 (let (($x417 (and $x158 $x66)))
 (let (($x138 (= ?x321 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x309 (and $x138 $x417)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x290 (and $x39 $x309)))
 (let (($x336 (and $x158 $x290)))
 (let (($x301 (= ?x268 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x171 (and $x301 $x336)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x191 (and $x121 $x171)))
 (let (($x402 (and $x158 $x191)))
 (let (($x323 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x210 (and $x323 $x402)))
 (let (($x11 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x127 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x11)))))))
 (let (($x45 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x272 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x187 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x272)))))))
 (let (($x44 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x264 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x44)))))))
 (let (($x207 (and $x264 $x187)))
 (let (($x203 (and $x207 $x108)))
 (let (($x91 (and $x203 $x127)))
 (let (($x113 (and $x91 $x210)))
 (let (($x179 (=> $x113 $x168)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x268 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x261 (bvmul (_ bv4294967295 32) ?x268)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x137 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x51)))
 (let ((?x86 (bvadd ?x137 ?x261)))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x401 (concat ?x126 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x311 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x286 (bvadd ?x311 (_ bv3 32))))
 (let ((?x152 (concat (select input.dst.llvm-mem ?x286) (concat ?x241 ?x401))))
 (let ((?x357 (bvmul (_ bv4294967295 32) ?x152)))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x188 (concat ?x28 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x180 (bvadd ?x128 (_ bv3 32))))
 (let ((?x177 (concat (select input.dst.llvm-mem ?x180) (concat ?x377 ?x188))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x395 (concat ?x380 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x288 (bvadd ?x120 (_ bv3 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x288) (concat ?x145 ?x395))))
 (let ((?x284 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x214 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x284)))
 (let ((?x169 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x214)))
 (let ((?x201 (bvadd (bvadd (bvadd ?x169 ?x88) ?x177) ?x357)))
 (let (($x359 (= ?x201 ?x86)))
 (let (($x78 (= $x359 true)))
 (let (($x168 (= $x78 true)))
 (let (($x367 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x292 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x112 (ite $x292 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x112 (_ bv1 32))))
 (let (($x259 (=> $x247 $x367)))
 (let (($x159 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x234 (= $x247 $x159)))
 (let (($x158 (= false false)))
 (let (($x32 (= ?x112 (_ bv0 32))))
 (let (($x271 (=> $x32 $x158)))
 (let (($x280 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x246 (= $x32 $x280)))
 (let (($x136 (and (and (and $x246 $x271) $x234) $x259)))
 (let (($x416 (= $x136 true)))
 (let (($x337 (= ?x268 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x339 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x54 (ite $x339 (_ bv1 32) (_ bv0 32))))
 (let (($x294 (bvuge ?x54 (_ bv1 32))))
 (let (($x140 (=> $x294 $x337)))
 (let (($x105 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x57 (= $x294 $x105)))
 (let (($x421 (= ?x54 (_ bv0 32))))
 (let (($x109 (=> $x421 $x158)))
 (let (($x242 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x198 (= $x421 $x242)))
 (let (($x338 (and (and (and $x198 $x109) $x57) $x140)))
 (let (($x387 (= $x338 true)))
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x106 (= ?x321 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x205 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x164 (ite $x205 (_ bv1 32) (_ bv0 32))))
 (let (($x118 (bvuge ?x164 (_ bv1 32))))
 (let (($x364 (=> $x118 $x106)))
 (let (($x224 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x135 (= $x118 $x224)))
 (let (($x141 (= ?x164 (_ bv0 32))))
 (let (($x349 (=> $x141 $x158)))
 (let (($x381 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x147 (= $x141 $x381)))
 (let (($x154 (and (and (and $x147 $x349) $x135) $x364)))
 (let (($x419 (= $x154 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x209 (= ?x216 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x328 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x117 (ite $x328 (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x117 (_ bv1 32))))
 (let (($x335 (=> $x412 $x209)))
 (let (($x253 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x422 (= $x412 $x253)))
 (let (($x156 (= ?x117 (_ bv0 32))))
 (let (($x371 (=> $x156 $x158)))
 (let (($x406 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x287 (= $x156 $x406)))
 (let (($x240 (and (and (and $x287 $x371) $x422) $x335)))
 (let (($x392 (= $x240 true)))
 (let (($x186 (forall ((input.ind-%var3017X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var3017X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x161))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var3017X)))
 (let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3017X)))
 (=> $x410 (= ?x320 ?x40))))))))
 ))
 (let (($x398 (forall ((input.ind-%var3016X (_ BitVec 32)) )(let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3016X)))
 (= $x410 (and (bvule (_ bv0 32) input.ind-%var3016X) (bvult input.ind-%var3016X (_ bv100 32))))))
 ))
 (let (($x182 (and $x398 $x186)))
 (let (($x379 (= $x182 true)))
 (let (($x134 (forall ((input.ind-%var3011X (_ BitVec 32)) )(let ((?x62 (bvadd (bvmul input.ind-%var3011X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv1 32))) (select input.dst.llvm-mem ?x62))))
 (let ((?x40 (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x62 (_ bv2 32))) ?x161))))
 (let ((?x320 (input.spec-%var-m-0.1.1 input.ind-%var3011X)))
 (let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3011X)))
 (=> $x410 (= ?x320 ?x40))))))))
 ))
 (let (($x75 (forall ((input.ind-%var3010X (_ BitVec 32)) )(let (($x410 (input.spec-%var-m-0.0.1 input.ind-%var3010X)))
 (= $x410 (and (bvule (_ bv0 32) input.ind-%var3010X) (bvult input.ind-%var3010X (_ bv100 32))))))
 ))
 (let (($x89 (and $x75 $x134)))
 (let (($x13 (= $x89 true)))
 (let ((?x297 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x36 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x115 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x38 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x257 (concat ?x38 (concat ?x115 (concat ?x36 ?x297)))))
 (let (($x260 (= ?x257 input.dst.llvm-%m)))
 (let (($x114 (= $x260 true)))
 (let (($x348 (= $x114 true)))
 (let (($x262 (= (bvand ?x311 (_ bv4294967292 32)) ?x311)))
 (let (($x222 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x403 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x160 (and true $x403)))
 (let (($x149 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x30 (and $x149 $x160)))
 (let (($x319 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x311 (bvsub ?x311 (_ bv8 32))) (bvult ?x311 (bvsub ?x311 (_ bv8 32))))))
 (let (($x125 (and (and (and true $x319) $x30) $x222)))
 (let (($x414 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x394 (and true $x414)))
 (let (($x132 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x199 (and $x132 $x394)))
 (let (($x183 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x6 (and (and (and true $x132) $x183) $x199)))
 (let (($x351 (and (and $x6 $x125) $x262)))
 (let (($x386 (= input.dst.llvm-%m ?x257)))
 (let (($x20 (and $x386 $x351)))
 (let ((?x110 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x368 (= (_ bv0 32) ?x110)))
 (let ((?x283 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x370 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x283)))
 (let (($x355 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x250 (and $x355 $x370)))
 (let (($x102 (and $x250 $x368)))
 (let (($x333 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x15 (and $x333 $x102)))
 (let (($x313 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x163 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x313)))))))
 (let (($x61 (and (and (and $x163 true) $x15) $x20)))
 (let (($x408 (= $x61 true)))
 (let (($x84 (= $x408 true)))
 (let (($x275 (= $x84 true)))
 (let (($x331 (= $x351 true)))
 (let (($x420 (= $x331 true)))
 (let (($x315 (= $x420 true)))
 (let (($x5 (= $x6 true)))
 (let (($x77 (= $x5 true)))
 (let (($x244 (= $x77 true)))
 (let (($x200 (and $x125 $x262)))
 (let (($x212 (= $x200 true)))
 (let (($x362 (= $x212 true)))
 (let (($x97 (= $x362 true)))
 (let (($x64 (and $x163 $x15)))
 (let (($x101 (= $x64 true)))
 (let (($x407 (= $x101 true)))
 (let (($x93 (= $x407 true)))
 (let (($x165 (and $x93 $x97)))
 (let (($x291 (and $x165 $x244)))
 (let (($x326 (and $x291 $x315)))
 (let (($x95 (and $x326 $x275)))
 (let (($x305 (and $x95 $x348)))
 (let (($x327 (and $x305 $x13)))
 (let (($x372 (and $x327 $x379)))
 (let (($x195 (and $x372 $x392)))
 (let (($x202 (and $x195 $x419)))
 (let (($x346 (and $x202 $x387)))
 (let (($x81 (and $x346 $x416)))
 (let (($x21 (and $x294 $x247)))
 (let (($x329 (and $x118 $x21)))
 (let (($x12 (and $x412 $x329)))
 (let (($x27 (and $x12 $x81)))
 (let (($x415 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x92 (and $x415 $x27)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x383 (and $x46 $x92)))
 (let (($x167 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x350 (and $x167 $x383)))
 (let (($x341 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x356 (and $x341 $x350)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x269 (and $x278 $x356)))
 (let (($x378 (and $x158 $x269)))
 (let (($x342 (= ?x216 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x17 (and $x342 $x378)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x66 (and $x122 $x17)))
 (let (($x417 (and $x158 $x66)))
 (let (($x138 (= ?x321 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x309 (and $x138 $x417)))
 (let (($x39 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x290 (and $x39 $x309)))
 (let (($x336 (and $x158 $x290)))
 (let (($x301 (= ?x268 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x171 (and $x301 $x336)))
 (let (($x121 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x191 (and $x121 $x171)))
 (let (($x402 (and $x158 $x191)))
 (let (($x323 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x210 (and $x323 $x402)))
 (let (($x11 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x127 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x11)))))))
 (let (($x45 (bvugt ?x311 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x311 (bvsub (bvadd ?x311 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x272 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x187 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x272)))))))
 (let (($x44 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x56 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x73 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x56)))
 (let (($x264 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x73 $x44)))))))
 (let (($x207 (and $x264 $x187)))
 (let (($x203 (and $x207 $x108)))
 (let (($x91 (and $x203 $x127)))
 (let (($x113 (and $x91 $x210)))
 (let (($x179 (=> $x113 $x168)))
 (not $x179))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 3
==solver_id: 3
==recvd_data
==DATA_START==
unsat
(error "Cannot get the current model unless immediately preceded by SAT/INVALID or UNKNOWN response.")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 65
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x8 (bvmul (_ bv4294967295 32) ?x321)))
 (let ((?x322 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x8)))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x270 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x45 (bvadd ?x245 (_ bv3 32))))
 (let ((?x382 (concat (select input.dst.llvm-mem ?x45) (concat ?x104 ?x96))))
 (let ((?x184 (bvmul (_ bv4294967295 32) ?x382)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x173 (concat ?x307 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x235 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x11) (concat ?x236 ?x173))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x221 (concat ?x317 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x272 (bvadd ?x31 (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x272) (concat ?x239 ?x221))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x256)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x192)))
 (let ((?x129 (bvadd (bvadd (bvadd ?x185 ?x255) ?x238) ?x184)))
 (let (($x48 (= ?x129 ?x322)))
 (let (($x318 (= $x48 true)))
 (let (($x354 (= $x318 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x424 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x243 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x243 (_ bv1 32))))
 (let (($x177 (=> $x60 $x424)))
 (let (($x28 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x330 (= $x60 $x28)))
 (let (($x268 (= false false)))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let (($x377 (=> $x176 $x268)))
 (let (($x365 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x175 (= $x176 $x365)))
 (let (($x146 (and (and (and $x175 $x377) $x330) $x177)))
 (let (($x82 (= $x146 true)))
 (let (($x145 (= ?x321 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x12 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x12 (_ bv1 32))))
 (let (($x218 (=> $x74 $x145)))
 (let (($x169 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x399 (= $x74 $x169)))
 (let (($x67 (= ?x12 (_ bv0 32))))
 (let (($x214 (=> $x67 $x268)))
 (let (($x393 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x284 (= $x67 $x393)))
 (let (($x395 (and (and (and $x284 $x214) $x399) $x218)))
 (let (($x306 (= $x395 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x191 (= ?x216 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x112 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x247 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x247 (_ bv1 32))))
 (let (($x402 (=> $x21 $x191)))
 (let (($x290 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x21 $x290)))
 (let (($x378 (= ?x247 (_ bv0 32))))
 (let (($x309 (=> $x378 $x268)))
 (let (($x66 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x417 (= $x378 $x66)))
 (let (($x276 (and (and (and $x417 $x309) $x336) $x402)))
 (let (($x423 (= $x276 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x81 (= ?x85 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x118 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x294 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x294 (_ bv1 32))))
 (let (($x27 (=> $x292 $x81)))
 (let (($x259 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x136 (= $x292 $x259)))
 (let (($x159 (= ?x294 (_ bv0 32))))
 (let (($x367 (=> $x159 $x268)))
 (let (($x248 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x400 (= $x159 $x248)))
 (let (($x350 (and (and (and $x400 $x367) $x136) $x27)))
 (let (($x356 (= $x350 true)))
 (let (($x280 (forall ((input.ind-%var3055X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3055X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x209))))
 (let ((?x197 (input.spec-%var-m-0.1.1 input.ind-%var3055X)))
 (let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3055X)))
 (=> $x339 (= ?x197 ?x334))))))))
 ))
 (let (($x202 (forall ((input.ind-%var3054X (_ BitVec 32)) )(let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3054X)))
 (= $x339 (and (bvule (_ bv0 32) input.ind-%var3054X) (bvult input.ind-%var3054X (_ bv100 32))))))
 ))
 (let (($x246 (and $x202 $x280)))
 (let (($x271 (= $x246 true)))
 (let (($x349 (forall ((input.ind-%var3049X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3049X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x209))))
 (let ((?x197 (input.spec-%var-m-0.1.1 input.ind-%var3049X)))
 (let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3049X)))
 (=> $x339 (= ?x197 ?x334))))))))
 ))
 (let (($x40 (forall ((input.ind-%var3048X (_ BitVec 32)) )(let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3048X)))
 (= $x339 (and (bvule (_ bv0 32) input.ind-%var3048X) (bvult input.ind-%var3048X (_ bv100 32))))))
 ))
 (let (($x325 (and $x40 $x349)))
 (let (($x224 (= $x325 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x275 (concat ?x61 (concat ?x257 ?x296)))))
 (let (($x107 (= ?x95 input.dst.llvm-%m)))
 (let (($x282 (= $x107 true)))
 (let (($x75 (= $x282 true)))
 (let (($x139 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x362 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x258 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x262 (and true $x258)))
 (let (($x30 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x200 (and $x30 $x262)))
 (let (($x189 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x396 (and (and (and true $x189) $x200) $x362)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x291 (and true $x244)))
 (let (($x376 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x279 (and $x376 $x291)))
 (let (($x394 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x420 (and (and (and true $x376) $x394) $x279)))
 (let (($x172 (and (and $x420 $x396) $x139)))
 (let (($x260 (= input.dst.llvm-%m ?x95)))
 (let (($x114 (and $x260 $x172)))
 (let ((?x99 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x228 (= (_ bv0 32) ?x99)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x64 $x407)))
 (let (($x174 (and $x93 $x228)))
 (let (($x391 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x391 $x174)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x355 $x283)))))))
 (let (($x79 (and (and (and $x15 true) $x33) $x114)))
 (let (($x410 (= $x79 true)))
 (let (($x26 (= $x410 true)))
 (let (($x345 (= $x26 true)))
 (let (($x38 (= $x172 true)))
 (let (($x217 (= $x38 true)))
 (let (($x115 (= $x217 true)))
 (let (($x315 (= $x420 true)))
 (let (($x326 (= $x315 true)))
 (let (($x58 (= $x326 true)))
 (let (($x344 (and $x396 $x139)))
 (let (($x130 (= $x344 true)))
 (let (($x87 (= $x130 true)))
 (let (($x116 (= $x87 true)))
 (let (($x319 (and $x15 $x33)))
 (let (($x111 (= $x319 true)))
 (let (($x133 (= $x111 true)))
 (let (($x273 (= $x133 true)))
 (let (($x183 (and $x273 $x116)))
 (let (($x298 (and $x183 $x58)))
 (let (($x237 (and $x298 $x115)))
 (let (($x190 (and $x237 $x345)))
 (let (($x320 (and $x190 $x75)))
 (let (($x135 (and $x320 $x224)))
 (let (($x369 (and $x135 $x271)))
 (let (($x269 (and $x369 $x356)))
 (let (($x389 (and $x269 $x423)))
 (let (($x88 (and $x389 $x306)))
 (let (($x241 (and $x88 $x82)))
 (let (($x25 (and $x74 $x176)))
 (let (($x313 (and $x21 $x25)))
 (let (($x251 (and $x292 $x313)))
 (let (($x49 (and $x251 $x241)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x126 (and $x164 $x49)))
 (let (($x412 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x223 (and $x412 $x126)))
 (let (($x328 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x401 (and $x328 $x223)))
 (let (($x363 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x418 (and $x363 $x401)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x152 (and $x324 $x418)))
 (let (($x357 (and $x268 $x152)))
 (let (($x304 (= ?x85 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x201 (and $x304 $x357)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x411 (and $x278 $x201)))
 (let (($x137 (and $x268 $x411)))
 (let (($x342 (= ?x216 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x261 (and $x342 $x137)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x86 (and $x122 $x261)))
 (let (($x359 (and $x268 $x86)))
 (let (($x138 (= ?x321 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x78 (and $x138 $x359)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x168 (and $x277 $x78)))
 (let (($x179 (and $x268 $x168)))
 (let (($x83 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x229 (and $x83 $x179)))
 (let (($x151 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x233 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x151)))))))
 (let (($x19 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x194 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x311 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x194)))))))
 (let (($x285 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x219 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x285)))))))
 (let (($x80 (and $x219 $x311)))
 (let (($x193 (and $x80 $x265)))
 (let (($x225 (and $x193 $x233)))
 (let (($x100 (and $x225 $x229)))
 (let (($x90 (=> $x100 $x354)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x321 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x8 (bvmul (_ bv4294967295 32) ?x321)))
 (let ((?x322 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x8)))
 (let ((?x270 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x96 (concat ?x270 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x104 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x245 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x45 (bvadd ?x245 (_ bv3 32))))
 (let ((?x382 (concat (select input.dst.llvm-mem ?x45) (concat ?x104 ?x96))))
 (let ((?x184 (bvmul (_ bv4294967295 32) ?x382)))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x173 (concat ?x307 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x236 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x11 (bvadd ?x235 (_ bv3 32))))
 (let ((?x238 (concat (select input.dst.llvm-mem ?x11) (concat ?x236 ?x173))))
 (let ((?x317 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x221 (concat ?x317 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x239 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x272 (bvadd ?x31 (_ bv3 32))))
 (let ((?x255 (concat (select input.dst.llvm-mem ?x272) (concat ?x239 ?x221))))
 (let ((?x256 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x192 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x256)))
 (let ((?x185 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x192)))
 (let ((?x129 (bvadd (bvadd (bvadd ?x185 ?x255) ?x238) ?x184)))
 (let (($x48 (= ?x129 ?x322)))
 (let (($x318 (= $x48 true)))
 (let (($x354 (= $x318 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x424 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x267 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x243 (ite $x267 (_ bv1 32) (_ bv0 32))))
 (let (($x60 (bvuge ?x243 (_ bv1 32))))
 (let (($x177 (=> $x60 $x424)))
 (let (($x28 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x330 (= $x60 $x28)))
 (let (($x268 (= false false)))
 (let (($x176 (= ?x243 (_ bv0 32))))
 (let (($x377 (=> $x176 $x268)))
 (let (($x365 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x175 (= $x176 $x365)))
 (let (($x146 (and (and (and $x175 $x377) $x330) $x177)))
 (let (($x82 (= $x146 true)))
 (let (($x145 (= ?x321 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x329 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x12 (ite $x329 (_ bv1 32) (_ bv0 32))))
 (let (($x74 (bvuge ?x12 (_ bv1 32))))
 (let (($x218 (=> $x74 $x145)))
 (let (($x169 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x399 (= $x74 $x169)))
 (let (($x67 (= ?x12 (_ bv0 32))))
 (let (($x214 (=> $x67 $x268)))
 (let (($x393 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x284 (= $x67 $x393)))
 (let (($x395 (and (and (and $x284 $x214) $x399) $x218)))
 (let (($x306 (= $x395 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x191 (= ?x216 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x112 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x247 (ite $x112 (_ bv1 32) (_ bv0 32))))
 (let (($x21 (bvuge ?x247 (_ bv1 32))))
 (let (($x402 (=> $x21 $x191)))
 (let (($x290 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x336 (= $x21 $x290)))
 (let (($x378 (= ?x247 (_ bv0 32))))
 (let (($x309 (=> $x378 $x268)))
 (let (($x66 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x417 (= $x378 $x66)))
 (let (($x276 (and (and (and $x417 $x309) $x336) $x402)))
 (let (($x423 (= $x276 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x81 (= ?x85 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x118 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x294 (ite $x118 (_ bv1 32) (_ bv0 32))))
 (let (($x292 (bvuge ?x294 (_ bv1 32))))
 (let (($x27 (=> $x292 $x81)))
 (let (($x259 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x136 (= $x292 $x259)))
 (let (($x159 (= ?x294 (_ bv0 32))))
 (let (($x367 (=> $x159 $x268)))
 (let (($x248 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x400 (= $x159 $x248)))
 (let (($x350 (and (and (and $x400 $x367) $x136) $x27)))
 (let (($x356 (= $x350 true)))
 (let (($x280 (forall ((input.ind-%var3055X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3055X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x209))))
 (let ((?x197 (input.spec-%var-m-0.1.1 input.ind-%var3055X)))
 (let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3055X)))
 (=> $x339 (= ?x197 ?x334))))))))
 ))
 (let (($x202 (forall ((input.ind-%var3054X (_ BitVec 32)) )(let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3054X)))
 (= $x339 (and (bvule (_ bv0 32) input.ind-%var3054X) (bvult input.ind-%var3054X (_ bv100 32))))))
 ))
 (let (($x246 (and $x202 $x280)))
 (let (($x271 (= $x246 true)))
 (let (($x349 (forall ((input.ind-%var3049X (_ BitVec 32)) )(let ((?x253 (bvadd (bvmul input.ind-%var3049X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x209 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv1 32))) (select input.dst.llvm-mem ?x253))))
 (let ((?x334 (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x253 (_ bv2 32))) ?x209))))
 (let ((?x197 (input.spec-%var-m-0.1.1 input.ind-%var3049X)))
 (let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3049X)))
 (=> $x339 (= ?x197 ?x334))))))))
 ))
 (let (($x40 (forall ((input.ind-%var3048X (_ BitVec 32)) )(let (($x339 (input.spec-%var-m-0.0.1 input.ind-%var3048X)))
 (= $x339 (and (bvule (_ bv0 32) input.ind-%var3048X) (bvult input.ind-%var3048X (_ bv100 32))))))
 ))
 (let (($x325 (and $x40 $x349)))
 (let (($x224 (= $x325 true)))
 (let ((?x296 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x257 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x275 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x95 (concat ?x275 (concat ?x61 (concat ?x257 ?x296)))))
 (let (($x107 (= ?x95 input.dst.llvm-%m)))
 (let (($x282 (= $x107 true)))
 (let (($x75 (= $x282 true)))
 (let (($x139 (= (bvand ?x245 (_ bv4294967292 32)) ?x245)))
 (let (($x362 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x258 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x262 (and true $x258)))
 (let (($x30 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x200 (and $x30 $x262)))
 (let (($x189 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x245 (bvsub ?x245 (_ bv8 32))) (bvult ?x245 (bvsub ?x245 (_ bv8 32))))))
 (let (($x396 (and (and (and true $x189) $x200) $x362)))
 (let (($x244 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x291 (and true $x244)))
 (let (($x376 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x279 (and $x376 $x291)))
 (let (($x394 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x420 (and (and (and true $x376) $x394) $x279)))
 (let (($x172 (and (and $x420 $x396) $x139)))
 (let (($x260 (= input.dst.llvm-%m ?x95)))
 (let (($x114 (and $x260 $x172)))
 (let ((?x99 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x228 (= (_ bv0 32) ?x99)))
 (let ((?x101 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x407 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x101)))
 (let (($x64 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x93 (and $x64 $x407)))
 (let (($x174 (and $x93 $x228)))
 (let (($x391 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x33 (and $x391 $x174)))
 (let (($x283 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x15 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x355 $x283)))))))
 (let (($x79 (and (and (and $x15 true) $x33) $x114)))
 (let (($x410 (= $x79 true)))
 (let (($x26 (= $x410 true)))
 (let (($x345 (= $x26 true)))
 (let (($x38 (= $x172 true)))
 (let (($x217 (= $x38 true)))
 (let (($x115 (= $x217 true)))
 (let (($x315 (= $x420 true)))
 (let (($x326 (= $x315 true)))
 (let (($x58 (= $x326 true)))
 (let (($x344 (and $x396 $x139)))
 (let (($x130 (= $x344 true)))
 (let (($x87 (= $x130 true)))
 (let (($x116 (= $x87 true)))
 (let (($x319 (and $x15 $x33)))
 (let (($x111 (= $x319 true)))
 (let (($x133 (= $x111 true)))
 (let (($x273 (= $x133 true)))
 (let (($x183 (and $x273 $x116)))
 (let (($x298 (and $x183 $x58)))
 (let (($x237 (and $x298 $x115)))
 (let (($x190 (and $x237 $x345)))
 (let (($x320 (and $x190 $x75)))
 (let (($x135 (and $x320 $x224)))
 (let (($x369 (and $x135 $x271)))
 (let (($x269 (and $x369 $x356)))
 (let (($x389 (and $x269 $x423)))
 (let (($x88 (and $x389 $x306)))
 (let (($x241 (and $x88 $x82)))
 (let (($x25 (and $x74 $x176)))
 (let (($x313 (and $x21 $x25)))
 (let (($x251 (and $x292 $x313)))
 (let (($x49 (and $x251 $x241)))
 (let (($x164 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x126 (and $x164 $x49)))
 (let (($x412 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x223 (and $x412 $x126)))
 (let (($x328 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x401 (and $x328 $x223)))
 (let (($x363 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x418 (and $x363 $x401)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x152 (and $x324 $x418)))
 (let (($x357 (and $x268 $x152)))
 (let (($x304 (= ?x85 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x201 (and $x304 $x357)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x411 (and $x278 $x201)))
 (let (($x137 (and $x268 $x411)))
 (let (($x342 (= ?x216 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x261 (and $x342 $x137)))
 (let (($x122 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x86 (and $x122 $x261)))
 (let (($x359 (and $x268 $x86)))
 (let (($x138 (= ?x321 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x78 (and $x138 $x359)))
 (let (($x277 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x168 (and $x277 $x78)))
 (let (($x179 (and $x268 $x168)))
 (let (($x83 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x229 (and $x83 $x179)))
 (let (($x151 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x233 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x151)))))))
 (let (($x19 (bvugt ?x245 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x245 (bvsub (bvadd ?x245 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x194 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x311 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x194)))))))
 (let (($x285 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x44 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x70 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x44)))
 (let (($x219 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x70 $x285)))))))
 (let (($x80 (and $x219 $x311)))
 (let (($x193 (and $x80 $x265)))
 (let (($x225 (and $x193 $x233)))
 (let (($x100 (and $x225 $x229)))
 (let (($x90 (=> $x100 $x354)))
 (not $x90)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 66
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x419 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x51)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x337 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x286 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x19 (bvadd ?x286 (_ bv3 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem ?x19) (concat ?x57 ?x337))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x162 (concat ?x242 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x151 (bvadd ?x128 (_ bv3 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem ?x151) (concat ?x364 ?x162))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x379 (concat ?x406 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x194 (bvadd ?x68 (_ bv3 32))))
 (let ((?x182 (concat (select input.dst.llvm-mem ?x194) (concat ?x398 ?x379))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x42)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x316)))
 (let ((?x263 (bvadd (bvadd (bvadd ?x89 ?x182) ?x65) ?x346)))
 (let (($x76 (= ?x263 ?x419)))
 (let (($x371 (= $x76 true)))
 (let (($x32 (= $x371 true)))
 (let (($x63 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x208 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x102 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x102 (_ bv1 32))))
 (let (($x238 (=> $x333 $x63)))
 (let (($x307 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x155 (= $x333 $x307)))
 (let (($x321 (= false false)))
 (let (($x166 (= ?x102 (_ bv0 32))))
 (let (($x18 (=> $x166 $x321)))
 (let (($x41 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x236 (= $x166 $x41)))
 (let (($x103 (and (and (and $x236 $x18) $x155) $x238)))
 (let (($x347 (= $x103 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x239 (= ?x216 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x251 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x251 (_ bv1 32))))
 (let (($x142 (=> $x192 $x239)))
 (let (($x185 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x366 (= $x192 $x185)))
 (let (($x163 (= ?x251 (_ bv0 32))))
 (let (($x256 (=> $x163 $x321)))
 (let (($x299 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x361 (= $x163 $x299)))
 (let (($x221 (and (and (and $x361 $x256) $x366) $x142)))
 (let (($x43 (= $x221 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x168 (= ?x85 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x243 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x176 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x176 (_ bv1 32))))
 (let (($x179 (=> $x25 $x168)))
 (let (($x86 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x359 (= $x25 $x86)))
 (let (($x357 (= ?x176 (_ bv0 32))))
 (let (($x261 (=> $x357 $x321)))
 (let (($x411 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x137 (= $x357 $x411)))
 (let (($x352 (and (and (and $x137 $x261) $x359) $x179)))
 (let (($x360 (= $x352 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x241 (= ?x46 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x21 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x74 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x74 (_ bv1 32))))
 (let (($x49 (=> $x267 $x241)))
 (let (($x177 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x146 (= $x267 $x177)))
 (let (($x28 (= ?x74 (_ bv0 32))))
 (let (($x424 (=> $x28 $x321)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x188 (= $x28 $x308)))
 (let (($x401 (and (and (and $x188 $x424) $x146) $x49)))
 (let (($x418 (= $x401 true)))
 (let (($x175 (forall ((input.ind-%var3093X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var3093X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x81))))
 (let ((?x274 (input.spec-%var-m-0.1.1 input.ind-%var3093X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3093X)))
 (=> $x329 (= ?x274 ?x17))))))))
 ))
 (let (($x389 (forall ((input.ind-%var3092X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3092X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3092X) (bvult input.ind-%var3092X (_ bv100 32))))))
 ))
 (let (($x377 (and $x389 $x175)))
 (let (($x404 (= $x377 true)))
 (let (($x309 (forall ((input.ind-%var3087X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var3087X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x81))))
 (let ((?x274 (input.spec-%var-m-0.1.1 input.ind-%var3087X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3087X)))
 (=> $x329 (= ?x274 ?x17))))))))
 ))
 (let (($x334 (forall ((input.ind-%var3086X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3086X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3086X) (bvult input.ind-%var3086X (_ bv100 32))))))
 ))
 (let (($x210 (and $x334 $x309)))
 (let (($x290 (= $x210 true)))
 (let ((?x386 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x345 (concat ?x79 (concat ?x95 ?x386)))))
 (let (($x161 (= ?x190 input.dst.llvm-%m)))
 (let (($x53 (= $x161 true)))
 (let (($x40 (= $x53 true)))
 (let (($x351 (= (bvand ?x286 (_ bv4294967292 32)) ?x286)))
 (let (($x87 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x132 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x139 (and true $x132)))
 (let (($x200 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x344 (and $x200 $x139)))
 (let (($x125 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x286 (bvsub ?x286 (_ bv8 32))) (bvult ?x286 (bvsub ?x286 (_ bv8 32))))))
 (let (($x314 (and (and (and true $x125) $x344) $x87)))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x298 (and true $x58)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (and $x6 $x298)))
 (let (($x291 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x217 (and (and (and true $x6) $x291) $x71)))
 (let (($x84 (and (and $x217 $x314) $x351)))
 (let (($x107 (= input.dst.llvm-%m ?x190)))
 (let (($x282 (and $x107 $x84)))
 (let ((?x289 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x149 (= (_ bv0 32) ?x289)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x319 $x133)))
 (let (($x384 (and $x273 $x149)))
 (let (($x368 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x353 (and $x368 $x384)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x101)))))))
 (let (($x323 (and (and (and $x33 true) $x353) $x282)))
 (let (($x339 (= $x323 true)))
 (let (($x144 (= $x339 true)))
 (let (($x9 (= $x144 true)))
 (let (($x275 (= $x84 true)))
 (let (($x20 (= $x275 true)))
 (let (($x61 (= $x20 true)))
 (let (($x115 (= $x217 true)))
 (let (($x237 (= $x115 true)))
 (let (($x348 (= $x237 true)))
 (let (($x390 (and $x314 $x351)))
 (let (($x310 (= $x390 true)))
 (let (($x300 (= $x310 true)))
 (let (($x414 (= $x300 true)))
 (let (($x189 (and $x33 $x353)))
 (let (($x97 (= $x189 true)))
 (let (($x403 (= $x97 true)))
 (let (($x160 (= $x403 true)))
 (let (($x394 (and $x160 $x414)))
 (let (($x305 (and $x394 $x348)))
 (let (($x131 (and $x305 $x61)))
 (let (($x302 (and $x131 $x9)))
 (let (($x197 (and $x302 $x40)))
 (let (($x336 (and $x197 $x290)))
 (let (($x60 (and $x336 $x404)))
 (let (($x152 (and $x60 $x418)))
 (let (($x50 (and $x152 $x360)))
 (let (($x255 (and $x50 $x43)))
 (let (($x104 (and $x255 $x347)))
 (let (($x355 (and $x163 $x333)))
 (let (($x283 (and $x25 $x355)))
 (let (($x370 (and $x267 $x283)))
 (let (($x413 (and $x370 $x104)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x270 (and $x247 $x413)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x215 (and $x292 $x270)))
 (let (($x118 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x96 (and $x118 $x215)))
 (let (($x205 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x373 (and $x205 $x96)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x382 (and $x117 $x373)))
 (let (($x184 (and $x321 $x382)))
 (let (($x415 (= ?x46 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x129 (and $x415 $x184)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x10 (and $x324 $x129)))
 (let (($x8 (and $x321 $x10)))
 (let (($x304 (= ?x85 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x322 (and $x304 $x8)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x48 (and $x278 $x322)))
 (let (($x318 (and $x321 $x48)))
 (let (($x342 (= ?x216 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x354 (and $x342 $x318)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x90 (and $x69 $x354)))
 (let (($x14 (and $x321 $x90)))
 (let (($x39 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x232 (and $x39 $x14)))
 (let (($x220 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x121 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x220)))))))
 (let (($x23 (bvugt ?x286 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x286 (bvsub (bvadd ?x286 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x143 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x245 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x143)))))))
 (let (($x7 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x288 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x7)))))))
 (let (($x29 (and $x288 $x245)))
 (let (($x148 (and $x29 $x180)))
 (let (($x204 (and $x148 $x121)))
 (let (($x409 (and $x204 $x232)))
 (let (($x397 (=> $x409 $x32)))
 (not $x397))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x419 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv1 32))) ?x51)))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x337 (concat ?x374 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x286 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x19 (bvadd ?x286 (_ bv3 32))))
 (let ((?x140 (concat (select input.dst.llvm-mem ?x19) (concat ?x57 ?x337))))
 (let ((?x346 (bvmul (_ bv4294967295 32) ?x140)))
 (let ((?x242 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x162 (concat ?x242 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x151 (bvadd ?x128 (_ bv3 32))))
 (let ((?x65 (concat (select input.dst.llvm-mem ?x151) (concat ?x364 ?x162))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x379 (concat ?x406 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x398 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x194 (bvadd ?x68 (_ bv3 32))))
 (let ((?x182 (concat (select input.dst.llvm-mem ?x194) (concat ?x398 ?x379))))
 (let ((?x42 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x316 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x42)))
 (let ((?x89 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x316)))
 (let ((?x263 (bvadd (bvadd (bvadd ?x89 ?x182) ?x65) ?x346)))
 (let (($x76 (= ?x263 ?x419)))
 (let (($x371 (= $x76 true)))
 (let (($x32 (= $x371 true)))
 (let (($x63 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x208 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x102 (ite $x208 (_ bv1 32) (_ bv0 32))))
 (let (($x333 (bvuge ?x102 (_ bv1 32))))
 (let (($x238 (=> $x333 $x63)))
 (let (($x307 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x155 (= $x333 $x307)))
 (let (($x321 (= false false)))
 (let (($x166 (= ?x102 (_ bv0 32))))
 (let (($x18 (=> $x166 $x321)))
 (let (($x41 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x236 (= $x166 $x41)))
 (let (($x103 (and (and (and $x236 $x18) $x155) $x238)))
 (let (($x347 (= $x103 true)))
 (let ((?x216 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x239 (= ?x216 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x313 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x251 (ite $x313 (_ bv1 32) (_ bv0 32))))
 (let (($x192 (bvuge ?x251 (_ bv1 32))))
 (let (($x142 (=> $x192 $x239)))
 (let (($x185 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x366 (= $x192 $x185)))
 (let (($x163 (= ?x251 (_ bv0 32))))
 (let (($x256 (=> $x163 $x321)))
 (let (($x299 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x361 (= $x163 $x299)))
 (let (($x221 (and (and (and $x361 $x256) $x366) $x142)))
 (let (($x43 (= $x221 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x168 (= ?x85 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x243 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x176 (ite $x243 (_ bv1 32) (_ bv0 32))))
 (let (($x25 (bvuge ?x176 (_ bv1 32))))
 (let (($x179 (=> $x25 $x168)))
 (let (($x86 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x359 (= $x25 $x86)))
 (let (($x357 (= ?x176 (_ bv0 32))))
 (let (($x261 (=> $x357 $x321)))
 (let (($x411 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x137 (= $x357 $x411)))
 (let (($x352 (and (and (and $x137 $x261) $x359) $x179)))
 (let (($x360 (= $x352 true)))
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x241 (= ?x46 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x21 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x74 (ite $x21 (_ bv1 32) (_ bv0 32))))
 (let (($x267 (bvuge ?x74 (_ bv1 32))))
 (let (($x49 (=> $x267 $x241)))
 (let (($x177 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x146 (= $x267 $x177)))
 (let (($x28 (= ?x74 (_ bv0 32))))
 (let (($x424 (=> $x28 $x321)))
 (let (($x308 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x188 (= $x28 $x308)))
 (let (($x401 (and (and (and $x188 $x424) $x146) $x49)))
 (let (($x418 (= $x401 true)))
 (let (($x175 (forall ((input.ind-%var3093X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var3093X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x81))))
 (let ((?x274 (input.spec-%var-m-0.1.1 input.ind-%var3093X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3093X)))
 (=> $x329 (= ?x274 ?x17))))))))
 ))
 (let (($x389 (forall ((input.ind-%var3092X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3092X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3092X) (bvult input.ind-%var3092X (_ bv100 32))))))
 ))
 (let (($x377 (and $x389 $x175)))
 (let (($x404 (= $x377 true)))
 (let (($x309 (forall ((input.ind-%var3087X (_ BitVec 32)) )(let ((?x259 (bvadd (bvmul input.ind-%var3087X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x81 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv1 32))) (select input.dst.llvm-mem ?x259))))
 (let ((?x17 (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x259 (_ bv2 32))) ?x81))))
 (let ((?x274 (input.spec-%var-m-0.1.1 input.ind-%var3087X)))
 (let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3087X)))
 (=> $x329 (= ?x274 ?x17))))))))
 ))
 (let (($x334 (forall ((input.ind-%var3086X (_ BitVec 32)) )(let (($x329 (input.spec-%var-m-0.0.1 input.ind-%var3086X)))
 (= $x329 (and (bvule (_ bv0 32) input.ind-%var3086X) (bvult input.ind-%var3086X (_ bv100 32))))))
 ))
 (let (($x210 (and $x334 $x309)))
 (let (($x290 (= $x210 true)))
 (let ((?x386 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x95 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x79 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x345 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x190 (concat ?x345 (concat ?x79 (concat ?x95 ?x386)))))
 (let (($x161 (= ?x190 input.dst.llvm-%m)))
 (let (($x53 (= $x161 true)))
 (let (($x40 (= $x53 true)))
 (let (($x351 (= (bvand ?x286 (_ bv4294967292 32)) ?x286)))
 (let (($x87 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x132 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x139 (and true $x132)))
 (let (($x200 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x344 (and $x200 $x139)))
 (let (($x125 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x286 (bvsub ?x286 (_ bv8 32))) (bvult ?x286 (bvsub ?x286 (_ bv8 32))))))
 (let (($x314 (and (and (and true $x125) $x344) $x87)))
 (let (($x58 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x298 (and true $x58)))
 (let (($x6 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x71 (and $x6 $x298)))
 (let (($x291 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x217 (and (and (and true $x6) $x291) $x71)))
 (let (($x84 (and (and $x217 $x314) $x351)))
 (let (($x107 (= input.dst.llvm-%m ?x190)))
 (let (($x282 (and $x107 $x84)))
 (let ((?x289 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x149 (= (_ bv0 32) ?x289)))
 (let ((?x111 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x133 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x111)))
 (let (($x319 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x273 (and $x319 $x133)))
 (let (($x384 (and $x273 $x149)))
 (let (($x368 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x353 (and $x368 $x384)))
 (let (($x101 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x33 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x101)))))))
 (let (($x323 (and (and (and $x33 true) $x353) $x282)))
 (let (($x339 (= $x323 true)))
 (let (($x144 (= $x339 true)))
 (let (($x9 (= $x144 true)))
 (let (($x275 (= $x84 true)))
 (let (($x20 (= $x275 true)))
 (let (($x61 (= $x20 true)))
 (let (($x115 (= $x217 true)))
 (let (($x237 (= $x115 true)))
 (let (($x348 (= $x237 true)))
 (let (($x390 (and $x314 $x351)))
 (let (($x310 (= $x390 true)))
 (let (($x300 (= $x310 true)))
 (let (($x414 (= $x300 true)))
 (let (($x189 (and $x33 $x353)))
 (let (($x97 (= $x189 true)))
 (let (($x403 (= $x97 true)))
 (let (($x160 (= $x403 true)))
 (let (($x394 (and $x160 $x414)))
 (let (($x305 (and $x394 $x348)))
 (let (($x131 (and $x305 $x61)))
 (let (($x302 (and $x131 $x9)))
 (let (($x197 (and $x302 $x40)))
 (let (($x336 (and $x197 $x290)))
 (let (($x60 (and $x336 $x404)))
 (let (($x152 (and $x60 $x418)))
 (let (($x50 (and $x152 $x360)))
 (let (($x255 (and $x50 $x43)))
 (let (($x104 (and $x255 $x347)))
 (let (($x355 (and $x163 $x333)))
 (let (($x283 (and $x25 $x355)))
 (let (($x370 (and $x267 $x283)))
 (let (($x413 (and $x370 $x104)))
 (let (($x247 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x270 (and $x247 $x413)))
 (let (($x292 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x215 (and $x292 $x270)))
 (let (($x118 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x96 (and $x118 $x215)))
 (let (($x205 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x373 (and $x205 $x96)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x382 (and $x117 $x373)))
 (let (($x184 (and $x321 $x382)))
 (let (($x415 (= ?x46 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x129 (and $x415 $x184)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x10 (and $x324 $x129)))
 (let (($x8 (and $x321 $x10)))
 (let (($x304 (= ?x85 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x322 (and $x304 $x8)))
 (let (($x278 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x48 (and $x278 $x322)))
 (let (($x318 (and $x321 $x48)))
 (let (($x342 (= ?x216 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x354 (and $x342 $x318)))
 (let (($x69 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x90 (and $x69 $x354)))
 (let (($x14 (and $x321 $x90)))
 (let (($x39 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x232 (and $x39 $x14)))
 (let (($x220 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x121 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x220)))))))
 (let (($x23 (bvugt ?x286 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x286 (bvsub (bvadd ?x286 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x143 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x245 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x143)))))))
 (let (($x7 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x285 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x178 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x285)))
 (let (($x288 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x178 $x7)))))))
 (let (($x29 (and $x288 $x245)))
 (let (($x148 (and $x29 $x180)))
 (let (($x204 (and $x148 $x121)))
 (let (($x409 (and $x204 $x232)))
 (let (($x397 (=> $x409 $x32)))
 (not $x397))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 67
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x423 (bvadd ?x412 ?x46)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x45 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x23 (bvadd ?x45 (_ bv3 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x23) (concat ?x380 ?x169))))
 (let ((?x171 (bvmul (_ bv4294967295 32) ?x88)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x191 (concat ?x113 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x220 (bvadd ?x235 (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x220) (concat ?x284 ?x191))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x369 (concat ?x271 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x143 (bvadd ?x59 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x143) (concat ?x280 ?x369))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x349)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x335)))
 (let ((?x268 (bvadd (bvadd (bvadd ?x224 ?x159) ?x214) ?x171)))
 (let (($x147 (= ?x268 ?x423)))
 (let (($x367 (= $x147 true)))
 (let (($x405 (= $x367 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x198 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x385 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x174 (ite $x385 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x174 (_ bv1 32))))
 (let (($x65 (=> $x287 $x198)))
 (let (($x242 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x156 (= $x287 $x242)))
 (let (($x216 (= false false)))
 (let (($x391 (= ?x174 (_ bv0 32))))
 (let (($x364 (=> $x391 $x216)))
 (let (($x62 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x106 (= $x391 $x62)))
 (let (($x213 (and (and (and $x106 $x364) $x156) $x65)))
 (let (($x105 (= $x213 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x398 (= ?x85 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x370 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x370 (_ bv1 32))))
 (let (($x181 (=> $x316 $x398)))
 (let (($x89 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x327 (= $x316 $x89)))
 (let (($x15 (= ?x370 (_ bv0 32))))
 (let (($x42 (=> $x15 $x216)))
 (let (($x252 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x297 (= $x15 $x252)))
 (let (($x379 (and (and (and $x297 $x42) $x327) $x181)))
 (let (($x186 (= $x379 true)))
 (let (($x90 (= ?x46 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x102 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x333 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x333 (_ bv1 32))))
 (let (($x14 (=> $x355 $x90)))
 (let (($x48 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x318 (= $x355 $x48)))
 (let (($x184 (= ?x333 (_ bv0 32))))
 (let (($x322 (=> $x184 $x216)))
 (let (($x10 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x184 $x10)))
 (let (($x206 (and (and (and $x8 $x322) $x318) $x14)))
 (let (($x134 (= $x206 true)))
 (let (($x104 (= ?x412 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x25 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x163 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x163 (_ bv1 32))))
 (let (($x413 (=> $x208 $x104)))
 (let (($x238 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x103 (= $x208 $x238)))
 (let (($x307 (= ?x163 (_ bv0 32))))
 (let (($x63 (=> $x307 $x216)))
 (let (($x35 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x173 (= $x307 $x35)))
 (let (($x96 (and (and (and $x173 $x63) $x103) $x413)))
 (let (($x373 (= $x96 true)))
 (let (($x41 (forall ((input.ind-%var3131X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var3131X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x241))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3131X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3131X)))
 (=> $x313 (= ?x211 ?x201))))))))
 ))
 (let (($x50 (forall ((input.ind-%var3130X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3130X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var3130X) (bvult input.ind-%var3130X (_ bv100 32))))))
 ))
 (let (($x236 (and $x50 $x41)))
 (let (($x18 (= $x236 true)))
 (let (($x261 (forall ((input.ind-%var3125X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var3125X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x241))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3125X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3125X)))
 (=> $x313 (= ?x211 ?x201))))))))
 ))
 (let (($x17 (forall ((input.ind-%var3124X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3124X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var3124X) (bvult input.ind-%var3124X (_ bv100 32))))))
 ))
 (let (($x229 (and $x17 $x261)))
 (let (($x86 (= $x229 true)))
 (let ((?x260 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x302 (concat ?x9 (concat ?x323 (concat ?x190 ?x260)))))
 (let (($x209 (= ?x302 input.dst.llvm-%m)))
 (let (($x392 (= $x209 true)))
 (let (($x334 (= $x392 true)))
 (let (($x172 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x300 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x376 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x351 (and true $x376)))
 (let (($x344 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x390 (and $x344 $x351)))
 (let (($x396 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv8 32))) (bvult ?x45 (bvsub ?x45 (_ bv8 32))))))
 (let (($x331 (and (and (and true $x396) $x390) $x300)))
 (let (($x348 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x305 (and true $x348)))
 (let (($x420 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x36 (and $x420 $x305)))
 (let (($x298 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x420) $x298) $x36)))
 (let (($x26 (and (and $x20 $x331) $x172)))
 (let (($x161 (= input.dst.llvm-%m ?x302)))
 (let (($x53 (and $x161 $x26)))
 (let ((?x231 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x30 (= (_ bv0 32) ?x231)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x189 $x403)))
 (let (($x150 (and $x160 $x30)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x228 $x150)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x353 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x111)))))))
 (let (($x83 (and (and (and $x353 true) $x222) $x53)))
 (let (($x329 (= $x83 true)))
 (let (($x422 (= $x329 true)))
 (let (($x141 (= $x422 true)))
 (let (($x345 (= $x26 true)))
 (let (($x114 (= $x345 true)))
 (let (($x79 (= $x114 true)))
 (let (($x61 (= $x20 true)))
 (let (($x131 (= $x61 true)))
 (let (($x75 (= $x131 true)))
 (let (($x5 (and $x331 $x172)))
 (let (($x199 (= $x5 true)))
 (let (($x77 (= $x199 true)))
 (let (($x244 (= $x77 true)))
 (let (($x125 (and $x353 $x222)))
 (let (($x116 (= $x125 true)))
 (let (($x258 (= $x116 true)))
 (let (($x262 (= $x258 true)))
 (let (($x291 (and $x262 $x244)))
 (let (($x320 (and $x291 $x75)))
 (let (($x408 (and $x320 $x79)))
 (let (($x196 (and $x408 $x141)))
 (let (($x274 (and $x196 $x334)))
 (let (($x359 (and $x274 $x86)))
 (let (($x47 (and $x359 $x18)))
 (let (($x382 (and $x47 $x373)))
 (let (($x340 (and $x382 $x134)))
 (let (($x182 (and $x340 $x186)))
 (let (($x57 (and $x182 $x105)))
 (let (($x64 (and $x15 $x391)))
 (let (($x101 (and $x355 $x64)))
 (let (($x407 (and $x208 $x101)))
 (let (($x387 (and $x407 $x57)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x374 (and $x176 $x387)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x338 (and $x267 $x374)))
 (let (($x21 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x337 (and $x21 $x338)))
 (let (($x112 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x375 (and $x112 $x337)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x140 (and $x294 $x375)))
 (let (($x346 (and $x216 $x140)))
 (let (($x164 (= ?x412 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x263 (and $x164 $x346)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x158 (and $x117 $x263)))
 (let (($x419 (and $x216 $x158)))
 (let (($x415 (= ?x46 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x76 (and $x415 $x419)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x371 (and $x324 $x76)))
 (let (($x32 (and $x216 $x371)))
 (let (($x304 (= ?x85 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x397 (and $x304 $x32)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x293 (and $x123 $x397)))
 (let (($x55 (and $x216 $x293)))
 (let (($x122 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x250 (and $x122 $x55)))
 (let (($x91 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x277 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x91)))))))
 (let (($x203 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x207 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x286 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x207)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x272 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x157)))))))
 (let (($x254 (and $x272 $x286)))
 (let (($x119 (and $x254 $x11)))
 (let (($x230 (and $x119 $x277)))
 (let (($x296 (and $x230 $x250)))
 (let (($x153 (=> $x296 $x405)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x423 (bvadd ?x412 ?x46)))
 (let ((?x145 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x169 (concat ?x145 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x380 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x45 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x23 (bvadd ?x45 (_ bv3 32))))
 (let ((?x88 (concat (select input.dst.llvm-mem ?x23) (concat ?x380 ?x169))))
 (let ((?x171 (bvmul (_ bv4294967295 32) ?x88)))
 (let ((?x113 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x191 (concat ?x113 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x284 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x220 (bvadd ?x235 (_ bv3 32))))
 (let ((?x214 (concat (select input.dst.llvm-mem ?x220) (concat ?x284 ?x191))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x369 (concat ?x271 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x143 (bvadd ?x59 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x143) (concat ?x280 ?x369))))
 (let ((?x349 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x335 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x349)))
 (let ((?x224 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x335)))
 (let ((?x268 (bvadd (bvadd (bvadd ?x224 ?x159) ?x214) ?x171)))
 (let (($x147 (= ?x268 ?x423)))
 (let (($x367 (= $x147 true)))
 (let (($x405 (= $x367 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x198 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x385 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x174 (ite $x385 (_ bv1 32) (_ bv0 32))))
 (let (($x287 (bvuge ?x174 (_ bv1 32))))
 (let (($x65 (=> $x287 $x198)))
 (let (($x242 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x156 (= $x287 $x242)))
 (let (($x216 (= false false)))
 (let (($x391 (= ?x174 (_ bv0 32))))
 (let (($x364 (=> $x391 $x216)))
 (let (($x62 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x106 (= $x391 $x62)))
 (let (($x213 (and (and (and $x106 $x364) $x156) $x65)))
 (let (($x105 (= $x213 true)))
 (let ((?x85 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x398 (= ?x85 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x283 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x370 (ite $x283 (_ bv1 32) (_ bv0 32))))
 (let (($x316 (bvuge ?x370 (_ bv1 32))))
 (let (($x181 (=> $x316 $x398)))
 (let (($x89 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x327 (= $x316 $x89)))
 (let (($x15 (= ?x370 (_ bv0 32))))
 (let (($x42 (=> $x15 $x216)))
 (let (($x252 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x297 (= $x15 $x252)))
 (let (($x379 (and (and (and $x297 $x42) $x327) $x181)))
 (let (($x186 (= $x379 true)))
 (let (($x90 (= ?x46 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x102 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x333 (ite $x102 (_ bv1 32) (_ bv0 32))))
 (let (($x355 (bvuge ?x333 (_ bv1 32))))
 (let (($x14 (=> $x355 $x90)))
 (let (($x48 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x318 (= $x355 $x48)))
 (let (($x184 (= ?x333 (_ bv0 32))))
 (let (($x322 (=> $x184 $x216)))
 (let (($x10 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x184 $x10)))
 (let (($x206 (and (and (and $x8 $x322) $x318) $x14)))
 (let (($x134 (= $x206 true)))
 (let (($x104 (= ?x412 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x25 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x163 (ite $x25 (_ bv1 32) (_ bv0 32))))
 (let (($x208 (bvuge ?x163 (_ bv1 32))))
 (let (($x413 (=> $x208 $x104)))
 (let (($x238 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x103 (= $x208 $x238)))
 (let (($x307 (= ?x163 (_ bv0 32))))
 (let (($x63 (=> $x307 $x216)))
 (let (($x35 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x173 (= $x307 $x35)))
 (let (($x96 (and (and (and $x173 $x63) $x103) $x413)))
 (let (($x373 (= $x96 true)))
 (let (($x41 (forall ((input.ind-%var3131X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var3131X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x241))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3131X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3131X)))
 (=> $x313 (= ?x211 ?x201))))))))
 ))
 (let (($x50 (forall ((input.ind-%var3130X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3130X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var3130X) (bvult input.ind-%var3130X (_ bv100 32))))))
 ))
 (let (($x236 (and $x50 $x41)))
 (let (($x18 (= $x236 true)))
 (let (($x261 (forall ((input.ind-%var3125X (_ BitVec 32)) )(let ((?x177 (bvadd (bvmul input.ind-%var3125X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x241 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv1 32))) (select input.dst.llvm-mem ?x177))))
 (let ((?x201 (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x177 (_ bv2 32))) ?x241))))
 (let ((?x211 (input.spec-%var-m-0.1.1 input.ind-%var3125X)))
 (let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3125X)))
 (=> $x313 (= ?x211 ?x201))))))))
 ))
 (let (($x17 (forall ((input.ind-%var3124X (_ BitVec 32)) )(let (($x313 (input.spec-%var-m-0.0.1 input.ind-%var3124X)))
 (= $x313 (and (bvule (_ bv0 32) input.ind-%var3124X) (bvult input.ind-%var3124X (_ bv100 32))))))
 ))
 (let (($x229 (and $x17 $x261)))
 (let (($x86 (= $x229 true)))
 (let ((?x260 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x190 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x323 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x302 (concat ?x9 (concat ?x323 (concat ?x190 ?x260)))))
 (let (($x209 (= ?x302 input.dst.llvm-%m)))
 (let (($x392 (= $x209 true)))
 (let (($x334 (= $x392 true)))
 (let (($x172 (= (bvand ?x45 (_ bv4294967292 32)) ?x45)))
 (let (($x300 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x376 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x351 (and true $x376)))
 (let (($x344 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x390 (and $x344 $x351)))
 (let (($x396 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x45 (bvsub ?x45 (_ bv8 32))) (bvult ?x45 (bvsub ?x45 (_ bv8 32))))))
 (let (($x331 (and (and (and true $x396) $x390) $x300)))
 (let (($x348 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x305 (and true $x348)))
 (let (($x420 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x36 (and $x420 $x305)))
 (let (($x298 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x20 (and (and (and true $x420) $x298) $x36)))
 (let (($x26 (and (and $x20 $x331) $x172)))
 (let (($x161 (= input.dst.llvm-%m ?x302)))
 (let (($x53 (and $x161 $x26)))
 (let ((?x231 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x30 (= (_ bv0 32) ?x231)))
 (let ((?x97 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x403 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x97)))
 (let (($x189 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x160 (and $x189 $x403)))
 (let (($x150 (and $x160 $x30)))
 (let (($x228 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x222 (and $x228 $x150)))
 (let (($x111 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x319 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x353 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x319 $x111)))))))
 (let (($x83 (and (and (and $x353 true) $x222) $x53)))
 (let (($x329 (= $x83 true)))
 (let (($x422 (= $x329 true)))
 (let (($x141 (= $x422 true)))
 (let (($x345 (= $x26 true)))
 (let (($x114 (= $x345 true)))
 (let (($x79 (= $x114 true)))
 (let (($x61 (= $x20 true)))
 (let (($x131 (= $x61 true)))
 (let (($x75 (= $x131 true)))
 (let (($x5 (and $x331 $x172)))
 (let (($x199 (= $x5 true)))
 (let (($x77 (= $x199 true)))
 (let (($x244 (= $x77 true)))
 (let (($x125 (and $x353 $x222)))
 (let (($x116 (= $x125 true)))
 (let (($x258 (= $x116 true)))
 (let (($x262 (= $x258 true)))
 (let (($x291 (and $x262 $x244)))
 (let (($x320 (and $x291 $x75)))
 (let (($x408 (and $x320 $x79)))
 (let (($x196 (and $x408 $x141)))
 (let (($x274 (and $x196 $x334)))
 (let (($x359 (and $x274 $x86)))
 (let (($x47 (and $x359 $x18)))
 (let (($x382 (and $x47 $x373)))
 (let (($x340 (and $x382 $x134)))
 (let (($x182 (and $x340 $x186)))
 (let (($x57 (and $x182 $x105)))
 (let (($x64 (and $x15 $x391)))
 (let (($x101 (and $x355 $x64)))
 (let (($x407 (and $x208 $x101)))
 (let (($x387 (and $x407 $x57)))
 (let (($x176 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x374 (and $x176 $x387)))
 (let (($x267 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x338 (and $x267 $x374)))
 (let (($x21 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x337 (and $x21 $x338)))
 (let (($x112 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x375 (and $x112 $x337)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x140 (and $x294 $x375)))
 (let (($x346 (and $x216 $x140)))
 (let (($x164 (= ?x412 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x263 (and $x164 $x346)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x158 (and $x117 $x263)))
 (let (($x419 (and $x216 $x158)))
 (let (($x415 (= ?x46 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x76 (and $x415 $x419)))
 (let (($x324 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x371 (and $x324 $x76)))
 (let (($x32 (and $x216 $x371)))
 (let (($x304 (= ?x85 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x397 (and $x304 $x32)))
 (let (($x123 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x293 (and $x123 $x397)))
 (let (($x55 (and $x216 $x293)))
 (let (($x122 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x250 (and $x122 $x55)))
 (let (($x91 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x277 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x91)))))))
 (let (($x203 (bvugt ?x45 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x45 (bvsub (bvadd ?x45 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x207 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x143)))
 (let (($x286 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x207)))))))
 (let (($x157 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x7 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x264 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x7)))
 (let (($x272 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x264 $x157)))))))
 (let (($x254 (and $x272 $x286)))
 (let (($x119 (and $x254 $x11)))
 (let (($x230 (and $x119 $x277)))
 (let (($x296 (and $x230 $x250)))
 (let (($x153 (=> $x296 $x405)))
 (not $x153))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 68
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x417 (bvmul (_ bv4294967295 32) ?x46)))
 (let ((?x166 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x417)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x366 (concat ?x185 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x203 (bvadd ?x19 (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem ?x203) (concat ?x295 ?x366))))
 (let ((?x352 (bvmul (_ bv4294967295 32) ?x78)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x179 (concat ?x168 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x91 (bvadd ?x128 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x91) (concat ?x259 ?x179))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x389 (concat ?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x207 (bvadd ?x120 (_ bv3 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem ?x207) (concat ?x336 ?x389))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x92)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x210)))
 (let ((?x360 (bvadd (bvadd (bvadd ?x330 ?x188) ?x221) ?x352)))
 (let (($x299 (= ?x360 ?x166)))
 (let (($x358 (= $x299 true)))
 (let (($x67 (= $x358 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x253 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x110 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x384 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x368 (bvuge ?x384 (_ bv1 32))))
 (let (($x214 (=> $x368 $x253)))
 (let (($x113 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x400 (= $x368 $x113)))
 (let (($x85 (= false false)))
 (let (($x276 (= ?x384 (_ bv0 32))))
 (let (($x393 (=> $x276 $x85)))
 (let (($x402 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x284 (= $x276 $x402)))
 (let (($x218 (and (and (and $x284 $x393) $x400) $x214)))
 (let (($x399 (= $x218 true)))
 (let (($x280 (= ?x46 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x407 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x407 (_ bv1 32))))
 (let (($x248 (=> $x33 $x280)))
 (let (($x224 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x246 (= $x33 $x224)))
 (let (($x301 (= ?x407 (_ bv0 32))))
 (let (($x335 (=> $x301 $x85)))
 (let (($x12 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x349 (= $x301 $x12)))
 (let (($x369 (and (and (and $x349 $x335) $x246) $x248)))
 (let (($x135 (= $x369 true)))
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x293 (= ?x412 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x174 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x391 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x391 (_ bv1 32))))
 (let (($x55 (=> $x76 $x293)))
 (let (($x371 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x32 (= $x76 $x371)))
 (let (($x64 (= ?x391 (_ bv0 32))))
 (let (($x419 (=> $x64 $x85)))
 (let (($x263 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x158 (= $x64 $x263)))
 (let (($x325 (and (and (and $x158 $x419) $x32) $x55)))
 (let (($x124 (= $x325 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x57 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x15 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x15 (_ bv1 32))))
 (let (($x387 (=> $x385 $x57)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x213 (= $x385 $x65)))
 (let (($x242 (= ?x15 (_ bv0 32))))
 (let (($x198 (=> $x242 $x85)))
 (let (($x109 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x162 (= $x242 $x109)))
 (let (($x337 (and (and (and $x162 $x198) $x213) $x387)))
 (let (($x375 (= $x337 true)))
 (let (($x106 (forall ((input.ind-%var3169X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var3169X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x104))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var3169X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3169X)))
 (=> $x283 (= ?x303 ?x129))))))))
 ))
 (let (($x340 (forall ((input.ind-%var3168X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3168X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var3168X) (bvult input.ind-%var3168X (_ bv100 32))))))
 ))
 (let (($x364 (and $x340 $x106)))
 (let (($x154 (= $x364 true)))
 (let (($x322 (forall ((input.ind-%var3163X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var3163X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x104))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var3163X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3163X)))
 (=> $x283 (= ?x303 ?x129))))))))
 ))
 (let (($x201 (forall ((input.ind-%var3162X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3162X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var3162X) (bvult input.ind-%var3162X (_ bv100 32))))))
 ))
 (let (($x232 (and $x201 $x322)))
 (let (($x48 (= $x232 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x141 (concat ?x83 (concat ?x302 ?x107)))))
 (let (($x81 (= ?x196 input.dst.llvm-%m)))
 (let (($x356 (= $x81 true)))
 (let (($x17 (= $x356 true)))
 (let (($x84 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x77 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x6 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x172 (and true $x6)))
 (let (($x390 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x5 (and $x390 $x172)))
 (let (($x314 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv8 32))) (bvult ?x19 (bvsub ?x19 (_ bv8 32))))))
 (let (($x38 (and (and (and true $x314) $x5) $x77)))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x320 (and true $x75)))
 (let (($x217 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x257 (and $x217 $x320)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x114 (and (and (and true $x217) $x305) $x257)))
 (let (($x144 (and (and $x114 $x38) $x84)))
 (let (($x209 (= input.dst.llvm-%m ?x196)))
 (let (($x392 (and $x209 $x144)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x212)))
 (let ((?x116 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (and $x125 $x258)))
 (let (($x165 (and $x262 $x200)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x149 $x165)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x97)))))))
 (let (($x39 (and (and (and $x222 true) $x362) $x392)))
 (let (($x313 (= $x39 true)))
 (let (($x136 (= $x313 true)))
 (let (($x378 (= $x136 true)))
 (let (($x9 (= $x144 true)))
 (let (($x282 (= $x9 true)))
 (let (($x323 (= $x282 true)))
 (let (($x79 (= $x114 true)))
 (let (($x408 (= $x79 true)))
 (let (($x40 (= $x408 true)))
 (let (($x315 (and $x38 $x84)))
 (let (($x279 (= $x315 true)))
 (let (($x326 (= $x279 true)))
 (let (($x58 (= $x326 true)))
 (let (($x396 (and $x222 $x362)))
 (let (($x414 (= $x396 true)))
 (let (($x132 (= $x414 true)))
 (let (($x139 (= $x132 true)))
 (let (($x298 (and $x139 $x58)))
 (let (($x197 (and $x298 $x40)))
 (let (($x410 (and $x197 $x323)))
 (let (($x416 (and $x410 $x378)))
 (let (($x211 (and $x416 $x17)))
 (let (($x318 (and $x211 $x48)))
 (let (($x287 (and $x318 $x154)))
 (let (($x140 (and $x287 $x375)))
 (let (($x195 (and $x140 $x124)))
 (let (($x159 (and $x195 $x135)))
 (let (($x380 (and $x159 $x399)))
 (let (($x319 (and $x33 $x368)))
 (let (($x111 (and $x64 $x319)))
 (let (($x133 (and $x385 $x111)))
 (let (($x170 (and $x133 $x380)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x145 (and $x333 $x170)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x306 (and $x208 $x145)))
 (let (($x25 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x169 (and $x25 $x306)))
 (let (($x243 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x94 (and $x243 $x169)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x88 (and $x74 $x94)))
 (let (($x171 (and $x85 $x88)))
 (let (($x247 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x247 $x171)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x423 (and $x294 $x268)))
 (let (($x147 (and $x85 $x423)))
 (let (($x164 (= ?x412 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x367 (and $x164 $x147)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x405 (and $x117 $x367)))
 (let (($x153 (and $x85 $x405)))
 (let (($x415 (= ?x46 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x365 (and $x415 $x153)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x56 (and $x167 $x365)))
 (let (($x93 (and $x85 $x56)))
 (let (($x278 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x386 (and $x278 $x93)))
 (let (($x225 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x69 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x225)))))))
 (let (($x193 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x151 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x193)))))))
 (let (($x80 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x45 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x80)))))))
 (let (($x227 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x194 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x227)))))))
 (let (($x72 (and $x194 $x45)))
 (let (($x266 (and $x72 $x151)))
 (let (($x281 (and $x266 $x69)))
 (let (($x251 (and $x281 $x386)))
 (let (($x421 (=> $x251 $x67)))
 (not $x421)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x46 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x417 (bvmul (_ bv4294967295 32) ?x46)))
 (let ((?x166 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv0 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x417)))
 (let ((?x185 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x366 (concat ?x185 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x295 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x19 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x203 (bvadd ?x19 (_ bv3 32))))
 (let ((?x78 (concat (select input.dst.llvm-mem ?x203) (concat ?x295 ?x366))))
 (let ((?x352 (bvmul (_ bv4294967295 32) ?x78)))
 (let ((?x168 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x179 (concat ?x168 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x91 (bvadd ?x128 (_ bv3 32))))
 (let ((?x221 (concat (select input.dst.llvm-mem ?x91) (concat ?x259 ?x179))))
 (let ((?x60 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x389 (concat ?x60 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x336 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x207 (bvadd ?x120 (_ bv3 32))))
 (let ((?x188 (concat (select input.dst.llvm-mem ?x207) (concat ?x336 ?x389))))
 (let ((?x92 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x210 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x92)))
 (let ((?x330 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x210)))
 (let ((?x360 (bvadd (bvadd (bvadd ?x330 ?x188) ?x221) ?x352)))
 (let (($x299 (= ?x360 ?x166)))
 (let (($x358 (= $x299 true)))
 (let (($x67 (= $x358 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x253 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x110 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x384 (ite $x110 (_ bv1 32) (_ bv0 32))))
 (let (($x368 (bvuge ?x384 (_ bv1 32))))
 (let (($x214 (=> $x368 $x253)))
 (let (($x113 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x400 (= $x368 $x113)))
 (let (($x85 (= false false)))
 (let (($x276 (= ?x384 (_ bv0 32))))
 (let (($x393 (=> $x276 $x85)))
 (let (($x402 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x284 (= $x276 $x402)))
 (let (($x218 (and (and (and $x284 $x393) $x400) $x214)))
 (let (($x399 (= $x218 true)))
 (let (($x280 (= ?x46 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x101 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x407 (ite $x101 (_ bv1 32) (_ bv0 32))))
 (let (($x33 (bvuge ?x407 (_ bv1 32))))
 (let (($x248 (=> $x33 $x280)))
 (let (($x224 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x246 (= $x33 $x224)))
 (let (($x301 (= ?x407 (_ bv0 32))))
 (let (($x335 (=> $x301 $x85)))
 (let (($x12 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x349 (= $x301 $x12)))
 (let (($x369 (and (and (and $x349 $x335) $x246) $x248)))
 (let (($x135 (= $x369 true)))
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x293 (= ?x412 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x174 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x391 (ite $x174 (_ bv1 32) (_ bv0 32))))
 (let (($x76 (bvuge ?x391 (_ bv1 32))))
 (let (($x55 (=> $x76 $x293)))
 (let (($x371 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x32 (= $x76 $x371)))
 (let (($x64 (= ?x391 (_ bv0 32))))
 (let (($x419 (=> $x64 $x85)))
 (let (($x263 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x158 (= $x64 $x263)))
 (let (($x325 (and (and (and $x158 $x419) $x32) $x55)))
 (let (($x124 (= $x325 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x57 (= ?x292 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x355 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x15 (ite $x355 (_ bv1 32) (_ bv0 32))))
 (let (($x385 (bvuge ?x15 (_ bv1 32))))
 (let (($x387 (=> $x385 $x57)))
 (let (($x65 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x213 (= $x385 $x65)))
 (let (($x242 (= ?x15 (_ bv0 32))))
 (let (($x198 (=> $x242 $x85)))
 (let (($x109 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x162 (= $x242 $x109)))
 (let (($x337 (and (and (and $x162 $x198) $x213) $x387)))
 (let (($x375 (= $x337 true)))
 (let (($x106 (forall ((input.ind-%var3169X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var3169X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x104))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var3169X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3169X)))
 (=> $x283 (= ?x303 ?x129))))))))
 ))
 (let (($x340 (forall ((input.ind-%var3168X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3168X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var3168X) (bvult input.ind-%var3168X (_ bv100 32))))))
 ))
 (let (($x364 (and $x340 $x106)))
 (let (($x154 (= $x364 true)))
 (let (($x322 (forall ((input.ind-%var3163X (_ BitVec 32)) )(let ((?x238 (bvadd (bvmul input.ind-%var3163X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x104 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv1 32))) (select input.dst.llvm-mem ?x238))))
 (let ((?x129 (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x238 (_ bv2 32))) ?x104))))
 (let ((?x303 (input.spec-%var-m-0.1.1 input.ind-%var3163X)))
 (let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3163X)))
 (=> $x283 (= ?x303 ?x129))))))))
 ))
 (let (($x201 (forall ((input.ind-%var3162X (_ BitVec 32)) )(let (($x283 (input.spec-%var-m-0.0.1 input.ind-%var3162X)))
 (= $x283 (and (bvule (_ bv0 32) input.ind-%var3162X) (bvult input.ind-%var3162X (_ bv100 32))))))
 ))
 (let (($x232 (and $x201 $x322)))
 (let (($x48 (= $x232 true)))
 (let ((?x107 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x302 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x83 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x141 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x196 (concat ?x141 (concat ?x83 (concat ?x302 ?x107)))))
 (let (($x81 (= ?x196 input.dst.llvm-%m)))
 (let (($x356 (= $x81 true)))
 (let (($x17 (= $x356 true)))
 (let (($x84 (= (bvand ?x19 (_ bv4294967292 32)) ?x19)))
 (let (($x77 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x6 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x172 (and true $x6)))
 (let (($x390 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x5 (and $x390 $x172)))
 (let (($x314 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x19 (bvsub ?x19 (_ bv8 32))) (bvult ?x19 (bvsub ?x19 (_ bv8 32))))))
 (let (($x38 (and (and (and true $x314) $x5) $x77)))
 (let (($x75 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x320 (and true $x75)))
 (let (($x217 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x257 (and $x217 $x320)))
 (let (($x305 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x114 (and (and (and true $x217) $x305) $x257)))
 (let (($x144 (and (and $x114 $x38) $x84)))
 (let (($x209 (= input.dst.llvm-%m ?x196)))
 (let (($x392 (and $x209 $x144)))
 (let ((?x212 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x200 (= (_ bv0 32) ?x212)))
 (let ((?x116 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x258 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x116)))
 (let (($x125 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x262 (and $x125 $x258)))
 (let (($x165 (and $x262 $x200)))
 (let (($x149 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x362 (and $x149 $x165)))
 (let (($x97 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x189 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x222 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x189 $x97)))))))
 (let (($x39 (and (and (and $x222 true) $x362) $x392)))
 (let (($x313 (= $x39 true)))
 (let (($x136 (= $x313 true)))
 (let (($x378 (= $x136 true)))
 (let (($x9 (= $x144 true)))
 (let (($x282 (= $x9 true)))
 (let (($x323 (= $x282 true)))
 (let (($x79 (= $x114 true)))
 (let (($x408 (= $x79 true)))
 (let (($x40 (= $x408 true)))
 (let (($x315 (and $x38 $x84)))
 (let (($x279 (= $x315 true)))
 (let (($x326 (= $x279 true)))
 (let (($x58 (= $x326 true)))
 (let (($x396 (and $x222 $x362)))
 (let (($x414 (= $x396 true)))
 (let (($x132 (= $x414 true)))
 (let (($x139 (= $x132 true)))
 (let (($x298 (and $x139 $x58)))
 (let (($x197 (and $x298 $x40)))
 (let (($x410 (and $x197 $x323)))
 (let (($x416 (and $x410 $x378)))
 (let (($x211 (and $x416 $x17)))
 (let (($x318 (and $x211 $x48)))
 (let (($x287 (and $x318 $x154)))
 (let (($x140 (and $x287 $x375)))
 (let (($x195 (and $x140 $x124)))
 (let (($x159 (and $x195 $x135)))
 (let (($x380 (and $x159 $x399)))
 (let (($x319 (and $x33 $x368)))
 (let (($x111 (and $x64 $x319)))
 (let (($x133 (and $x385 $x111)))
 (let (($x170 (and $x133 $x380)))
 (let (($x333 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x145 (and $x333 $x170)))
 (let (($x208 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x306 (and $x208 $x145)))
 (let (($x25 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x169 (and $x25 $x306)))
 (let (($x243 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x94 (and $x243 $x169)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x88 (and $x74 $x94)))
 (let (($x171 (and $x85 $x88)))
 (let (($x247 (= ?x292 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x268 (and $x247 $x171)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x423 (and $x294 $x268)))
 (let (($x147 (and $x85 $x423)))
 (let (($x164 (= ?x412 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x367 (and $x164 $x147)))
 (let (($x117 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x405 (and $x117 $x367)))
 (let (($x153 (and $x85 $x405)))
 (let (($x415 (= ?x46 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x365 (and $x415 $x153)))
 (let (($x167 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x56 (and $x167 $x365)))
 (let (($x93 (and $x85 $x56)))
 (let (($x278 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x386 (and $x278 $x93)))
 (let (($x225 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x69 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x225)))))))
 (let (($x193 (bvugt ?x19 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x265 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x203)))
 (let (($x151 (=> (bvule ?x19 (bvsub (bvadd ?x19 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x265 $x193)))))))
 (let (($x80 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x207)))
 (let (($x45 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x80)))))))
 (let (($x227 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x157 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x219 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x157)))
 (let (($x194 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x219 $x227)))))))
 (let (($x72 (and $x194 $x45)))
 (let (($x266 (and $x72 $x151)))
 (let (($x281 (and $x266 $x69)))
 (let (($x251 (and $x281 $x386)))
 (let (($x421 (=> $x251 $x67)))
 (not $x421)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 69
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x216 (bvmul (_ bv4294967295 32) ?x412)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x134 (bvadd ?x267 ?x216)))
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x372 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x193 (bvadd ?x23 (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x193) (concat ?x327 ?x398))))
 (let ((?x182 (bvmul (_ bv4294967295 32) ?x181)))
 (let ((?x297 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x409 (concat ?x297 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x225 (bvadd ?x235 (_ bv3 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem ?x225) (concat ?x14 ?x409))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x18 (concat ?x35 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x80 (bvadd ?x31 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x80) (concat ?x50 ?x18))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x411)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x152)))
 (let ((?x223 (bvadd (bvadd (bvadd ?x229 ?x236) ?x401) ?x182)))
 (let (($x137 (= ?x223 ?x134)))
 (let (($x63 (= $x137 true)))
 (let (($x312 (= $x63 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x350 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x99 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x150 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x150 (_ bv1 32))))
 (let (($x221 (=> $x100 $x350)))
 (let (($x168 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x361 (= $x100 $x168)))
 (let (($x46 (= false false)))
 (let (($x228 (= ?x150 (_ bv0 32))))
 (let (($x259 (=> $x228 $x46)))
 (let (($x317 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x256 (= $x228 $x317)))
 (let (($x255 (and (and (and $x256 $x259) $x361) $x221)))
 (let (($x192 (= $x255 true)))
 (let (($x336 (= ?x412 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x133 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x133 (_ bv1 32))))
 (let (($x404 (=> $x353 $x336)))
 (let (($x330 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x28 (= $x353 $x330)))
 (let (($x66 (= ?x133 (_ bv0 32))))
 (let (($x210 (=> $x66 $x46)))
 (let (($x138 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x92 (= $x66 $x138)))
 (let (($x389 (and (and (and $x92 $x210) $x28) $x404)))
 (let (($x377 (= $x389 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x56 (= ?x292 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x384 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x368 (ite $x384 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x368 (_ bv1 32))))
 (let (($x93 (=> $x367 $x56)))
 (let (($x405 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x153 (= $x367 $x405)))
 (let (($x319 (= ?x368 (_ bv0 32))))
 (let (($x147 (=> $x319 $x46)))
 (let (($x268 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x423 (= $x319 $x268)))
 (let (($x290 (and (and (and $x423 $x147) $x153) $x93)))
 (let (($x269 (= $x290 true)))
 (let (($x380 (= ?x267 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x33 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x33 (_ bv1 32))))
 (let (($x170 (=> $x110 $x380)))
 (let (($x214 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x218 (= $x110 $x214)))
 (let (($x113 (= ?x33 (_ bv0 32))))
 (let (($x253 (=> $x113 $x46)))
 (let (($x395 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x191 (= $x113 $x395)))
 (let (($x169 (and (and (and $x191 $x253) $x218) $x170)))
 (let (($x94 (= $x169 true)))
 (let (($x402 (forall ((input.ind-%var3207X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x57))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3207X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3207X)))
 (=> $x101 (= ?x341 ?x263))))))))
 ))
 (let (($x195 (forall ((input.ind-%var3206X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3206X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var3206X) (bvult input.ind-%var3206X (_ bv100 32))))))
 ))
 (let (($x284 (and $x195 $x402)))
 (let (($x393 (= $x284 true)))
 (let (($x250 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3201X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x57))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3201X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3201X)))
 (=> $x101 (= ?x341 ?x263))))))))
 ))
 (let (($x129 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3200X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var3200X) (bvult input.ind-%var3200X (_ bv100 32))))))
 ))
 (let (($x76 (and $x129 $x250)))
 (let (($x371 (= $x76 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x416 (concat ?x378 (concat ?x39 (concat ?x196 ?x161)))))
 (let (($x241 (= ?x416 input.dst.llvm-%m)))
 (let (($x418 (= $x241 true)))
 (let (($x201 (= $x418 true)))
 (let (($x26 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x326 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x420 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x84 (and true $x420)))
 (let (($x5 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x315 (and $x5 $x84)))
 (let (($x331 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv8 32))) (bvult ?x23 (bvsub ?x23 (_ bv8 32))))))
 (let (($x275 (and (and (and true $x331) $x315) $x326)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x197 (and true $x40)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and $x20 $x197)))
 (let (($x320 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x282 (and (and (and true $x20) $x320) $x95)))
 (let (($x422 (and (and $x282 $x275) $x26)))
 (let (($x81 (= input.dst.llvm-%m ?x416)))
 (let (($x356 (and $x81 $x422)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x130)))
 (let ((?x414 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x414)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x396 $x132)))
 (let (($x183 (and $x139 $x344)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x30 $x183)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x362 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x116)))))))
 (let (($x122 (and (and (and $x362 true) $x87) $x356)))
 (let (($x283 (= $x122 true)))
 (let (($x146 (= $x283 true)))
 (let (($x357 (= $x146 true)))
 (let (($x141 (= $x422 true)))
 (let (($x53 (= $x141 true)))
 (let (($x83 (= $x53 true)))
 (let (($x323 (= $x282 true)))
 (let (($x410 (= $x323 true)))
 (let (($x334 (= $x410 true)))
 (let (($x115 (and $x275 $x26)))
 (let (($x71 (= $x115 true)))
 (let (($x237 (= $x71 true)))
 (let (($x348 (= $x237 true)))
 (let (($x314 (and $x362 $x87)))
 (let (($x244 (= $x314 true)))
 (let (($x376 (= $x244 true)))
 (let (($x351 (= $x376 true)))
 (let (($x305 (and $x351 $x348)))
 (let (($x274 (and $x305 $x334)))
 (let (($x339 (and $x274 $x83)))
 (let (($x82 (and $x339 $x357)))
 (let (($x303 (and $x82 $x201)))
 (let (($x32 (and $x303 $x371)))
 (let (($x22 (and $x32 $x393)))
 (let (($x88 (and $x22 $x94)))
 (let (($x27 (and $x88 $x269)))
 (let (($x188 (and $x27 $x377)))
 (let (($x295 (and $x188 $x192)))
 (let (($x189 (and $x353 $x228)))
 (let (($x97 (and $x319 $x189)))
 (let (($x403 (and $x110 $x97)))
 (let (($x239 (and $x403 $x295)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x185 (and $x391 $x239)))
 (let (($x385 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x385 $x185)))
 (let (($x355 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x366 (and $x355 $x332)))
 (let (($x102 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x142 (and $x102 $x366)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x78 (and $x163 $x142)))
 (let (($x352 (and $x46 $x78)))
 (let (($x176 (= ?x267 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x360 (and $x176 $x352)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x424 (and $x74 $x360)))
 (let (($x417 (and $x46 $x424)))
 (let (($x247 (= ?x292 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x166 (and $x247 $x417)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x299 (and $x294 $x166)))
 (let (($x358 (and $x46 $x299)))
 (let (($x164 (= ?x412 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x67 (and $x164 $x358)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x421 (and $x328 $x67)))
 (let (($x343 (and $x46 $x421)))
 (let (($x324 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x44 (and $x324 $x343)))
 (let (($x204 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x123 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x204)))))))
 (let (($x148 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x220 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x148)))))))
 (let (($x29 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x19 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x29)))))))
 (let (($x34 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x34)))))))
 (let (($x187 (and $x143 $x19)))
 (let (($x108 (and $x187 $x220)))
 (let (($x127 (and $x108 $x123)))
 (let (($x273 (and $x127 $x44)))
 (let (($x252 (=> $x273 $x312)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x412 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x216 (bvmul (_ bv4294967295 32) ?x412)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x134 (bvadd ?x267 ?x216)))
 (let ((?x372 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x398 (concat ?x372 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x327 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x23 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x193 (bvadd ?x23 (_ bv3 32))))
 (let ((?x181 (concat (select input.dst.llvm-mem ?x193) (concat ?x327 ?x398))))
 (let ((?x182 (bvmul (_ bv4294967295 32) ?x181)))
 (let ((?x297 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x409 (concat ?x297 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x14 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x225 (bvadd ?x235 (_ bv3 32))))
 (let ((?x401 (concat (select input.dst.llvm-mem ?x225) (concat ?x14 ?x409))))
 (let ((?x35 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x18 (concat ?x35 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x50 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x80 (bvadd ?x31 (_ bv3 32))))
 (let ((?x236 (concat (select input.dst.llvm-mem ?x80) (concat ?x50 ?x18))))
 (let ((?x411 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x152 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x411)))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x152)))
 (let ((?x223 (bvadd (bvadd (bvadd ?x229 ?x236) ?x401) ?x182)))
 (let (($x137 (= ?x223 ?x134)))
 (let (($x63 (= $x137 true)))
 (let (($x312 (= $x63 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x350 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x99 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x150 (ite $x99 (_ bv1 32) (_ bv0 32))))
 (let (($x100 (bvuge ?x150 (_ bv1 32))))
 (let (($x221 (=> $x100 $x350)))
 (let (($x168 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x361 (= $x100 $x168)))
 (let (($x46 (= false false)))
 (let (($x228 (= ?x150 (_ bv0 32))))
 (let (($x259 (=> $x228 $x46)))
 (let (($x317 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x256 (= $x228 $x317)))
 (let (($x255 (and (and (and $x256 $x259) $x361) $x221)))
 (let (($x192 (= $x255 true)))
 (let (($x336 (= ?x412 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x111 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x133 (ite $x111 (_ bv1 32) (_ bv0 32))))
 (let (($x353 (bvuge ?x133 (_ bv1 32))))
 (let (($x404 (=> $x353 $x336)))
 (let (($x330 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x28 (= $x353 $x330)))
 (let (($x66 (= ?x133 (_ bv0 32))))
 (let (($x210 (=> $x66 $x46)))
 (let (($x138 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x92 (= $x66 $x138)))
 (let (($x389 (and (and (and $x92 $x210) $x28) $x404)))
 (let (($x377 (= $x389 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x56 (= ?x292 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x384 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x368 (ite $x384 (_ bv1 32) (_ bv0 32))))
 (let (($x367 (bvuge ?x368 (_ bv1 32))))
 (let (($x93 (=> $x367 $x56)))
 (let (($x405 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x153 (= $x367 $x405)))
 (let (($x319 (= ?x368 (_ bv0 32))))
 (let (($x147 (=> $x319 $x46)))
 (let (($x268 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x423 (= $x319 $x268)))
 (let (($x290 (and (and (and $x423 $x147) $x153) $x93)))
 (let (($x269 (= $x290 true)))
 (let (($x380 (= ?x267 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x64 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x33 (ite $x64 (_ bv1 32) (_ bv0 32))))
 (let (($x110 (bvuge ?x33 (_ bv1 32))))
 (let (($x170 (=> $x110 $x380)))
 (let (($x214 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x218 (= $x110 $x214)))
 (let (($x113 (= ?x33 (_ bv0 32))))
 (let (($x253 (=> $x113 $x46)))
 (let (($x395 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x191 (= $x113 $x395)))
 (let (($x169 (and (and (and $x191 $x253) $x218) $x170)))
 (let (($x94 (= $x169 true)))
 (let (($x402 (forall ((input.ind-%var3207X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3207X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x57))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3207X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3207X)))
 (=> $x101 (= ?x341 ?x263))))))))
 ))
 (let (($x195 (forall ((input.ind-%var3206X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3206X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var3206X) (bvult input.ind-%var3206X (_ bv100 32))))))
 ))
 (let (($x284 (and $x195 $x402)))
 (let (($x393 (= $x284 true)))
 (let (($x250 (forall ((input.ind-%var3201X (_ BitVec 32)) )(let ((?x65 (bvadd (bvmul input.ind-%var3201X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x57 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv1 32))) (select input.dst.llvm-mem ?x65))))
 (let ((?x263 (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x65 (_ bv2 32))) ?x57))))
 (let ((?x341 (input.spec-%var-m-0.1.1 input.ind-%var3201X)))
 (let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3201X)))
 (=> $x101 (= ?x341 ?x263))))))))
 ))
 (let (($x129 (forall ((input.ind-%var3200X (_ BitVec 32)) )(let (($x101 (input.spec-%var-m-0.0.1 input.ind-%var3200X)))
 (= $x101 (and (bvule (_ bv0 32) input.ind-%var3200X) (bvult input.ind-%var3200X (_ bv100 32))))))
 ))
 (let (($x76 (and $x129 $x250)))
 (let (($x371 (= $x76 true)))
 (let ((?x161 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x196 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x39 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x378 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x416 (concat ?x378 (concat ?x39 (concat ?x196 ?x161)))))
 (let (($x241 (= ?x416 input.dst.llvm-%m)))
 (let (($x418 (= $x241 true)))
 (let (($x201 (= $x418 true)))
 (let (($x26 (= (bvand ?x23 (_ bv4294967292 32)) ?x23)))
 (let (($x326 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x420 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x84 (and true $x420)))
 (let (($x5 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x315 (and $x5 $x84)))
 (let (($x331 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x23 (bvsub ?x23 (_ bv8 32))) (bvult ?x23 (bvsub ?x23 (_ bv8 32))))))
 (let (($x275 (and (and (and true $x331) $x315) $x326)))
 (let (($x40 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x197 (and true $x40)))
 (let (($x20 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x95 (and $x20 $x197)))
 (let (($x320 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x282 (and (and (and true $x20) $x320) $x95)))
 (let (($x422 (and (and $x282 $x275) $x26)))
 (let (($x81 (= input.dst.llvm-%m ?x416)))
 (let (($x356 (and $x81 $x422)))
 (let ((?x130 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x344 (= (_ bv0 32) ?x130)))
 (let ((?x414 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x132 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x414)))
 (let (($x396 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x139 (and $x396 $x132)))
 (let (($x183 (and $x139 $x344)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x87 (and $x30 $x183)))
 (let (($x116 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x125 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x362 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x125 $x116)))))))
 (let (($x122 (and (and (and $x362 true) $x87) $x356)))
 (let (($x283 (= $x122 true)))
 (let (($x146 (= $x283 true)))
 (let (($x357 (= $x146 true)))
 (let (($x141 (= $x422 true)))
 (let (($x53 (= $x141 true)))
 (let (($x83 (= $x53 true)))
 (let (($x323 (= $x282 true)))
 (let (($x410 (= $x323 true)))
 (let (($x334 (= $x410 true)))
 (let (($x115 (and $x275 $x26)))
 (let (($x71 (= $x115 true)))
 (let (($x237 (= $x71 true)))
 (let (($x348 (= $x237 true)))
 (let (($x314 (and $x362 $x87)))
 (let (($x244 (= $x314 true)))
 (let (($x376 (= $x244 true)))
 (let (($x351 (= $x376 true)))
 (let (($x305 (and $x351 $x348)))
 (let (($x274 (and $x305 $x334)))
 (let (($x339 (and $x274 $x83)))
 (let (($x82 (and $x339 $x357)))
 (let (($x303 (and $x82 $x201)))
 (let (($x32 (and $x303 $x371)))
 (let (($x22 (and $x32 $x393)))
 (let (($x88 (and $x22 $x94)))
 (let (($x27 (and $x88 $x269)))
 (let (($x188 (and $x27 $x377)))
 (let (($x295 (and $x188 $x192)))
 (let (($x189 (and $x353 $x228)))
 (let (($x97 (and $x319 $x189)))
 (let (($x403 (and $x110 $x97)))
 (let (($x239 (and $x403 $x295)))
 (let (($x391 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x185 (and $x391 $x239)))
 (let (($x385 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x332 (and $x385 $x185)))
 (let (($x355 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x366 (and $x355 $x332)))
 (let (($x102 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x142 (and $x102 $x366)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x78 (and $x163 $x142)))
 (let (($x352 (and $x46 $x78)))
 (let (($x176 (= ?x267 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x360 (and $x176 $x352)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x424 (and $x74 $x360)))
 (let (($x417 (and $x46 $x424)))
 (let (($x247 (= ?x292 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x166 (and $x247 $x417)))
 (let (($x294 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x299 (and $x294 $x166)))
 (let (($x358 (and $x46 $x299)))
 (let (($x164 (= ?x412 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x67 (and $x164 $x358)))
 (let (($x328 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x421 (and $x328 $x67)))
 (let (($x343 (and $x46 $x421)))
 (let (($x324 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x44 (and $x324 $x343)))
 (let (($x204 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x121 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x225)))
 (let (($x123 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x121 $x204)))))))
 (let (($x148 (bvugt ?x23 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x180 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x193)))
 (let (($x220 (=> (bvule ?x23 (bvsub (bvadd ?x23 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x180 $x148)))))))
 (let (($x29 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x245 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x80)))
 (let (($x19 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x245 $x29)))))))
 (let (($x34 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x227 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x288 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x227)))
 (let (($x143 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x288 $x34)))))))
 (let (($x187 (and $x143 $x19)))
 (let (($x108 (and $x187 $x220)))
 (let (($x127 (and $x108 $x123)))
 (let (($x273 (and $x127 $x44)))
 (let (($x252 (=> $x273 $x312)))
 (not $x252)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 70
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x124 (bvadd ?x208 ?x51)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x224 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x203 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x148 (bvadd ?x203 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x148) (concat ?x271 ?x224))))
 (let ((?x397 (bvmul (_ bv4294967295 32) ?x159)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x293 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x204 (bvadd ?x128 (_ bv3 32))))
 (let ((?x335 (concat (select input.dst.llvm-mem ?x204) (concat ?x349 ?x293))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x29 (bvadd ?x68 (_ bv3 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem ?x29) (concat ?x106 ?x287))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x322)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x413)))
 (let ((?x85 (bvadd (bvadd (bvadd ?x48 ?x242) ?x335) ?x397)))
 (let (($x8 (= ?x85 ?x124)))
 (let (($x198 (= $x8 true)))
 (let (($x276 (= $x198 true)))
 (let (($x42 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x165 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x401 (=> $x149 $x42)))
 (let (($x297 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x307 (= $x149 $x297)))
 (let (($x412 (= false false)))
 (let (($x354 (= ?x165 (_ bv0 32))))
 (let (($x173 (=> $x354 $x412)))
 (let (($x90 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x14 (= $x354 $x90)))
 (let (($x13 (and (and (and $x14 $x173) $x307) $x401)))
 (let (($x89 (= $x13 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x50 (= ?x292 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x403 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x403 (_ bv1 32))))
 (let (($x155 (=> $x152 $x50)))
 (let (($x229 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x359 (= $x152 $x229)))
 (let (($x222 (= ?x403 (_ bv0 32))))
 (let (($x411 (=> $x222 $x412)))
 (let (($x342 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x260 (= $x222 $x342)))
 (let (($x18 (and (and (and $x260 $x411) $x359) $x155)))
 (let (($x41 (= $x18 true)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x421 (= ?x267 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x150 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x228 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x228 (_ bv1 32))))
 (let (($x343 (=> $x166 $x421)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x358 (= $x166 $x299)))
 (let (($x189 (= ?x228 (_ bv0 32))))
 (let (($x417 (=> $x189 $x412)))
 (let (($x360 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x424 (= $x189 $x360)))
 (let (($x49 (and (and (and $x424 $x417) $x358) $x343)))
 (let (($x261 (= $x49 true)))
 (let (($x295 (= ?x208 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x319 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x353 (ite $x319 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x353 (_ bv1 32))))
 (let (($x239 (=> $x99 $x295)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x255 (= $x99 $x221)))
 (let (($x168 (= ?x353 (_ bv0 32))))
 (let (($x350 (=> $x168 $x412)))
 (let (($x43 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x179 (= $x168 $x43)))
 (let (($x366 (and (and (and $x179 $x350) $x255) $x239)))
 (let (($x142 (= $x366 true)))
 (let (($x256 (forall ((input.ind-%var3245X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var3245X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x380))))
 (let ((?x363 (input.spec-%var-m-0.1.1 input.ind-%var3245X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3245X)))
 (=> $x111 (= ?x363 ?x268))))))))
 ))
 (let (($x27 (forall ((input.ind-%var3244X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3244X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3244X) (bvult input.ind-%var3244X (_ bv100 32))))))
 ))
 (let (($x259 (and $x27 $x256)))
 (let (($x321 (= $x259 true)))
 (let (($x386 (forall ((input.ind-%var3239X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var3239X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x380))))
 (let ((?x363 (input.spec-%var-m-0.1.1 input.ind-%var3239X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3239X)))
 (=> $x111 (= ?x363 ?x268))))))))
 ))
 (let (($x263 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3238X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3238X) (bvult input.ind-%var3238X (_ bv100 32))))))
 ))
 (let (($x367 (and $x263 $x386)))
 (let (($x405 (= $x367 true)))
 (let ((?x209 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x416 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x357 (concat ?x122 (concat ?x416 ?x209)))))
 (let (($x104 (= ?x82 input.dst.llvm-%m)))
 (let (($x373 (= $x104 true)))
 (let (($x129 (= $x373 true)))
 (let (($x144 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x217 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x26 (and true $x217)))
 (let (($x315 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x115 (and $x315 $x26)))
 (let (($x38 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv8 32))) (bvult ?x203 (bvsub ?x203 (_ bv8 32))))))
 (let (($x345 (and (and (and true $x38) $x115) $x237)))
 (let (($x334 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x274 (and true $x334)))
 (let (($x114 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x190 (and $x114 $x274)))
 (let (($x197 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x53 (and (and (and true $x114) $x197) $x190)))
 (let (($x136 (and (and $x53 $x345) $x144)))
 (let (($x241 (= input.dst.llvm-%m ?x82)))
 (let (($x418 (and $x241 $x136)))
 (let ((?x310 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x390 (= (_ bv0 32) ?x310)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x376 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (and $x314 $x376)))
 (let (($x394 (and $x351 $x390)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x200 $x394)))
 (let (($x414 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x396 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x396 $x414)))))))
 (let (($x278 (and (and (and $x87 true) $x300) $x418)))
 (let (($x101 (= $x278 true)))
 (let (($x103 (= $x101 true)))
 (let (($x184 (= $x103 true)))
 (let (($x378 (= $x136 true)))
 (let (($x392 (= $x378 true)))
 (let (($x39 (= $x392 true)))
 (let (($x83 (= $x53 true)))
 (let (($x339 (= $x83 true)))
 (let (($x17 (= $x339 true)))
 (let (($x61 (and $x345 $x144)))
 (let (($x36 (= $x61 true)))
 (let (($x131 (= $x36 true)))
 (let (($x75 (= $x131 true)))
 (let (($x331 (and $x87 $x300)))
 (let (($x58 (= $x331 true)))
 (let (($x6 (= $x58 true)))
 (let (($x172 (= $x6 true)))
 (let (($x320 (and $x172 $x75)))
 (let (($x211 (and $x320 $x17)))
 (let (($x329 (and $x211 $x39)))
 (let (($x347 (and $x329 $x184)))
 (let (($x341 (and $x347 $x129)))
 (let (($x153 (and $x341 $x405)))
 (let (($x100 (and $x153 $x321)))
 (let (($x78 (and $x100 $x142)))
 (let (($x126 (and $x78 $x261)))
 (let (($x236 (and $x126 $x41)))
 (let (($x327 (and $x236 $x89)))
 (let (($x125 (and $x222 $x149)))
 (let (($x116 (and $x189 $x125)))
 (let (($x258 (and $x99 $x116)))
 (let (($x186 (and $x258 $x327)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x372 (and $x368 $x186)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x379 (and $x110 $x372)))
 (let (($x64 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x398 (and $x64 $x379)))
 (let (($x174 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x316 (and $x174 $x398)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x181 (and $x15 $x316)))
 (let (($x182 (and $x412 $x181)))
 (let (($x333 (= ?x208 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x223 (and $x333 $x182)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x216 (and $x163 $x223)))
 (let (($x134 (and $x412 $x216)))
 (let (($x176 (= ?x267 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x137 (and $x176 $x134)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x63 (and $x74 $x137)))
 (let (($x312 (and $x412 $x63)))
 (let (($x247 (= ?x292 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x252 (and $x247 $x312)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x62 (and $x118 $x252)))
 (let (($x285 (and $x412 $x62)))
 (let (($x117 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x160 (and $x117 $x285)))
 (let (($x230 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x167 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x230)))))))
 (let (($x119 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x91 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x119)))))))
 (let (($x254 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x16 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x207 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x16)))))))
 (let (($x311 (and $x207 $x23)))
 (let (($x265 (and $x311 $x91)))
 (let (($x233 (and $x265 $x167)))
 (let (($x107 (and $x233 $x160)))
 (let (($x381 (=> $x107 $x276)))
 (not $x381))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let ((?x124 (bvadd ?x208 ?x51)))
 (let ((?x280 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x224 (concat ?x280 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x271 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x203 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x148 (bvadd ?x203 (_ bv3 32))))
 (let ((?x159 (concat (select input.dst.llvm-mem ?x148) (concat ?x271 ?x224))))
 (let ((?x397 (bvmul (_ bv4294967295 32) ?x159)))
 (let ((?x296 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x293 (concat ?x296 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x349 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x204 (bvadd ?x128 (_ bv3 32))))
 (let ((?x335 (concat (select input.dst.llvm-mem ?x204) (concat ?x349 ?x293))))
 (let ((?x154 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x287 (concat ?x154 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x106 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x29 (bvadd ?x68 (_ bv3 32))))
 (let ((?x242 (concat (select input.dst.llvm-mem ?x29) (concat ?x106 ?x287))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x413 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x322)))
 (let ((?x48 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x413)))
 (let ((?x85 (bvadd (bvadd (bvadd ?x48 ?x242) ?x335) ?x397)))
 (let (($x8 (= ?x85 ?x124)))
 (let (($x198 (= $x8 true)))
 (let (($x276 (= $x198 true)))
 (let (($x42 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x289 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x165 (ite $x289 (_ bv1 32) (_ bv0 32))))
 (let (($x149 (bvuge ?x165 (_ bv1 32))))
 (let (($x401 (=> $x149 $x42)))
 (let (($x297 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x307 (= $x149 $x297)))
 (let (($x412 (= false false)))
 (let (($x354 (= ?x165 (_ bv0 32))))
 (let (($x173 (=> $x354 $x412)))
 (let (($x90 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x14 (= $x354 $x90)))
 (let (($x13 (and (and (and $x14 $x173) $x307) $x401)))
 (let (($x89 (= $x13 true)))
 (let ((?x292 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x50 (= ?x292 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x97 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x403 (ite $x97 (_ bv1 32) (_ bv0 32))))
 (let (($x152 (bvuge ?x403 (_ bv1 32))))
 (let (($x155 (=> $x152 $x50)))
 (let (($x229 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x359 (= $x152 $x229)))
 (let (($x222 (= ?x403 (_ bv0 32))))
 (let (($x411 (=> $x222 $x412)))
 (let (($x342 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x260 (= $x222 $x342)))
 (let (($x18 (and (and (and $x260 $x411) $x359) $x155)))
 (let (($x41 (= $x18 true)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x421 (= ?x267 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x150 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x228 (ite $x150 (_ bv1 32) (_ bv0 32))))
 (let (($x166 (bvuge ?x228 (_ bv1 32))))
 (let (($x343 (=> $x166 $x421)))
 (let (($x299 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x358 (= $x166 $x299)))
 (let (($x189 (= ?x228 (_ bv0 32))))
 (let (($x417 (=> $x189 $x412)))
 (let (($x360 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x424 (= $x189 $x360)))
 (let (($x49 (and (and (and $x424 $x417) $x358) $x343)))
 (let (($x261 (= $x49 true)))
 (let (($x295 (= ?x208 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x319 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x353 (ite $x319 (_ bv1 32) (_ bv0 32))))
 (let (($x99 (bvuge ?x353 (_ bv1 32))))
 (let (($x239 (=> $x99 $x295)))
 (let (($x221 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x255 (= $x99 $x221)))
 (let (($x168 (= ?x353 (_ bv0 32))))
 (let (($x350 (=> $x168 $x412)))
 (let (($x43 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x179 (= $x168 $x43)))
 (let (($x366 (and (and (and $x179 $x350) $x255) $x239)))
 (let (($x142 (= $x366 true)))
 (let (($x256 (forall ((input.ind-%var3245X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var3245X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x380))))
 (let ((?x363 (input.spec-%var-m-0.1.1 input.ind-%var3245X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3245X)))
 (=> $x111 (= ?x363 ?x268))))))))
 ))
 (let (($x27 (forall ((input.ind-%var3244X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3244X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3244X) (bvult input.ind-%var3244X (_ bv100 32))))))
 ))
 (let (($x259 (and $x27 $x256)))
 (let (($x321 (= $x259 true)))
 (let (($x386 (forall ((input.ind-%var3239X (_ BitVec 32)) )(let ((?x214 (bvadd (bvmul input.ind-%var3239X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x380 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv1 32))) (select input.dst.llvm-mem ?x214))))
 (let ((?x268 (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x214 (_ bv2 32))) ?x380))))
 (let ((?x363 (input.spec-%var-m-0.1.1 input.ind-%var3239X)))
 (let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3239X)))
 (=> $x111 (= ?x363 ?x268))))))))
 ))
 (let (($x263 (forall ((input.ind-%var3238X (_ BitVec 32)) )(let (($x111 (input.spec-%var-m-0.0.1 input.ind-%var3238X)))
 (= $x111 (and (bvule (_ bv0 32) input.ind-%var3238X) (bvult input.ind-%var3238X (_ bv100 32))))))
 ))
 (let (($x367 (and $x263 $x386)))
 (let (($x405 (= $x367 true)))
 (let ((?x209 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x416 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x122 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x357 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x82 (concat ?x357 (concat ?x122 (concat ?x416 ?x209)))))
 (let (($x104 (= ?x82 input.dst.llvm-%m)))
 (let (($x373 (= $x104 true)))
 (let (($x129 (= $x373 true)))
 (let (($x144 (= (bvand ?x203 (_ bv4294967292 32)) ?x203)))
 (let (($x237 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x217 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x26 (and true $x217)))
 (let (($x315 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x115 (and $x315 $x26)))
 (let (($x38 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x203 (bvsub ?x203 (_ bv8 32))) (bvult ?x203 (bvsub ?x203 (_ bv8 32))))))
 (let (($x345 (and (and (and true $x38) $x115) $x237)))
 (let (($x334 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x274 (and true $x334)))
 (let (($x114 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x190 (and $x114 $x274)))
 (let (($x197 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x53 (and (and (and true $x114) $x197) $x190)))
 (let (($x136 (and (and $x53 $x345) $x144)))
 (let (($x241 (= input.dst.llvm-%m ?x82)))
 (let (($x418 (and $x241 $x136)))
 (let ((?x310 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x390 (= (_ bv0 32) ?x310)))
 (let ((?x244 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x376 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x244)))
 (let (($x314 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x351 (and $x314 $x376)))
 (let (($x394 (and $x351 $x390)))
 (let (($x200 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x300 (and $x200 $x394)))
 (let (($x414 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x396 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x87 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x396 $x414)))))))
 (let (($x278 (and (and (and $x87 true) $x300) $x418)))
 (let (($x101 (= $x278 true)))
 (let (($x103 (= $x101 true)))
 (let (($x184 (= $x103 true)))
 (let (($x378 (= $x136 true)))
 (let (($x392 (= $x378 true)))
 (let (($x39 (= $x392 true)))
 (let (($x83 (= $x53 true)))
 (let (($x339 (= $x83 true)))
 (let (($x17 (= $x339 true)))
 (let (($x61 (and $x345 $x144)))
 (let (($x36 (= $x61 true)))
 (let (($x131 (= $x36 true)))
 (let (($x75 (= $x131 true)))
 (let (($x331 (and $x87 $x300)))
 (let (($x58 (= $x331 true)))
 (let (($x6 (= $x58 true)))
 (let (($x172 (= $x6 true)))
 (let (($x320 (and $x172 $x75)))
 (let (($x211 (and $x320 $x17)))
 (let (($x329 (and $x211 $x39)))
 (let (($x347 (and $x329 $x184)))
 (let (($x341 (and $x347 $x129)))
 (let (($x153 (and $x341 $x405)))
 (let (($x100 (and $x153 $x321)))
 (let (($x78 (and $x100 $x142)))
 (let (($x126 (and $x78 $x261)))
 (let (($x236 (and $x126 $x41)))
 (let (($x327 (and $x236 $x89)))
 (let (($x125 (and $x222 $x149)))
 (let (($x116 (and $x189 $x125)))
 (let (($x258 (and $x99 $x116)))
 (let (($x186 (and $x258 $x327)))
 (let (($x368 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x372 (and $x368 $x186)))
 (let (($x110 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x379 (and $x110 $x372)))
 (let (($x64 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x398 (and $x64 $x379)))
 (let (($x174 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x316 (and $x174 $x398)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x181 (and $x15 $x316)))
 (let (($x182 (and $x412 $x181)))
 (let (($x333 (= ?x208 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x223 (and $x333 $x182)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x216 (and $x163 $x223)))
 (let (($x134 (and $x412 $x216)))
 (let (($x176 (= ?x267 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x137 (and $x176 $x134)))
 (let (($x74 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x63 (and $x74 $x137)))
 (let (($x312 (and $x412 $x63)))
 (let (($x247 (= ?x292 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x252 (and $x247 $x312)))
 (let (($x118 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x62 (and $x118 $x252)))
 (let (($x285 (and $x412 $x62)))
 (let (($x117 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x160 (and $x117 $x285)))
 (let (($x230 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x277 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x204)))
 (let (($x167 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x277 $x230)))))))
 (let (($x119 (bvugt ?x203 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x11 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x148)))
 (let (($x91 (=> (bvule ?x203 (bvsub (bvadd ?x203 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x11 $x119)))))))
 (let (($x254 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x286 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x29)))
 (let (($x23 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x286 $x254)))))))
 (let (($x16 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x34 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x272 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x34)))
 (let (($x207 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x272 $x16)))))))
 (let (($x311 (and $x207 $x23)))
 (let (($x265 (and $x311 $x91)))
 (let (($x233 (and $x265 $x167)))
 (let (($x107 (and $x233 $x160)))
 (let (($x381 (=> $x107 $x276)))
 (not $x381))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 71
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x28 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x193 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x119 (bvadd ?x193 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x119) (concat ?x308 ?x28))))
 (let ((?x290 (bvmul (_ bv4294967295 32) ?x365)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x93 (concat ?x56 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x230 (bvadd ?x235 (_ bv3 32))))
 (let ((?x389 (concat (select input.dst.llvm-mem ?x230) (concat ?x65 ?x93))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x254 (bvadd ?x59 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x254) (concat ?x32 ?x195))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x374)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x76)))
 (let ((?x269 (bvadd (bvadd (bvadd ?x400 ?x191) ?x389) ?x290)))
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x419 (= ?x385 ?x269)))
 (let (($x253 (= $x419 true)))
 (let (($x383 (= $x253 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x238 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x183 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x183 (_ bv1 32))))
 (let (($x335 (=> $x12 $x238)))
 (let (($x296 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x162 (= $x12 $x296)))
 (let (($x292 (= false false)))
 (let (($x30 (= ?x183 (_ bv0 32))))
 (let (($x349 (=> $x30 $x292)))
 (let (($x96 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x55 (= $x30 $x96)))
 (let (($x248 (and (and (and $x55 $x349) $x162) $x335)))
 (let (($x246 (= $x248 true)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x106 (= ?x267 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x116 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x258 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x258 (_ bv1 32))))
 (let (($x109 (=> $x413 $x106)))
 (let (($x48 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x413 $x48)))
 (let (($x362 (= ?x258 (_ bv0 32))))
 (let (($x322 (=> $x362 $x292)))
 (let (($x10 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x407 (= $x362 $x10)))
 (let (($x287 (and (and (and $x407 $x322) $x364) $x109)))
 (let (($x318 (= $x287 true)))
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x62 (= ?x208 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x165 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x149 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (let (($x285 (=> $x137 $x62)))
 (let (($x63 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x312 (= $x137 $x63)))
 (let (($x125 (= ?x149 (_ bv0 32))))
 (let (($x134 (=> $x125 $x292)))
 (let (($x223 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x216 (= $x125 $x223)))
 (let (($x232 (and (and (and $x216 $x134) $x312) $x285)))
 (let (($x270 (= $x232 true)))
 (let (($x327 (= ?x385 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x189 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x222 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x222 (_ bv1 32))))
 (let (($x186 (=> $x289 $x327)))
 (let (($x401 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x289 $x401)))
 (let (($x297 (= ?x222 (_ bv0 32))))
 (let (($x42 (=> $x297 $x292)))
 (let (($x406 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x409 (= $x297 $x406)))
 (let (($x398 (and (and (and $x409 $x42) $x13) $x186)))
 (let (($x316 (= $x398 true)))
 (let (($x90 (forall ((input.ind-%var3283X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var3283X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x295))))
 (let ((?x205 (input.spec-%var-m-0.1.1 input.ind-%var3283X)))
 (let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3283X)))
 (=> $x97 (= ?x205 ?x360))))))))
 ))
 (let (($x126 (forall ((input.ind-%var3282X (_ BitVec 32)) )(let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3282X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var3282X) (bvult input.ind-%var3282X (_ bv100 32))))))
 ))
 (let (($x14 (and $x126 $x90)))
 (let (($x173 (= $x14 true)))
 (let (($x44 (forall ((input.ind-%var3277X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var3277X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x295))))
 (let ((?x205 (input.spec-%var-m-0.1.1 input.ind-%var3277X)))
 (let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3277X)))
 (=> $x97 (= ?x205 ?x360))))))))
 ))
 (let (($x268 (forall ((input.ind-%var3276X (_ BitVec 32)) )(let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3276X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var3276X) (bvult input.ind-%var3276X (_ bv100 32))))))
 ))
 (let (($x166 (and $x268 $x44)))
 (let (($x299 (= $x166 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x347 (concat ?x184 (concat ?x278 (concat ?x82 ?x81)))))
 (let (($x57 (= ?x347 input.dst.llvm-%m)))
 (let (($x375 (= $x57 true)))
 (let (($x263 (= $x375 true)))
 (let (($x422 (= (bvand ?x193 (_ bv4294967292 32)) ?x193)))
 (let (($x131 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x20 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x144 (and true $x20)))
 (let (($x115 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x61 (and $x115 $x144)))
 (let (($x275 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x193 (bvsub ?x193 (_ bv8 32))) (bvult ?x193 (bvsub ?x193 (_ bv8 32))))))
 (let (($x9 (and (and (and true $x275) $x61) $x131)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x211 (and true $x17)))
 (let (($x282 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x302 (and $x282 $x211)))
 (let (($x274 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x392 (and (and (and true $x282) $x274) $x302)))
 (let (($x146 (and (and $x392 $x9) $x422)))
 (let (($x104 (= input.dst.llvm-%m ?x347)))
 (let (($x373 (and $x104 $x146)))
 (let ((?x199 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x5 (= (_ bv0 32) ?x199)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x331 $x6)))
 (let (($x291 (and $x172 $x5)))
 (let (($x344 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x344 $x291)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x300 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x314 $x244)))))))
 (let (($x324 (and (and (and $x300 true) $x77) $x373)))
 (let (($x111 (= $x324 true)))
 (let (($x213 (= $x111 true)))
 (let (($x346 (= $x213 true)))
 (let (($x357 (= $x146 true)))
 (let (($x356 (= $x357 true)))
 (let (($x122 (= $x356 true)))
 (let (($x39 (= $x392 true)))
 (let (($x329 (= $x39 true)))
 (let (($x201 (= $x329 true)))
 (let (($x79 (and $x9 $x422)))
 (let (($x257 (= $x79 true)))
 (let (($x408 (= $x257 true)))
 (let (($x40 (= $x408 true)))
 (let (($x38 (and $x300 $x77)))
 (let (($x348 (= $x38 true)))
 (let (($x420 (= $x348 true)))
 (let (($x84 (= $x420 true)))
 (let (($x197 (and $x84 $x40)))
 (let (($x303 (and $x197 $x201)))
 (let (($x313 (and $x303 $x122)))
 (let (($x105 (and $x313 $x346)))
 (let (($x363 (and $x105 $x263)))
 (let (($x358 (and $x363 $x299)))
 (let (($x206 (and $x358 $x173)))
 (let (($x181 (and $x206 $x316)))
 (let (($x382 (and $x181 $x270)))
 (let (($x242 (and $x382 $x318)))
 (let (($x271 (and $x242 $x246)))
 (let (($x396 (and $x362 $x30)))
 (let (($x414 (and $x125 $x396)))
 (let (($x132 (and $x289 $x414)))
 (let (($x202 (and $x132 $x271)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x280 (and $x228 $x202)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x135 (and $x99 $x280)))
 (let (($x319 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x224 (and $x319 $x135)))
 (let (($x384 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x384 $x224)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x159 (and $x33 $x234)))
 (let (($x397 (and $x292 $x159)))
 (let (($x391 (= ?x385 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x85 (and $x391 $x397)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x124 (and $x15 $x85)))
 (let (($x8 (and $x292 $x124)))
 (let (($x333 (= ?x208 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x198 (and $x333 $x8)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x276 (and $x163 $x198)))
 (let (($x381 (and $x292 $x276)))
 (let (($x176 (= ?x267 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x240 (and $x176 $x381)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x7 (and $x21 $x240)))
 (let (($x262 (and $x292 $x7)))
 (let (($x294 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x161 (and $x294 $x262)))
 (let (($x281 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x328 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x281)))))))
 (let (($x266 (bvugt ?x193 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x225 (=> (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x266)))))))
 (let (($x72 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x73 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x80 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x73)))))))
 (let (($x245 (and $x80 $x203)))
 (let (($x180 (and $x245 $x225)))
 (let (($x121 (and $x180 $x328)))
 (let (($x133 (and $x121 $x161)))
 (let (($x309 (=> $x133 $x383)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x330 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x28 (concat ?x330 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x308 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x193 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x119 (bvadd ?x193 (_ bv3 32))))
 (let ((?x365 (concat (select input.dst.llvm-mem ?x119) (concat ?x308 ?x28))))
 (let ((?x290 (bvmul (_ bv4294967295 32) ?x365)))
 (let ((?x56 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x93 (concat ?x56 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x65 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x230 (bvadd ?x235 (_ bv3 32))))
 (let ((?x389 (concat (select input.dst.llvm-mem ?x230) (concat ?x65 ?x93))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x195 (concat ?x22 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x254 (bvadd ?x59 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x254) (concat ?x32 ?x195))))
 (let ((?x374 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x76 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x374)))
 (let ((?x400 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x76)))
 (let ((?x269 (bvadd (bvadd (bvadd ?x400 ?x191) ?x389) ?x290)))
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x419 (= ?x385 ?x269)))
 (let (($x253 (= $x419 true)))
 (let (($x383 (= $x253 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x238 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x231 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x183 (ite $x231 (_ bv1 32) (_ bv0 32))))
 (let (($x12 (bvuge ?x183 (_ bv1 32))))
 (let (($x335 (=> $x12 $x238)))
 (let (($x296 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x162 (= $x12 $x296)))
 (let (($x292 (= false false)))
 (let (($x30 (= ?x183 (_ bv0 32))))
 (let (($x349 (=> $x30 $x292)))
 (let (($x96 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x55 (= $x30 $x96)))
 (let (($x248 (and (and (and $x55 $x349) $x162) $x335)))
 (let (($x246 (= $x248 true)))
 (let ((?x267 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x106 (= ?x267 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x116 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x258 (ite $x116 (_ bv1 32) (_ bv0 32))))
 (let (($x413 (bvuge ?x258 (_ bv1 32))))
 (let (($x109 (=> $x413 $x106)))
 (let (($x48 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x364 (= $x413 $x48)))
 (let (($x362 (= ?x258 (_ bv0 32))))
 (let (($x322 (=> $x362 $x292)))
 (let (($x10 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x407 (= $x362 $x10)))
 (let (($x287 (and (and (and $x407 $x322) $x364) $x109)))
 (let (($x318 (= $x287 true)))
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x62 (= ?x208 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x165 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x149 (ite $x165 (_ bv1 32) (_ bv0 32))))
 (let (($x137 (bvuge ?x149 (_ bv1 32))))
 (let (($x285 (=> $x137 $x62)))
 (let (($x63 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x312 (= $x137 $x63)))
 (let (($x125 (= ?x149 (_ bv0 32))))
 (let (($x134 (=> $x125 $x292)))
 (let (($x223 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x216 (= $x125 $x223)))
 (let (($x232 (and (and (and $x216 $x134) $x312) $x285)))
 (let (($x270 (= $x232 true)))
 (let (($x327 (= ?x385 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x189 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x222 (ite $x189 (_ bv1 32) (_ bv0 32))))
 (let (($x289 (bvuge ?x222 (_ bv1 32))))
 (let (($x186 (=> $x289 $x327)))
 (let (($x401 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x13 (= $x289 $x401)))
 (let (($x297 (= ?x222 (_ bv0 32))))
 (let (($x42 (=> $x297 $x292)))
 (let (($x406 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x409 (= $x297 $x406)))
 (let (($x398 (and (and (and $x409 $x42) $x13) $x186)))
 (let (($x316 (= $x398 true)))
 (let (($x90 (forall ((input.ind-%var3283X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var3283X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x295))))
 (let ((?x205 (input.spec-%var-m-0.1.1 input.ind-%var3283X)))
 (let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3283X)))
 (=> $x97 (= ?x205 ?x360))))))))
 ))
 (let (($x126 (forall ((input.ind-%var3282X (_ BitVec 32)) )(let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3282X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var3282X) (bvult input.ind-%var3282X (_ bv100 32))))))
 ))
 (let (($x14 (and $x126 $x90)))
 (let (($x173 (= $x14 true)))
 (let (($x44 (forall ((input.ind-%var3277X (_ BitVec 32)) )(let ((?x221 (bvadd (bvmul input.ind-%var3277X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x295 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv1 32))) (select input.dst.llvm-mem ?x221))))
 (let ((?x360 (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x221 (_ bv2 32))) ?x295))))
 (let ((?x205 (input.spec-%var-m-0.1.1 input.ind-%var3277X)))
 (let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3277X)))
 (=> $x97 (= ?x205 ?x360))))))))
 ))
 (let (($x268 (forall ((input.ind-%var3276X (_ BitVec 32)) )(let (($x97 (input.spec-%var-m-0.0.1 input.ind-%var3276X)))
 (= $x97 (and (bvule (_ bv0 32) input.ind-%var3276X) (bvult input.ind-%var3276X (_ bv100 32))))))
 ))
 (let (($x166 (and $x268 $x44)))
 (let (($x299 (= $x166 true)))
 (let ((?x81 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x82 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x278 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x184 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x347 (concat ?x184 (concat ?x278 (concat ?x82 ?x81)))))
 (let (($x57 (= ?x347 input.dst.llvm-%m)))
 (let (($x375 (= $x57 true)))
 (let (($x263 (= $x375 true)))
 (let (($x422 (= (bvand ?x193 (_ bv4294967292 32)) ?x193)))
 (let (($x131 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x20 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x144 (and true $x20)))
 (let (($x115 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x61 (and $x115 $x144)))
 (let (($x275 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x193 (bvsub ?x193 (_ bv8 32))) (bvult ?x193 (bvsub ?x193 (_ bv8 32))))))
 (let (($x9 (and (and (and true $x275) $x61) $x131)))
 (let (($x17 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x211 (and true $x17)))
 (let (($x282 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x302 (and $x282 $x211)))
 (let (($x274 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x392 (and (and (and true $x282) $x274) $x302)))
 (let (($x146 (and (and $x392 $x9) $x422)))
 (let (($x104 (= input.dst.llvm-%m ?x347)))
 (let (($x373 (and $x104 $x146)))
 (let ((?x199 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x5 (= (_ bv0 32) ?x199)))
 (let ((?x58 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x6 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x58)))
 (let (($x331 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x172 (and $x331 $x6)))
 (let (($x291 (and $x172 $x5)))
 (let (($x344 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x77 (and $x344 $x291)))
 (let (($x244 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x314 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x300 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x314 $x244)))))))
 (let (($x324 (and (and (and $x300 true) $x77) $x373)))
 (let (($x111 (= $x324 true)))
 (let (($x213 (= $x111 true)))
 (let (($x346 (= $x213 true)))
 (let (($x357 (= $x146 true)))
 (let (($x356 (= $x357 true)))
 (let (($x122 (= $x356 true)))
 (let (($x39 (= $x392 true)))
 (let (($x329 (= $x39 true)))
 (let (($x201 (= $x329 true)))
 (let (($x79 (and $x9 $x422)))
 (let (($x257 (= $x79 true)))
 (let (($x408 (= $x257 true)))
 (let (($x40 (= $x408 true)))
 (let (($x38 (and $x300 $x77)))
 (let (($x348 (= $x38 true)))
 (let (($x420 (= $x348 true)))
 (let (($x84 (= $x420 true)))
 (let (($x197 (and $x84 $x40)))
 (let (($x303 (and $x197 $x201)))
 (let (($x313 (and $x303 $x122)))
 (let (($x105 (and $x313 $x346)))
 (let (($x363 (and $x105 $x263)))
 (let (($x358 (and $x363 $x299)))
 (let (($x206 (and $x358 $x173)))
 (let (($x181 (and $x206 $x316)))
 (let (($x382 (and $x181 $x270)))
 (let (($x242 (and $x382 $x318)))
 (let (($x271 (and $x242 $x246)))
 (let (($x396 (and $x362 $x30)))
 (let (($x414 (and $x125 $x396)))
 (let (($x132 (and $x289 $x414)))
 (let (($x202 (and $x132 $x271)))
 (let (($x228 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x280 (and $x228 $x202)))
 (let (($x99 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x135 (and $x99 $x280)))
 (let (($x319 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x224 (and $x319 $x135)))
 (let (($x384 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x234 (and $x384 $x224)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x159 (and $x33 $x234)))
 (let (($x397 (and $x292 $x159)))
 (let (($x391 (= ?x385 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x85 (and $x391 $x397)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x124 (and $x15 $x85)))
 (let (($x8 (and $x292 $x124)))
 (let (($x333 (= ?x208 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x198 (and $x333 $x8)))
 (let (($x163 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x276 (and $x163 $x198)))
 (let (($x381 (and $x292 $x276)))
 (let (($x176 (= ?x267 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x240 (and $x176 $x381)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x7 (and $x21 $x240)))
 (let (($x262 (and $x292 $x7)))
 (let (($x294 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x161 (and $x294 $x262)))
 (let (($x281 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x69 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x230)))
 (let (($x328 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x69 $x281)))))))
 (let (($x266 (bvugt ?x193 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x151 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x119)))
 (let (($x225 (=> (bvule ?x193 (bvsub (bvadd ?x193 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x151 $x266)))))))
 (let (($x72 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x45 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x254)))
 (let (($x203 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x45 $x72)))))))
 (let (($x73 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x16 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x194 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x16)))
 (let (($x80 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x194 $x73)))))))
 (let (($x245 (and $x80 $x203)))
 (let (($x180 (and $x245 $x225)))
 (let (($x121 (and $x180 $x328)))
 (let (($x133 (and $x121 $x161)))
 (let (($x309 (=> $x133 $x383)))
 (not $x309)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 72
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x350 (bvmul (_ bv4294967295 32) ?x208)))
 (let ((?x342 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x350)))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x152 (concat ?x359 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x266 (bvadd ?x148 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x266) (concat ?x155 ?x152))))
 (let ((?x306 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x411 (concat ?x343 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x128 (_ bv3 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem ?x281) (concat ?x169 ?x411))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x72 (bvadd ?x120 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x72) (concat ?x259 ?x256))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x405)))
 (let ((?x147 (bvadd (bvadd (bvadd ?x43 ?x260) ?x41) ?x306)))
 (let (($x177 (= ?x147 ?x342)))
 (let (($x66 (= $x177 true)))
 (let (($x301 (= $x66 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x337 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x212 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x394 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x394 (_ bv1 32))))
 (let (($x389 (=> $x200 $x337)))
 (let (($x56 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x138 (= $x200 $x56)))
 (let (($x267 (= false false)))
 (let (($x338 (= ?x394 (_ bv0 32))))
 (let (($x251 (=> $x338 $x267)))
 (let (($x92 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x65 (= $x338 $x92)))
 (let (($x188 (and (and (and $x65 $x251) $x138) $x389)))
 (let (($x60 (= $x188 true)))
 (let (($x32 (= ?x208 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x414 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x132 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x132 (_ bv1 32))))
 (let (($x393 (=> $x87 $x32)))
 (let (($x400 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x113 (= $x87 $x400)))
 (let (($x158 (= ?x132 (_ bv0 32))))
 (let (($x76 (=> $x158 $x267)))
 (let (($x415 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x374 (= $x158 $x415)))
 (let (($x195 (and (and (and $x374 $x76) $x113) $x393)))
 (let (($x284 (= $x195 true)))
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x385 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x183 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x30 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x30 (_ bv1 32))))
 (let (($x262 (=> $x396 $x7)))
 (let (($x276 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x381 (= $x396 $x276)))
 (let (($x397 (= ?x30 (_ bv0 32))))
 (let (($x198 (=> $x397 $x267)))
 (let (($x124 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x397 $x124)))
 (let (($x371 (and (and (and $x8 $x198) $x381) $x262)))
 (let (($x140 (= $x371 true)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x271 (= ?x110 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x362 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x362 (_ bv1 32))))
 (let (($x202 (=> $x238 $x271)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x248 (= $x238 $x335)))
 (let (($x231 (= ?x362 (_ bv0 32))))
 (let (($x293 (=> $x231 $x267)))
 (let (($x162 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x369 (= $x231 $x162)))
 (let (($x224 (and (and (and $x369 $x293) $x248) $x202)))
 (let (($x234 (= $x224 true)))
 (let (($x55 (forall ((input.ind-%var3321X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var3321X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x327))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var3321X)))
 (let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3321X)))
 (=> $x116 (= ?x112 ?x223))))))))
 ))
 (let (($x382 (forall ((input.ind-%var3320X (_ BitVec 32)) )(let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3320X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var3320X) (bvult input.ind-%var3320X (_ bv100 32))))))
 ))
 (let (($x349 (and $x382 $x55)))
 (let (($x215 (= $x349 true)))
 (let (($x160 (forall ((input.ind-%var3315X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var3315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x327))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var3315X)))
 (let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3315X)))
 (=> $x116 (= ?x112 ?x223))))))))
 ))
 (let (($x360 (forall ((input.ind-%var3314X (_ BitVec 32)) )(let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3314X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var3314X) (bvult input.ind-%var3314X (_ bv100 32))))))
 ))
 (let (($x137 (and $x360 $x160)))
 (let (($x63 (= $x137 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x346 (concat ?x324 (concat ?x347 ?x241)))))
 (let (($x380 (= ?x105 input.dst.llvm-%m)))
 (let (($x94 (= $x380 true)))
 (let (($x268 (= $x94 true)))
 (let (($x136 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x408 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x422 (and true $x114)))
 (let (($x61 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x79 (and $x61 $x422)))
 (let (($x345 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv8 32))) (bvult ?x148 (bvsub ?x148 (_ bv8 32))))))
 (let (($x141 (and (and (and true $x345) $x79) $x408)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x303 (and true $x201)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x196 (and $x53 $x303)))
 (let (($x211 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x356 (and (and (and true $x53) $x211) $x196)))
 (let (($x103 (and (and $x356 $x141) $x136)))
 (let (($x57 (= input.dst.llvm-%m ?x105)))
 (let (($x375 (and $x57 $x103)))
 (let ((?x279 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x315 (= (_ bv0 32) ?x279)))
 (let ((?x348 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x420 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x38 $x420)))
 (let (($x298 (and $x84 $x315)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (and $x390 $x298)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x331 $x58)))))))
 (let (($x117 (and (and (and $x77 true) $x326) $x375)))
 (let (($x97 (= $x117 true)))
 (let (($x218 (= $x97 true)))
 (let (($x171 (= $x218 true)))
 (let (($x184 (= $x103 true)))
 (let (($x418 (= $x184 true)))
 (let (($x278 (= $x418 true)))
 (let (($x122 (= $x356 true)))
 (let (($x313 (= $x122 true)))
 (let (($x129 (= $x313 true)))
 (let (($x323 (and $x141 $x136)))
 (let (($x95 (= $x323 true)))
 (let (($x410 (= $x95 true)))
 (let (($x334 (= $x410 true)))
 (let (($x275 (and $x77 $x326)))
 (let (($x75 (= $x275 true)))
 (let (($x217 (= $x75 true)))
 (let (($x26 (= $x217 true)))
 (let (($x274 (and $x26 $x334)))
 (let (($x341 (and $x274 $x129)))
 (let (($x283 (and $x341 $x278)))
 (let (($x399 (and $x283 $x171)))
 (let (($x205 (and $x399 $x268)))
 (let (($x312 (and $x205 $x63)))
 (let (($x12 (and $x312 $x215)))
 (let (($x159 (and $x12 $x234)))
 (let (($x387 (and $x159 $x140)))
 (let (($x191 (and $x387 $x284)))
 (let (($x308 (and $x191 $x60)))
 (let (($x314 (and $x87 $x200)))
 (let (($x244 (and $x396 $x314)))
 (let (($x376 (and $x231 $x244)))
 (let (($x336 (and $x376 $x308)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x330 (and $x149 $x336)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x175 (and $x289 $x330)))
 (let (($x189 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x28 (and $x189 $x175)))
 (let (($x150 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x404 (and $x150 $x28)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x353 $x404)))
 (let (($x290 (and $x267 $x365)))
 (let (($x368 (= ?x110 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x269 (and $x368 $x290)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x419 (and $x33 $x269)))
 (let (($x253 (and $x267 $x419)))
 (let (($x391 (= ?x385 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x383 (and $x391 $x253)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x309 (and $x15 $x383)))
 (let (($x317 (and $x267 $x309)))
 (let (($x333 (= ?x208 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x157 (and $x333 $x317)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x139 (and $x25 $x157)))
 (let (($x209 (and $x267 $x139)))
 (let (($x74 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x403 (and $x74 $x209)))
 (let (($x127 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x118 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x127)))))))
 (let (($x108 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x108)))))))
 (let (($x187 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x70 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x29 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x70)))))))
 (let (($x286 (and $x29 $x193)))
 (let (($x11 (and $x286 $x204)))
 (let (($x277 (and $x11 $x118)))
 (let (($x164 (and $x277 $x403)))
 (let (($x54 (=> $x164 $x301)))
 (not $x54)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x208 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x350 (bvmul (_ bv4294967295 32) ?x208)))
 (let ((?x342 (bvadd (bvadd (input.spec-%var-m-0.1.1 (_ bv1 32)) (input.spec-%var-m-0.1.1 (_ bv3 32))) ?x350)))
 (let ((?x359 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x152 (concat ?x359 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x155 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x148 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x266 (bvadd ?x148 (_ bv3 32))))
 (let ((?x49 (concat (select input.dst.llvm-mem ?x266) (concat ?x155 ?x152))))
 (let ((?x306 (bvmul (_ bv4294967295 32) ?x49)))
 (let ((?x343 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x411 (concat ?x343 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x281 (bvadd ?x128 (_ bv3 32))))
 (let ((?x41 (concat (select input.dst.llvm-mem ?x281) (concat ?x169 ?x411))))
 (let ((?x27 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x256 (concat ?x27 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x259 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x72 (bvadd ?x120 (_ bv3 32))))
 (let ((?x260 (concat (select input.dst.llvm-mem ?x72) (concat ?x259 ?x256))))
 (let ((?x88 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x405 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x88)))
 (let ((?x43 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x405)))
 (let ((?x147 (bvadd (bvadd (bvadd ?x43 ?x260) ?x41) ?x306)))
 (let (($x177 (= ?x147 ?x342)))
 (let (($x66 (= $x177 true)))
 (let (($x301 (= $x66 true)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x337 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x212 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x394 (ite $x212 (_ bv1 32) (_ bv0 32))))
 (let (($x200 (bvuge ?x394 (_ bv1 32))))
 (let (($x389 (=> $x200 $x337)))
 (let (($x56 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x138 (= $x200 $x56)))
 (let (($x267 (= false false)))
 (let (($x338 (= ?x394 (_ bv0 32))))
 (let (($x251 (=> $x338 $x267)))
 (let (($x92 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x65 (= $x338 $x92)))
 (let (($x188 (and (and (and $x65 $x251) $x138) $x389)))
 (let (($x60 (= $x188 true)))
 (let (($x32 (= ?x208 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x414 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x132 (ite $x414 (_ bv1 32) (_ bv0 32))))
 (let (($x87 (bvuge ?x132 (_ bv1 32))))
 (let (($x393 (=> $x87 $x32)))
 (let (($x400 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x113 (= $x87 $x400)))
 (let (($x158 (= ?x132 (_ bv0 32))))
 (let (($x76 (=> $x158 $x267)))
 (let (($x415 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x374 (= $x158 $x415)))
 (let (($x195 (and (and (and $x374 $x76) $x113) $x393)))
 (let (($x284 (= $x195 true)))
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x7 (= ?x385 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x183 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x30 (ite $x183 (_ bv1 32) (_ bv0 32))))
 (let (($x396 (bvuge ?x30 (_ bv1 32))))
 (let (($x262 (=> $x396 $x7)))
 (let (($x276 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x381 (= $x396 $x276)))
 (let (($x397 (= ?x30 (_ bv0 32))))
 (let (($x198 (=> $x397 $x267)))
 (let (($x124 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x397 $x124)))
 (let (($x371 (and (and (and $x8 $x198) $x381) $x262)))
 (let (($x140 (= $x371 true)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x271 (= ?x110 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x125 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x362 (ite $x125 (_ bv1 32) (_ bv0 32))))
 (let (($x238 (bvuge ?x362 (_ bv1 32))))
 (let (($x202 (=> $x238 $x271)))
 (let (($x335 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x248 (= $x238 $x335)))
 (let (($x231 (= ?x362 (_ bv0 32))))
 (let (($x293 (=> $x231 $x267)))
 (let (($x162 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x369 (= $x231 $x162)))
 (let (($x224 (and (and (and $x369 $x293) $x248) $x202)))
 (let (($x234 (= $x224 true)))
 (let (($x55 (forall ((input.ind-%var3321X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var3321X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x327))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var3321X)))
 (let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3321X)))
 (=> $x116 (= ?x112 ?x223))))))))
 ))
 (let (($x382 (forall ((input.ind-%var3320X (_ BitVec 32)) )(let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3320X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var3320X) (bvult input.ind-%var3320X (_ bv100 32))))))
 ))
 (let (($x349 (and $x382 $x55)))
 (let (($x215 (= $x349 true)))
 (let (($x160 (forall ((input.ind-%var3315X (_ BitVec 32)) )(let ((?x401 (bvadd (bvmul input.ind-%var3315X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x327 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv1 32))) (select input.dst.llvm-mem ?x401))))
 (let ((?x223 (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x401 (_ bv2 32))) ?x327))))
 (let ((?x112 (input.spec-%var-m-0.1.1 input.ind-%var3315X)))
 (let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3315X)))
 (=> $x116 (= ?x112 ?x223))))))))
 ))
 (let (($x360 (forall ((input.ind-%var3314X (_ BitVec 32)) )(let (($x116 (input.spec-%var-m-0.0.1 input.ind-%var3314X)))
 (= $x116 (and (bvule (_ bv0 32) input.ind-%var3314X) (bvult input.ind-%var3314X (_ bv100 32))))))
 ))
 (let (($x137 (and $x360 $x160)))
 (let (($x63 (= $x137 true)))
 (let ((?x241 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x347 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x324 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x346 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x105 (concat ?x346 (concat ?x324 (concat ?x347 ?x241)))))
 (let (($x380 (= ?x105 input.dst.llvm-%m)))
 (let (($x94 (= $x380 true)))
 (let (($x268 (= $x94 true)))
 (let (($x136 (= (bvand ?x148 (_ bv4294967292 32)) ?x148)))
 (let (($x408 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x114 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x422 (and true $x114)))
 (let (($x61 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x79 (and $x61 $x422)))
 (let (($x345 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x148 (bvsub ?x148 (_ bv8 32))) (bvult ?x148 (bvsub ?x148 (_ bv8 32))))))
 (let (($x141 (and (and (and true $x345) $x79) $x408)))
 (let (($x201 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x303 (and true $x201)))
 (let (($x53 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x196 (and $x53 $x303)))
 (let (($x211 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x356 (and (and (and true $x53) $x211) $x196)))
 (let (($x103 (and (and $x356 $x141) $x136)))
 (let (($x57 (= input.dst.llvm-%m ?x105)))
 (let (($x375 (and $x57 $x103)))
 (let ((?x279 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x315 (= (_ bv0 32) ?x279)))
 (let ((?x348 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x420 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x348)))
 (let (($x38 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x84 (and $x38 $x420)))
 (let (($x298 (and $x84 $x315)))
 (let (($x390 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x326 (and $x390 $x298)))
 (let (($x58 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x331 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x77 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x331 $x58)))))))
 (let (($x117 (and (and (and $x77 true) $x326) $x375)))
 (let (($x97 (= $x117 true)))
 (let (($x218 (= $x97 true)))
 (let (($x171 (= $x218 true)))
 (let (($x184 (= $x103 true)))
 (let (($x418 (= $x184 true)))
 (let (($x278 (= $x418 true)))
 (let (($x122 (= $x356 true)))
 (let (($x313 (= $x122 true)))
 (let (($x129 (= $x313 true)))
 (let (($x323 (and $x141 $x136)))
 (let (($x95 (= $x323 true)))
 (let (($x410 (= $x95 true)))
 (let (($x334 (= $x410 true)))
 (let (($x275 (and $x77 $x326)))
 (let (($x75 (= $x275 true)))
 (let (($x217 (= $x75 true)))
 (let (($x26 (= $x217 true)))
 (let (($x274 (and $x26 $x334)))
 (let (($x341 (and $x274 $x129)))
 (let (($x283 (and $x341 $x278)))
 (let (($x399 (and $x283 $x171)))
 (let (($x205 (and $x399 $x268)))
 (let (($x312 (and $x205 $x63)))
 (let (($x12 (and $x312 $x215)))
 (let (($x159 (and $x12 $x234)))
 (let (($x387 (and $x159 $x140)))
 (let (($x191 (and $x387 $x284)))
 (let (($x308 (and $x191 $x60)))
 (let (($x314 (and $x87 $x200)))
 (let (($x244 (and $x396 $x314)))
 (let (($x376 (and $x231 $x244)))
 (let (($x336 (and $x376 $x308)))
 (let (($x149 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x330 (and $x149 $x336)))
 (let (($x289 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x175 (and $x289 $x330)))
 (let (($x189 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x28 (and $x189 $x175)))
 (let (($x150 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x404 (and $x150 $x28)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x365 (and $x353 $x404)))
 (let (($x290 (and $x267 $x365)))
 (let (($x368 (= ?x110 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x269 (and $x368 $x290)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x419 (and $x33 $x269)))
 (let (($x253 (and $x267 $x419)))
 (let (($x391 (= ?x385 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x383 (and $x391 $x253)))
 (let (($x15 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x309 (and $x15 $x383)))
 (let (($x317 (and $x267 $x309)))
 (let (($x333 (= ?x208 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x157 (and $x333 $x317)))
 (let (($x25 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x139 (and $x25 $x157)))
 (let (($x209 (and $x267 $x139)))
 (let (($x74 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x403 (and $x74 $x209)))
 (let (($x127 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x123 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x281)))
 (let (($x118 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x123 $x127)))))))
 (let (($x108 (bvugt ?x148 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x220 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x266)))
 (let (($x204 (=> (bvule ?x148 (bvsub (bvadd ?x148 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x220 $x108)))))))
 (let (($x187 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x19 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x72)))
 (let (($x193 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x19 $x187)))))))
 (let (($x70 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x73 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x143 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x73)))
 (let (($x29 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x143 $x70)))))))
 (let (($x286 (and $x29 $x193)))
 (let (($x11 (and $x286 $x204)))
 (let (($x277 (and $x11 $x118)))
 (let (($x164 (and $x277 $x403)))
 (let (($x54 (=> $x164 $x301)))
 (not $x54)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 73
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x292 (bvmul (_ bv4294967295 32) ?x385)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x270 (bvadd ?x110 ?x292)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x108 (bvadd ?x119 (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x108) (concat ?x364 ?x106))))
 (let ((?x242 (bvmul (_ bv4294967295 32) ?x109)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x107 (concat ?x407 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x127 (bvadd ?x235 (_ bv3 32))))
 (let ((?x366 (concat (select input.dst.llvm-mem ?x127) (concat ?x285 ?x107))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x406 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x187 (bvadd ?x31 (_ bv3 32))))
 (let ((?x14 (concat (select input.dst.llvm-mem ?x187) (concat ?x126 ?x173))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x424)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x78)))
 (let ((?x332 (bvadd (bvadd (bvadd ?x166 ?x14) ?x366) ?x242)))
 (let (($x417 (= ?x332 ?x270)))
 (let (($x42 (= $x417 true)))
 (let (($x325 (= $x42 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x35 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x130 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x291 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x291 (_ bv1 32))))
 (let (($x41 (=> $x421 $x35)))
 (let (($x343 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x273 (= $x421 $x343)))
 (let (($x208 (= false false)))
 (let (($x344 (= ?x291 (_ bv0 32))))
 (let (($x169 (=> $x344 $x208)))
 (let (($x18 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x214 (= $x344 $x18)))
 (let (($x67 (and (and (and $x214 $x169) $x273) $x41)))
 (let (($x86 (= $x67 true)))
 (let (($x259 (= ?x385 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x376 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x376 (_ bv1 32))))
 (let (($x100 (=> $x300 $x259)))
 (let (($x43 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x179 (= $x300 $x43)))
 (let (($x386 (= ?x376 (_ bv0 32))))
 (let (($x405 (=> $x386 $x208)))
 (let (($x423 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x88 (= $x386 $x423)))
 (let (($x256 (and (and (and $x88 $x405) $x179) $x100)))
 (let (($x168 (= $x256 true)))
 (let (($x139 (= ?x110 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x394 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x200 (ite $x394 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x200 (_ bv1 32))))
 (let (($x209 (=> $x314 $x139)))
 (let (($x309 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x317 (= $x314 $x309)))
 (let (($x290 (= ?x200 (_ bv0 32))))
 (let (($x383 (=> $x290 $x208)))
 (let (($x419 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x253 (= $x290 $x419)))
 (let (($x361 (and (and (and $x253 $x383) $x317) $x209)))
 (let (($x170 (= $x361 true)))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x308 (= ?x99 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x396 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x87 (ite $x396 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x87 (_ bv1 32))))
 (let (($x336 (=> $x337 $x308)))
 (let (($x389 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x188 (= $x337 $x389)))
 (let (($x212 (= ?x87 (_ bv0 32))))
 (let (($x93 (=> $x212 $x208)))
 (let (($x138 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x377 (= $x212 $x138)))
 (let (($x28 (and (and (and $x377 $x93) $x188) $x336)))
 (let (($x404 (= $x28 true)))
 (let (($x92 (forall ((input.ind-%var3359X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var3359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x271))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var3359X)))
 (let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3359X)))
 (=> $x414 (= ?x243 ?x85))))))))
 ))
 (let (($x387 (forall ((input.ind-%var3358X (_ BitVec 32)) )(let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3358X)))
 (= $x414 (and (bvule (_ bv0 32) input.ind-%var3358X) (bvult input.ind-%var3358X (_ bv100 32))))))
 ))
 (let (($x65 (and $x387 $x92)))
 (let (($x251 (= $x65 true)))
 (let (($x198 (forall ((input.ind-%var3353X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var3353X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x271))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var3353X)))
 (let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3353X)))
 (=> $x414 (= ?x243 ?x85))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3352X (_ BitVec 32)) )(let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3352X)))
 (= $x414 (and (bvule (_ bv0 32) input.ind-%var3352X) (bvult input.ind-%var3352X (_ bv100 32))))))
 ))
 (let (($x161 (and $x223 $x198)))
 (let (($x276 (= $x161 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x399 (concat ?x171 (concat ?x117 (concat ?x105 ?x104)))))
 (let (($x295 (= ?x399 input.dst.llvm-%m)))
 (let (($x142 (= $x295 true)))
 (let (($x360 (= $x142 true)))
 (let (($x146 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x410 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x282 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x136 (and true $x282)))
 (let (($x79 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x323 (and $x79 $x136)))
 (let (($x9 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv8 32))) (bvult ?x119 (bvsub ?x119 (_ bv8 32))))))
 (let (($x378 (and (and (and true $x9) $x323) $x410)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x341 (and true $x129)))
 (let (($x392 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x416 (and $x392 $x341)))
 (let (($x303 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x418 (and (and (and true $x392) $x303) $x416)))
 (let (($x213 (and (and $x418 $x378) $x146)))
 (let (($x380 (= input.dst.llvm-%m ?x399)))
 (let (($x94 (and $x380 $x213)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x115 (= (_ bv0 32) ?x71)))
 (let ((?x75 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x275 $x217)))
 (let (($x305 (and $x26 $x115)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x5 $x305)))
 (let (($x348 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x348)))))))
 (let (($x294 (and (and (and $x326 true) $x237) $x94)))
 (let (($x116 (= $x294 true)))
 (let (($x255 (= $x116 true)))
 (let (($x352 (= $x255 true)))
 (let (($x346 (= $x213 true)))
 (let (($x373 (= $x346 true)))
 (let (($x324 (= $x373 true)))
 (let (($x278 (= $x418 true)))
 (let (($x283 (= $x278 true)))
 (let (($x263 (= $x283 true)))
 (let (($x83 (and $x378 $x146)))
 (let (($x190 (= $x83 true)))
 (let (($x339 (= $x190 true)))
 (let (($x17 (= $x339 true)))
 (let (($x345 (and $x326 $x237)))
 (let (($x40 (= $x345 true)))
 (let (($x20 (= $x40 true)))
 (let (($x144 (= $x20 true)))
 (let (($x211 (and $x144 $x17)))
 (let (($x363 (and $x211 $x263)))
 (let (($x101 (and $x363 $x324)))
 (let (($x192 (and $x101 $x352)))
 (let (($x112 (and $x192 $x360)))
 (let (($x381 (and $x112 $x276)))
 (let (($x46 (and $x381 $x251)))
 (let (($x365 (and $x46 $x404)))
 (let (($x367 (and $x365 $x170)))
 (let (($x260 (and $x367 $x168)))
 (let (($x155 (and $x260 $x86)))
 (let (($x331 (and $x300 $x344)))
 (let (($x58 (and $x314 $x331)))
 (let (($x6 (and $x212 $x58)))
 (let (($x229 (and $x6 $x155)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x359 (and $x30 $x229)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x50 (and $x231 $x359)))
 (let (($x125 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x152 (and $x125 $x50)))
 (let (($x165 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x236 (and $x165 $x152)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x49 (and $x222 $x236)))
 (let (($x306 (and $x208 $x49)))
 (let (($x228 (= ?x99 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x147 (and $x228 $x306)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x354 (and $x353 $x147)))
 (let (($x350 (and $x208 $x354)))
 (let (($x368 (= ?x110 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x342 (and $x368 $x350)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x177 (and $x33 $x342)))
 (let (($x66 (and $x208 $x177)))
 (let (($x391 (= ?x385 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x301 (and $x391 $x66)))
 (let (($x355 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x54 (and $x355 $x301)))
 (let (($x388 (and $x208 $x54)))
 (let (($x163 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x227 (and $x163 $x388)))
 (let (($x233 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x21 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x233)))))))
 (let (($x265 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x230 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x265)))))))
 (let (($x311 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x178 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x254 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x178)))))))
 (let (($x45 (and $x254 $x148)))
 (let (($x151 (and $x45 $x230)))
 (let (($x69 (and $x151 $x21)))
 (let (($x351 (and $x69 $x227)))
 (let (($x10 (=> $x351 $x325)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x385 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x292 (bvmul (_ bv4294967295 32) ?x385)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x270 (bvadd ?x110 ?x292)))
 (let ((?x340 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x106 (concat ?x340 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x364 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x119 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x108 (bvadd ?x119 (_ bv3 32))))
 (let ((?x109 (concat (select input.dst.llvm-mem ?x108) (concat ?x364 ?x106))))
 (let ((?x242 (bvmul (_ bv4294967295 32) ?x109)))
 (let ((?x407 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x107 (concat ?x407 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x285 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x127 (bvadd ?x235 (_ bv3 32))))
 (let ((?x366 (concat (select input.dst.llvm-mem ?x127) (concat ?x285 ?x107))))
 (let ((?x406 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x173 (concat ?x406 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x126 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x187 (bvadd ?x31 (_ bv3 32))))
 (let ((?x14 (concat (select input.dst.llvm-mem ?x187) (concat ?x126 ?x173))))
 (let ((?x424 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x78 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x424)))
 (let ((?x166 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x78)))
 (let ((?x332 (bvadd (bvadd (bvadd ?x166 ?x14) ?x366) ?x242)))
 (let (($x417 (= ?x332 ?x270)))
 (let (($x42 (= $x417 true)))
 (let (($x325 (= $x42 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x35 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x130 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x291 (ite $x130 (_ bv1 32) (_ bv0 32))))
 (let (($x421 (bvuge ?x291 (_ bv1 32))))
 (let (($x41 (=> $x421 $x35)))
 (let (($x343 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x273 (= $x421 $x343)))
 (let (($x208 (= false false)))
 (let (($x344 (= ?x291 (_ bv0 32))))
 (let (($x169 (=> $x344 $x208)))
 (let (($x18 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x214 (= $x344 $x18)))
 (let (($x67 (and (and (and $x214 $x169) $x273) $x41)))
 (let (($x86 (= $x67 true)))
 (let (($x259 (= ?x385 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x244 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x376 (ite $x244 (_ bv1 32) (_ bv0 32))))
 (let (($x300 (bvuge ?x376 (_ bv1 32))))
 (let (($x100 (=> $x300 $x259)))
 (let (($x43 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x179 (= $x300 $x43)))
 (let (($x386 (= ?x376 (_ bv0 32))))
 (let (($x405 (=> $x386 $x208)))
 (let (($x423 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x88 (= $x386 $x423)))
 (let (($x256 (and (and (and $x88 $x405) $x179) $x100)))
 (let (($x168 (= $x256 true)))
 (let (($x139 (= ?x110 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x394 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x200 (ite $x394 (_ bv1 32) (_ bv0 32))))
 (let (($x314 (bvuge ?x200 (_ bv1 32))))
 (let (($x209 (=> $x314 $x139)))
 (let (($x309 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x317 (= $x314 $x309)))
 (let (($x290 (= ?x200 (_ bv0 32))))
 (let (($x383 (=> $x290 $x208)))
 (let (($x419 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x253 (= $x290 $x419)))
 (let (($x361 (and (and (and $x253 $x383) $x317) $x209)))
 (let (($x170 (= $x361 true)))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x308 (= ?x99 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x396 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x87 (ite $x396 (_ bv1 32) (_ bv0 32))))
 (let (($x337 (bvuge ?x87 (_ bv1 32))))
 (let (($x336 (=> $x337 $x308)))
 (let (($x389 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x188 (= $x337 $x389)))
 (let (($x212 (= ?x87 (_ bv0 32))))
 (let (($x93 (=> $x212 $x208)))
 (let (($x138 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x377 (= $x212 $x138)))
 (let (($x28 (and (and (and $x377 $x93) $x188) $x336)))
 (let (($x404 (= $x28 true)))
 (let (($x92 (forall ((input.ind-%var3359X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var3359X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x271))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var3359X)))
 (let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3359X)))
 (=> $x414 (= ?x243 ?x85))))))))
 ))
 (let (($x387 (forall ((input.ind-%var3358X (_ BitVec 32)) )(let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3358X)))
 (= $x414 (and (bvule (_ bv0 32) input.ind-%var3358X) (bvult input.ind-%var3358X (_ bv100 32))))))
 ))
 (let (($x65 (and $x387 $x92)))
 (let (($x251 (= $x65 true)))
 (let (($x198 (forall ((input.ind-%var3353X (_ BitVec 32)) )(let ((?x335 (bvadd (bvmul input.ind-%var3353X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x271 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv1 32))) (select input.dst.llvm-mem ?x335))))
 (let ((?x85 (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x335 (_ bv2 32))) ?x271))))
 (let ((?x243 (input.spec-%var-m-0.1.1 input.ind-%var3353X)))
 (let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3353X)))
 (=> $x414 (= ?x243 ?x85))))))))
 ))
 (let (($x223 (forall ((input.ind-%var3352X (_ BitVec 32)) )(let (($x414 (input.spec-%var-m-0.0.1 input.ind-%var3352X)))
 (= $x414 (and (bvule (_ bv0 32) input.ind-%var3352X) (bvult input.ind-%var3352X (_ bv100 32))))))
 ))
 (let (($x161 (and $x223 $x198)))
 (let (($x276 (= $x161 true)))
 (let ((?x104 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x105 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x117 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x171 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x399 (concat ?x171 (concat ?x117 (concat ?x105 ?x104)))))
 (let (($x295 (= ?x399 input.dst.llvm-%m)))
 (let (($x142 (= $x295 true)))
 (let (($x360 (= $x142 true)))
 (let (($x146 (= (bvand ?x119 (_ bv4294967292 32)) ?x119)))
 (let (($x410 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x282 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x136 (and true $x282)))
 (let (($x79 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x323 (and $x79 $x136)))
 (let (($x9 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x119 (bvsub ?x119 (_ bv8 32))) (bvult ?x119 (bvsub ?x119 (_ bv8 32))))))
 (let (($x378 (and (and (and true $x9) $x323) $x410)))
 (let (($x129 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x341 (and true $x129)))
 (let (($x392 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x416 (and $x392 $x341)))
 (let (($x303 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x418 (and (and (and true $x392) $x303) $x416)))
 (let (($x213 (and (and $x418 $x378) $x146)))
 (let (($x380 (= input.dst.llvm-%m ?x399)))
 (let (($x94 (and $x380 $x213)))
 (let ((?x71 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x115 (= (_ bv0 32) ?x71)))
 (let ((?x75 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x217 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x75)))
 (let (($x275 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x26 (and $x275 $x217)))
 (let (($x305 (and $x26 $x115)))
 (let (($x5 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x237 (and $x5 $x305)))
 (let (($x348 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x326 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x348)))))))
 (let (($x294 (and (and (and $x326 true) $x237) $x94)))
 (let (($x116 (= $x294 true)))
 (let (($x255 (= $x116 true)))
 (let (($x352 (= $x255 true)))
 (let (($x346 (= $x213 true)))
 (let (($x373 (= $x346 true)))
 (let (($x324 (= $x373 true)))
 (let (($x278 (= $x418 true)))
 (let (($x283 (= $x278 true)))
 (let (($x263 (= $x283 true)))
 (let (($x83 (and $x378 $x146)))
 (let (($x190 (= $x83 true)))
 (let (($x339 (= $x190 true)))
 (let (($x17 (= $x339 true)))
 (let (($x345 (and $x326 $x237)))
 (let (($x40 (= $x345 true)))
 (let (($x20 (= $x40 true)))
 (let (($x144 (= $x20 true)))
 (let (($x211 (and $x144 $x17)))
 (let (($x363 (and $x211 $x263)))
 (let (($x101 (and $x363 $x324)))
 (let (($x192 (and $x101 $x352)))
 (let (($x112 (and $x192 $x360)))
 (let (($x381 (and $x112 $x276)))
 (let (($x46 (and $x381 $x251)))
 (let (($x365 (and $x46 $x404)))
 (let (($x367 (and $x365 $x170)))
 (let (($x260 (and $x367 $x168)))
 (let (($x155 (and $x260 $x86)))
 (let (($x331 (and $x300 $x344)))
 (let (($x58 (and $x314 $x331)))
 (let (($x6 (and $x212 $x58)))
 (let (($x229 (and $x6 $x155)))
 (let (($x30 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x359 (and $x30 $x229)))
 (let (($x231 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x50 (and $x231 $x359)))
 (let (($x125 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x152 (and $x125 $x50)))
 (let (($x165 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x236 (and $x165 $x152)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x49 (and $x222 $x236)))
 (let (($x306 (and $x208 $x49)))
 (let (($x228 (= ?x99 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x147 (and $x228 $x306)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x354 (and $x353 $x147)))
 (let (($x350 (and $x208 $x354)))
 (let (($x368 (= ?x110 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x342 (and $x368 $x350)))
 (let (($x33 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x177 (and $x33 $x342)))
 (let (($x66 (and $x208 $x177)))
 (let (($x391 (= ?x385 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x301 (and $x391 $x66)))
 (let (($x355 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x54 (and $x355 $x301)))
 (let (($x388 (and $x208 $x54)))
 (let (($x163 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x227 (and $x163 $x388)))
 (let (($x233 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x167 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x127)))
 (let (($x21 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x167 $x233)))))))
 (let (($x265 (bvugt ?x119 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x91 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x108)))
 (let (($x230 (=> (bvule ?x119 (bvsub (bvadd ?x119 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x91 $x265)))))))
 (let (($x311 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x23 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x187)))
 (let (($x148 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x23 $x311)))))))
 (let (($x178 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x70 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x207 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x70)))
 (let (($x254 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x207 $x178)))))))
 (let (($x45 (and $x254 $x148)))
 (let (($x151 (and $x45 $x230)))
 (let (($x69 (and $x151 $x21)))
 (let (($x351 (and $x69 $x227)))
 (let (($x10 (=> $x351 $x325)))
 (not $x10)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 74
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x140 (bvadd ?x99 ?x51)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x400 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x265 (bvadd ?x266 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x265) (concat ?x22 ?x400))))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x191)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x7 (concat ?x133 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x233 (bvadd ?x128 (_ bv3 32))))
 (let ((?x76 (concat (select input.dst.llvm-mem ?x233) (concat ?x374 ?x7))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x311 (bvadd ?x68 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x311) (concat ?x55 ?x12))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x160)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x186)))
 (let ((?x293 (bvadd (bvadd (bvadd ?x63 ?x296) ?x76) ?x240)))
 (let (($x134 (= ?x293 ?x140)))
 (let (($x280 (= $x134 true)))
 (let (($x338 (= $x280 true)))
 (let (($x322 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x310 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x298 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x298 (_ bv1 32))))
 (let (($x366 (=> $x390 $x322)))
 (let (($x407 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x297 (= $x390 $x407)))
 (let (($x385 (= false false)))
 (let (($x252 (= ?x298 (_ bv0 32))))
 (let (($x409 (=> $x252 $x385)))
 (let (($x62 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x285 (= $x252 $x62)))
 (let (($x156 (and (and (and $x285 $x409) $x297) $x366)))
 (let (($x48 (= $x156 true)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x126 (= ?x110 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x58 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x6 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x6 (_ bv1 32))))
 (let (($x307 (=> $x78 $x126)))
 (let (($x166 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x358 (= $x78 $x166)))
 (let (($x77 (= ?x6 (_ bv0 32))))
 (let (($x424 (=> $x77 $x385)))
 (let (($x247 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x81 (= $x77 $x247)))
 (let (($x173 (and (and (and $x81 $x424) $x358) $x307)))
 (let (($x90 (= $x173 true)))
 (let (($x54 (= ?x99 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x291 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x344 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x344 (_ bv1 32))))
 (let (($x388 (=> $x331 $x54)))
 (let (($x177 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x66 (= $x331 $x177)))
 (let (($x306 (= ?x344 (_ bv0 32))))
 (let (($x342 (=> $x306 $x385)))
 (let (($x354 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x350 (= $x306 $x354)))
 (let (($x239 (and (and (and $x350 $x342) $x66) $x388)))
 (let (($x44 (= $x239 true)))
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x155 (= ?x289 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x314 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x300 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x300 (_ bv1 32))))
 (let (($x229 (=> $x35 $x155)))
 (let (($x41 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x67 (= $x35 $x41)))
 (let (($x130 (= ?x300 (_ bv0 32))))
 (let (($x411 (=> $x130 $x385)))
 (let (($x273 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x47 (= $x130 $x273)))
 (let (($x152 (and (and (and $x47 $x411) $x67) $x229)))
 (let (($x236 (= $x152 true)))
 (let (($x214 (forall ((input.ind-%var3397X (_ BitVec 32)) )(let ((?x389 (bvadd (bvmul input.ind-%var3397X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x308))))
 (let ((?x102 (input.spec-%var-m-0.1.1 input.ind-%var3397X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3397X)))
 (=> $x244 (= ?x102 ?x269))))))))
 ))
 (let (($x367 (forall ((input.ind-%var3396X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3396X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var3396X) (bvult input.ind-%var3396X (_ bv100 32))))))
 ))
 (let (($x169 (and $x367 $x214)))
 (let (($x261 (= $x169 true)))
 (let (($x383 (forall ((input.ind-%var3391X (_ BitVec 32)) )(let ((?x389 (bvadd (bvmul input.ind-%var3391X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x308))))
 (let ((?x102 (input.spec-%var-m-0.1.1 input.ind-%var3391X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3391X)))
 (=> $x244 (= ?x102 ?x269))))))))
 ))
 (let (($x85 (forall ((input.ind-%var3390X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3390X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var3390X) (bvult input.ind-%var3390X (_ bv100 32))))))
 ))
 (let (($x403 (and $x85 $x383)))
 (let (($x309 (= $x403 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x352 (concat ?x294 (concat ?x399 ?x57)))))
 (let (($x327 (= ?x192 input.dst.llvm-%m)))
 (let (($x316 (= $x327 true)))
 (let (($x223 (= $x316 true)))
 (let (($x103 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x339 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x146 (and true $x53)))
 (let (($x323 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x83 (and $x323 $x146)))
 (let (($x141 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv8 32))) (bvult ?x266 (bvsub ?x266 (_ bv8 32))))))
 (let (($x357 (and (and (and true $x141) $x83) $x339)))
 (let (($x263 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x363 (and true $x263)))
 (let (($x356 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x82 (and $x356 $x363)))
 (let (($x341 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x373 (and (and (and true $x356) $x341) $x82)))
 (let (($x218 (and (and $x373 $x357) $x103)))
 (let (($x295 (= input.dst.llvm-%m ?x192)))
 (let (($x142 (and $x295 $x218)))
 (let ((?x36 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x61 (= (_ bv0 32) ?x36)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x345 $x20)))
 (let (($x320 (and $x144 $x61)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x315 $x320)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x237 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x75)))))))
 (let (($x74 (and (and (and $x237 true) $x131) $x142)))
 (let (($x414 (= $x74 true)))
 (let (($x13 (= $x414 true)))
 (let (($x182 (= $x13 true)))
 (let (($x171 (= $x218 true)))
 (let (($x375 (= $x171 true)))
 (let (($x117 (= $x375 true)))
 (let (($x324 (= $x373 true)))
 (let (($x101 (= $x324 true)))
 (let (($x268 (= $x101 true)))
 (let (($x39 (and $x357 $x103)))
 (let (($x302 (= $x39 true)))
 (let (($x329 (= $x302 true)))
 (let (($x201 (= $x329 true)))
 (let (($x9 (and $x237 $x131)))
 (let (($x334 (= $x9 true)))
 (let (($x114 (= $x334 true)))
 (let (($x422 (= $x114 true)))
 (let (($x303 (and $x422 $x201)))
 (let (($x205 (and $x303 $x268)))
 (let (($x111 (and $x205 $x117)))
 (let (($x89 (and $x111 $x182)))
 (let (($x243 (and $x89 $x223)))
 (let (($x317 (and $x243 $x309)))
 (let (($x421 (and $x317 $x261)))
 (let (($x49 (and $x421 $x236)))
 (let (($x185 (and $x49 $x44)))
 (let (($x14 (and $x185 $x90)))
 (let (($x364 (and $x14 $x48)))
 (let (($x38 (and $x77 $x390)))
 (let (($x348 (and $x331 $x38)))
 (let (($x420 (and $x130 $x348)))
 (let (($x318 (and $x420 $x364)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x340 (and $x200 $x318)))
 (let (($x212 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x287 (and $x212 $x340)))
 (let (($x396 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x106 (and $x396 $x287)))
 (let (($x183 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x413 (and $x183 $x106)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x109 (and $x362 $x413)))
 (let (($x242 (and $x385 $x109)))
 (let (($x149 (= ?x289 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x332 (and $x149 $x242)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x292 (and $x222 $x332)))
 (let (($x270 (and $x385 $x292)))
 (let (($x228 (= ?x99 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x417 (and $x228 $x270)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x42 (and $x353 $x417)))
 (let (($x325 (and $x385 $x42)))
 (let (($x368 (= ?x110 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x10 (and $x368 $x325)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x96 (and $x64 $x10)))
 (let (($x34 (and $x385 $x96)))
 (let (($x15 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x172 (and $x15 $x34)))
 (let (($x121 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x25 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x328 $x121)))))))
 (let (($x180 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x281 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x180)))))))
 (let (($x245 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x264 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x72 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x264)))))))
 (let (($x19 (and $x72 $x119)))
 (let (($x220 (and $x19 $x281)))
 (let (($x123 (and $x220 $x25)))
 (let (($x241 (and $x123 $x172)))
 (let (($x250 (=> $x241 $x338)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let ((?x140 (bvadd ?x99 ?x51)))
 (let ((?x32 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x400 (concat ?x32 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x22 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x266 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x265 (bvadd ?x266 (_ bv3 32))))
 (let ((?x191 (concat (select input.dst.llvm-mem ?x265) (concat ?x22 ?x400))))
 (let ((?x240 (bvmul (_ bv4294967295 32) ?x191)))
 (let ((?x133 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x7 (concat ?x133 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x374 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x233 (bvadd ?x128 (_ bv3 32))))
 (let ((?x76 (concat (select input.dst.llvm-mem ?x233) (concat ?x374 ?x7))))
 (let ((?x215 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x12 (concat ?x215 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x311 (bvadd ?x68 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x311) (concat ?x55 ?x12))))
 (let ((?x160 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x186 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x160)))
 (let ((?x63 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x186)))
 (let ((?x293 (bvadd (bvadd (bvadd ?x63 ?x296) ?x76) ?x240)))
 (let (($x134 (= ?x293 ?x140)))
 (let (($x280 (= $x134 true)))
 (let (($x338 (= $x280 true)))
 (let (($x322 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x310 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x298 (ite $x310 (_ bv1 32) (_ bv0 32))))
 (let (($x390 (bvuge ?x298 (_ bv1 32))))
 (let (($x366 (=> $x390 $x322)))
 (let (($x407 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x297 (= $x390 $x407)))
 (let (($x385 (= false false)))
 (let (($x252 (= ?x298 (_ bv0 32))))
 (let (($x409 (=> $x252 $x385)))
 (let (($x62 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x285 (= $x252 $x62)))
 (let (($x156 (and (and (and $x285 $x409) $x297) $x366)))
 (let (($x48 (= $x156 true)))
 (let ((?x110 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x126 (= ?x110 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x58 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x6 (ite $x58 (_ bv1 32) (_ bv0 32))))
 (let (($x78 (bvuge ?x6 (_ bv1 32))))
 (let (($x307 (=> $x78 $x126)))
 (let (($x166 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x358 (= $x78 $x166)))
 (let (($x77 (= ?x6 (_ bv0 32))))
 (let (($x424 (=> $x77 $x385)))
 (let (($x247 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x81 (= $x77 $x247)))
 (let (($x173 (and (and (and $x81 $x424) $x358) $x307)))
 (let (($x90 (= $x173 true)))
 (let (($x54 (= ?x99 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x291 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x344 (ite $x291 (_ bv1 32) (_ bv0 32))))
 (let (($x331 (bvuge ?x344 (_ bv1 32))))
 (let (($x388 (=> $x331 $x54)))
 (let (($x177 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x66 (= $x331 $x177)))
 (let (($x306 (= ?x344 (_ bv0 32))))
 (let (($x342 (=> $x306 $x385)))
 (let (($x354 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x350 (= $x306 $x354)))
 (let (($x239 (and (and (and $x350 $x342) $x66) $x388)))
 (let (($x44 (= $x239 true)))
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x155 (= ?x289 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x314 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x300 (ite $x314 (_ bv1 32) (_ bv0 32))))
 (let (($x35 (bvuge ?x300 (_ bv1 32))))
 (let (($x229 (=> $x35 $x155)))
 (let (($x41 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x67 (= $x35 $x41)))
 (let (($x130 (= ?x300 (_ bv0 32))))
 (let (($x411 (=> $x130 $x385)))
 (let (($x273 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x47 (= $x130 $x273)))
 (let (($x152 (and (and (and $x47 $x411) $x67) $x229)))
 (let (($x236 (= $x152 true)))
 (let (($x214 (forall ((input.ind-%var3397X (_ BitVec 32)) )(let ((?x389 (bvadd (bvmul input.ind-%var3397X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x308))))
 (let ((?x102 (input.spec-%var-m-0.1.1 input.ind-%var3397X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3397X)))
 (=> $x244 (= ?x102 ?x269))))))))
 ))
 (let (($x367 (forall ((input.ind-%var3396X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3396X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var3396X) (bvult input.ind-%var3396X (_ bv100 32))))))
 ))
 (let (($x169 (and $x367 $x214)))
 (let (($x261 (= $x169 true)))
 (let (($x383 (forall ((input.ind-%var3391X (_ BitVec 32)) )(let ((?x389 (bvadd (bvmul input.ind-%var3391X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x308 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv1 32))) (select input.dst.llvm-mem ?x389))))
 (let ((?x269 (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x389 (_ bv2 32))) ?x308))))
 (let ((?x102 (input.spec-%var-m-0.1.1 input.ind-%var3391X)))
 (let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3391X)))
 (=> $x244 (= ?x102 ?x269))))))))
 ))
 (let (($x85 (forall ((input.ind-%var3390X (_ BitVec 32)) )(let (($x244 (input.spec-%var-m-0.0.1 input.ind-%var3390X)))
 (= $x244 (and (bvule (_ bv0 32) input.ind-%var3390X) (bvult input.ind-%var3390X (_ bv100 32))))))
 ))
 (let (($x403 (and $x85 $x383)))
 (let (($x309 (= $x403 true)))
 (let ((?x57 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x399 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x294 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x352 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x192 (concat ?x352 (concat ?x294 (concat ?x399 ?x57)))))
 (let (($x327 (= ?x192 input.dst.llvm-%m)))
 (let (($x316 (= $x327 true)))
 (let (($x223 (= $x316 true)))
 (let (($x103 (= (bvand ?x266 (_ bv4294967292 32)) ?x266)))
 (let (($x339 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x53 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x146 (and true $x53)))
 (let (($x323 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x83 (and $x323 $x146)))
 (let (($x141 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x266 (bvsub ?x266 (_ bv8 32))) (bvult ?x266 (bvsub ?x266 (_ bv8 32))))))
 (let (($x357 (and (and (and true $x141) $x83) $x339)))
 (let (($x263 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x363 (and true $x263)))
 (let (($x356 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x82 (and $x356 $x363)))
 (let (($x341 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x373 (and (and (and true $x356) $x341) $x82)))
 (let (($x218 (and (and $x373 $x357) $x103)))
 (let (($x295 (= input.dst.llvm-%m ?x192)))
 (let (($x142 (and $x295 $x218)))
 (let ((?x36 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x61 (= (_ bv0 32) ?x36)))
 (let ((?x40 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x20 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x40)))
 (let (($x345 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x144 (and $x345 $x20)))
 (let (($x320 (and $x144 $x61)))
 (let (($x315 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x131 (and $x315 $x320)))
 (let (($x75 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x275 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x237 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x275 $x75)))))))
 (let (($x74 (and (and (and $x237 true) $x131) $x142)))
 (let (($x414 (= $x74 true)))
 (let (($x13 (= $x414 true)))
 (let (($x182 (= $x13 true)))
 (let (($x171 (= $x218 true)))
 (let (($x375 (= $x171 true)))
 (let (($x117 (= $x375 true)))
 (let (($x324 (= $x373 true)))
 (let (($x101 (= $x324 true)))
 (let (($x268 (= $x101 true)))
 (let (($x39 (and $x357 $x103)))
 (let (($x302 (= $x39 true)))
 (let (($x329 (= $x302 true)))
 (let (($x201 (= $x329 true)))
 (let (($x9 (and $x237 $x131)))
 (let (($x334 (= $x9 true)))
 (let (($x114 (= $x334 true)))
 (let (($x422 (= $x114 true)))
 (let (($x303 (and $x422 $x201)))
 (let (($x205 (and $x303 $x268)))
 (let (($x111 (and $x205 $x117)))
 (let (($x89 (and $x111 $x182)))
 (let (($x243 (and $x89 $x223)))
 (let (($x317 (and $x243 $x309)))
 (let (($x421 (and $x317 $x261)))
 (let (($x49 (and $x421 $x236)))
 (let (($x185 (and $x49 $x44)))
 (let (($x14 (and $x185 $x90)))
 (let (($x364 (and $x14 $x48)))
 (let (($x38 (and $x77 $x390)))
 (let (($x348 (and $x331 $x38)))
 (let (($x420 (and $x130 $x348)))
 (let (($x318 (and $x420 $x364)))
 (let (($x200 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x340 (and $x200 $x318)))
 (let (($x212 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x287 (and $x212 $x340)))
 (let (($x396 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x106 (and $x396 $x287)))
 (let (($x183 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x413 (and $x183 $x106)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x109 (and $x362 $x413)))
 (let (($x242 (and $x385 $x109)))
 (let (($x149 (= ?x289 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x332 (and $x149 $x242)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x292 (and $x222 $x332)))
 (let (($x270 (and $x385 $x292)))
 (let (($x228 (= ?x99 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x417 (and $x228 $x270)))
 (let (($x353 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x42 (and $x353 $x417)))
 (let (($x325 (and $x385 $x42)))
 (let (($x368 (= ?x110 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x10 (and $x368 $x325)))
 (let (($x64 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x96 (and $x64 $x10)))
 (let (($x34 (and $x385 $x96)))
 (let (($x15 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x172 (and $x15 $x34)))
 (let (($x121 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x328 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x233)))
 (let (($x25 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x328 $x121)))))))
 (let (($x180 (bvugt ?x266 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x225 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x265)))
 (let (($x281 (=> (bvule ?x266 (bvsub (bvadd ?x266 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x225 $x180)))))))
 (let (($x245 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x203 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x311)))
 (let (($x119 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x203 $x245)))))))
 (let (($x264 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x178 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x80 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x178)))
 (let (($x72 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x80 $x264)))))))
 (let (($x19 (and $x72 $x119)))
 (let (($x220 (and $x19 $x281)))
 (let (($x123 (and $x220 $x25)))
 (let (($x241 (and $x123 $x172)))
 (let (($x250 (=> $x241 $x338)))
 (not $x250))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 75
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x179 (concat ?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x108 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x180 (bvadd ?x108 (_ bv3 32))))
 (let ((?x157 (concat (select input.dst.llvm-mem ?x180) (concat ?x321 ?x179))))
 (let ((?x361 (bvmul (_ bv4294967295 32) ?x157)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x209 (concat ?x139 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x121 (bvadd ?x235 (_ bv3 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem ?x121) (concat ?x335 ?x209))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x245 (bvadd ?x59 (_ bv3 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem ?x245) (concat ?x381 ?x387))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x238)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x161)))
 (let ((?x170 (bvadd (bvadd (bvadd ?x138 ?x208) ?x256) ?x361)))
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x8 (= ?x289 ?x170)))
 (let (($x330 (= $x8 true)))
 (let (($x412 (= $x330 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x401 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x199 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x305 (_ bv1 32))))
 (let (($x76 (=> $x415 $x401)))
 (let (($x133 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x267 (= $x415 $x133)))
 (let (($x110 (= false false)))
 (let (($x5 (= ?x305 (_ bv0 32))))
 (let (($x374 (=> $x5 $x110)))
 (let (($x398 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x262 (= $x5 $x398)))
 (let (($x393 (and (and (and $x262 $x374) $x267) $x76)))
 (let (($x113 (= $x393 true)))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x55 (= ?x99 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x348 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x420 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x420 (_ bv1 32))))
 (let (($x369 (=> $x186 $x55)))
 (let (($x63 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x349 (= $x186 $x63)))
 (let (($x326 (= ?x420 (_ bv0 32))))
 (let (($x160 (=> $x326 $x110)))
 (let (($x216 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x132 (= $x326 $x216)))
 (let (($x12 (and (and (and $x132 $x160) $x349) $x369)))
 (let (($x312 (= $x12 true)))
 (let (($x96 (= ?x289 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x298 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x390 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x390 (_ bv1 32))))
 (let (($x34 (=> $x38 $x96)))
 (let (($x42 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x325 (= $x38 $x42)))
 (let (($x242 (= ?x390 (_ bv0 32))))
 (let (($x417 (=> $x242 $x110)))
 (let (($x292 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x270 (= $x242 $x292)))
 (let (($x137 (and (and (and $x270 $x417) $x325) $x34)))
 (let (($x372 (= $x137 true)))
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x364 (= ?x231 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x77 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x77 (_ bv1 32))))
 (let (($x318 (=> $x322 $x364)))
 (let (($x366 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x156 (= $x322 $x366)))
 (let (($x310 (= ?x77 (_ bv0 32))))
 (let (($x107 (=> $x310 $x110)))
 (let (($x297 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x154 (= $x310 $x297)))
 (let (($x106 (and (and (and $x154 $x107) $x156) $x318)))
 (let (($x413 (= $x106 true)))
 (let (($x62 (forall ((input.ind-%var3435X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var3435X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x155))))
 (let ((?x174 (input.spec-%var-m-0.1.1 input.ind-%var3435X)))
 (let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3435X)))
 (=> $x58 (= ?x174 ?x147))))))))
 ))
 (let (($x185 (forall ((input.ind-%var3434X (_ BitVec 32)) )(let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3434X)))
 (= $x58 (and (bvule (_ bv0 32) input.ind-%var3434X) (bvult input.ind-%var3434X (_ bv100 32))))))
 ))
 (let (($x285 (and $x185 $x62)))
 (let (($x409 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var3429X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var3429X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x155))))
 (let ((?x174 (input.spec-%var-m-0.1.1 input.ind-%var3429X)))
 (let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3429X)))
 (=> $x58 (= ?x174 ?x147))))))))
 ))
 (let (($x269 (forall ((input.ind-%var3428X (_ BitVec 32)) )(let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3428X)))
 (= $x58 (and (bvule (_ bv0 32) input.ind-%var3428X) (bvult input.ind-%var3428X (_ bv100 32))))))
 ))
 (let (($x227 (and $x269 $x342)))
 (let (($x177 (= $x227 true)))
 (let ((?x380 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x182 (concat ?x74 (concat ?x192 ?x380)))))
 (let (($x271 (= ?x89 input.dst.llvm-%m)))
 (let (($x234 (= $x271 true)))
 (let (($x85 (= $x234 true)))
 (let (($x213 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x329 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x392 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x103 (and true $x392)))
 (let (($x83 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x39 (and $x83 $x103)))
 (let (($x378 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv8 32))) (bvult ?x108 (bvsub ?x108 (_ bv8 32))))))
 (let (($x184 (and (and (and true $x378) $x39) $x329)))
 (let (($x268 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x205 (and true $x268)))
 (let (($x418 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x347 (and $x418 $x205)))
 (let (($x363 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x375 (and (and (and true $x418) $x363) $x347)))
 (let (($x255 (and (and $x375 $x184) $x213)))
 (let (($x327 (= input.dst.llvm-%m ?x89)))
 (let (($x316 (and $x327 $x255)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x257)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x334)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x422 (and $x9 $x114)))
 (let (($x197 (and $x422 $x79)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x408 (and $x115 $x197)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x345 $x40)))))))
 (let (($x163 (and (and (and $x131 true) $x408) $x316)))
 (let (($x244 (= $x163 true)))
 (let (($x248 (= $x244 true)))
 (let (($x397 (= $x248 true)))
 (let (($x352 (= $x255 true)))
 (let (($x94 (= $x352 true)))
 (let (($x294 (= $x94 true)))
 (let (($x117 (= $x375 true)))
 (let (($x111 (= $x117 true)))
 (let (($x360 (= $x111 true)))
 (let (($x122 (and $x184 $x213)))
 (let (($x196 (= $x122 true)))
 (let (($x313 (= $x196 true)))
 (let (($x129 (= $x313 true)))
 (let (($x141 (and $x131 $x408)))
 (let (($x17 (= $x141 true)))
 (let (($x282 (= $x17 true)))
 (let (($x136 (= $x282 true)))
 (let (($x341 (and $x136 $x129)))
 (let (($x112 (and $x341 $x360)))
 (let (($x97 (and $x112 $x294)))
 (let (($x246 (and $x97 $x397)))
 (let (($x102 (and $x246 $x85)))
 (let (($x66 (and $x102 $x177)))
 (let (($x232 (and $x66 $x409)))
 (let (($x109 (and $x232 $x413)))
 (let (($x181 (and $x109 $x372)))
 (let (($x296 (and $x181 $x312)))
 (let (($x22 (and $x296 $x113)))
 (let (($x275 (and $x326 $x5)))
 (let (($x75 (and $x38 $x275)))
 (let (($x217 (and $x310 $x75)))
 (let (($x402 (and $x217 $x22)))
 (let (($x344 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x344 $x402)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x284 (and $x130 $x32)))
 (let (($x314 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x400 (and $x314 $x284)))
 (let (($x394 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x395 (and $x394 $x400)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x191 (and $x87 $x395)))
 (let (($x240 (and $x110 $x191)))
 (let (($x30 (= ?x231 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x293 (and $x30 $x240)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x140 (and $x362 $x293)))
 (let (($x134 (and $x110 $x140)))
 (let (($x149 (= ?x289 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x280 (and $x149 $x134)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x338 (and $x222 $x280)))
 (let (($x250 (and $x110 $x338)))
 (let (($x228 (= ?x99 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x210 (and $x228 $x250)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x16 (and $x319 $x210)))
 (let (($x84 (and $x110 $x16)))
 (let (($x33 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x104 (and $x33 $x84)))
 (let (($x277 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x355 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x277)))))))
 (let (($x11 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x127 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x11)))))))
 (let (($x286 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x266 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x187 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x219)))))))
 (let (($x23 (and $x187 $x266)))
 (let (($x91 (and $x23 $x127)))
 (let (($x167 (and $x91 $x355)))
 (let (($x376 (and $x167 $x104)))
 (let (($x145 (=> $x376 $x412)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x43 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x179 (concat ?x43 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x321 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x108 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x180 (bvadd ?x108 (_ bv3 32))))
 (let ((?x157 (concat (select input.dst.llvm-mem ?x180) (concat ?x321 ?x179))))
 (let ((?x361 (bvmul (_ bv4294967295 32) ?x157)))
 (let ((?x139 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x209 (concat ?x139 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x121 (bvadd ?x235 (_ bv3 32))))
 (let ((?x256 (concat (select input.dst.llvm-mem ?x121) (concat ?x335 ?x209))))
 (let ((?x46 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x387 (concat ?x46 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x381 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x245 (bvadd ?x59 (_ bv3 32))))
 (let ((?x208 (concat (select input.dst.llvm-mem ?x245) (concat ?x381 ?x387))))
 (let ((?x238 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x161 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x238)))
 (let ((?x138 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x161)))
 (let ((?x170 (bvadd (bvadd (bvadd ?x138 ?x208) ?x256) ?x361)))
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x8 (= ?x289 ?x170)))
 (let (($x330 (= $x8 true)))
 (let (($x412 (= $x330 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x401 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x199 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x305 (ite $x199 (_ bv1 32) (_ bv0 32))))
 (let (($x415 (bvuge ?x305 (_ bv1 32))))
 (let (($x76 (=> $x415 $x401)))
 (let (($x133 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x267 (= $x415 $x133)))
 (let (($x110 (= false false)))
 (let (($x5 (= ?x305 (_ bv0 32))))
 (let (($x374 (=> $x5 $x110)))
 (let (($x398 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x262 (= $x5 $x398)))
 (let (($x393 (and (and (and $x262 $x374) $x267) $x76)))
 (let (($x113 (= $x393 true)))
 (let ((?x99 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x55 (= ?x99 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x348 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x420 (ite $x348 (_ bv1 32) (_ bv0 32))))
 (let (($x186 (bvuge ?x420 (_ bv1 32))))
 (let (($x369 (=> $x186 $x55)))
 (let (($x63 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x349 (= $x186 $x63)))
 (let (($x326 (= ?x420 (_ bv0 32))))
 (let (($x160 (=> $x326 $x110)))
 (let (($x216 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x132 (= $x326 $x216)))
 (let (($x12 (and (and (and $x132 $x160) $x349) $x369)))
 (let (($x312 (= $x12 true)))
 (let (($x96 (= ?x289 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x298 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x390 (ite $x298 (_ bv1 32) (_ bv0 32))))
 (let (($x38 (bvuge ?x390 (_ bv1 32))))
 (let (($x34 (=> $x38 $x96)))
 (let (($x42 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x325 (= $x38 $x42)))
 (let (($x242 (= ?x390 (_ bv0 32))))
 (let (($x417 (=> $x242 $x110)))
 (let (($x292 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x270 (= $x242 $x292)))
 (let (($x137 (and (and (and $x270 $x417) $x325) $x34)))
 (let (($x372 (= $x137 true)))
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x364 (= ?x231 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x331 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x77 (ite $x331 (_ bv1 32) (_ bv0 32))))
 (let (($x322 (bvuge ?x77 (_ bv1 32))))
 (let (($x318 (=> $x322 $x364)))
 (let (($x366 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x156 (= $x322 $x366)))
 (let (($x310 (= ?x77 (_ bv0 32))))
 (let (($x107 (=> $x310 $x110)))
 (let (($x297 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x154 (= $x310 $x297)))
 (let (($x106 (and (and (and $x154 $x107) $x156) $x318)))
 (let (($x413 (= $x106 true)))
 (let (($x62 (forall ((input.ind-%var3435X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var3435X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x155))))
 (let ((?x174 (input.spec-%var-m-0.1.1 input.ind-%var3435X)))
 (let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3435X)))
 (=> $x58 (= ?x174 ?x147))))))))
 ))
 (let (($x185 (forall ((input.ind-%var3434X (_ BitVec 32)) )(let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3434X)))
 (= $x58 (and (bvule (_ bv0 32) input.ind-%var3434X) (bvult input.ind-%var3434X (_ bv100 32))))))
 ))
 (let (($x285 (and $x185 $x62)))
 (let (($x409 (= $x285 true)))
 (let (($x342 (forall ((input.ind-%var3429X (_ BitVec 32)) )(let ((?x41 (bvadd (bvmul input.ind-%var3429X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x155 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv1 32))) (select input.dst.llvm-mem ?x41))))
 (let ((?x147 (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x41 (_ bv2 32))) ?x155))))
 (let ((?x174 (input.spec-%var-m-0.1.1 input.ind-%var3429X)))
 (let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3429X)))
 (=> $x58 (= ?x174 ?x147))))))))
 ))
 (let (($x269 (forall ((input.ind-%var3428X (_ BitVec 32)) )(let (($x58 (input.spec-%var-m-0.0.1 input.ind-%var3428X)))
 (= $x58 (and (bvule (_ bv0 32) input.ind-%var3428X) (bvult input.ind-%var3428X (_ bv100 32))))))
 ))
 (let (($x227 (and $x269 $x342)))
 (let (($x177 (= $x227 true)))
 (let ((?x380 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x192 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x182 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x89 (concat ?x182 (concat ?x74 (concat ?x192 ?x380)))))
 (let (($x271 (= ?x89 input.dst.llvm-%m)))
 (let (($x234 (= $x271 true)))
 (let (($x85 (= $x234 true)))
 (let (($x213 (= (bvand ?x108 (_ bv4294967292 32)) ?x108)))
 (let (($x329 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x392 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x103 (and true $x392)))
 (let (($x83 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x39 (and $x83 $x103)))
 (let (($x378 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x108 (bvsub ?x108 (_ bv8 32))) (bvult ?x108 (bvsub ?x108 (_ bv8 32))))))
 (let (($x184 (and (and (and true $x378) $x39) $x329)))
 (let (($x268 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x205 (and true $x268)))
 (let (($x418 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x347 (and $x418 $x205)))
 (let (($x363 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x375 (and (and (and true $x418) $x363) $x347)))
 (let (($x255 (and (and $x375 $x184) $x213)))
 (let (($x327 (= input.dst.llvm-%m ?x89)))
 (let (($x316 (and $x327 $x255)))
 (let ((?x257 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x79 (= (_ bv0 32) ?x257)))
 (let ((?x334 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x114 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x334)))
 (let (($x9 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x422 (and $x9 $x114)))
 (let (($x197 (and $x422 $x79)))
 (let (($x115 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x408 (and $x115 $x197)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x345 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x131 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x345 $x40)))))))
 (let (($x163 (and (and (and $x131 true) $x408) $x316)))
 (let (($x244 (= $x163 true)))
 (let (($x248 (= $x244 true)))
 (let (($x397 (= $x248 true)))
 (let (($x352 (= $x255 true)))
 (let (($x94 (= $x352 true)))
 (let (($x294 (= $x94 true)))
 (let (($x117 (= $x375 true)))
 (let (($x111 (= $x117 true)))
 (let (($x360 (= $x111 true)))
 (let (($x122 (and $x184 $x213)))
 (let (($x196 (= $x122 true)))
 (let (($x313 (= $x196 true)))
 (let (($x129 (= $x313 true)))
 (let (($x141 (and $x131 $x408)))
 (let (($x17 (= $x141 true)))
 (let (($x282 (= $x17 true)))
 (let (($x136 (= $x282 true)))
 (let (($x341 (and $x136 $x129)))
 (let (($x112 (and $x341 $x360)))
 (let (($x97 (and $x112 $x294)))
 (let (($x246 (and $x97 $x397)))
 (let (($x102 (and $x246 $x85)))
 (let (($x66 (and $x102 $x177)))
 (let (($x232 (and $x66 $x409)))
 (let (($x109 (and $x232 $x413)))
 (let (($x181 (and $x109 $x372)))
 (let (($x296 (and $x181 $x312)))
 (let (($x22 (and $x296 $x113)))
 (let (($x275 (and $x326 $x5)))
 (let (($x75 (and $x38 $x275)))
 (let (($x217 (and $x310 $x75)))
 (let (($x402 (and $x217 $x22)))
 (let (($x344 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x32 (and $x344 $x402)))
 (let (($x130 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x284 (and $x130 $x32)))
 (let (($x314 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x400 (and $x314 $x284)))
 (let (($x394 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x395 (and $x394 $x400)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x191 (and $x87 $x395)))
 (let (($x240 (and $x110 $x191)))
 (let (($x30 (= ?x231 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x293 (and $x30 $x240)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x140 (and $x362 $x293)))
 (let (($x134 (and $x110 $x140)))
 (let (($x149 (= ?x289 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x280 (and $x149 $x134)))
 (let (($x222 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x338 (and $x222 $x280)))
 (let (($x250 (and $x110 $x338)))
 (let (($x228 (= ?x99 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x210 (and $x228 $x250)))
 (let (($x319 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x16 (and $x319 $x210)))
 (let (($x84 (and $x110 $x16)))
 (let (($x33 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x104 (and $x33 $x84)))
 (let (($x277 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x118 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x121)))
 (let (($x355 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x118 $x277)))))))
 (let (($x11 (bvugt ?x108 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x204 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x180)))
 (let (($x127 (=> (bvule ?x108 (bvsub (bvadd ?x108 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x204 $x11)))))))
 (let (($x286 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x193 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x245)))
 (let (($x266 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x193 $x286)))))))
 (let (($x219 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x264 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x29 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x264)))
 (let (($x187 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x29 $x219)))))))
 (let (($x23 (and $x187 $x266)))
 (let (($x91 (and $x23 $x127)))
 (let (($x167 (and $x91 $x355)))
 (let (($x376 (and $x167 $x104)))
 (let (($x145 (=> $x376 $x412)))
 (not $x145)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 76
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x359 (bvmul (_ bv4294967295 32) ?x289)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x252 (bvadd ?x51 ?x359)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x78 (concat ?x358 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x265 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x11 (bvadd ?x265 (_ bv3 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem ?x11) (concat ?x307 ?x78))))
 (let ((?x175 (bvmul (_ bv4294967295 32) ?x239)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x424 (concat ?x388 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x277 (bvadd ?x128 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x277) (concat ?x28 ?x424))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x367 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x286 (bvadd ?x120 (_ bv3 32))))
 (let ((?x81 (concat (select input.dst.llvm-mem ?x286) (concat ?x169 ?x214))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x365)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x309)))
 (let ((?x253 (bvadd (bvadd (bvadd ?x47 ?x81) ?x90) ?x175)))
 (let (($x247 (= ?x253 ?x252)))
 (let (($x221 (= $x247 true)))
 (let (($x386 (= $x221 true)))
 (let (($x224 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x320 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x320 (_ bv1 32))))
 (let (($x256 (=> $x315 $x224)))
 (let (($x139 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x423 (= $x315 $x139)))
 (let (($x99 (= false false)))
 (let (($x135 (= ?x320 (_ bv0 32))))
 (let (($x164 (=> $x135 $x99)))
 (let (($x88 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x135 $x88)))
 (let (($x260 (and (and (and $x335 $x164) $x423) $x256)))
 (let (($x27 (= $x260 true)))
 (let (($x381 (= ?x289 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x75 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x217 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x217 (_ bv1 32))))
 (let (($x251 (=> $x237 $x381)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x56 (= $x237 $x138)))
 (let (($x124 (= ?x217 (_ bv0 32))))
 (let (($x161 (=> $x124 $x99)))
 (let (($x333 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x238 (= $x124 $x333)))
 (let (($x387 (and (and (and $x238 $x161) $x56) $x251)))
 (let (($x65 (= $x387 true)))
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x16 (= ?x231 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x5 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x5 (_ bv1 32))))
 (let (($x84 (=> $x280 $x16)))
 (let (($x338 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x250 (= $x280 $x338)))
 (let (($x275 (= ?x5 (_ bv0 32))))
 (let (($x134 (=> $x275 $x99)))
 (let (($x293 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x140 (= $x275 $x293)))
 (let (($x276 (and (and (and $x140 $x134) $x250) $x84)))
 (let (($x159 (= $x276 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x212 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x38 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x326 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x401 (bvuge ?x326 (_ bv1 32))))
 (let (($x402 (=> $x401 $x22)))
 (let (($x76 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x393 (= $x401 $x76)))
 (let (($x199 (= ?x326 (_ bv0 32))))
 (let (($x7 (=> $x199 $x99)))
 (let (($x267 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x195 (= $x199 $x267)))
 (let (($x400 (and (and (and $x195 $x7) $x393) $x402)))
 (let (($x395 (= $x400 true)))
 (let (($x262 (forall ((input.ind-%var3473X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3473X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x364))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3473X)))
 (let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3473X)))
 (=> $x348 (= ?x384 ?x332))))))))
 ))
 (let (($x181 (forall ((input.ind-%var3472X (_ BitVec 32)) )(let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3472X)))
 (= $x348 (and (bvule (_ bv0 32) input.ind-%var3472X) (bvult input.ind-%var3472X (_ bv100 32))))))
 ))
 (let (($x374 (and $x181 $x262)))
 (let (($x379 (= $x374 true)))
 (let (($x417 (forall ((input.ind-%var3467X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3467X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x364))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3467X)))
 (let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3467X)))
 (=> $x348 (= ?x384 ?x332))))))))
 ))
 (let (($x147 (forall ((input.ind-%var3466X (_ BitVec 32)) )(let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3466X)))
 (= $x348 (and (bvule (_ bv0 32) input.ind-%var3466X) (bvult input.ind-%var3466X (_ bv100 32))))))
 ))
 (let (($x172 (and $x147 $x417)))
 (let (($x42 (= $x172 true)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x246 (concat ?x397 (concat ?x163 (concat ?x89 ?x295)))))
 (let (($x308 (= ?x246 input.dst.llvm-%m)))
 (let (($x404 (= $x308 true)))
 (let (($x269 (= $x404 true)))
 (let (($x218 (= (bvand ?x265 (_ bv4294967292 32)) ?x265)))
 (let (($x313 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x356 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x213 (and true $x356)))
 (let (($x39 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x122 (and $x39 $x213)))
 (let (($x357 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x265 (bvsub ?x265 (_ bv8 32))) (bvult ?x265 (bvsub ?x265 (_ bv8 32))))))
 (let (($x346 (and (and (and true $x357) $x122) $x313)))
 (let (($x360 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x112 (and true $x360)))
 (let (($x373 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x105 (and $x373 $x112)))
 (let (($x205 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x373) $x205) $x105)))
 (let (($x13 (and (and $x94 $x346) $x218)))
 (let (($x271 (= input.dst.llvm-%m ?x246)))
 (let (($x234 (and $x271 $x13)))
 (let ((?x95 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x323 (= (_ bv0 32) ?x95)))
 (let ((?x17 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x141 $x282)))
 (let (($x274 (and $x136 $x323)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (and $x61 $x274)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x408 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x334)))))))
 (let (($x15 (and (and (and $x408 true) $x410) $x234)))
 (let (($x58 (= $x15 true)))
 (let (($x188 (= $x58 true)))
 (let (($x290 (= $x188 true)))
 (let (($x182 (= $x13 true)))
 (let (($x142 (= $x182 true)))
 (let (($x74 (= $x142 true)))
 (let (($x294 (= $x94 true)))
 (let (($x97 (= $x294 true)))
 (let (($x223 (= $x97 true)))
 (let (($x278 (and $x346 $x218)))
 (let (($x416 (= $x278 true)))
 (let (($x283 (= $x416 true)))
 (let (($x263 (= $x283 true)))
 (let (($x378 (and $x408 $x410)))
 (let (($x201 (= $x378 true)))
 (let (($x53 (= $x201 true)))
 (let (($x146 (= $x53 true)))
 (let (($x363 (and $x146 $x263)))
 (let (($x243 (and $x363 $x223)))
 (let (($x116 (and $x243 $x74)))
 (let (($x60 (and $x116 $x290)))
 (let (($x174 (and $x60 $x269)))
 (let (($x325 (and $x174 $x42)))
 (let (($x415 (and $x325 $x379)))
 (let (($x191 (and $x415 $x395)))
 (let (($x202 (and $x191 $x159)))
 (let (($x208 (and $x202 $x65)))
 (let (($x321 (and $x208 $x27)))
 (let (($x345 (and $x237 $x315)))
 (let (($x40 (and $x275 $x345)))
 (let (($x20 (and $x199 $x40)))
 (let (($x259 (and $x20 $x321)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x43 (and $x390 $x259)))
 (let (($x310 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x153 (and $x310 $x43)))
 (let (($x331 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x179 (and $x331 $x153)))
 (let (($x291 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x100 (and $x291 $x179)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x157 (and $x300 $x100)))
 (let (($x361 (and $x99 $x157)))
 (let (($x200 (= ?x212 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x170 (and $x200 $x361)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x8 (and $x87 $x170)))
 (let (($x330 (and $x99 $x8)))
 (let (($x30 (= ?x231 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x412 (and $x30 $x330)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x145 (and $x362 $x412)))
 (let (($x18 (and $x99 $x145)))
 (let (($x149 (= ?x289 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x73 (and $x149 $x18)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x26 (and $x189 $x73)))
 (let (($x57 (and $x99 $x26)))
 (let (($x353 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x6 (and $x353 $x57)))
 (let (($x69 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x64 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x69)))))))
 (let (($x151 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x233 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x151)))))))
 (let (($x45 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x288 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x311 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x288)))))))
 (let (($x203 (and $x311 $x108)))
 (let (($x225 (and $x203 $x233)))
 (let (($x328 (and $x225 $x64)))
 (let (($x391 (and $x328 $x6)))
 (let (($x158 (=> $x391 $x386)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x289 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x359 (bvmul (_ bv4294967295 32) ?x289)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let ((?x252 (bvadd ?x51 ?x359)))
 (let ((?x358 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x78 (concat ?x358 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x307 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x265 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x11 (bvadd ?x265 (_ bv3 32))))
 (let ((?x239 (concat (select input.dst.llvm-mem ?x11) (concat ?x307 ?x78))))
 (let ((?x175 (bvmul (_ bv4294967295 32) ?x239)))
 (let ((?x388 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x424 (concat ?x388 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x28 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x277 (bvadd ?x128 (_ bv3 32))))
 (let ((?x90 (concat (select input.dst.llvm-mem ?x277) (concat ?x28 ?x424))))
 (let ((?x367 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x214 (concat ?x367 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x169 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x120 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x286 (bvadd ?x120 (_ bv3 32))))
 (let ((?x81 (concat (select input.dst.llvm-mem ?x286) (concat ?x169 ?x214))))
 (let ((?x365 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x309 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x365)))
 (let ((?x47 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x309)))
 (let ((?x253 (bvadd (bvadd (bvadd ?x47 ?x81) ?x90) ?x175)))
 (let (($x247 (= ?x253 ?x252)))
 (let (($x221 (= $x247 true)))
 (let (($x386 (= $x221 true)))
 (let (($x224 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x279 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x320 (ite $x279 (_ bv1 32) (_ bv0 32))))
 (let (($x315 (bvuge ?x320 (_ bv1 32))))
 (let (($x256 (=> $x315 $x224)))
 (let (($x139 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x423 (= $x315 $x139)))
 (let (($x99 (= false false)))
 (let (($x135 (= ?x320 (_ bv0 32))))
 (let (($x164 (=> $x135 $x99)))
 (let (($x88 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x335 (= $x135 $x88)))
 (let (($x260 (and (and (and $x335 $x164) $x423) $x256)))
 (let (($x27 (= $x260 true)))
 (let (($x381 (= ?x289 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x75 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x217 (ite $x75 (_ bv1 32) (_ bv0 32))))
 (let (($x237 (bvuge ?x217 (_ bv1 32))))
 (let (($x251 (=> $x237 $x381)))
 (let (($x138 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x56 (= $x237 $x138)))
 (let (($x124 (= ?x217 (_ bv0 32))))
 (let (($x161 (=> $x124 $x99)))
 (let (($x333 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x238 (= $x124 $x333)))
 (let (($x387 (and (and (and $x238 $x161) $x56) $x251)))
 (let (($x65 (= $x387 true)))
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x16 (= ?x231 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x305 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x5 (ite $x305 (_ bv1 32) (_ bv0 32))))
 (let (($x280 (bvuge ?x5 (_ bv1 32))))
 (let (($x84 (=> $x280 $x16)))
 (let (($x338 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x250 (= $x280 $x338)))
 (let (($x275 (= ?x5 (_ bv0 32))))
 (let (($x134 (=> $x275 $x99)))
 (let (($x293 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x140 (= $x275 $x293)))
 (let (($x276 (and (and (and $x140 $x134) $x250) $x84)))
 (let (($x159 (= $x276 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x22 (= ?x212 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x38 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x326 (ite $x38 (_ bv1 32) (_ bv0 32))))
 (let (($x401 (bvuge ?x326 (_ bv1 32))))
 (let (($x402 (=> $x401 $x22)))
 (let (($x76 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x393 (= $x401 $x76)))
 (let (($x199 (= ?x326 (_ bv0 32))))
 (let (($x7 (=> $x199 $x99)))
 (let (($x267 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x195 (= $x199 $x267)))
 (let (($x400 (and (and (and $x195 $x7) $x393) $x402)))
 (let (($x395 (= $x400 true)))
 (let (($x262 (forall ((input.ind-%var3473X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3473X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x364))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3473X)))
 (let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3473X)))
 (=> $x348 (= ?x384 ?x332))))))))
 ))
 (let (($x181 (forall ((input.ind-%var3472X (_ BitVec 32)) )(let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3472X)))
 (= $x348 (and (bvule (_ bv0 32) input.ind-%var3472X) (bvult input.ind-%var3472X (_ bv100 32))))))
 ))
 (let (($x374 (and $x181 $x262)))
 (let (($x379 (= $x374 true)))
 (let (($x417 (forall ((input.ind-%var3467X (_ BitVec 32)) )(let ((?x366 (bvadd (bvmul input.ind-%var3467X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x364 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv1 32))) (select input.dst.llvm-mem ?x366))))
 (let ((?x332 (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x366 (_ bv2 32))) ?x364))))
 (let ((?x384 (input.spec-%var-m-0.1.1 input.ind-%var3467X)))
 (let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3467X)))
 (=> $x348 (= ?x384 ?x332))))))))
 ))
 (let (($x147 (forall ((input.ind-%var3466X (_ BitVec 32)) )(let (($x348 (input.spec-%var-m-0.0.1 input.ind-%var3466X)))
 (= $x348 (and (bvule (_ bv0 32) input.ind-%var3466X) (bvult input.ind-%var3466X (_ bv100 32))))))
 ))
 (let (($x172 (and $x147 $x417)))
 (let (($x42 (= $x172 true)))
 (let ((?x295 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x89 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x163 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x397 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x246 (concat ?x397 (concat ?x163 (concat ?x89 ?x295)))))
 (let (($x308 (= ?x246 input.dst.llvm-%m)))
 (let (($x404 (= $x308 true)))
 (let (($x269 (= $x404 true)))
 (let (($x218 (= (bvand ?x265 (_ bv4294967292 32)) ?x265)))
 (let (($x313 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x356 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x213 (and true $x356)))
 (let (($x39 (= (bvand ?x120 (_ bv4294967292 32)) ?x120)))
 (let (($x122 (and $x39 $x213)))
 (let (($x357 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x265 (bvsub ?x265 (_ bv8 32))) (bvult ?x265 (bvsub ?x265 (_ bv8 32))))))
 (let (($x346 (and (and (and true $x357) $x122) $x313)))
 (let (($x360 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x112 (and true $x360)))
 (let (($x373 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x105 (and $x373 $x112)))
 (let (($x205 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x120 (bvsub ?x120 (_ bv12 32))) (bvult ?x120 (bvsub ?x120 (_ bv12 32))))))
 (let (($x94 (and (and (and true $x373) $x205) $x105)))
 (let (($x13 (and (and $x94 $x346) $x218)))
 (let (($x271 (= input.dst.llvm-%m ?x246)))
 (let (($x234 (and $x271 $x13)))
 (let ((?x95 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x323 (= (_ bv0 32) ?x95)))
 (let ((?x17 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x282 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x17)))
 (let (($x141 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x136 (and $x141 $x282)))
 (let (($x274 (and $x136 $x323)))
 (let (($x61 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x410 (and $x61 $x274)))
 (let (($x334 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x408 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x9 $x334)))))))
 (let (($x15 (and (and (and $x408 true) $x410) $x234)))
 (let (($x58 (= $x15 true)))
 (let (($x188 (= $x58 true)))
 (let (($x290 (= $x188 true)))
 (let (($x182 (= $x13 true)))
 (let (($x142 (= $x182 true)))
 (let (($x74 (= $x142 true)))
 (let (($x294 (= $x94 true)))
 (let (($x97 (= $x294 true)))
 (let (($x223 (= $x97 true)))
 (let (($x278 (and $x346 $x218)))
 (let (($x416 (= $x278 true)))
 (let (($x283 (= $x416 true)))
 (let (($x263 (= $x283 true)))
 (let (($x378 (and $x408 $x410)))
 (let (($x201 (= $x378 true)))
 (let (($x53 (= $x201 true)))
 (let (($x146 (= $x53 true)))
 (let (($x363 (and $x146 $x263)))
 (let (($x243 (and $x363 $x223)))
 (let (($x116 (and $x243 $x74)))
 (let (($x60 (and $x116 $x290)))
 (let (($x174 (and $x60 $x269)))
 (let (($x325 (and $x174 $x42)))
 (let (($x415 (and $x325 $x379)))
 (let (($x191 (and $x415 $x395)))
 (let (($x202 (and $x191 $x159)))
 (let (($x208 (and $x202 $x65)))
 (let (($x321 (and $x208 $x27)))
 (let (($x345 (and $x237 $x315)))
 (let (($x40 (and $x275 $x345)))
 (let (($x20 (and $x199 $x40)))
 (let (($x259 (and $x20 $x321)))
 (let (($x390 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x43 (and $x390 $x259)))
 (let (($x310 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x153 (and $x310 $x43)))
 (let (($x331 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x179 (and $x331 $x153)))
 (let (($x291 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x100 (and $x291 $x179)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x157 (and $x300 $x100)))
 (let (($x361 (and $x99 $x157)))
 (let (($x200 (= ?x212 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x170 (and $x200 $x361)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x8 (and $x87 $x170)))
 (let (($x330 (and $x99 $x8)))
 (let (($x30 (= ?x231 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x412 (and $x30 $x330)))
 (let (($x362 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x145 (and $x362 $x412)))
 (let (($x18 (and $x99 $x145)))
 (let (($x149 (= ?x289 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x73 (and $x149 $x18)))
 (let (($x189 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x26 (and $x189 $x73)))
 (let (($x57 (and $x99 $x26)))
 (let (($x353 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x6 (and $x353 $x57)))
 (let (($x69 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x21 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x277)))
 (let (($x64 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x21 $x69)))))))
 (let (($x151 (bvugt ?x265 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x230 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x11)))
 (let (($x233 (=> (bvule ?x265 (bvsub (bvadd ?x265 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x230 $x151)))))))
 (let (($x45 (bvugt ?x120 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x148 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x286)))
 (let (($x108 (=> (bvule ?x120 (bvsub (bvadd ?x120 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x148 $x45)))))))
 (let (($x288 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x219 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x254 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x219)))
 (let (($x311 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x254 $x288)))))))
 (let (($x203 (and $x311 $x108)))
 (let (($x225 (and $x203 $x233)))
 (let (($x328 (and $x225 $x64)))
 (let (($x391 (and $x328 $x6)))
 (let (($x158 (=> $x391 $x386)))
 (not $x158)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 259 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 77
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x372 (bvmul (_ bv4294967295 32) ?x231)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x180 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x151 (bvadd ?x180 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x151) (concat ?x186 ?x63))))
 (let ((?x10 (bvmul (_ bv4294967295 32) ?x296)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x96 (concat ?x241 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x69 (bvadd ?x235 (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x69) (concat ?x160 ?x96))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x232 (concat ?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x45 (bvadd ?x31 (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x45) (concat ?x62 ?x232))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x342)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x229)))
 (let ((?x107 (bvadd (bvadd (bvadd ?x177 ?x407) ?x215) ?x10)))
 (let (($x350 (= ?x107 ?x372)))
 (let (($x340 (= $x350 true)))
 (let (($x371 (= $x340 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x406 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x197 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x197 (_ bv1 32))))
 (let (($x90 (=> $x54 $x406)))
 (let (($x388 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x351 (= $x54 $x388)))
 (let (($x289 (= false false)))
 (let (($x115 (= ?x197 (_ bv0 32))))
 (let (($x28 (=> $x115 $x289)))
 (let (($x173 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x389 (= $x115 $x173)))
 (let (($x301 (and (and (and $x389 $x28) $x351) $x90)))
 (let (($x299 (= $x301 true)))
 (let (($x169 (= ?x231 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x40 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x20 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x20 (_ bv1 32))))
 (let (($x421 (=> $x131 $x169)))
 (let (($x47 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x385 (= $x131 $x47)))
 (let (($x383 (= ?x20 (_ bv0 32))))
 (let (($x309 (=> $x383 $x289)))
 (let (($x419 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x365 (= $x383 $x419)))
 (let (($x214 (and (and (and $x365 $x309) $x385) $x421)))
 (let (($x343 (= $x214 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x26 (= ?x212 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x315 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x315 (_ bv1 32))))
 (let (($x57 (=> $x412 $x26)))
 (let (($x145 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x18 (= $x412 $x145)))
 (let (($x345 (= ?x315 (_ bv0 32))))
 (let (($x330 (=> $x345 $x289)))
 (let (($x170 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x345 $x170)))
 (let (($x273 (and (and (and $x8 $x330) $x18) $x57)))
 (let (($x336 (= $x273 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x321 (= ?x130 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x237 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x237 (_ bv1 32))))
 (let (($x259 (=> $x224 $x321)))
 (let (($x256 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x260 (= $x224 $x256)))
 (let (($x279 (= ?x237 (_ bv0 32))))
 (let (($x209 (=> $x279 $x289)))
 (let (($x423 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x168 (= $x279 $x423)))
 (let (($x179 (and (and (and $x168 $x209) $x260) $x259)))
 (let (($x100 (= $x179 true)))
 (let (($x88 (forall ((input.ind-%var3511X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var3511X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x22))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var3511X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3511X)))
 (=> $x75 (= ?x150 ?x293))))))))
 ))
 (let (($x202 (forall ((input.ind-%var3510X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3510X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3510X) (bvult input.ind-%var3510X (_ bv100 32))))))
 ))
 (let (($x335 (and $x202 $x88)))
 (let (($x164 (= $x335 true)))
 (let (($x104 (forall ((input.ind-%var3505X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var3505X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x22))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var3505X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3505X)))
 (=> $x75 (= ?x150 ?x293))))))))
 ))
 (let (($x332 (forall ((input.ind-%var3504X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3504X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3504X) (bvult input.ind-%var3504X (_ bv100 32))))))
 ))
 (let (($x280 (and $x332 $x104)))
 (let (($x338 (= $x280 true)))
 (let ((?x327 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x290 (concat ?x15 (concat ?x246 ?x327)))))
 (let (($x155 (= ?x60 input.dst.llvm-%m)))
 (let (($x236 (= $x155 true)))
 (let (($x147 (= $x236 true)))
 (let (($x255 (= (bvand ?x180 (_ bv4294967292 32)) ?x180)))
 (let (($x283 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x418 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x218 (and true $x418)))
 (let (($x122 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x278 (and $x122 $x218)))
 (let (($x184 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x180 (bvsub ?x180 (_ bv8 32))) (bvult ?x180 (bvsub ?x180 (_ bv8 32))))))
 (let (($x171 (and (and (and true $x184) $x278) $x283)))
 (let (($x223 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x223)))
 (let (($x375 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x399 (and $x375 $x243)))
 (let (($x112 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x142 (and (and (and true $x375) $x112) $x399)))
 (let (($x248 (and (and $x142 $x171) $x255)))
 (let (($x308 (= input.dst.llvm-%m ?x60)))
 (let (($x404 (and $x308 $x248)))
 (let ((?x190 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x83 (= (_ bv0 32) ?x190)))
 (let ((?x201 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x378 $x53)))
 (let (($x211 (and $x146 $x83)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (and $x79 $x211)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x410 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x17)))))))
 (let (($x33 (and (and (and $x410 true) $x339) $x404)))
 (let (($x348 (= $x33 true)))
 (let (($x67 (= $x348 true)))
 (let (($x306 (= $x67 true)))
 (let (($x397 (= $x248 true)))
 (let (($x316 (= $x397 true)))
 (let (($x163 (= $x316 true)))
 (let (($x74 (= $x142 true)))
 (let (($x116 (= $x74 true)))
 (let (($x85 (= $x116 true)))
 (let (($x324 (and $x171 $x255)))
 (let (($x82 (= $x324 true)))
 (let (($x101 (= $x82 true)))
 (let (($x268 (= $x101 true)))
 (let (($x357 (and $x410 $x339)))
 (let (($x129 (= $x357 true)))
 (let (($x392 (= $x129 true)))
 (let (($x103 (= $x392 true)))
 (let (($x205 (and $x103 $x268)))
 (let (($x102 (and $x205 $x85)))
 (let (($x414 (and $x102 $x163)))
 (let (($x86 (and $x414 $x306)))
 (let (($x384 (and $x86 $x147)))
 (let (($x250 (and $x384 $x338)))
 (let (($x93 (and $x250 $x164)))
 (let (($x157 (and $x93 $x100)))
 (let (($x403 (and $x157 $x336)))
 (let (($x81 (and $x403 $x343)))
 (let (($x307 (and $x81 $x299)))
 (let (($x9 (and $x131 $x115)))
 (let (($x334 (and $x345 $x9)))
 (let (($x114 (and $x279 $x334)))
 (let (($x166 (and $x114 $x307)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x5 $x166)))
 (let (($x199 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x126 (and $x199 $x358)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x78 (and $x38 $x126)))
 (let (($x298 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x14 (and $x298 $x78)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x239 (and $x77 $x14)))
 (let (($x175 (and $x289 $x239)))
 (let (($x344 (= ?x130 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x253 (and $x344 $x175)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x359 (and $x300 $x253)))
 (let (($x252 (and $x289 $x359)))
 (let (($x200 (= ?x212 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x247 (and $x200 $x252)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x221 (and $x87 $x247)))
 (let (($x386 (and $x289 $x221)))
 (let (($x30 (= ?x231 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x158 (and $x30 $x386)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x304 (and $x125 $x158)))
 (let (($x70 (and $x289 $x304)))
 (let (($x222 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x144 (and $x222 $x70)))
 (let (($x123 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x319 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x123)))))))
 (let (($x220 (bvugt ?x180 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x121 (=> (bvule ?x180 (bvsub (bvadd ?x180 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x220)))))))
 (let (($x19 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x272 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x288 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x245 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x272)))))))
 (let (($x193 (and $x245 $x265)))
 (let (($x204 (and $x193 $x121)))
 (let (($x118 (and $x204 $x319)))
 (let (($x380 (and $x118 $x144)))
 (let (($x216 (=> $x380 $x371)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x231 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let ((?x372 (bvmul (_ bv4294967295 32) ?x231)))
 (let ((?x55 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x63 (concat ?x55 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x186 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x180 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x151 (bvadd ?x180 (_ bv3 32))))
 (let ((?x296 (concat (select input.dst.llvm-mem ?x151) (concat ?x186 ?x63))))
 (let ((?x10 (bvmul (_ bv4294967295 32) ?x296)))
 (let ((?x241 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x96 (concat ?x241 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x160 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x69 (bvadd ?x235 (_ bv3 32))))
 (let ((?x215 (concat (select input.dst.llvm-mem ?x69) (concat ?x160 ?x96))))
 (let ((?x409 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x232 (concat ?x409 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x62 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x31 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x45 (bvadd ?x31 (_ bv3 32))))
 (let ((?x407 (concat (select input.dst.llvm-mem ?x45) (concat ?x62 ?x232))))
 (let ((?x342 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x229 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x342)))
 (let ((?x177 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x229)))
 (let ((?x107 (bvadd (bvadd (bvadd ?x177 ?x407) ?x215) ?x10)))
 (let (($x350 (= ?x107 ?x372)))
 (let (($x340 (= $x350 true)))
 (let (($x371 (= $x340 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x406 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x71 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x197 (ite $x71 (_ bv1 32) (_ bv0 32))))
 (let (($x54 (bvuge ?x197 (_ bv1 32))))
 (let (($x90 (=> $x54 $x406)))
 (let (($x388 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x351 (= $x54 $x388)))
 (let (($x289 (= false false)))
 (let (($x115 (= ?x197 (_ bv0 32))))
 (let (($x28 (=> $x115 $x289)))
 (let (($x173 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x389 (= $x115 $x173)))
 (let (($x301 (and (and (and $x389 $x28) $x351) $x90)))
 (let (($x299 (= $x301 true)))
 (let (($x169 (= ?x231 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x40 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x20 (ite $x40 (_ bv1 32) (_ bv0 32))))
 (let (($x131 (bvuge ?x20 (_ bv1 32))))
 (let (($x421 (=> $x131 $x169)))
 (let (($x47 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x385 (= $x131 $x47)))
 (let (($x383 (= ?x20 (_ bv0 32))))
 (let (($x309 (=> $x383 $x289)))
 (let (($x419 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x365 (= $x383 $x419)))
 (let (($x214 (and (and (and $x365 $x309) $x385) $x421)))
 (let (($x343 (= $x214 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x26 (= ?x212 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x320 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x315 (ite $x320 (_ bv1 32) (_ bv0 32))))
 (let (($x412 (bvuge ?x315 (_ bv1 32))))
 (let (($x57 (=> $x412 $x26)))
 (let (($x145 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x18 (= $x412 $x145)))
 (let (($x345 (= ?x315 (_ bv0 32))))
 (let (($x330 (=> $x345 $x289)))
 (let (($x170 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x8 (= $x345 $x170)))
 (let (($x273 (and (and (and $x8 $x330) $x18) $x57)))
 (let (($x336 (= $x273 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x321 (= ?x130 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x275 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x237 (ite $x275 (_ bv1 32) (_ bv0 32))))
 (let (($x224 (bvuge ?x237 (_ bv1 32))))
 (let (($x259 (=> $x224 $x321)))
 (let (($x256 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x260 (= $x224 $x256)))
 (let (($x279 (= ?x237 (_ bv0 32))))
 (let (($x209 (=> $x279 $x289)))
 (let (($x423 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x168 (= $x279 $x423)))
 (let (($x179 (and (and (and $x168 $x209) $x260) $x259)))
 (let (($x100 (= $x179 true)))
 (let (($x88 (forall ((input.ind-%var3511X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var3511X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x22))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var3511X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3511X)))
 (=> $x75 (= ?x150 ?x293))))))))
 ))
 (let (($x202 (forall ((input.ind-%var3510X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3510X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3510X) (bvult input.ind-%var3510X (_ bv100 32))))))
 ))
 (let (($x335 (and $x202 $x88)))
 (let (($x164 (= $x335 true)))
 (let (($x104 (forall ((input.ind-%var3505X (_ BitVec 32)) )(let ((?x76 (bvadd (bvmul input.ind-%var3505X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x22 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv1 32))) (select input.dst.llvm-mem ?x76))))
 (let ((?x293 (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x76 (_ bv2 32))) ?x22))))
 (let ((?x150 (input.spec-%var-m-0.1.1 input.ind-%var3505X)))
 (let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3505X)))
 (=> $x75 (= ?x150 ?x293))))))))
 ))
 (let (($x332 (forall ((input.ind-%var3504X (_ BitVec 32)) )(let (($x75 (input.spec-%var-m-0.0.1 input.ind-%var3504X)))
 (= $x75 (and (bvule (_ bv0 32) input.ind-%var3504X) (bvult input.ind-%var3504X (_ bv100 32))))))
 ))
 (let (($x280 (and $x332 $x104)))
 (let (($x338 (= $x280 true)))
 (let ((?x327 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x246 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x15 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x290 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x60 (concat ?x290 (concat ?x15 (concat ?x246 ?x327)))))
 (let (($x155 (= ?x60 input.dst.llvm-%m)))
 (let (($x236 (= $x155 true)))
 (let (($x147 (= $x236 true)))
 (let (($x255 (= (bvand ?x180 (_ bv4294967292 32)) ?x180)))
 (let (($x283 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x418 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x218 (and true $x418)))
 (let (($x122 (= (bvand ?x31 (_ bv4294967292 32)) ?x31)))
 (let (($x278 (and $x122 $x218)))
 (let (($x184 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x180 (bvsub ?x180 (_ bv8 32))) (bvult ?x180 (bvsub ?x180 (_ bv8 32))))))
 (let (($x171 (and (and (and true $x184) $x278) $x283)))
 (let (($x223 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x243 (and true $x223)))
 (let (($x375 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x399 (and $x375 $x243)))
 (let (($x112 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x31 (bvsub ?x31 (_ bv12 32))) (bvult ?x31 (bvsub ?x31 (_ bv12 32))))))
 (let (($x142 (and (and (and true $x375) $x112) $x399)))
 (let (($x248 (and (and $x142 $x171) $x255)))
 (let (($x308 (= input.dst.llvm-%m ?x60)))
 (let (($x404 (and $x308 $x248)))
 (let ((?x190 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x83 (= (_ bv0 32) ?x190)))
 (let ((?x201 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x53 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x201)))
 (let (($x378 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x146 (and $x378 $x53)))
 (let (($x211 (and $x146 $x83)))
 (let (($x79 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x339 (and $x79 $x211)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x141 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x410 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x141 $x17)))))))
 (let (($x33 (and (and (and $x410 true) $x339) $x404)))
 (let (($x348 (= $x33 true)))
 (let (($x67 (= $x348 true)))
 (let (($x306 (= $x67 true)))
 (let (($x397 (= $x248 true)))
 (let (($x316 (= $x397 true)))
 (let (($x163 (= $x316 true)))
 (let (($x74 (= $x142 true)))
 (let (($x116 (= $x74 true)))
 (let (($x85 (= $x116 true)))
 (let (($x324 (and $x171 $x255)))
 (let (($x82 (= $x324 true)))
 (let (($x101 (= $x82 true)))
 (let (($x268 (= $x101 true)))
 (let (($x357 (and $x410 $x339)))
 (let (($x129 (= $x357 true)))
 (let (($x392 (= $x129 true)))
 (let (($x103 (= $x392 true)))
 (let (($x205 (and $x103 $x268)))
 (let (($x102 (and $x205 $x85)))
 (let (($x414 (and $x102 $x163)))
 (let (($x86 (and $x414 $x306)))
 (let (($x384 (and $x86 $x147)))
 (let (($x250 (and $x384 $x338)))
 (let (($x93 (and $x250 $x164)))
 (let (($x157 (and $x93 $x100)))
 (let (($x403 (and $x157 $x336)))
 (let (($x81 (and $x403 $x343)))
 (let (($x307 (and $x81 $x299)))
 (let (($x9 (and $x131 $x115)))
 (let (($x334 (and $x345 $x9)))
 (let (($x114 (and $x279 $x334)))
 (let (($x166 (and $x114 $x307)))
 (let (($x5 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x358 (and $x5 $x166)))
 (let (($x199 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x126 (and $x199 $x358)))
 (let (($x38 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x78 (and $x38 $x126)))
 (let (($x298 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x14 (and $x298 $x78)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x239 (and $x77 $x14)))
 (let (($x175 (and $x289 $x239)))
 (let (($x344 (= ?x130 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x253 (and $x344 $x175)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x359 (and $x300 $x253)))
 (let (($x252 (and $x289 $x359)))
 (let (($x200 (= ?x212 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x247 (and $x200 $x252)))
 (let (($x87 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x221 (and $x87 $x247)))
 (let (($x386 (and $x289 $x221)))
 (let (($x30 (= ?x231 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x158 (and $x30 $x386)))
 (let (($x125 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x304 (and $x125 $x158)))
 (let (($x70 (and $x289 $x304)))
 (let (($x222 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x144 (and $x222 $x70)))
 (let (($x123 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x25 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x69)))
 (let (($x319 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x25 $x123)))))))
 (let (($x220 (bvugt ?x180 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x281 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x151)))
 (let (($x121 (=> (bvule ?x180 (bvsub (bvadd ?x180 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x281 $x220)))))))
 (let (($x19 (bvugt ?x31 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x119 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x45)))
 (let (($x265 (=> (bvule ?x31 (bvsub (bvadd ?x31 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x119 $x19)))))))
 (let (($x272 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x288 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x72 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x288)))
 (let (($x245 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x72 $x272)))))))
 (let (($x193 (and $x245 $x265)))
 (let (($x204 (and $x193 $x121)))
 (let (($x118 (and $x204 $x319)))
 (let (($x380 (and $x118 $x144)))
 (let (($x216 (=> $x380 $x371)))
 (not $x216))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 1
==solver_id: 0
==recvd_data
==DATA_START==
unsat
(error "line 258 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 78
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x56 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x11 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x220 (bvadd ?x11 (_ bv3 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem ?x220) (concat ?x377 ?x56))))
 (let ((?x276 (bvmul (_ bv4294967295 32) ?x210)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x84 (concat ?x16 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x123 (bvadd ?x128 (_ bv3 32))))
 (let ((?x387 (concat (select input.dst.llvm-mem ?x123) (concat ?x366 ?x84))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x19 (bvadd ?x68 (_ bv3 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem ?x19) (concat ?x325 ?x181))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x322)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x172)))
 (let ((?x159 (bvadd (bvadd (bvadd ?x267 ?x99) ?x387) ?x276)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x270 (= ?x51 ?x159)))
 (let (($x32 (= $x270 true)))
 (let (($x135 (= $x32 true)))
 (let (($x41 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x36 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x274 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x274 (_ bv1 32))))
 (let (($x215 (=> $x61 $x41)))
 (let (($x241 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x110 (= $x61 $x241)))
 (let (($x231 (= false false)))
 (let (($x137 (= ?x274 (_ bv0 32))))
 (let (($x132 (=> $x137 $x231)))
 (let (($x34 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x160 (= $x137 $x34)))
 (let (($x369 (and (and (and $x160 $x132) $x110) $x215)))
 (let (($x349 (= $x369 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x62 (= ?x212 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x114 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x114 (_ bv1 32))))
 (let (($x154 (=> $x229 $x62)))
 (let (($x177 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x285 (= $x229 $x177)))
 (let (($x408 (= ?x114 (_ bv0 32))))
 (let (($x342 (=> $x408 $x231)))
 (let (($x354 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x420 (= $x408 $x354)))
 (let (($x232 (and (and (and $x420 $x342) $x285) $x154)))
 (let (($x66 (= $x232 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x304 (= ?x130 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x115 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x115 (_ bv1 32))))
 (let (($x70 (=> $x247 $x304)))
 (let (($x221 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x386 (= $x247 $x221)))
 (let (($x9 (= ?x115 (_ bv0 32))))
 (let (($x252 (=> $x9 $x231)))
 (let (($x253 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x359 (= $x9 $x253)))
 (let (($x227 (and (and (and $x359 $x252) $x386) $x70)))
 (let (($x35 (= $x227 true)))
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x307 (= ?x310 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x345 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x131 (ite $x345 (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x131 (_ bv1 32))))
 (let (($x166 (=> $x406 $x307)))
 (let (($x90 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x301 (= $x406 $x90)))
 (let (($x71 (= ?x131 (_ bv0 32))))
 (let (($x424 (=> $x71 $x231)))
 (let (($x351 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x206 (= $x71 $x351)))
 (let (($x78 (and (and (and $x206 $x424) $x301) $x166)))
 (let (($x14 (= $x78 true)))
 (let (($x389 (forall ((input.ind-%var3549X (_ BitVec 32)) )(let ((?x256 (bvadd (bvmul input.ind-%var3549X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x321))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var3549X)))
 (let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3549X)))
 (=> $x40 (= ?x165 ?x170))))))))
 ))
 (let (($x403 (forall ((input.ind-%var3548X (_ BitVec 32)) )(let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3548X)))
 (= $x40 (and (bvule (_ bv0 32) input.ind-%var3548X) (bvult input.ind-%var3548X (_ bv100 32))))))
 ))
 (let (($x28 (and $x403 $x389)))
 (let (($x44 (= $x28 true)))
 (let (($x6 (forall ((input.ind-%var3543X (_ BitVec 32)) )(let ((?x256 (bvadd (bvmul input.ind-%var3543X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x321))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var3543X)))
 (let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3543X)))
 (=> $x40 (= ?x165 ?x170))))))))
 ))
 (let (($x293 (forall ((input.ind-%var3542X (_ BitVec 32)) )(let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3542X)))
 (= $x40 (and (bvule (_ bv0 32) input.ind-%var3542X) (bvult input.ind-%var3542X (_ bv100 32))))))
 ))
 (let (($x412 (and $x293 $x6)))
 (let (($x145 (= $x412 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x306 (concat ?x33 (concat ?x60 ?x271)))))
 (let (($x364 (= ?x86 input.dst.llvm-%m)))
 (let (($x413 (= $x364 true)))
 (let (($x332 (= $x413 true)))
 (let (($x13 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x101 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x373 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x255 (and true $x373)))
 (let (($x278 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x324 (and $x278 $x255)))
 (let (($x346 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv8 32))) (bvult ?x11 (bvsub ?x11 (_ bv8 32))))))
 (let (($x352 (and (and (and true $x346) $x324) $x101)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x102 (and true $x85)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x192 (and $x94 $x102)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x316 (and (and (and true $x94) $x243) $x192)))
 (let (($x188 (and (and $x316 $x352) $x13)))
 (let (($x155 (= input.dst.llvm-%m ?x86)))
 (let (($x236 (and $x155 $x188)))
 (let ((?x302 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x39 (= (_ bv0 32) ?x302)))
 (let ((?x129 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x392 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x357 $x392)))
 (let (($x303 (and $x103 $x39)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x323 $x303)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x339 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x378 $x201)))))))
 (let (($x353 (and (and (and $x339 true) $x329) $x236)))
 (let (($x75 (= $x353 true)))
 (let (($x156 (= $x75 true)))
 (let (($x242 (= $x156 true)))
 (let (($x290 (= $x188 true)))
 (let (($x234 (= $x290 true)))
 (let (($x15 (= $x234 true)))
 (let (($x163 (= $x316 true)))
 (let (($x414 (= $x163 true)))
 (let (($x269 (= $x414 true)))
 (let (($x117 (and $x352 $x13)))
 (let (($x347 (= $x117 true)))
 (let (($x111 (= $x347 true)))
 (let (($x360 (= $x111 true)))
 (let (($x184 (and $x339 $x329)))
 (let (($x263 (= $x184 true)))
 (let (($x356 (= $x263 true)))
 (let (($x213 (= $x356 true)))
 (let (($x112 (and $x213 $x360)))
 (let (($x174 (and $x112 $x269)))
 (let (($x244 (and $x174 $x15)))
 (let (($x48 (and $x244 $x242)))
 (let (($x150 (and $x48 $x332)))
 (let (($x18 (and $x150 $x145)))
 (let (($x54 (and $x18 $x44)))
 (let (($x239 (and $x54 $x14)))
 (let (($x49 (and $x239 $x35)))
 (let (($x407 (and $x49 $x66)))
 (let (($x186 (and $x407 $x349)))
 (let (($x141 (and $x408 $x61)))
 (let (($x17 (and $x9 $x141)))
 (let (($x282 (and $x71 $x17)))
 (let (($x382 (and $x282 $x186)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x55 (and $x315 $x382)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x312 (and $x279 $x55)))
 (let (($x275 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x63 (and $x275 $x312)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x162 (and $x305 $x63)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x296 (and $x326 $x162)))
 (let (($x10 (and $x231 $x296)))
 (let (($x390 (= ?x310 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x107 (and $x390 $x10)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x372 (and $x77 $x107)))
 (let (($x350 (and $x231 $x372)))
 (let (($x344 (= ?x130 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x340 (and $x344 $x350)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x371 (and $x300 $x340)))
 (let (($x216 (and $x231 $x371)))
 (let (($x200 (= ?x212 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x398 (and $x200 $x216)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x178 (and $x396 $x398)))
 (let (($x422 (and $x231 $x178)))
 (let (($x362 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x295 (and $x362 $x422)))
 (let (($x167 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x189 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x355 $x167)))))))
 (let (($x91 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x277 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x91)))))))
 (let (($x23 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x194 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x272 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x286 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x194)))))))
 (let (($x148 (and $x286 $x180)))
 (let (($x230 (and $x148 $x277)))
 (let (($x21 (and $x230 $x189)))
 (let (($x217 (and $x21 $x295)))
 (let (($x198 (=> $x217 $x135)))
 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x138 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x56 (concat ?x138 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x377 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x11 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x220 (bvadd ?x11 (_ bv3 32))))
 (let ((?x210 (concat (select input.dst.llvm-mem ?x220) (concat ?x377 ?x56))))
 (let ((?x276 (bvmul (_ bv4294967295 32) ?x210)))
 (let ((?x16 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x84 (concat ?x16 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x366 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x128 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x123 (bvadd ?x128 (_ bv3 32))))
 (let ((?x387 (concat (select input.dst.llvm-mem ?x123) (concat ?x366 ?x84))))
 (let ((?x415 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x181 (concat ?x415 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x325 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x68 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x19 (bvadd ?x68 (_ bv3 32))))
 (let ((?x99 (concat (select input.dst.llvm-mem ?x19) (concat ?x325 ?x181))))
 (let ((?x322 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x172 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x322)))
 (let ((?x267 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x172)))
 (let ((?x159 (bvadd (bvadd (bvadd ?x267 ?x99) ?x387) ?x276)))
 (let ((?x51 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x270 (= ?x51 ?x159)))
 (let (($x32 (= $x270 true)))
 (let (($x135 (= $x32 true)))
 (let (($x41 (= ?x51 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x36 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x274 (ite $x36 (_ bv1 32) (_ bv0 32))))
 (let (($x61 (bvuge ?x274 (_ bv1 32))))
 (let (($x215 (=> $x61 $x41)))
 (let (($x241 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x110 (= $x61 $x241)))
 (let (($x231 (= false false)))
 (let (($x137 (= ?x274 (_ bv0 32))))
 (let (($x132 (=> $x137 $x231)))
 (let (($x34 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x160 (= $x137 $x34)))
 (let (($x369 (and (and (and $x160 $x132) $x110) $x215)))
 (let (($x349 (= $x369 true)))
 (let ((?x212 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x62 (= ?x212 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x334 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x114 (ite $x334 (_ bv1 32) (_ bv0 32))))
 (let (($x229 (bvuge ?x114 (_ bv1 32))))
 (let (($x154 (=> $x229 $x62)))
 (let (($x177 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x285 (= $x229 $x177)))
 (let (($x408 (= ?x114 (_ bv0 32))))
 (let (($x342 (=> $x408 $x231)))
 (let (($x354 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x420 (= $x408 $x354)))
 (let (($x232 (and (and (and $x420 $x342) $x285) $x154)))
 (let (($x66 (= $x232 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x304 (= ?x130 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x197 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x115 (ite $x197 (_ bv1 32) (_ bv0 32))))
 (let (($x247 (bvuge ?x115 (_ bv1 32))))
 (let (($x70 (=> $x247 $x304)))
 (let (($x221 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x386 (= $x247 $x221)))
 (let (($x9 (= ?x115 (_ bv0 32))))
 (let (($x252 (=> $x9 $x231)))
 (let (($x253 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x359 (= $x9 $x253)))
 (let (($x227 (and (and (and $x359 $x252) $x386) $x70)))
 (let (($x35 (= $x227 true)))
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x307 (= ?x310 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x345 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x131 (ite $x345 (_ bv1 32) (_ bv0 32))))
 (let (($x406 (bvuge ?x131 (_ bv1 32))))
 (let (($x166 (=> $x406 $x307)))
 (let (($x90 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x301 (= $x406 $x90)))
 (let (($x71 (= ?x131 (_ bv0 32))))
 (let (($x424 (=> $x71 $x231)))
 (let (($x351 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x206 (= $x71 $x351)))
 (let (($x78 (and (and (and $x206 $x424) $x301) $x166)))
 (let (($x14 (= $x78 true)))
 (let (($x389 (forall ((input.ind-%var3549X (_ BitVec 32)) )(let ((?x256 (bvadd (bvmul input.ind-%var3549X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x321))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var3549X)))
 (let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3549X)))
 (=> $x40 (= ?x165 ?x170))))))))
 ))
 (let (($x403 (forall ((input.ind-%var3548X (_ BitVec 32)) )(let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3548X)))
 (= $x40 (and (bvule (_ bv0 32) input.ind-%var3548X) (bvult input.ind-%var3548X (_ bv100 32))))))
 ))
 (let (($x28 (and $x403 $x389)))
 (let (($x44 (= $x28 true)))
 (let (($x6 (forall ((input.ind-%var3543X (_ BitVec 32)) )(let ((?x256 (bvadd (bvmul input.ind-%var3543X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x321 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv1 32))) (select input.dst.llvm-mem ?x256))))
 (let ((?x170 (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x256 (_ bv2 32))) ?x321))))
 (let ((?x165 (input.spec-%var-m-0.1.1 input.ind-%var3543X)))
 (let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3543X)))
 (=> $x40 (= ?x165 ?x170))))))))
 ))
 (let (($x293 (forall ((input.ind-%var3542X (_ BitVec 32)) )(let (($x40 (input.spec-%var-m-0.0.1 input.ind-%var3542X)))
 (= $x40 (and (bvule (_ bv0 32) input.ind-%var3542X) (bvult input.ind-%var3542X (_ bv100 32))))))
 ))
 (let (($x412 (and $x293 $x6)))
 (let (($x145 (= $x412 true)))
 (let ((?x271 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x33 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x306 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x86 (concat ?x306 (concat ?x33 (concat ?x60 ?x271)))))
 (let (($x364 (= ?x86 input.dst.llvm-%m)))
 (let (($x413 (= $x364 true)))
 (let (($x332 (= $x413 true)))
 (let (($x13 (= (bvand ?x11 (_ bv4294967292 32)) ?x11)))
 (let (($x101 (= (bvand ?x128 (_ bv4294967292 32)) ?x128)))
 (let (($x373 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x128 (bvsub ?x128 (_ bv4 32))) (bvult ?x128 (bvsub ?x128 (_ bv4 32))))))
 (let (($x255 (and true $x373)))
 (let (($x278 (= (bvand ?x68 (_ bv4294967292 32)) ?x68)))
 (let (($x324 (and $x278 $x255)))
 (let (($x346 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x11 (bvsub ?x11 (_ bv8 32))) (bvult ?x11 (bvsub ?x11 (_ bv8 32))))))
 (let (($x352 (and (and (and true $x346) $x324) $x101)))
 (let (($x85 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x102 (and true $x85)))
 (let (($x94 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x192 (and $x94 $x102)))
 (let (($x243 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x68 (bvsub ?x68 (_ bv12 32))) (bvult ?x68 (bvsub ?x68 (_ bv12 32))))))
 (let (($x316 (and (and (and true $x94) $x243) $x192)))
 (let (($x188 (and (and $x316 $x352) $x13)))
 (let (($x155 (= input.dst.llvm-%m ?x86)))
 (let (($x236 (and $x155 $x188)))
 (let ((?x302 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x39 (= (_ bv0 32) ?x302)))
 (let ((?x129 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x392 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x129)))
 (let (($x357 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x103 (and $x357 $x392)))
 (let (($x303 (and $x103 $x39)))
 (let (($x323 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x329 (and $x323 $x303)))
 (let (($x201 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x378 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x339 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x378 $x201)))))))
 (let (($x353 (and (and (and $x339 true) $x329) $x236)))
 (let (($x75 (= $x353 true)))
 (let (($x156 (= $x75 true)))
 (let (($x242 (= $x156 true)))
 (let (($x290 (= $x188 true)))
 (let (($x234 (= $x290 true)))
 (let (($x15 (= $x234 true)))
 (let (($x163 (= $x316 true)))
 (let (($x414 (= $x163 true)))
 (let (($x269 (= $x414 true)))
 (let (($x117 (and $x352 $x13)))
 (let (($x347 (= $x117 true)))
 (let (($x111 (= $x347 true)))
 (let (($x360 (= $x111 true)))
 (let (($x184 (and $x339 $x329)))
 (let (($x263 (= $x184 true)))
 (let (($x356 (= $x263 true)))
 (let (($x213 (= $x356 true)))
 (let (($x112 (and $x213 $x360)))
 (let (($x174 (and $x112 $x269)))
 (let (($x244 (and $x174 $x15)))
 (let (($x48 (and $x244 $x242)))
 (let (($x150 (and $x48 $x332)))
 (let (($x18 (and $x150 $x145)))
 (let (($x54 (and $x18 $x44)))
 (let (($x239 (and $x54 $x14)))
 (let (($x49 (and $x239 $x35)))
 (let (($x407 (and $x49 $x66)))
 (let (($x186 (and $x407 $x349)))
 (let (($x141 (and $x408 $x61)))
 (let (($x17 (and $x9 $x141)))
 (let (($x282 (and $x71 $x17)))
 (let (($x382 (and $x282 $x186)))
 (let (($x315 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x55 (and $x315 $x382)))
 (let (($x279 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x312 (and $x279 $x55)))
 (let (($x275 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x63 (and $x275 $x312)))
 (let (($x305 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x162 (and $x305 $x63)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x296 (and $x326 $x162)))
 (let (($x10 (and $x231 $x296)))
 (let (($x390 (= ?x310 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x107 (and $x390 $x10)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x372 (and $x77 $x107)))
 (let (($x350 (and $x231 $x372)))
 (let (($x344 (= ?x130 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x340 (and $x344 $x350)))
 (let (($x300 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x371 (and $x300 $x340)))
 (let (($x216 (and $x231 $x371)))
 (let (($x200 (= ?x212 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x398 (and $x200 $x216)))
 (let (($x396 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x178 (and $x396 $x398)))
 (let (($x422 (and $x231 $x178)))
 (let (($x362 (= ?x51 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x295 (and $x362 $x422)))
 (let (($x167 (bvugt ?x128 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x355 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x123)))
 (let (($x189 (=> (bvule ?x128 (bvsub (bvadd ?x128 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x355 $x167)))))))
 (let (($x91 (bvugt ?x11 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x127 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x220)))
 (let (($x277 (=> (bvule ?x11 (bvsub (bvadd ?x11 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x127 $x91)))))))
 (let (($x23 (bvugt ?x68 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x266 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x19)))
 (let (($x180 (=> (bvule ?x68 (bvsub (bvadd ?x68 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x266 $x23)))))))
 (let (($x194 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x272 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x187 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x272)))
 (let (($x286 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x187 $x194)))))))
 (let (($x148 (and $x286 $x180)))
 (let (($x230 (and $x148 $x277)))
 (let (($x21 (and $x230 $x189)))
 (let (($x217 (and $x21 $x295)))
 (let (($x198 (=> $x217 $x135)))
 (not $x198)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
==query_number: 79
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x385 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x367 (concat ?x385 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x151 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x91 (bvadd ?x151 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x91) (concat ?x421 ?x367))))
 (let ((?x284 (bvmul (_ bv4294967295 32) ?x273)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x365 (concat ?x57 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x400 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x167 (bvadd ?x235 (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x167) (concat ?x400 ?x365))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x23 (bvadd ?x59 (_ bv3 32))))
 (let ((?x419 (concat (select input.dst.llvm-mem ?x23) (concat ?x335 ?x88))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x191)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x338)))
 (let ((?x134 (bvadd (bvadd (bvadd ?x168 ?x419) ?x343) ?x284)))
 (let (($x43 (= (_ bv0 32) ?x134)))
 (let (($x411 (= $x43 true)))
 (let (($x337 (= $x411 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x106 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x211 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x376 (bvuge ?x211 (_ bv1 32))))
 (let (($x387 (=> $x376 $x106)))
 (let (($x16 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x333 (= $x376 $x16)))
 (let (($x212 (= false false)))
 (let (($x79 (= ?x211 (_ bv0 32))))
 (let (($x366 (=> $x79 $x212)))
 (let (($x161 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x238 (= $x79 $x161)))
 (let (($x208 (and (and (and $x238 $x366) $x333) $x387)))
 (let (($x46 (= $x208 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x325 (= ?x130 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x17 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x282 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x282 (_ bv1 32))))
 (let (($x379 (=> $x172 $x325)))
 (let (($x267 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x133 (= $x172 $x267)))
 (let (($x410 (= ?x282 (_ bv0 32))))
 (let (($x322 (=> $x410 $x212)))
 (let (($x417 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x228 (= $x410 $x417)))
 (let (($x181 (and (and (and $x228 $x322) $x133) $x379)))
 (let (($x374 (= $x181 true)))
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x178 (= ?x310 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x61 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x61 (_ bv1 32))))
 (let (($x422 (=> $x340 $x178)))
 (let (($x371 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x216 (= $x340 $x371)))
 (let (($x141 (= ?x61 (_ bv0 32))))
 (let (($x350 (=> $x141 $x212)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x372 (= $x141 $x107)))
 (let (($x42 (and (and (and $x372 $x350) $x216) $x422)))
 (let (($x109 (= $x42 true)))
 (let ((?x199 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x186 (= ?x199 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x9 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x408 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x408 (_ bv1 32))))
 (let (($x382 (=> $x41 $x186)))
 (let (($x215 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x369 (= $x41 $x215)))
 (let (($x36 (= ?x408 (_ bv0 32))))
 (let (($x96 (=> $x36 $x212)))
 (let (($x110 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x12 (= $x36 $x110)))
 (let (($x63 (and (and (and $x12 $x96) $x369) $x382)))
 (let (($x162 (= $x63 true)))
 (let (($x34 (forall ((input.ind-%var3587X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var3587X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x307))))
 (let ((?x183 (input.spec-%var-m-0.1.1 input.ind-%var3587X)))
 (let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3587X)))
 (=> $x334 (= ?x183 ?x253))))))))
 ))
 (let (($x49 (forall ((input.ind-%var3586X (_ BitVec 32)) )(let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3586X)))
 (= $x334 (and (bvule (_ bv0 32) input.ind-%var3586X) (bvult input.ind-%var3586X (_ bv100 32))))))
 ))
 (let (($x160 (and $x49 $x34)))
 (let (($x132 (= $x160 true)))
 (let (($x144 (forall ((input.ind-%var3581X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var3581X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x307))))
 (let ((?x183 (input.spec-%var-m-0.1.1 input.ind-%var3581X)))
 (let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3581X)))
 (=> $x334 (= ?x183 ?x253))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3580X (_ BitVec 32)) )(let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3580X)))
 (= $x334 (and (bvule (_ bv0 32) input.ind-%var3580X) (bvult input.ind-%var3580X (_ bv100 32))))))
 ))
 (let (($x247 (and $x170 $x144)))
 (let (($x221 (= $x247 true)))
 (let ((?x308 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x353 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x242 (concat ?x353 (concat ?x86 ?x308)))))
 (let (($x22 (= ?x48 input.dst.llvm-%m)))
 (let (($x395 (= $x22 true)))
 (let (($x293 (= $x395 true)))
 (let (($x248 (= (bvand ?x151 (_ bv4294967292 32)) ?x151)))
 (let (($x111 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x375 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x13 (and true $x375)))
 (let (($x324 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x117 (and $x324 $x13)))
 (let (($x171 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x151 (bvsub ?x151 (_ bv8 32))) (bvult ?x151 (bvsub ?x151 (_ bv8 32))))))
 (let (($x182 (and (and (and true $x171) $x117) $x111)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x174 (and true $x269)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x89 (and $x142 $x174)))
 (let (($x102 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x234 (and (and (and true $x142) $x102) $x89)))
 (let (($x67 (and (and $x234 $x182) $x248)))
 (let (($x364 (= input.dst.llvm-%m ?x48)))
 (let (($x413 (and $x364 $x67)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x196)))
 (let ((?x263 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x263)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x184 $x356)))
 (let (($x341 (and $x213 $x122)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x83 $x341)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x357 $x129)))))))
 (let (($x222 (and (and (and $x329 true) $x313) $x413)))
 (let (($x40 (= $x222 true)))
 (let (($x393 (= $x40 true)))
 (let (($x240 (= $x393 true)))
 (let (($x306 (= $x67 true)))
 (let (($x404 (= $x306 true)))
 (let (($x33 (= $x404 true)))
 (let (($x15 (= $x234 true)))
 (let (($x244 (= $x15 true)))
 (let (($x147 (= $x244 true)))
 (let (($x294 (and $x182 $x248)))
 (let (($x105 (= $x294 true)))
 (let (($x97 (= $x105 true)))
 (let (($x223 (= $x97 true)))
 (let (($x346 (and $x329 $x313)))
 (let (($x268 (= $x346 true)))
 (let (($x418 (= $x268 true)))
 (let (($x218 (= $x418 true)))
 (let (($x243 (and $x218 $x223)))
 (let (($x384 (and $x243 $x147)))
 (let (($x58 (and $x384 $x33)))
 (let (($x113 (and $x58 $x240)))
 (let (($x165 (and $x113 $x293)))
 (let (($x386 (and $x165 $x221)))
 (let (($x50 (and $x386 $x132)))
 (let (($x296 (and $x50 $x162)))
 (let (($x318 (and $x296 $x109)))
 (let (($x99 (and $x318 $x374)))
 (let (($x377 (and $x99 $x46)))
 (let (($x378 (and $x410 $x79)))
 (let (($x201 (and $x141 $x378)))
 (let (($x53 (and $x36 $x201)))
 (let (($x381 (and $x53 $x377)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x138 (and $x115 $x381)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x92 (and $x71 $x138)))
 (let (($x345 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x56 (and $x345 $x92)))
 (let (($x320 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x251 (and $x320 $x56)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x210 (and $x237 $x251)))
 (let (($x276 (and $x212 $x210)))
 (let (($x5 (= ?x199 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x159 (and $x5 $x276)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x270 (and $x326 $x159)))
 (let (($x32 (and $x212 $x270)))
 (let (($x390 (= ?x310 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x135 (and $x390 $x32)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x198 (and $x77 $x135)))
 (let (($x405 (and $x212 $x198)))
 (let (($x344 (= ?x130 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x264 (and $x344 $x405)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x136 (and $x314 $x264)))
 (let (($x327 (and $x212 $x136)))
 (let (($x87 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x20 (and $x87 $x327)))
 (let (($x328 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x125 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x328)))))))
 (let (($x225 (bvugt ?x151 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x69 (=> (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x225)))))))
 (let (($x203 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x143 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x45 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x143)))))))
 (let (($x119 (and $x45 $x11)))
 (let (($x281 (and $x119 $x69)))
 (let (($x25 (and $x281 $x125)))
 (let (($x149 (and $x25 $x20)))
 (let (($x173 (=> $x149 $x337)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic AUFBV)
(declare-fun input.dst.llvm-%m () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-13.L2%30%d.2 () (_ BitVec 32))
(declare-fun input.spec-%var-m-0.1.1 ((_ BitVec 32)) (_ BitVec 32))
(declare-fun input.spec-%var-m-0.0.1 ((_ BitVec 32)) Bool)
(declare-fun input.spec-%tmpvar-13.L2%30%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-9.L2%21%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%12%d.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%12%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-8.L2%21%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-12.L2%30%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-0.L2%9%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-6.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-1.L2%18%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-10.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-2.L2%27%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-14.L2%36%bbentry () (_ BitVec 32))
(declare-fun input.spec-%var-val-3.L2%36%bbentry () (_ BitVec 32))
(assert
 (let ((?x385 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv1 32)))))
 (let ((?x367 (concat ?x385 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv8 32))))))
 (let ((?x421 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv8 32)) (_ bv2 32)))))
 (let ((?x151 (bvadd input.dst.llvm-%m (_ bv8 32))))
 (let ((?x91 (bvadd ?x151 (_ bv3 32))))
 (let ((?x273 (concat (select input.dst.llvm-mem ?x91) (concat ?x421 ?x367))))
 (let ((?x284 (bvmul (_ bv4294967295 32) ?x273)))
 (let ((?x57 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv1 32)))))
 (let ((?x365 (concat ?x57 (select input.dst.llvm-mem (bvadd (_ bv4 32) input.dst.llvm-%m)))))
 (let ((?x400 (select input.dst.llvm-mem (bvadd (bvadd (_ bv4 32) input.dst.llvm-%m) (_ bv2 32)))))
 (let ((?x235 (bvadd (_ bv4 32) input.dst.llvm-%m)))
 (let ((?x167 (bvadd ?x235 (_ bv3 32))))
 (let ((?x343 (concat (select input.dst.llvm-mem ?x167) (concat ?x400 ?x365))))
 (let ((?x202 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv1 32)))))
 (let ((?x88 (concat ?x202 (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv12 32))))))
 (let ((?x335 (select input.dst.llvm-mem (bvadd (bvadd input.dst.llvm-%m (_ bv12 32)) (_ bv2 32)))))
 (let ((?x59 (bvadd input.dst.llvm-%m (_ bv12 32))))
 (let ((?x23 (bvadd ?x59 (_ bv3 32))))
 (let ((?x419 (concat (select input.dst.llvm-mem ?x23) (concat ?x335 ?x88))))
 (let ((?x191 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv1 32))) (select input.dst.llvm-mem input.dst.llvm-%m))))
 (let ((?x338 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv2 32))) ?x191)))
 (let ((?x168 (concat (select input.dst.llvm-mem (bvadd input.dst.llvm-%m (_ bv3 32))) ?x338)))
 (let ((?x134 (bvadd (bvadd (bvadd ?x168 ?x419) ?x343) ?x284)))
 (let (($x43 (= (_ bv0 32) ?x134)))
 (let (($x411 (= $x43 true)))
 (let (($x337 (= $x411 true)))
 (let ((?x37 (input.spec-%var-m-0.1.1 (_ bv3 32))))
 (let (($x106 (= ?x37 input.spec-%tmpvar-13.L2%30%d.2)))
 (let (($x257 (input.spec-%var-m-0.0.1 (_ bv3 32))))
 (let ((?x211 (ite $x257 (_ bv1 32) (_ bv0 32))))
 (let (($x376 (bvuge ?x211 (_ bv1 32))))
 (let (($x387 (=> $x376 $x106)))
 (let (($x16 (bvuge input.spec-%tmpvar-13.L2%30%d.0 (_ bv1 32))))
 (let (($x333 (= $x376 $x16)))
 (let (($x212 (= false false)))
 (let (($x79 (= ?x211 (_ bv0 32))))
 (let (($x366 (=> $x79 $x212)))
 (let (($x161 (= input.spec-%tmpvar-13.L2%30%d.0 (_ bv0 32))))
 (let (($x238 (= $x79 $x161)))
 (let (($x208 (and (and (and $x238 $x366) $x333) $x387)))
 (let (($x46 (= $x208 true)))
 (let ((?x130 (input.spec-%var-m-0.1.1 (_ bv2 32))))
 (let (($x325 (= ?x130 input.spec-%tmpvar-9.L2%21%d.2)))
 (let (($x17 (input.spec-%var-m-0.0.1 (_ bv2 32))))
 (let ((?x282 (ite $x17 (_ bv1 32) (_ bv0 32))))
 (let (($x172 (bvuge ?x282 (_ bv1 32))))
 (let (($x379 (=> $x172 $x325)))
 (let (($x267 (bvuge input.spec-%tmpvar-9.L2%21%d.0 (_ bv1 32))))
 (let (($x133 (= $x172 $x267)))
 (let (($x410 (= ?x282 (_ bv0 32))))
 (let (($x322 (=> $x410 $x212)))
 (let (($x417 (= input.spec-%tmpvar-9.L2%21%d.0 (_ bv0 32))))
 (let (($x228 (= $x410 $x417)))
 (let (($x181 (and (and (and $x228 $x322) $x133) $x379)))
 (let (($x374 (= $x181 true)))
 (let ((?x310 (input.spec-%var-m-0.1.1 (_ bv1 32))))
 (let (($x178 (= ?x310 input.spec-%tmpvar-5.L2%12%d.2)))
 (let (($x274 (input.spec-%var-m-0.0.1 (_ bv1 32))))
 (let ((?x61 (ite $x274 (_ bv1 32) (_ bv0 32))))
 (let (($x340 (bvuge ?x61 (_ bv1 32))))
 (let (($x422 (=> $x340 $x178)))
 (let (($x371 (bvuge input.spec-%tmpvar-5.L2%12%d.0 (_ bv1 32))))
 (let (($x216 (= $x340 $x371)))
 (let (($x141 (= ?x61 (_ bv0 32))))
 (let (($x350 (=> $x141 $x212)))
 (let (($x107 (= input.spec-%tmpvar-5.L2%12%d.0 (_ bv0 32))))
 (let (($x372 (= $x141 $x107)))
 (let (($x42 (and (and (and $x372 $x350) $x216) $x422)))
 (let (($x109 (= $x42 true)))
 (let ((?x199 (input.spec-%var-m-0.1.1 (_ bv0 32))))
 (let (($x186 (= ?x199 input.spec-%tmpvar-1.L2%3%d.2)))
 (let (($x9 (input.spec-%var-m-0.0.1 (_ bv0 32))))
 (let ((?x408 (ite $x9 (_ bv1 32) (_ bv0 32))))
 (let (($x41 (bvuge ?x408 (_ bv1 32))))
 (let (($x382 (=> $x41 $x186)))
 (let (($x215 (bvuge input.spec-%tmpvar-1.L2%3%d.0 (_ bv1 32))))
 (let (($x369 (= $x41 $x215)))
 (let (($x36 (= ?x408 (_ bv0 32))))
 (let (($x96 (=> $x36 $x212)))
 (let (($x110 (= input.spec-%tmpvar-1.L2%3%d.0 (_ bv0 32))))
 (let (($x12 (= $x36 $x110)))
 (let (($x63 (and (and (and $x12 $x96) $x369) $x382)))
 (let (($x162 (= $x63 true)))
 (let (($x34 (forall ((input.ind-%var3587X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var3587X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x307))))
 (let ((?x183 (input.spec-%var-m-0.1.1 input.ind-%var3587X)))
 (let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3587X)))
 (=> $x334 (= ?x183 ?x253))))))))
 ))
 (let (($x49 (forall ((input.ind-%var3586X (_ BitVec 32)) )(let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3586X)))
 (= $x334 (and (bvule (_ bv0 32) input.ind-%var3586X) (bvult input.ind-%var3586X (_ bv100 32))))))
 ))
 (let (($x160 (and $x49 $x34)))
 (let (($x132 (= $x160 true)))
 (let (($x144 (forall ((input.ind-%var3581X (_ BitVec 32)) )(let ((?x90 (bvadd (bvmul input.ind-%var3581X (_ bv4 32)) input.dst.llvm-%m)))
 (let ((?x307 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv1 32))) (select input.dst.llvm-mem ?x90))))
 (let ((?x253 (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv3 32))) (concat (select input.dst.llvm-mem (bvadd ?x90 (_ bv2 32))) ?x307))))
 (let ((?x183 (input.spec-%var-m-0.1.1 input.ind-%var3581X)))
 (let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3581X)))
 (=> $x334 (= ?x183 ?x253))))))))
 ))
 (let (($x170 (forall ((input.ind-%var3580X (_ BitVec 32)) )(let (($x334 (input.spec-%var-m-0.0.1 input.ind-%var3580X)))
 (= $x334 (and (bvule (_ bv0 32) input.ind-%var3580X) (bvult input.ind-%var3580X (_ bv100 32))))))
 ))
 (let (($x247 (and $x170 $x144)))
 (let (($x221 (= $x247 true)))
 (let ((?x308 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x86 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x353 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x242 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x48 (concat ?x242 (concat ?x353 (concat ?x86 ?x308)))))
 (let (($x22 (= ?x48 input.dst.llvm-%m)))
 (let (($x395 (= $x22 true)))
 (let (($x293 (= $x395 true)))
 (let (($x248 (= (bvand ?x151 (_ bv4294967292 32)) ?x151)))
 (let (($x111 (= (bvand ?x235 (_ bv4294967292 32)) ?x235)))
 (let (($x375 (ite (bvsge (_ bv4 32) (_ bv0 32)) (bvuge ?x235 (bvsub ?x235 (_ bv4 32))) (bvult ?x235 (bvsub ?x235 (_ bv4 32))))))
 (let (($x13 (and true $x375)))
 (let (($x324 (= (bvand ?x59 (_ bv4294967292 32)) ?x59)))
 (let (($x117 (and $x324 $x13)))
 (let (($x171 (ite (bvsge (_ bv8 32) (_ bv0 32)) (bvuge ?x151 (bvsub ?x151 (_ bv8 32))) (bvult ?x151 (bvsub ?x151 (_ bv8 32))))))
 (let (($x182 (and (and (and true $x171) $x117) $x111)))
 (let (($x269 (ite (bvsge (_ bv0 32) (_ bv0 32)) (bvuge input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))) (bvult input.dst.llvm-%m (bvsub input.dst.llvm-%m (_ bv0 32))))))
 (let (($x174 (and true $x269)))
 (let (($x142 (= (bvand input.dst.llvm-%m (_ bv4294967292 32)) input.dst.llvm-%m)))
 (let (($x89 (and $x142 $x174)))
 (let (($x102 (ite (bvsge (_ bv12 32) (_ bv0 32)) (bvuge ?x59 (bvsub ?x59 (_ bv12 32))) (bvult ?x59 (bvsub ?x59 (_ bv12 32))))))
 (let (($x234 (and (and (and true $x142) $x102) $x89)))
 (let (($x67 (and (and $x234 $x182) $x248)))
 (let (($x364 (= input.dst.llvm-%m ?x48)))
 (let (($x413 (and $x364 $x67)))
 (let ((?x196 (bvand (_ bv3 32) input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let (($x122 (= (_ bv0 32) ?x196)))
 (let ((?x263 (bvadd (_ bv3 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x356 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x263)))
 (let (($x184 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x213 (and $x184 $x356)))
 (let (($x341 (and $x213 $x122)))
 (let (($x83 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x313 (and $x83 $x341)))
 (let (($x129 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x357 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x329 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x357 $x129)))))))
 (let (($x222 (and (and (and $x329 true) $x313) $x413)))
 (let (($x40 (= $x222 true)))
 (let (($x393 (= $x40 true)))
 (let (($x240 (= $x393 true)))
 (let (($x306 (= $x67 true)))
 (let (($x404 (= $x306 true)))
 (let (($x33 (= $x404 true)))
 (let (($x15 (= $x234 true)))
 (let (($x244 (= $x15 true)))
 (let (($x147 (= $x244 true)))
 (let (($x294 (and $x182 $x248)))
 (let (($x105 (= $x294 true)))
 (let (($x97 (= $x105 true)))
 (let (($x223 (= $x97 true)))
 (let (($x346 (and $x329 $x313)))
 (let (($x268 (= $x346 true)))
 (let (($x418 (= $x268 true)))
 (let (($x218 (= $x418 true)))
 (let (($x243 (and $x218 $x223)))
 (let (($x384 (and $x243 $x147)))
 (let (($x58 (and $x384 $x33)))
 (let (($x113 (and $x58 $x240)))
 (let (($x165 (and $x113 $x293)))
 (let (($x386 (and $x165 $x221)))
 (let (($x50 (and $x386 $x132)))
 (let (($x296 (and $x50 $x162)))
 (let (($x318 (and $x296 $x109)))
 (let (($x99 (and $x318 $x374)))
 (let (($x377 (and $x99 $x46)))
 (let (($x378 (and $x410 $x79)))
 (let (($x201 (and $x141 $x378)))
 (let (($x53 (and $x36 $x201)))
 (let (($x381 (and $x53 $x377)))
 (let (($x115 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x138 (and $x115 $x381)))
 (let (($x71 (= (_ bv1 32) input.spec-%tmpvar-4.L2%12%d)))
 (let (($x92 (and $x71 $x138)))
 (let (($x345 (= (_ bv2 32) input.spec-%tmpvar-8.L2%21%d)))
 (let (($x56 (and $x345 $x92)))
 (let (($x320 (= (_ bv3 32) input.spec-%tmpvar-12.L2%30%d)))
 (let (($x251 (and $x320 $x56)))
 (let (($x237 (= (_ bv0 32) input.spec-%tmpvar-2.L2%9%bbentry)))
 (let (($x210 (and $x237 $x251)))
 (let (($x276 (and $x212 $x210)))
 (let (($x5 (= ?x199 input.spec-%var-val-0.L2%9%bbentry)))
 (let (($x159 (and $x5 $x276)))
 (let (($x326 (= (_ bv0 32) input.spec-%tmpvar-6.L2%18%bbentry)))
 (let (($x270 (and $x326 $x159)))
 (let (($x32 (and $x212 $x270)))
 (let (($x390 (= ?x310 input.spec-%var-val-1.L2%18%bbentry)))
 (let (($x135 (and $x390 $x32)))
 (let (($x77 (= (_ bv0 32) input.spec-%tmpvar-10.L2%27%bbentry)))
 (let (($x198 (and $x77 $x135)))
 (let (($x405 (and $x212 $x198)))
 (let (($x344 (= ?x130 input.spec-%var-val-2.L2%27%bbentry)))
 (let (($x264 (and $x344 $x405)))
 (let (($x314 (= (_ bv0 32) input.spec-%tmpvar-14.L2%36%bbentry)))
 (let (($x136 (and $x314 $x264)))
 (let (($x327 (and $x212 $x136)))
 (let (($x87 (= ?x37 input.spec-%var-val-3.L2%36%bbentry)))
 (let (($x20 (and $x87 $x327)))
 (let (($x328 (bvugt ?x235 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x167)))
 (let (($x125 (=> (bvule ?x235 (bvsub (bvadd ?x235 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x64 $x328)))))))
 (let (($x225 (bvugt ?x151 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x233 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x91)))
 (let (($x69 (=> (bvule ?x151 (bvsub (bvadd ?x151 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x233 $x225)))))))
 (let (($x203 (bvugt ?x59 input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x108 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x23)))
 (let (($x11 (=> (bvule ?x59 (bvsub (bvadd ?x59 (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x108 $x203)))))))
 (let (($x143 (bvugt input.dst.llvm-%m input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x194 (bvadd input.dst.llvm-%m (_ bv3 32))))
 (let (($x311 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x194)))
 (let (($x45 (=> (bvule input.dst.llvm-%m (bvsub (bvadd input.dst.llvm-%m (_ bv4 32)) (_ bv1 32))) (or false (or false (and true (or $x311 $x143)))))))
 (let (($x119 (and $x45 $x11)))
 (let (($x281 (and $x119 $x69)))
 (let (($x25 (and $x281 $x125)))
 (let (($x149 (and $x25 $x20)))
 (let (($x173 (=> $x149 $x337)))
 (not $x173)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
unsat
(error "line 257 column 10: model is not available")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.2173614/query
