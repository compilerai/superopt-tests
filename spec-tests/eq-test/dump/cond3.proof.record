==query_number: 0
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_BV)
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_end () (_ BitVec 32))
(declare-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(assert
 (let (($x39 (bvugt (_ bv0 32) input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let ((?x31 (bvadd (_ bv0 32) (_ bv0 32))))
 (let (($x38 (bvugt input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x31)))
 (let (($x34 (or (bvugt input.memlabel-mem--arg.0_begin ?x31) (bvugt (_ bv0 32) input.memlabel-mem--arg.0_end))))
 (let (($x45 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and (and true $x34) (or $x38 $x39)))))))
 (let (($x20 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x18 (= ?x16 (_ bv0 32))))
 (let ((?x13 (bvadd (_ bv4 32) (_ bv4294967295 32))))
 (let ((?x11 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin ?x13)))
 (let (($x12 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x11)))
 (let (($x8 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x9 (and $x8 $x12)))
 (let (($x19 (and $x9 $x18)))
 (let (($x21 (and $x19 $x20)))
 (and $x21 $x45)))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.memlabel-mem--arg.0_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b00000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b00000000000000000000000000000011)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32)
    #xffffffff)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000003)
  (define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32)
    #x00000000)
  (define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x00000000)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.src.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.memlabel-mem--arg.0_end () (_ BitVec 32) (_ bv0 32))
(define-fun input.memlabel-mem--arg.0_begin () (_ BitVec 32) (_ bv2147483648 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv32768 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv32771 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
==query_number: 1
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x108 (not $x107)))
 (let (($x109 (or $x107 $x108)))
 (let (($x110 (= $x109 false)))
 (let (($x111 (= $x110 true)))
 (let (($x95 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x78 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x78 $x95)))
 (let (($x92 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x93 (= $x78 $x92)))
 (let (($x76 (= false false)))
 (let (($x72 (= (_ bv1 32) (_ bv0 32))))
 (let (($x77 (=> $x72 $x76)))
 (let (($x90 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x91 (= $x72 $x90)))
 (let (($x99 (and (and (and $x91 $x77) $x93) $x96)))
 (let (($x100 (= $x99 true)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x83 (=> $x78 $x82)))
 (let (($x79 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x80 (= $x78 $x79)))
 (let (($x85 (and (and (= $x72 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x77) $x80)))
 (let (($x86 (and $x85 $x83)))
 (let (($x87 (= $x86 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x66 (concat ?x63 (concat ?x60 ?x58)))))
 (let (($x68 (= ?x67 input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x51 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x52 (= $x51 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x43)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x37 $x32)))
 (let (($x27 (and $x40 $x16)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x48 $x27)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x14)))))))
 (let (($x12 (and $x9 $x42)))
 (let (($x30 (= $x12 true)))
 (let (($x29 (= $x30 true)))
 (let (($x8 (= $x29 true)))
 (let (($x55 (and $x8 $x54)))
 (let (($x71 (and $x55 $x70)))
 (let (($x88 (and $x71 $x87)))
 (let (($x101 (and $x88 $x100)))
 (let (($x26 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x44 (= $x26 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x102 (and $x44 $x101)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x103 (and $x23 $x102)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x104 (and $x45 $x103)))
 (let (($x19 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x105 (and $x19 $x104)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x106 (and $x31 $x105)))
 (let (($x112 (=> $x106 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x107 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x108 (not $x107)))
 (let (($x109 (or $x107 $x108)))
 (let (($x110 (= $x109 false)))
 (let (($x111 (= $x110 true)))
 (let (($x95 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x78 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x78 $x95)))
 (let (($x92 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x93 (= $x78 $x92)))
 (let (($x76 (= false false)))
 (let (($x72 (= (_ bv1 32) (_ bv0 32))))
 (let (($x77 (=> $x72 $x76)))
 (let (($x90 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x91 (= $x72 $x90)))
 (let (($x99 (and (and (and $x91 $x77) $x93) $x96)))
 (let (($x100 (= $x99 true)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x83 (=> $x78 $x82)))
 (let (($x79 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x80 (= $x78 $x79)))
 (let (($x85 (and (and (= $x72 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x77) $x80)))
 (let (($x86 (and $x85 $x83)))
 (let (($x87 (= $x86 true)))
 (let ((?x58 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x60 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x63 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x66 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x67 (concat ?x66 (concat ?x63 (concat ?x60 ?x58)))))
 (let (($x68 (= ?x67 input.dst.llvm-%x)))
 (let (($x69 (= $x68 true)))
 (let (($x70 (= $x69 true)))
 (let (($x51 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x52 (= $x51 true)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let ((?x43 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x16 (= (_ bv0 32) ?x43)))
 (let ((?x7 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x32 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x7)))
 (let (($x37 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x40 (and $x37 $x32)))
 (let (($x27 (and $x40 $x16)))
 (let (($x48 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x42 (and $x48 $x27)))
 (let (($x14 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x36 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x9 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x36 $x14)))))))
 (let (($x12 (and $x9 $x42)))
 (let (($x30 (= $x12 true)))
 (let (($x29 (= $x30 true)))
 (let (($x8 (= $x29 true)))
 (let (($x55 (and $x8 $x54)))
 (let (($x71 (and $x55 $x70)))
 (let (($x88 (and $x71 $x87)))
 (let (($x101 (and $x88 $x100)))
 (let (($x26 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x44 (= $x26 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x102 (and $x44 $x101)))
 (let (($x23 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x103 (and $x23 $x102)))
 (let (($x45 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x104 (and $x45 $x103)))
 (let (($x19 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x105 (and $x19 $x104)))
 (let (($x31 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x106 (and $x31 $x105)))
 (let (($x112 (=> $x106 $x111)))
 (not $x112))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 0
==result_count: 3
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
sat
(= input.spec-%tmpvar-1.L2%3%d false)
(= input.dst.llvm-%x #b00000000000000000000000000000000)
(= input.spec-%tmpvar-5.L2%10%bbentry.2 #b00000000000000000000000000000010)
(= input.spec-%tmpvar-5.L2%10%bbentry.0 #b10000000000000000000000000000000)
(= input.spec-%tmpvar-3.L2%10%bbentry.2 #b00000000000000000000000000000001)
(= input.spec-%tmpvar-3.L2%10%bbentry.0 #b10000000000000000000000000000000)
(= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ #b10000000000000000000000000000000)
(= input.spec-%var-x-0 #b00000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin #b10000000000000000000000000000000)
(= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end #b10000000000000000000000000000011)
(= input.spec-%tmpvar-0.L2%3%d #b00000000000000000000000000000000)
(= input.spec-%tmpvar-2.L2%10%bbentry #b00000000000000000000000000000001)
(= input.spec-%tmpvar-4.L2%10%bbentry #b00000000000000000000000000000010)
(= input.spec-%tmpvar-7.L2%16%bbentry #b00000000000000000000000000000000)
(= input.dst.llvm-mem @fun_6)
(function @fun_6
 (type (Array (_ BitVec 32) (_ BitVec 8)))
 (default #b00000000))
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 4
==solver_id: 1
==recvd_data
==DATA_START==
sat
(model 
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32)
    #x00000008)
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32)
    #x80000000)
  (define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8))
    ((as const (Array (_ BitVec 32) (_ BitVec 8))) #x00))
  (define-fun input.spec-%tmpvar-1.L2%3%d () Bool
    false)
  (define-fun input.spec-%var-x-0 () (_ BitVec 32)
    #x00000000)
  (define-fun input.dst.llvm-%x () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32)
    #x00000001)
  (define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32)
    #x00000000)
  (define-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32)
    #x00000002)
  (define-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32)
    #x00000001)
  (define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32)
    #x0000000b)
  (define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32)
    #x00000008)
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==index: 2
==solver_id: 3
==recvd_data
==DATA_START==
sat
(model
(define-fun input.dst.llvm-%x () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32) (_ bv134217728 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32) (_ bv512 32))
(define-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)) ((as const (Array (_ BitVec 32) (_ BitVec 8))) (_ bv0 8)))
(define-fun input.spec-%var-x-0 () (_ BitVec 32) (_ bv0 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32) (_ bv8 32))
(define-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32) (_ bv11 32))
(define-fun input.spec-%tmpvar-1.L2%3%d () Bool false)
(define-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32) (_ bv0 32))
(define-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32) (_ bv1 32))
(define-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32) (_ bv2 32))
(define-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32) (_ bv0 32))
)
==DATA_END==
==solver_result_code: SOLVER_SAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
==query_number: 2
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x112 (not $x11)))
 (let (($x113 (or $x11 $x112)))
 (let (($x109 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x110 (not $x109)))
 (let (($x111 (or $x109 $x110)))
 (let (($x39 (=> $x111 $x113)))
 (let (($x57 (= $x39 true)))
 (let (($x114 (= $x57 true)))
 (let (($x95 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x79 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x79 $x95)))
 (let (($x93 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x79 $x93)))
 (let (($x84 (= false false)))
 (let (($x74 (= (_ bv1 32) (_ bv0 32))))
 (let (($x78 (=> $x74 $x84)))
 (let (($x97 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x92 (= $x74 $x97)))
 (let (($x101 (and (and (and $x92 $x78) $x98) $x96)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x83 (=> $x79 $x82)))
 (let (($x80 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x85 (= $x79 $x80)))
 (let (($x87 (and (and (= $x74 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x78) $x85)))
 (let (($x88 (and $x87 $x83)))
 (let (($x89 (= $x88 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x68 (concat ?x61 (concat ?x59 ?x62)))))
 (let (($x70 (= ?x69 input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x52 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x16)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x33 $x40)))
 (let (($x42 (and $x43 $x27)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x10 $x42)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x17)))))))
 (let (($x30 (and $x37 $x12)))
 (let (($x29 (= $x30 true)))
 (let (($x8 (= $x29 true)))
 (let (($x50 (= $x8 true)))
 (let (($x56 (and $x50 $x55)))
 (let (($x73 (and $x56 $x72)))
 (let (($x90 (and $x73 $x89)))
 (let (($x103 (and $x90 $x102)))
 (let (($x47 (= $x11 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x47 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x20 $x104)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x18 $x105)))
 (let (($x49 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x107 (and $x49 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x24 $x107)))
 (let (($x115 (=> $x108 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x11 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x112 (not $x11)))
 (let (($x113 (or $x11 $x112)))
 (let (($x109 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x110 (not $x109)))
 (let (($x111 (or $x109 $x110)))
 (let (($x39 (=> $x111 $x113)))
 (let (($x57 (= $x39 true)))
 (let (($x114 (= $x57 true)))
 (let (($x95 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x79 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x96 (=> $x79 $x95)))
 (let (($x93 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x98 (= $x79 $x93)))
 (let (($x84 (= false false)))
 (let (($x74 (= (_ bv1 32) (_ bv0 32))))
 (let (($x78 (=> $x74 $x84)))
 (let (($x97 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x92 (= $x74 $x97)))
 (let (($x101 (and (and (and $x92 $x78) $x98) $x96)))
 (let (($x102 (= $x101 true)))
 (let (($x82 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x83 (=> $x79 $x82)))
 (let (($x80 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x85 (= $x79 $x80)))
 (let (($x87 (and (and (= $x74 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x78) $x85)))
 (let (($x88 (and $x87 $x83)))
 (let (($x89 (= $x88 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x59 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x61 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x68 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x69 (concat ?x68 (concat ?x61 (concat ?x59 ?x62)))))
 (let (($x70 (= ?x69 input.dst.llvm-%x)))
 (let (($x71 (= $x70 true)))
 (let (($x72 (= $x71 true)))
 (let (($x52 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x53 (= $x52 true)))
 (let (($x54 (= $x53 true)))
 (let (($x55 (= $x54 true)))
 (let ((?x16 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x27 (= (_ bv0 32) ?x16)))
 (let ((?x32 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x40 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x32)))
 (let (($x33 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x43 (and $x33 $x40)))
 (let (($x42 (and $x43 $x27)))
 (let (($x10 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x12 (and $x10 $x42)))
 (let (($x17 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x38 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x37 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x38 $x17)))))))
 (let (($x30 (and $x37 $x12)))
 (let (($x29 (= $x30 true)))
 (let (($x8 (= $x29 true)))
 (let (($x50 (= $x8 true)))
 (let (($x56 (and $x50 $x55)))
 (let (($x73 (and $x56 $x72)))
 (let (($x90 (and $x73 $x89)))
 (let (($x103 (and $x90 $x102)))
 (let (($x47 (= $x11 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x104 (and $x47 $x103)))
 (let (($x20 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x105 (and $x20 $x104)))
 (let (($x18 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x106 (and $x18 $x105)))
 (let (($x49 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x107 (and $x49 $x106)))
 (let (($x24 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x108 (and $x24 $x107)))
 (let (($x115 (=> $x108 $x114)))
 (not $x115)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
==query_number: 3
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (= false true)))
 (let (($x13 (= $x116 true)))
 (let (($x104 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x83 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x105 (=> $x83 $x104)))
 (let (($x101 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x83 $x101)))
 (let (($x81 (= false false)))
 (let (($x79 (= (_ bv1 32) (_ bv0 32))))
 (let (($x82 (=> $x79 $x81)))
 (let (($x95 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x96 (= $x79 $x95)))
 (let (($x108 (and (and (and $x96 $x82) $x102) $x105)))
 (let (($x109 (= $x108 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x97 (=> $x83 $x91)))
 (let (($x88 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x89 (= $x83 $x88)))
 (let (($x99 (and (and (= $x79 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x82) $x89)))
 (let (($x93 (and $x99 $x97)))
 (let (($x98 (= $x93 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let (($x84 (= $x77 true)))
 (let (($x78 (= $x84 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x60)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x29 $x59)))
 (let (($x69 (and $x62 $x64)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x30 $x69)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x71 (and $x61 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x32 (concat ?x25 (concat ?x9 ?x28)))))
 (let (($x43 (= ?x40 input.dst.llvm-%x)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x35 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x15 (= $x35 true)))
 (let (($x48 (= $x15 true)))
 (let (($x36 (= $x48 true)))
 (let (($x42 (and $x36 $x27)))
 (let (($x75 (and $x42 $x74)))
 (let (($x86 (and $x75 $x78)))
 (let (($x100 (and $x86 $x98)))
 (let (($x110 (and $x100 $x109)))
 (let (($x112 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x110)))
 (let (($x23 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x26 (= $x23 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x113 (and $x26 $x112)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x39 (and $x45 $x113)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x57 (and $x46 $x39)))
 (let (($x34 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x114 (and $x34 $x57)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x115 (and $x21 $x114)))
 (let (($x66 (=> $x115 $x13)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x116 (= false true)))
 (let (($x13 (= $x116 true)))
 (let (($x104 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x83 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x105 (=> $x83 $x104)))
 (let (($x101 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x102 (= $x83 $x101)))
 (let (($x81 (= false false)))
 (let (($x79 (= (_ bv1 32) (_ bv0 32))))
 (let (($x82 (=> $x79 $x81)))
 (let (($x95 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x96 (= $x79 $x95)))
 (let (($x108 (and (and (and $x96 $x82) $x102) $x105)))
 (let (($x109 (= $x108 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x97 (=> $x83 $x91)))
 (let (($x88 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x89 (= $x83 $x88)))
 (let (($x99 (and (and (= $x79 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x82) $x89)))
 (let (($x93 (and $x99 $x97)))
 (let (($x98 (= $x93 true)))
 (let (($x76 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let (($x84 (= $x77 true)))
 (let (($x78 (= $x84 true)))
 (let ((?x60 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x64 (= (_ bv0 32) ?x60)))
 (let ((?x63 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x59 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x63)))
 (let (($x29 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x62 (and $x29 $x59)))
 (let (($x69 (and $x62 $x64)))
 (let (($x30 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x70 (and $x30 $x69)))
 (let (($x55 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x54 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x61 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x54 $x55)))))))
 (let (($x71 (and $x61 $x70)))
 (let (($x72 (= $x71 true)))
 (let (($x73 (= $x72 true)))
 (let (($x74 (= $x73 true)))
 (let ((?x28 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x25 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x32 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x40 (concat ?x32 (concat ?x25 (concat ?x9 ?x28)))))
 (let (($x43 (= ?x40 input.dst.llvm-%x)))
 (let (($x16 (= $x43 true)))
 (let (($x27 (= $x16 true)))
 (let (($x35 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x15 (= $x35 true)))
 (let (($x48 (= $x15 true)))
 (let (($x36 (= $x48 true)))
 (let (($x42 (and $x36 $x27)))
 (let (($x75 (and $x42 $x74)))
 (let (($x86 (and $x75 $x78)))
 (let (($x100 (and $x86 $x98)))
 (let (($x110 (and $x100 $x109)))
 (let (($x112 (and (not (bvsgt input.spec-%var-x-0 (_ bv0 32))) $x110)))
 (let (($x23 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x26 (= $x23 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x113 (and $x26 $x112)))
 (let (($x45 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x39 (and $x45 $x113)))
 (let (($x46 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x57 (and $x46 $x39)))
 (let (($x34 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x114 (and $x34 $x57)))
 (let (($x21 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x115 (and $x21 $x114)))
 (let (($x66 (=> $x115 $x13)))
 (not $x66)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
==query_number: 4
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (= false true)))
 (let (($x117 (= $x66 true)))
 (let (($x104 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x88 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x105 (=> $x88 $x104)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x107 (= $x88 $x102)))
 (let (($x92 (= false false)))
 (let (($x85 (= (_ bv1 32) (_ bv0 32))))
 (let (($x83 (=> $x85 $x92)))
 (let (($x106 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x101 (= $x85 $x106)))
 (let (($x110 (and (and (and $x101 $x83) $x107) $x105)))
 (let (($x112 (= $x110 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x97 (=> $x88 $x91)))
 (let (($x89 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x99 (= $x88 $x89)))
 (let (($x98 (and (and (= $x85 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x83) $x99)))
 (let (($x100 (and $x98 $x97)))
 (let (($x94 (= $x100 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x78 (= $x84 true)))
 (let (($x86 (= $x78 true)))
 (let (($x79 (= $x86 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x51 $x60)))
 (let (($x71 (and $x64 $x70)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x58 $x71)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x67)))))))
 (let (($x73 (and $x59 $x72)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x40 (concat ?x9 (concat ?x37 ?x7)))))
 (let (($x16 (= ?x43 input.dst.llvm-%x)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x111 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x47 (not $x111)))
 (let (($x35 (= $x47 true)))
 (let (($x15 (= $x35 true)))
 (let (($x48 (= $x15 true)))
 (let (($x8 (and $x48 $x42)))
 (let (($x77 (and $x8 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x95 (and $x80 $x94)))
 (let (($x113 (and $x95 $x112)))
 (let (($x20 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x39 (and $x20 $x113)))
 (let (($x11 (= $x20 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x57 (and $x11 $x39)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x114 (and $x18 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x115 (and $x19 $x114)))
 (let (($x22 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x116 (and $x22 $x115)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x13 (and $x38 $x116)))
 (let (($x12 (=> $x13 $x117)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x66 (= false true)))
 (let (($x117 (= $x66 true)))
 (let (($x104 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x88 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x105 (=> $x88 $x104)))
 (let (($x102 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x107 (= $x88 $x102)))
 (let (($x92 (= false false)))
 (let (($x85 (= (_ bv1 32) (_ bv0 32))))
 (let (($x83 (=> $x85 $x92)))
 (let (($x106 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x101 (= $x85 $x106)))
 (let (($x110 (and (and (and $x101 $x83) $x107) $x105)))
 (let (($x112 (= $x110 true)))
 (let (($x91 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x97 (=> $x88 $x91)))
 (let (($x89 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x99 (= $x88 $x89)))
 (let (($x98 (and (and (= $x85 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x83) $x99)))
 (let (($x100 (and $x98 $x97)))
 (let (($x94 (= $x100 true)))
 (let (($x84 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x78 (= $x84 true)))
 (let (($x86 (= $x78 true)))
 (let (($x79 (= $x86 true)))
 (let ((?x69 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x70 (= (_ bv0 32) ?x69)))
 (let ((?x62 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x60 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x62)))
 (let (($x51 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x64 (and $x51 $x60)))
 (let (($x71 (and $x64 $x70)))
 (let (($x58 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x72 (and $x58 $x71)))
 (let (($x67 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x65 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x59 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x65 $x67)))))))
 (let (($x73 (and $x59 $x72)))
 (let (($x74 (= $x73 true)))
 (let (($x75 (= $x74 true)))
 (let (($x76 (= $x75 true)))
 (let ((?x7 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x37 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x9 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x40 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x43 (concat ?x40 (concat ?x9 (concat ?x37 ?x7)))))
 (let (($x16 (= ?x43 input.dst.llvm-%x)))
 (let (($x27 (= $x16 true)))
 (let (($x42 (= $x27 true)))
 (let (($x111 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x47 (not $x111)))
 (let (($x35 (= $x47 true)))
 (let (($x15 (= $x35 true)))
 (let (($x48 (= $x15 true)))
 (let (($x8 (and $x48 $x42)))
 (let (($x77 (and $x8 $x76)))
 (let (($x80 (and $x77 $x79)))
 (let (($x95 (and $x80 $x94)))
 (let (($x113 (and $x95 $x112)))
 (let (($x20 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x39 (and $x20 $x113)))
 (let (($x11 (= $x20 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x57 (and $x11 $x39)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x114 (and $x18 $x57)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x115 (and $x19 $x114)))
 (let (($x22 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x116 (and $x22 $x115)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x13 (and $x38 $x116)))
 (let (($x12 (=> $x13 $x117)))
 (not $x12))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
==query_number: 5
==CVC4_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x115 (not $x114)))
 (let (($x116 (or $x114 $x115)))
 (let (($x13 (= $x116 true)))
 (let (($x66 (= $x13 true)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x82 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x102 (=> $x82 $x108)))
 (let (($x96 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x82 $x96)))
 (let (($x87 (= false false)))
 (let (($x86 (= (_ bv1 32) (_ bv0 32))))
 (let (($x81 (=> $x86 $x87)))
 (let (($x94 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x86 $x94)))
 (let (($x103 (and (and (and $x95 $x81) $x106) $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x89 (=> $x82 $x88)))
 (let (($x92 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x83 (= $x82 $x92)))
 (let (($x98 (and (and (= $x86 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x81) $x83)))
 (let (($x90 (and $x98 $x89)))
 (let (($x91 (= $x90 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x64 ?x62)))))
 (let (($x76 (= ?x75 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let (($x84 (= $x77 true)))
 (let (($x68 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x61 (= $x68 true)))
 (let (($x30 (= $x61 true)))
 (let (($x29 (= $x30 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x8)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x28 $x27)))
 (let (($x54 (and $x42 $x53)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x35 $x54)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x40)))))))
 (let (($x52 (and $x25 $x63)))
 (let (($x56 (= $x52 true)))
 (let (($x65 (= $x56 true)))
 (let (($x55 (= $x65 true)))
 (let (($x59 (and $x55 $x29)))
 (let (($x78 (and $x59 $x84)))
 (let (($x97 (and $x78 $x91)))
 (let (($x105 (and $x97 $x104)))
 (let (($x20 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x11 (= $x20 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x110 (and $x11 $x105)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x112 (and $x18 $x110)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x113 (and $x19 $x112)))
 (let (($x22 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x39 (and $x22 $x113)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x57 (and $x38 $x39)))
 (let (($x117 (=> $x57 $x66)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==CVC4_FILE_END==
==SMT2_FILE_START==
; benchmark
(set-info :status unknown)
(set-logic QF_ABV)
(declare-fun input.dst.llvm-%x () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-5.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.2 () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-3.L2%10%bbentry.0 () (_ BitVec 32))
(declare-fun input.dst.local./*___y___foo__x__=L0%0%argnum0=/ () (_ BitVec 32))
(declare-fun input.dst.llvm-mem () (Array (_ BitVec 32) (_ BitVec 8)))
(declare-fun input.spec-%var-x-0 () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin () (_ BitVec 32))
(declare-fun input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-1.L2%3%d () Bool)
(declare-fun input.spec-%tmpvar-0.L2%3%d () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-2.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-4.L2%10%bbentry () (_ BitVec 32))
(declare-fun input.spec-%tmpvar-7.L2%16%bbentry () (_ BitVec 32))
(assert
 (let (($x114 (bvsgt input.dst.llvm-%x (_ bv0 32))))
 (let (($x115 (not $x114)))
 (let (($x116 (or $x114 $x115)))
 (let (($x13 (= $x116 true)))
 (let (($x66 (= $x13 true)))
 (let (($x108 (= (_ bv2 32) input.spec-%tmpvar-5.L2%10%bbentry.2)))
 (let (($x82 (bvuge (_ bv1 32) (_ bv1 32))))
 (let (($x102 (=> $x82 $x108)))
 (let (($x96 (bvuge input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x106 (= $x82 $x96)))
 (let (($x87 (= false false)))
 (let (($x86 (= (_ bv1 32) (_ bv0 32))))
 (let (($x81 (=> $x86 $x87)))
 (let (($x94 (= input.spec-%tmpvar-5.L2%10%bbentry.0 (_ bv0 32))))
 (let (($x95 (= $x86 $x94)))
 (let (($x103 (and (and (and $x95 $x81) $x106) $x102)))
 (let (($x104 (= $x103 true)))
 (let (($x88 (= (_ bv1 32) input.spec-%tmpvar-3.L2%10%bbentry.2)))
 (let (($x89 (=> $x82 $x88)))
 (let (($x92 (bvuge input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv1 32))))
 (let (($x83 (= $x82 $x92)))
 (let (($x98 (and (and (= $x86 (= input.spec-%tmpvar-3.L2%10%bbentry.0 (_ bv0 32))) $x81) $x83)))
 (let (($x90 (and $x98 $x89)))
 (let (($x91 (= $x90 true)))
 (let ((?x62 (select input.dst.llvm-mem input.dst.local./*___y___foo__x__=L0%0%argnum0=/)))
 (let ((?x64 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv1 32)))))
 (let ((?x71 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv2 32)))))
 (let ((?x74 (select input.dst.llvm-mem (bvadd input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32)))))
 (let ((?x75 (concat ?x74 (concat ?x71 (concat ?x64 ?x62)))))
 (let (($x76 (= ?x75 input.dst.llvm-%x)))
 (let (($x77 (= $x76 true)))
 (let (($x84 (= $x77 true)))
 (let (($x68 (= input.spec-%var-x-0 input.dst.llvm-%x)))
 (let (($x61 (= $x68 true)))
 (let (($x30 (= $x61 true)))
 (let (($x29 (= $x30 true)))
 (let ((?x8 (bvand input.dst.local./*___y___foo__x__=L0%0%argnum0=/ (_ bv3 32))))
 (let (($x53 (= (_ bv0 32) ?x8)))
 (let ((?x16 (bvadd input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (_ bv3 32))))
 (let (($x27 (= input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end ?x16)))
 (let (($x28 (bvule input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x42 (and $x28 $x27)))
 (let (($x54 (and $x42 $x53)))
 (let (($x35 (= input.dst.local./*___y___foo__x__=L0%0%argnum0=/ input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin)))
 (let (($x63 (and $x35 $x54)))
 (let (($x40 (bvugt (_ bv0 32) input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_end)))
 (let (($x10 (bvugt input.dst.memlabel-mem--local./*___y___foo__x__=L0%0%argnum0=/_begin (bvadd (_ bv0 32) (_ bv0 32)))))
 (let (($x25 (=> (bvule (_ bv0 32) (bvsub (bvadd (_ bv0 32) (_ bv1 32)) (_ bv1 32))) (or false (or false (and true (or $x10 $x40)))))))
 (let (($x52 (and $x25 $x63)))
 (let (($x56 (= $x52 true)))
 (let (($x65 (= $x56 true)))
 (let (($x55 (= $x65 true)))
 (let (($x59 (and $x55 $x29)))
 (let (($x78 (and $x59 $x84)))
 (let (($x97 (and $x78 $x91)))
 (let (($x105 (and $x97 $x104)))
 (let (($x20 (bvsgt input.spec-%var-x-0 (_ bv0 32))))
 (let (($x11 (= $x20 input.spec-%tmpvar-1.L2%3%d)))
 (let (($x110 (and $x11 $x105)))
 (let (($x18 (= (_ bv0 32) input.spec-%tmpvar-0.L2%3%d)))
 (let (($x112 (and $x18 $x110)))
 (let (($x19 (= (_ bv1 32) input.spec-%tmpvar-2.L2%10%bbentry)))
 (let (($x113 (and $x19 $x112)))
 (let (($x22 (= (_ bv2 32) input.spec-%tmpvar-4.L2%10%bbentry)))
 (let (($x39 (and $x22 $x113)))
 (let (($x38 (= (_ bv0 32) input.spec-%tmpvar-7.L2%16%bbentry)))
 (let (($x57 (and $x38 $x39)))
 (let (($x117 (=> $x57 $x66)))
 (not $x117))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(get-model)
==SMT2_FILE_END==
==ret: 1
==result_count: 1
==index: 0
==solver_id: 2
==recvd_data
==DATA_START==
unsat
(error "the context is unsatisfiable")
==DATA_END==
==solver_result_code: SOLVER_UNSAT
==smt2_file: /tmp/smt-solver-tmp-files/indrajit.1492565/query
